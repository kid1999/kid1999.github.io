<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>双指针模板</title>
      <link href="/2020/09/07/%E5%8F%8C%E6%8C%87%E9%92%88%E6%A8%A1%E6%9D%BF/"/>
      <url>/2020/09/07/%E5%8F%8C%E6%8C%87%E9%92%88%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h4 id="双指针技巧可以分为两类"><a href="#双指针技巧可以分为两类" class="headerlink" title="双指针技巧可以分为两类"></a>双指针技巧可以分为两类</h4><ul><li><strong>「快慢指针」</strong> 解决主要解决链表中的问题，比如典型的判定链表中是否包含环</li><li>*<em>「左右指针」 *</em>后者主要解决数组（或者字符串）中的问题，比如二分查找、滑动窗口</li></ul><h2 id="一、快慢指针的常见算法"><a href="#一、快慢指针的常见算法" class="headerlink" title="一、快慢指针的常见算法"></a><strong>一、快慢指针的常见算法</strong></h2><p>快慢指针一般都初始化指向链表的头结点 head，前进时快指针 fast 在前，慢指针 slow 在后，巧妙解决一些链表中的问题。</p><h3 id="1、判定链表中是否含有环"><a href="#1、判定链表中是否含有环" class="headerlink" title="1、判定链表中是否含有环"></a><strong>1、判定链表中是否含有环</strong></h3><p>这应该属于链表最基本的操作了，如果读者已经知道这个技巧，可以跳过。</p><p>单链表的特点是每个节点只知道下一个节点，所以一个指针的话无法判断链表中是否含有环的。</p><p>如果链表中不包含环，那么这个指针最终会遇到空指针 null 表示链表到头了，这还好说，可以判断该链表不含环。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">boolean hasCycle(ListNode head) &#123;</span><br><span class="line">    while (head != null)</span><br><span class="line">        head = head.next;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是如果链表中含有环，那么这个指针就会陷入死循环，因为环形数组中没有 null 指针作为尾部节点。</p><p>经典解法就是用两个指针，一个每次前进两步，一个每次前进一步。如果不含有环，跑得快的那个指针最终会遇到 null，说明链表不含环；如果含有环，快指针最终会超慢指针一圈，和慢指针相遇，说明链表含有环。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">boolean hasCycle(ListNode head) &#123;</span><br><span class="line">    ListNode fast, slow;</span><br><span class="line">    fast = slow = head;</span><br><span class="line">    while(fast != null &amp;&amp; fast.next != null) &#123;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        </span><br><span class="line">        if (fast == slow)</span><br><span class="line">            return true;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、已知链表中含有环，返回这个环的起始位置"><a href="#2、已知链表中含有环，返回这个环的起始位置" class="headerlink" title="2、已知链表中含有环，返回这个环的起始位置"></a><strong>2、已知链表中含有环，返回这个环的起始位置</strong></h3><p><img alt="img" data-src="https://pic1.zhimg.com/80/v2-97406fdff42b59b8f91ebb69522bed20_720w.jpg" class="lazyload"></p><p>这个问题其实不困难，有点类似脑筋急转弯，先直接看代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ListNode detectCycle(ListNode head) &#123;</span><br><span class="line">    ListNode fast, slow;</span><br><span class="line">    fast = slow = head;</span><br><span class="line">    while (fast != null &amp;&amp; fast.next != null) &#123;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        if (fast == slow)</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    slow = head;</span><br><span class="line">    while (slow != fast) &#123;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">    &#125;</span><br><span class="line">    return slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，当快慢指针相遇时，让其中任一个指针重新指向头节点，然后让它俩以相同速度前进，再次相遇时所在的节点位置就是环开始的位置。这是为什么呢？</p><p>第一次相遇时，假设慢指针 slow 走了 k 步，那么快指针 fast 一定走了 2k 步，也就是说比 slow 多走了 k 步（也就是环的长度）。</p><p><img alt="img" data-src="https://pic3.zhimg.com/80/v2-e20cf1fac533671eff6b9a18df652668_720w.jpg" class="lazyload"></p><p>设相遇点距环的起点的距离为 m，那么环的起点距头结点 head 的距离为 k - m，也就是说如果从 head 前进 k - m 步就能到达环起点。</p><p>巧的是，如果从相遇点继续前进 k - m 步，也恰好到达环起点。</p><p><img alt="img" data-src="https://pic2.zhimg.com/80/v2-94f939ddf9d896c585ac6f61080d6a89_720w.jpg" class="lazyload"></p><p>所以，只要我们把快慢指针中的任一个重新指向 head，然后两个指针同速前进，k - m 步后就会相遇，相遇之处就是环的起点了。</p><h3 id="3、寻找链表的中点"><a href="#3、寻找链表的中点" class="headerlink" title="3、寻找链表的中点"></a><strong>3、寻找链表的中点</strong></h3><p>类似上面的思路，我们还可以让快指针一次前进两步，慢指针一次前进一步，当快指针到达链表尽头时，慢指针就处于链表的中间位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ListNode slow, fast;</span><br><span class="line">slow = fast = head;</span><br><span class="line">while (fast != null &amp;&amp; fast.next != null) &#123;</span><br><span class="line">    fast = fast.next.next;</span><br><span class="line">    slow = slow.next;</span><br><span class="line">&#125;</span><br><span class="line">// slow 就在中间位置</span><br><span class="line">return slow;</span><br></pre></td></tr></table></figure><p>当链表的长度是奇数时，slow 恰巧停在中点位置；如果长度是偶数，slow 最终的位置是中间偏右：</p><p><img alt="img" data-src="https://picb.zhimg.com/80/v2-0f6ae47e73eaf517d579d925a2421092_720w.jpg" class="lazyload"></p><p>寻找链表中点的一个重要作用是对链表进行归并排序。</p><p>回想数组的归并排序：求中点索引递归地把数组二分，最后合并两个有序数组。对于链表，合并两个有序链表是很简单的，难点就在于二分。</p><p>但是现在你学会了找到链表的中点，就能实现链表的二分了。关于归并排序的具体内容本文就不具体展开了。</p><h3 id="4、寻找链表的倒数第-k-个元素"><a href="#4、寻找链表的倒数第-k-个元素" class="headerlink" title="4、寻找链表的倒数第 k 个元素"></a><strong>4、寻找链表的倒数第 k 个元素</strong></h3><p>我们的思路还是使用快慢指针，让快指针先走 k 步，然后快慢指针开始同速前进。这样当快指针走到链表末尾 null 时，慢指针所在的位置就是倒数第 k 个链表节点（为了简化，假设 k 不会超过链表长度）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ListNode slow, fast;</span><br><span class="line">slow = fast = head;</span><br><span class="line">while (k-- &gt; 0) </span><br><span class="line">    fast = fast.next;</span><br><span class="line"></span><br><span class="line">while (fast != null) &#123;</span><br><span class="line">    slow = slow.next;</span><br><span class="line">    fast = fast.next;</span><br><span class="line">&#125;</span><br><span class="line">return slow;</span><br></pre></td></tr></table></figure><h2 id="二、左右指针的常用算法"><a href="#二、左右指针的常用算法" class="headerlink" title="二、左右指针的常用算法"></a><strong>二、左右指针的常用算法</strong></h2><p>左右指针在数组中实际是指两个索引值，一般初始化为 left = 0, right = nums.length - 1 。</p><h3 id="1、二分查找"><a href="#1、二分查找" class="headerlink" title="1、二分查找"></a><strong>1、二分查找</strong></h3><p>前文 <a href="https://link.zhihu.com/?target=https%3A//www.cnblogs.com/kyoner/p/11080078.html">二分查找算法详解</a> 有详细讲解，这里只写最简单的二分算法，旨在突出它的双指针特性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int binarySearch(int[] nums, int target) &#123;</span><br><span class="line">    int left = 0;</span><br><span class="line">    int right = nums.length - 1;</span><br><span class="line">    while(left &lt;= right) &#123;</span><br><span class="line">        int mid = (right + left) / 2;</span><br><span class="line">        if (nums[mid] == target)</span><br><span class="line">            return mid;</span><br><span class="line">        else if (nums[mid] &lt; target)</span><br><span class="line">            left = mid + 1;</span><br><span class="line">        else if (nums[mid] &gt; target)</span><br><span class="line">            right = mid - 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、两数之和"><a href="#2、两数之和" class="headerlink" title="2、两数之和"></a><strong>2、两数之和</strong></h3><p>直接看一道 LeetCode 题目吧：</p><p><img alt="img" data-src="https://pic4.zhimg.com/80/v2-7a9d45ef94187fea3c88ace260e79011_720w.jpg" class="lazyload"></p><p>只要数组有序，就应该想到双指针技巧。这道题的解法有点类似二分查找，通过调节 left 和 right 可以调整 sum 的大小：</p><h3 id="3、反转数组"><a href="#3、反转数组" class="headerlink" title="3、反转数组"></a><strong>3、反转数组</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">void reverse(int[] nums) &#123;</span><br><span class="line">    int left = 0;</span><br><span class="line">    int right = nums.length - 1;</span><br><span class="line">    while (left &lt; right) &#123;</span><br><span class="line">        // swap(nums[left], nums[right])</span><br><span class="line">        int temp = nums[left];</span><br><span class="line">        nums[left] = nums[right];</span><br><span class="line">        nums[right] = temp;</span><br><span class="line">        left++;</span><br><span class="line">        right--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、滑动窗口算法"><a href="#4、滑动窗口算法" class="headerlink" title="4、滑动窗口算法"></a><strong>4、滑动窗口算法</strong></h3><p>如果掌握了此算法，可以解决一大类子字符串匹配的问题，详情参考滑动窗口一文。</p><p>参考：</p><p><a href="https://zhuanlan.zhihu.com/p/138273078" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/138273078</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>装饰器模式</title>
      <link href="/2020/09/07/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/09/07/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>适用范围：</p><blockquote><p>我已经有了一个类，但是这个类还不够让我满意，我就拿装饰器给他装饰一下。</p></blockquote><h3 id="代码演示："><a href="#代码演示：" class="headerlink" title="代码演示："></a>代码演示：</h3><ul><li>假如我去喝咖啡，但是咖啡是苦的，我需要加糖装饰一下</li><li>苦咖啡 与 加糖咖啡 都是基于 咖啡接口</li><li>即将刚开始的苦咖啡经过加糖咖啡的装饰返回了一杯新的咖啡</li></ul><ol><li>咖啡接口</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public interface Coffee &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 打印当前咖啡的原材料，即咖啡里有什么</span><br><span class="line">     */</span><br><span class="line">    void printMaterial();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>苦咖啡实现类</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class BitterCoffee implements Coffee &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void printMaterial() &#123;</span><br><span class="line">        System.out.println(&quot;咖啡&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>默认点餐逻辑</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Coffee coffee = new BitterCoffee();</span><br><span class="line">        coffee.printMaterial();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>加糖装饰器</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 糖装饰器，用来给咖啡加糖</span><br><span class="line"> */</span><br><span class="line">public class SugarDecorator implements Coffee &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 持有的咖啡对象</span><br><span class="line">     */</span><br><span class="line">    private final Coffee coffee;</span><br><span class="line"></span><br><span class="line">    public SugarDecorator(Coffee coffee) &#123;</span><br><span class="line">        this.coffee = coffee;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public void printMaterial() &#123;</span><br><span class="line">        System.out.println(&quot;糖&quot;);</span><br><span class="line">        this.coffee.printMaterial();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.加糖成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Coffee coffee = new BitterCoffee();</span><br><span class="line">        coffee = new SugarDecorator(coffee);</span><br><span class="line">        coffee.printMaterial();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line">#### 与代理模式的差别：</span><br><span class="line"></span><br><span class="line">* 两者实现的都是对原对象的包装，持有原对象的实例，差别在于对外的表现。</span><br><span class="line"></span><br><span class="line">* 装饰器模式：点了咖啡，发现太苦了，不是自己想要的，然后用装饰器加了点糖。</span><br></pre></td></tr></table></figure><p>Coffee coffee = new BitterCoffee();<br>coffee = new SugarDecorator(coffee);</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* 代理模式：直接就点的加糖咖啡。</span><br></pre></td></tr></table></figure><p>Coffee coffee = new CoffeeWithSugar();<br>```</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 装饰器模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂模式</title>
      <link href="/2020/09/07/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/09/07/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><p><strong>定义</strong>：由一个工厂对象决定创建出哪一种类型实例。客户端只需传入工厂类的参数，无心关心创建过程。</p><p><strong>优点</strong>：具体产品从客户端代码中抽离出来，解耦。</p><p><strong>缺点</strong>：工厂类职责过重，增加新的类型时，得修改工程类得代码，违背开闭原则。</p><p>举例：新建Fruit水果抽象类，包含eat抽象方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public abstract class Fruit &#123;</span><br><span class="line">    public abstract void eat();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实现类Apple：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Apple extends Fruit&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void eat() &#123;</span><br><span class="line">        System.out.println(&quot;吃🍎&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建创建Fruit的工厂类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class FruitFactory &#123;</span><br><span class="line">    public Fruit produce(String name) &#123;</span><br><span class="line">        if (&quot;apple&quot;.equals(name)) &#123;</span><br><span class="line">            return new Apple();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建个客户端测试一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        FruitFactory factory = new FruitFactory();</span><br><span class="line">        Fruit fruit = factory.produce(&quot;apple&quot;);</span><br><span class="line">        fruit.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行main方法，输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">吃🍎</span><br></pre></td></tr></table></figure><p>可以看到，客户端Application并未依赖具体的水果类型，只关心<code>FruitFactory</code>的入参，这就是客户端和具体产品解耦的体现，UML图如下：</p><p><img alt="QQ截图20191216103019.png" data-src="https://mrbird.cc/img/QQ%E6%88%AA%E5%9B%BE20191216103019.png" class="lazyload"></p><h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><p>为了解决简单工厂模式的缺点，诞生了工厂方法模式（Factory method pattern）。</p><p><strong>定义</strong>：定义创建对象的接口，让实现这个接口的类来决定实例化哪个类，工厂方法让类的实例化推迟到了子类进行。</p><p><strong>优点</strong>：</p><ol><li>具体产品从客户端代码中抽离出来，解耦。</li><li>加入新的类型时，只需添加新的工厂方法（无需修改旧的工厂方法代码），符合开闭原则。</li></ol><p><strong>缺点</strong>：类的个数容易过多，增加复杂度。</p><p>举例：新建Fruit抽象类，包含eat抽象方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public abstract class Fruit &#123;</span><br><span class="line">    public abstract void eat();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建<code>FruitFactory</code>抽象工厂，定义<code>produceFruit</code>抽象方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public abstract class FruitFactory &#123;</span><br><span class="line">    public abstract Fruit produceFruit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建Fruit的实现类，Apple：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Apple extends Fruit &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void eat() &#123;</span><br><span class="line">        System.out.println(&quot;吃🍎&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建<code>FruitFactory</code>的实现类<code>AppleFruitFactory</code>，用于生产具体类型的水果 —— 苹果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class AppleFruitFactory extends FruitFactory&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Fruit produceFruit() &#123;</span><br><span class="line">        return new Apple();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建客户端Application测试一波：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        FruitFactory factory = new AppleFruitFactory();</span><br><span class="line">        Fruit fruit = factory.produceFruit();</span><br><span class="line">        fruit.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行main方法，输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">吃🍎</span><br></pre></td></tr></table></figure><p>现在要新增Banana类型的水果，只需要新增Banana类型的工厂类即可，无需修改现有的<code>AppleFruitFactory</code>代码，符合开闭原则。但是这种模式的缺点也显而易见，就是类的个数容易过多，增加复杂度。</p><p>上面例子UML图如下所示：</p><p><img alt="QQ截图20191216105317.png" data-src="https://mrbird.cc/img/QQ%E6%88%AA%E5%9B%BE20191216105317.png" class="lazyload"></p><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><p>抽象工厂模式（Abstract factory pattern）提供了<strong>一系列</strong>相关或者相互依赖的对象的接口，关键字是“一系列”。</p><p><strong>优点</strong>：</p><ol><li>具体产品从客户端代码中抽离出来，解耦。</li><li>将一个系列的产品族统一到一起创建。</li></ol><p><strong>缺点</strong>：拓展新的功能困难，需要修改抽象工厂的接口；</p><p>综上所述，抽象工厂模式适合那些功能相对固定的产品族的创建。</p><p>举例：新建水果抽象类Fruit，包含buy抽象方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public abstract class Fruit &#123;</span><br><span class="line">    public abstract void buy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建价格抽象类Price，包含pay抽象方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public abstract class Price &#123;</span><br><span class="line">    public abstract void pay();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建水果创建工厂接口<code>FruitFactory</code>，包含获取水果和价格抽象方法（产品族的体现是，一组产品包含水果和对应的价格）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface FruitFactory &#123;</span><br><span class="line">    Fruit getFruit();</span><br><span class="line">    Price getPrice();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来开始创建🍎这个“产品族”。新建Fruit实现类AppleFruit：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class AppleFruit extends Fruit&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void buy() &#123;</span><br><span class="line">        System.out.println(&quot;购买🍎&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建对应的苹果价格实现<code>ApplePrice</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class ApplePrice extends Price&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void pay() &#123;</span><br><span class="line">        System.out.println(&quot;🍎单价2元&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建客户端Application，测试一波：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class Application &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        FruitFactory factory = new AppleFruitFactory();</span><br><span class="line">        factory.getFruit().buy();</span><br><span class="line">        factory.getPrice().pay();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">购买🍎</span><br><span class="line">🍎单价2元</span><br></pre></td></tr></table></figure><p>客户端只需要通过创建<code>AppleFruitFactory</code>就可以获得苹果这个产品族的所有内容，包括苹果对象，苹果价格。要新建🍌的产品族，只需要实现<code>FruitFactory</code>、Price和Fruit接口即可。这种模式的缺点和工厂方法差不多，就是类的个数容易过多，增加复杂度。</p><p>上面例子UML图如下所示：</p><p><img alt="QQ截图20191216112922.png" data-src="https://mrbird.cc/img/QQ%E6%88%AA%E5%9B%BE20191216112922.png" class="lazyload"></p><h3 id><a href="#" class="headerlink" title></a></h3><p>参考资料：<br><a href="https://snailclimb.gitee.io/javaguide/#/docs/system-design/设计模式" target="_blank" rel="noopener">https://snailclimb.gitee.io/javaguide/#/docs/system-design/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F</a></p><p><a href="https://mrbird.cc/Java设计模式.html" target="_blank" rel="noopener">https://mrbird.cc/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工厂模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滑动窗口</title>
      <link href="/2020/09/05/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
      <url>/2020/09/05/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>滑动窗口主要用来处理连续问题。比如题目求解“连续子串 xxxx”，“连续子数组 xxxx”，就应该可以想到滑动窗口。</p><p>时间复杂度一般是 O(N + K) K是窗口大小</p></blockquote><p>从类型上说主要有：</p><ul><li>固定窗口大小</li><li>窗口大小不固定，求解最大的满足条件的窗口</li><li>窗口大小不固定，求解最小的满足条件的窗口</li></ul><h4 id="固定窗口"><a href="#固定窗口" class="headerlink" title="固定窗口"></a>固定窗口</h4><p>例如：</p><h4 id="可变窗口"><a href="#可变窗口" class="headerlink" title="可变窗口"></a>可变窗口</h4><p>例如：<a href="https://leetcode-cn.com/problems/max-consecutive-ones-iii/" target="_blank" rel="noopener">1004. 最大连续1的个数 III</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestOnes</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>,count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(r&lt;A.length)&#123;</span><br><span class="line">            count += A[r] == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(count &gt; K)&#123;</span><br><span class="line">                count -= A[l++] == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res = Math.max(res,r-l+<span class="number">1</span>);</span><br><span class="line">            r++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Swagger2</title>
      <link href="/2020/08/29/SpringBoot%E6%95%B4%E5%90%88Swagger2/"/>
      <url>/2020/08/29/SpringBoot%E6%95%B4%E5%90%88Swagger2/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot整合Swagger2"><a href="#SpringBoot整合Swagger2" class="headerlink" title="SpringBoot整合Swagger2"></a>SpringBoot整合Swagger2</h1><h2 id="1-Swagger-简介"><a href="#1-Swagger-简介" class="headerlink" title="1.Swagger 简介"></a>1.Swagger 简介</h2><p>Swagger 是一套基于 OpenAPI 规范构建的开源工具，可以帮助我们设计、构建、记录以及使用 Rest API。Swagger 主要包含了以下三个部分：</p><ol><li>Swagger Editor：基于浏览器的编辑器，我们可以使用它编写我们 OpenAPI 规范。</li><li>Swagger UI：它会将我们编写的 OpenAPI 规范呈现为交互式的 API 文档，后文我将使用浏览器来查看并且操作我们的 Rest API。</li><li>Swagger Codegen：它可以通过为 OpenAPI（以前称为 Swagger）规范定义的任何 API 生成服务器存根和客户端 SDK 来简化构建过程。</li></ol><h3 id="2-为什么要使用-Swagger"><a href="#2-为什么要使用-Swagger" class="headerlink" title="2.为什么要使用 Swagger"></a>2.为什么要使用 Swagger</h3><p>当下很多公司都采取前后端分离的开发模式，前端和后端的工作由不同的工程师完成。在这种开发模式下，维持一份及时更新且完整的 Rest API 文档将会极大的提高我们的工作效率。传统意义上的文档都是后端开发人员手动编写的，相信大家也都知道这种方式很难保证文档的及时性，这种文档久而久之也就会失去其参考意义，反而还会加大我们的沟通成本。而 Swagger 给我们提供了一个全新的维护 API 文档的方式，下面我们就来了解一下它的优点：</p><ol><li>代码变，文档变。只需要少量的注解，Swagger 就可以根据代码自动生成 API 文档，很好的保证了文档的时效性。</li><li>跨语言性，支持 40 多种语言。</li><li>Swagger UI 呈现出来的是一份可交互式的 API 文档，我们可以直接在文档页面尝试 API 的调用，省去了准备复杂的调用参数的过程。</li><li>还可以将文档规范导入相关的工具（例如 SoapUI）, 这些工具将会为我们自动地创建自动化测试。</li></ol><h2 id="3-准备-Spring-Boot-Web-项目"><a href="#3-准备-Spring-Boot-Web-项目" class="headerlink" title="3.准备 Spring Boot Web 项目"></a>3.准备 Spring Boot Web 项目</h2><p>1.创建项目</p><p>2.添加依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--    swagger api测试    --&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>3.编写接口</p><ol><li><p>Controller</p><p><strong>注意此处的<code>@RequestMapping(&quot;/user&quot;)</code>   <code>user</code>一定是已经定义的APIModel,否则接口不显示</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span> <span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="meta">@Api</span>(tags = <span class="string">"用户管理"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span> <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/query/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"通过ID查询"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"int"</span>, paramType = <span class="string">"path"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultModel&lt;User&gt; <span class="title">findById</span><span class="params">(@PathVariable <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        User user = userService.findById(id);</span><br><span class="line">        <span class="keyword">return</span> ResultModel.success(<span class="string">"id查询成功"</span>, user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/query/ids"</span>)</span><br><span class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"通过ID列表查询"</span>)</span><br><span class="line">    <span class="keyword">public</span> ResultModel&lt;List&lt;User&gt;&gt; findByIdIn(<span class="keyword">int</span>[] ids) &#123;</span><br><span class="line">        List&lt;User&gt; users = userService.findByIdIn(ids);</span><br><span class="line">        <span class="keyword">return</span> ResultModel.success(<span class="string">"in查询成功"</span>, users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/query/user"</span>)</span><br><span class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"通过用户实体查询"</span>)</span><br><span class="line">    <span class="keyword">public</span> ResultModel&lt;List&lt;User&gt;&gt; findByUser(User user) &#123;</span><br><span class="line">        List&lt;User&gt; users = userService.findByUser(user);</span><br><span class="line">        <span class="keyword">return</span> ResultModel.success(<span class="string">"通过实体查询成功"</span>, users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/query/all"</span>)</span><br><span class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"查询所有用户"</span>)</span><br><span class="line">    <span class="keyword">public</span> ResultModel&lt;List&lt;User&gt;&gt; findAll() &#123;</span><br><span class="line">        List&lt;User&gt; users = userService.findAll();</span><br><span class="line">        <span class="keyword">return</span> ResultModel.success(<span class="string">"全体查找成功"</span>, users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/query/username"</span>)</span><br><span class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"通过用户名称模糊查询"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"userName"</span>, value = <span class="string">"用户名称"</span>)</span><br><span class="line">    <span class="keyword">public</span> ResultModel&lt;List&lt;User&gt;&gt; findByUserName(String userName) &#123;</span><br><span class="line">        List&lt;User&gt; users = userService.findByUserName(userName);</span><br><span class="line">        <span class="keyword">return</span> ResultModel.success(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/insert"</span>)</span><br><span class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"新增默认用户"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultModel&lt;Integer&gt; <span class="title">insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUserName(<span class="string">"zhongshiwen"</span>);</span><br><span class="line">        user.setNickName(<span class="string">"zsw"</span>);</span><br><span class="line">        user.setRealName(<span class="string">"钟仕文"</span>);</span><br><span class="line">        user.setPassword(<span class="string">"zsw123456"</span>);</span><br><span class="line">        user.setGender(<span class="string">"男"</span>);</span><br><span class="line">        Area area = <span class="keyword">new</span> Area();</span><br><span class="line">        area.setLevel((<span class="keyword">byte</span>) <span class="number">5</span>);</span><br><span class="line">        user.setArea(area);</span><br><span class="line">        userService.save(user);</span><br><span class="line">        <span class="keyword">return</span> ResultModel.success(<span class="string">"新增用户成功"</span>, user.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/update"</span>)</span><br><span class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"更新用户信息"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultModel&lt;Integer&gt; <span class="title">update</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = userService.update(user);</span><br><span class="line">        <span class="keyword">return</span> ResultModel.success(row);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/update/status"</span>)</span><br><span class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"更新单个用户状态"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>),</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"status"</span>, value = <span class="string">"状态"</span>, required = <span class="keyword">true</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultModel&lt;User&gt; <span class="title">updateStatus</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">byte</span> status)</span> </span>&#123;</span><br><span class="line">        User user = userService.updateStatus(id, status);</span><br><span class="line">        <span class="keyword">return</span> ResultModel.success(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/delete"</span>)</span><br><span class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"删除单个用户"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultModel&lt;Integer&gt; <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResultModel.success(userService.delete(id));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>Entity</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span> <span class="meta">@NoArgsConstructor</span> <span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@ApiModel</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(<span class="string">"用户ID"</span>) <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(<span class="string">"账户名"</span>) <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(<span class="string">"注册时间"</span>) <span class="keyword">private</span> LocalDateTime registerTime;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(<span class="string">"最近登录时间"</span>) <span class="keyword">private</span> LocalDateTime lastLoginTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotPersistent</span> <span class="meta">@ApiModelProperty</span>(hidden = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Area area; <span class="comment">//用户所在地区</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotPersistent</span> <span class="meta">@ApiModelProperty</span>(hidden = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> List&lt;Role&gt; roles; <span class="comment">//用户角色列表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>返回结果</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span> <span class="meta">@Setter</span> <span class="meta">@ApiModel</span>(description = <span class="string">"返回结果"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultModel</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(<span class="string">"是否成功: true or false"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> result;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(<span class="string">"描述性原因"</span>)</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(<span class="string">"业务数据"</span>)</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ResultModel</span><span class="params">(<span class="keyword">boolean</span> result, String message, T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.result = result;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; ResultModel&lt;T&gt; <span class="title">success</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResultModel&lt;&gt;(<span class="keyword">true</span>, <span class="string">"SUCCESS"</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; ResultModel&lt;T&gt; <span class="title">success</span><span class="params">(String message, T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResultModel&lt;&gt;(<span class="keyword">true</span>, message, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultModel <span class="title">failure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResultModel&lt;&gt;(<span class="keyword">false</span>, <span class="string">"FAILURE"</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultModel <span class="title">failure</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResultModel&lt;&gt;(<span class="keyword">false</span>, message, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.配置Swagger</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2Config</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Value</span>(<span class="string">"$&#123;swagger2.enable&#125;"</span>) <span class="keyword">private</span> <span class="keyword">boolean</span> enable;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span>(<span class="string">"UserApis"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Docket <span class="title">userApis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">           .groupName(<span class="string">"用户模块"</span>)</span><br><span class="line">           .select()</span><br><span class="line">           .apis(RequestHandlerSelectors.withClassAnnotation(Api<span class="class">.<span class="keyword">class</span>))</span></span><br><span class="line">           .paths(PathSelectors.regex("/user.*"))</span><br><span class="line">           .build()</span><br><span class="line">           .apiInfo(apiInfo())</span><br><span class="line">           .enable(enable);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span>(<span class="string">"CustomApis"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Docket <span class="title">customApis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">           .groupName(<span class="string">"客户模块"</span>)</span><br><span class="line">           .select()</span><br><span class="line">           .apis(RequestHandlerSelectors.withClassAnnotation(Api<span class="class">.<span class="keyword">class</span>))</span></span><br><span class="line">           .paths(PathSelectors.regex("/custom.*"))</span><br><span class="line">           .build()</span><br><span class="line">           .apiInfo(apiInfo())</span><br><span class="line">           .enable(enable);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">           .title(<span class="string">"XXXXX系统平台接口文档"</span>)</span><br><span class="line">           .description(<span class="string">"提供子模块1/子模块2/子模块3的文档"</span>)</span><br><span class="line">           .termsOfServiceUrl(<span class="string">"https://kid1999.github.io/"</span>)</span><br><span class="line">           .version(<span class="string">"1.0"</span>)</span><br><span class="line">           .build();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.验证</p><p>启动应用后，会自动生成http://{root-path}/swagger-ui.html页面，访问后，效果如下所示：</p><p><img alt="img" data-src="https://user-gold-cdn.xitu.io/2018/5/18/16371ace7275a3e9?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" class="lazyload"></p><h2 id="4-Swagger-UI-的使用"><a href="#4-Swagger-UI-的使用" class="headerlink" title="4.Swagger UI 的使用"></a>4.Swagger UI 的使用</h2><h3 id="接口查看"><a href="#接口查看" class="headerlink" title="接口查看"></a>接口查看</h3><p>SwaggerUI 会以列表的方式展示所有扫描到的接口，初始状态是收缩的，我们只需要点击展开就好，而且会在左边标识接口的请求方式（GET、POST、PUT、DELETE 等等）。</p><p><strong>Swagger 接口列表界面</strong></p><p><img alt="图 5. Swagger 接口列表界面" data-src="https://developer.ibm.com/developer/default/articles/j-using-swagger-in-a-spring-boot-project/images/image005.png" class="lazyload"></p><h3 id="接口调用"><a href="#接口调用" class="headerlink" title="接口调用"></a>接口调用</h3><p>如下图所示，点击接口展开后页面右上角的 <strong>Try it out</strong> 按钮后，页面会变成如图所示：</p><p><strong>接口详情界面</strong></p><p><img alt="图 6. 接口详情界面" data-src="https://developer.ibm.com/developer/default/articles/j-using-swagger-in-a-spring-boot-project/images/image006.png" class="lazyload"></p><p>SwaggerUI 会给我们自动填充请求参数的数据结构，我们需要做的只是点击 <strong>Execute</strong> 即可发起调用</p><p><strong>接口调用界面</strong></p><p><img alt="图 7. 接口调用界面" data-src="https://developer.ibm.com/developer/default/articles/j-using-swagger-in-a-spring-boot-project/images/image007.png" class="lazyload"></p><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><p>如下图所示，SwaggerUI 会通过我们在实体上使用的 <code>@ApiModel</code> 注解以及 <code>@ApiModelProperty</code> 注解来自动补充实体以及其属性的描述和备注。</p><p><strong>图 8. 实体界面</strong></p><p><img alt="图 8. 实体界面" data-src="https://developer.ibm.com/developer/default/articles/j-using-swagger-in-a-spring-boot-project/images/image008.png" class="lazyload"></p><h2 id="5-常用的Swagger2注解"><a href="#5-常用的Swagger2注解" class="headerlink" title="5.常用的Swagger2注解"></a>5.常用的Swagger2注解</h2><h3 id="Controller-相关注解"><a href="#Controller-相关注解" class="headerlink" title="Controller 相关注解"></a>Controller 相关注解</h3><p><code>@Api</code>: 可设置对控制器的描述。</p><p><strong>@Api 主要属性</strong></p><table><thead><tr><th align="left"><strong>注解属性</strong></th><th align="left"><strong>类型</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">tags</td><td align="left">String[]</td><td align="left">控制器标签。</td></tr><tr><td align="left">description</td><td align="left">String</td><td align="left">控制器描述（该字段被申明为过期）。</td></tr></tbody></table><h3 id="接口相关注解"><a href="#接口相关注解" class="headerlink" title="接口相关注解"></a>接口相关注解</h3><p><code>@ApiOperation</code>: 可设置对接口的描述。</p><p><strong>@ApiOperation 主要属性</strong></p><table><thead><tr><th align="left"><strong>注解属性</strong></th><th align="left"><strong>类型</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">value</td><td align="left">String</td><td align="left">接口说明。</td></tr><tr><td align="left">notes</td><td align="left">String</td><td align="left">接口发布说明。</td></tr><tr><td align="left">tags</td><td align="left">Stirng[]</td><td align="left">标签。</td></tr><tr><td align="left">response</td><td align="left">Class&lt;?&gt;</td><td align="left">接口返回类型。</td></tr><tr><td align="left">httpMethod</td><td align="left">String</td><td align="left">接口请求方式。</td></tr></tbody></table><p><code>@ApiIgnore</code>: Swagger 文档不会显示拥有该注解的接口。 <code>@ApiImplicitParams</code>: 用于描述接口的非对象参数集。 <code>@ApiImplicitParam</code>: 用于描述接口的非对象参数，一般与 <code>@ApiImplicitParams</code> 组合使用。</p><p><strong>@ApiImplicitParam 主要属性</strong></p><table><thead><tr><th align="left"><strong>注解属性</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">paramType</td><td align="left">查询参数类型，实际上就是参数放在那里。取值：path：以地址的形式提交数据，根据 id 查询用户的接口就是这种形式传参；query：Query string 的方式传参；header：以流的形式提交；form：以 Form 表单的形式提交。</td></tr><tr><td align="left">dataType</td><td align="left">参数的数据类型。取值：Long 和 String</td></tr><tr><td align="left">name</td><td align="left">参数名字。</td></tr><tr><td align="left">value</td><td align="left">参数意义的描述。</td></tr><tr><td align="left">required</td><td align="left">是否必填。取值：true：必填参数；false：非必填参数。</td></tr></tbody></table><h3 id="Model-相关注解"><a href="#Model-相关注解" class="headerlink" title="Model 相关注解"></a>Model 相关注解</h3><p><code>@ApiModel</code>: 可设置接口相关实体的描述。 <code>@ApiModelProperty</code>: 可设置实体属性的相关描述。</p><p><strong>@ApiModelProperty 主要属性</strong></p><table><thead><tr><th align="left"><strong>注解属性</strong></th><th align="left"><strong>类型</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">value</td><td align="left">String</td><td align="left">字段说明。</td></tr><tr><td align="left">name</td><td align="left">String</td><td align="left">重写字段名称。</td></tr><tr><td align="left">dataType</td><td align="left">Stirng</td><td align="left">重写字段类型。</td></tr><tr><td align="left">required</td><td align="left">boolean</td><td align="left">是否必填。</td></tr><tr><td align="left">example</td><td align="left">Stirng</td><td align="left">举例说明。</td></tr><tr><td align="left">hidden</td><td align="left">boolean</td><td align="left">是否在文档中隐藏该字段。</td></tr><tr><td align="left">allowEmptyValue</td><td align="left">boolean</td><td align="left">是否允许为空。</td></tr><tr><td align="left">allowableValues</td><td align="left">String</td><td align="left">该字段允许的值，当我们 API 的某个参数为枚举类型时，使用这个属性就可以清楚地告诉 API 使用者该参数所能允许传入的值。</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>代理模式</title>
      <link href="/2020/08/29/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/29/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>适用范围：</p><blockquote><p>为其他对象提供一个代理以控制对某个对象的访问。代理类主要负责为委托了（真实对象）预处理消息、过滤消息、传递消息给委托类，代理类不现实具体服务，而是利用委托类来完成服务，并将执行结果封装处理。</p></blockquote><p>例如：我们要去买火车票</p><ul><li>抽象接口：都是卖票的</li><li>被代理对象：12306官方售票</li><li>代理对象：各种第三方代理售商</li><li>用户去使用第三方代理买票，本质上就是实现了代理—通过对代理类的访问控制被代理对象</li></ul><h2 id="三种常用动态代理"><a href="#三种常用动态代理" class="headerlink" title="三种常用动态代理"></a>三种常用动态代理</h2><ul><li>静态代理</li><li>jdk动态代理</li><li>cglib动态代理</li></ul><h3 id="1-静态代理"><a href="#1-静态代理" class="headerlink" title="1.静态代理"></a>1.静态代理</h3><blockquote><p>创建一个接口，然后创建被代理的类实现该接口并且实现该接口中的抽象方法。之后再创建一个代理类，同时使其也实现这个接口。在代理类中持有一个被代理对象的引用，而后在代理类方法中调用该对象的方法。</p></blockquote><ol><li>接口：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface SaleTicket &#123;</span><br><span class="line">    void sale(int money);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>被代理类：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class SaleBy12306 implements SaleTicket&#123;</span><br><span class="line">    public void sale(int money) &#123;</span><br><span class="line">        if(money &gt; 100)&#123;</span><br><span class="line">            System.out.println(&quot;购票成功！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            System.out.println(&quot;购票失败！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>代理类：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class SaleByOthers implements SaleTicket &#123;</span><br><span class="line">    private final SaleBy12306 saleTicket;</span><br><span class="line"></span><br><span class="line">    public SaleByOthers(SaleBy12306 saleTicket) &#123;</span><br><span class="line">        this.saleTicket = saleTicket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 代理商 除了正常卖票还能 打折...之类的</span><br><span class="line">    public void sale(int money) &#123;</span><br><span class="line">        System.out.println(&quot;打折&quot;);</span><br><span class="line">        saleTicket.sale(money);    // 最后还是去12306取票</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>代理类调用：<br>被代理类被传递给了代理类SaleByOthers，代理类在执行具体方法时通过所持用的被代理类完成调用。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Client &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SaleBy12306 saleBy12306 = new SaleBy12306();</span><br><span class="line">        SaleByOthers saleByOthers = new SaleByOthers(saleBy12306);</span><br><span class="line">        saleByOthers.sale(200);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">输出：</span><br><span class="line">打折</span><br><span class="line">购票成功！</span><br></pre></td></tr></table></figure><p><strong>总结：</strong> 使用静态代理很容易就完成了对一个类的代理操作。但是静态代理的缺点也暴露了出来：由于代理只能为一个类服务，如果需要代理的类很多，那么就需要编写大量的代理类，比较繁琐。</p><h3 id="2-动态代理"><a href="#2-动态代理" class="headerlink" title="2.动态代理"></a>2.动态代理</h3><blockquote><p>利用反射机制在运行时创建代理类，实现对被代理对象的访问控制。<br>接口、被代理类不变，我们构建一个handler类来实现InvocationHandler接口。</p></blockquote><ol><li>接口：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface SaleTicket &#123;</span><br><span class="line">    void sale(int money);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>被代理类：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class SaleBy12306 implements SaleTicket&#123;</span><br><span class="line">    public void sale(int money) &#123;</span><br><span class="line">        if(money &gt; 100)&#123;</span><br><span class="line">            System.out.println(&quot;购票成功！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            System.out.println(&quot;购票失败！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>代理类：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// 售票代理商 处理器</span><br><span class="line">public class SaleTicketHandler implements InvocationHandler &#123;</span><br><span class="line">    private Object object;</span><br><span class="line"></span><br><span class="line">    public SaleTicketHandler(Object object) &#123;</span><br><span class="line">        this.object = object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 动态代理执行方法 类似Thread的run方法</span><br><span class="line">     * @param proxy  被代理对象</span><br><span class="line">     * @param method 被代理对象的方法</span><br><span class="line">     * @param args  被代理方法参数</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Throwable</span><br><span class="line">     */</span><br><span class="line">    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">        // 一样在售票前后可以做操作</span><br><span class="line">        System.out.println(&quot;售票前....&quot; + method.getName());</span><br><span class="line">        // 使用反射执行12306的售票方法</span><br><span class="line">        Object reslut = method.invoke(object,args);</span><br><span class="line">        System.out.println(&quot;售票后....&quot; + method.getName());</span><br><span class="line">        return reslut;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>代理类调用：<br>被代理类被传递给了代理类saleTicketByProxy ，代理类在执行具体方法时通过所持用的被代理类完成调用。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class Client &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SaleBy12306 saleBy12306 = new SaleBy12306();</span><br><span class="line">        InvocationHandler handler = new SaleTicketHandler(saleBy12306);</span><br><span class="line">        /**</span><br><span class="line">         * 此处代理类Proxy的newProxyInstance需要三个参数</span><br><span class="line">         * 1.被代理对象的类加载器</span><br><span class="line">         * 2.被代理对象的接口</span><br><span class="line">         * 3.实际的代理对象处理器 -- ProxyHandler</span><br><span class="line">         */</span><br><span class="line">        SaleTicket saleTicketByProxy = (SaleTicket) Proxy.newProxyInstance(</span><br><span class="line">                saleBy12306.getClass().getClassLoader(),</span><br><span class="line">                saleBy12306.getClass().getInterfaces(),</span><br><span class="line">                handler</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        saleTicketByProxy.sale(200);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过Proxy类的静态方法newProxyInstance返回一个接口的代理实例。针对不同的代理类，传入相应的代理程序控制器InvocationHandler。</p><ol start="5"><li>如果再想加入一个代理对象 也是相同的写法，而且可以使用匿名内部类</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SaleTicket saleTicketByProxy2 = (SaleTicket) Proxy.newProxyInstance(</span><br><span class="line">        saleBy12306.getClass().getClassLoader(),</span><br><span class="line">        saleBy12306.getClass().getInterfaces(),</span><br><span class="line">        new InvocationHandler()&#123;</span><br><span class="line">            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">                return method.invoke(saleBy12306,args);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">);</span><br><span class="line">saleTicketByProxy2.sale(200);</span><br></pre></td></tr></table></figure><p><strong>动态代理底层实现:</strong></p><ol><li>通过实现 InvocationHandler 接口创建自己的调用处理器；</li><li>通过为 Proxy 类指定 ClassLoader 对象和一组 interface 来创建动态代理类；</li><li>通过反射机制获得动态代理类的构造函数，其唯一参数类型是调用处理器接口类型；</li><li>通过构造函数创建动态代理类实例，构造时调用处理器对象作为参数被传入。</li></ol><p><strong>总结：</strong> JDK 动态代理有一个最致命的问题是其只能代理实现了接口的类。<br>为了解决这个问题，我们可以用 CGLIB 动态代理机制来避免。</p><h3 id="3-CGLIB动态代理"><a href="#3-CGLIB动态代理" class="headerlink" title="3.CGLIB动态代理"></a>3.CGLIB动态代理</h3><blockquote><p>CGLIB(Code Generation Library)是一个基于ASM的字节码生成库，它允许我们在运行时对字节码进行修改和动态生成。CGLIB 通过继承方式实现代理。很多知名的开源框架都使用到了CGLIB， 例如 Spring 中的 AOP 模块中：如果目标对象实现了接口，则默认采用 JDK 动态代理，否则采用 CGLIB 动态代理。</p></blockquote><h4 id="1-CGLIB代理机制"><a href="#1-CGLIB代理机制" class="headerlink" title="1.CGLIB代理机制"></a>1.CGLIB代理机制</h4><h5 id="在-CGLIB-动态代理机制中-MethodInterceptor-接口和-Enhancer-类是核心。"><a href="#在-CGLIB-动态代理机制中-MethodInterceptor-接口和-Enhancer-类是核心。" class="headerlink" title="在 CGLIB 动态代理机制中 MethodInterceptor 接口和 Enhancer 类是核心。"></a>在 CGLIB 动态代理机制中 <code>MethodInterceptor</code> 接口和 <code>Enhancer</code> 类是核心。</h5><h5 id="你需要自定义-MethodInterceptor-并重写-intercept-方法，intercept-用于拦截增强被代理类的方法。"><a href="#你需要自定义-MethodInterceptor-并重写-intercept-方法，intercept-用于拦截增强被代理类的方法。" class="headerlink" title="你需要自定义 MethodInterceptor 并重写 intercept 方法，intercept 用于拦截增强被代理类的方法。"></a>你需要自定义 <code>MethodInterceptor</code> 并重写 <code>intercept</code> 方法，<code>intercept</code> 用于拦截增强被代理类的方法。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public interface MethodInterceptor</span><br><span class="line">extends Callback&#123;</span><br><span class="line">    // 拦截被代理类中的方法</span><br><span class="line">    public Object intercept(</span><br><span class="line">        Object obj,</span><br><span class="line">        java.lang.reflect.Method method,</span><br><span class="line">        Object[] args,</span><br><span class="line">        MethodProxy proxy</span><br><span class="line">        ) throws Throwable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>obj :被代理的对象（需要增强的对象）</li><li>method :被拦截的方法（需要增强的方法）</li><li>args :方法入参</li><li>methodProxy :用于调用原始方法</li></ul><p>你可以通过 <code>Enhancer</code>类来动态获取被代理类，当代理类调用方法的时候，实际调用的是 <code>MethodInterceptor</code> 中的 <code>intercept</code> 方法。</p><h4 id="2-CGLIB代理类使用流程"><a href="#2-CGLIB代理类使用流程" class="headerlink" title="2.CGLIB代理类使用流程"></a>2.CGLIB代理类使用流程</h4><ol><li>定义一个类；</li><li>自定义 <code>MethodInterceptor</code> 并重写 <code>intercept</code> 方法，<code>intercept</code> 用于拦截增强被代理类的方法，和 JDK 动态代理中的 <code>invoke</code> 方法类似</li><li>通过 <code>Enhancer</code> 类的 <code>create()</code>创建代理类；</li></ol><p>Maven依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;cglib&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;cglib&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;3.3.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>1.被代理类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class SaleBy12306 &#123;</span><br><span class="line">    public void sale(int money) &#123;</span><br><span class="line">        if(money &gt; 100)&#123;</span><br><span class="line">            System.out.println(&quot;购票成功！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            System.out.println(&quot;购票失败！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.自定义 <code>MethodInterceptor</code>（方法拦截器）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class SaleTicketMethodIntercepter implements MethodInterceptor &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param o           被代理的对象（需要增强的对象）</span><br><span class="line">     * @param method      被拦截的方法（需要增强的方法）</span><br><span class="line">     * @param args        方法入参</span><br><span class="line">     * @param methodProxy 用于调用原始方法</span><br><span class="line">     */</span><br><span class="line">    public Object intercept(Object o, Method method, Object[] args, MethodProxy methodProxy) throws Throwable &#123;</span><br><span class="line">        //调用方法之前，我们可以添加自己的操作</span><br><span class="line">        System.out.println(&quot;before method &quot; + method.getName());</span><br><span class="line">        Object object = methodProxy.invokeSuper(o, args);</span><br><span class="line">        //调用方法之后，我们同样可以添加自己的操作</span><br><span class="line">        System.out.println(&quot;after method &quot; + method.getName());</span><br><span class="line">        return object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.获取代理类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class CglibProxyFactory &#123;</span><br><span class="line"></span><br><span class="line">    public static Object getProxy(Class&lt;?&gt; clazz) &#123;</span><br><span class="line">        // 创建动态代理增强类</span><br><span class="line">        Enhancer enhancer = new Enhancer();</span><br><span class="line">        // 设置类加载器</span><br><span class="line">        enhancer.setClassLoader(clazz.getClassLoader());</span><br><span class="line">        // 设置被代理类</span><br><span class="line">        enhancer.setSuperclass(clazz);</span><br><span class="line">        // 设置方法拦截器</span><br><span class="line">        enhancer.setCallback(new SaleTicketMethodIntercepter());</span><br><span class="line">        // 创建代理类</span><br><span class="line">        return enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.实际使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Client &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SaleBy12306 saleBy12306 = (SaleBy12306) CglibProxyFactory.getProxy(SaleBy12306.class);</span><br><span class="line">        saleBy12306.sale(200);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><h4 id="1-JDK-动态代理和-CGLIB-动态代理对比"><a href="#1-JDK-动态代理和-CGLIB-动态代理对比" class="headerlink" title="1.JDK 动态代理和 CGLIB 动态代理对比"></a>1.JDK 动态代理和 CGLIB 动态代理对比</h4><ul><li>JDK 动态代理只能只能代理实现了接口的类，而 CGLIB 可以代理未实现任何接口的类。  </li><li>另外， CGLIB 动态代理是通过生成一个被代理类的子类来拦截被代理类的方法调用，因此不能代理声明为 final 类型的类和方法。</li><li>就二者的效率来说，大部分情况都是 JDK 动态代理更优秀，随着 JDK 版本的升级，这个优势更加明显。</li></ul><h4 id="2-静态代理和动态代理的对比"><a href="#2-静态代理和动态代理的对比" class="headerlink" title="2. 静态代理和动态代理的对比"></a>2. 静态代理和动态代理的对比</h4><ul><li>灵活性 ：动态代理更加灵活，不需要必须实现接口，可以直接代理实现类，并且可以不需要针对每个目标类都创建一个代理类。另外，静态代理中，接口一旦新增加方法，目标对象和代理对象都要进行修改，这是非常麻烦的！</li><li>JVM 层面 ：静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件。而动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。</li></ul><p>参考资料：</p><p><a href="https://snailclimb.gitee.io/javaguide/#/docs/java/basic/java-proxy?id=_4-%e9%9d%99%e6%80%81%e4%bb%a3%e7%90%86%e5%92%8c%e5%8a%a8%e6%80%81%e4%bb%a3%e7%90%86%e7%9a%84%e5%af%b9%e6%af%94" target="_blank" rel="noopener">JavaGuide</a><br><a href="https://www.jianshu.com/p/9bcac608c714" target="_blank" rel="noopener">简书-java动态代理</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代理模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jvm底层原理总结</title>
      <link href="/2020/08/23/Jvm%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/"/>
      <url>/2020/08/23/Jvm%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-虚拟机底层原理知识总结"><a href="#Java-虚拟机底层原理知识总结" class="headerlink" title="Java 虚拟机底层原理知识总结"></a>Java 虚拟机底层原理知识总结</h1><h2 id="清单"><a href="#清单" class="headerlink" title="清单"></a>清单</h2><ul><li><a href="https://github.com/doocs/jvm/blob/master/docs/01-jvm-memory-structure.md" target="_blank" rel="noopener">JVM 内存结构</a></li><li><a href="https://github.com/doocs/jvm/blob/master/docs/02-hotspot-jvm-object.md" target="_blank" rel="noopener">HotSpot 虚拟机对象探秘</a></li><li><a href="https://github.com/doocs/jvm/blob/master/docs/03-gc-algorithms.md" target="_blank" rel="noopener">垃圾收集策略与算法</a></li><li><a href="https://github.com/doocs/jvm/blob/master/docs/04-hotspot-gc.md" target="_blank" rel="noopener">HotSpot 垃圾收集器</a></li><li><a href="https://github.com/doocs/jvm/blob/master/docs/05-memory-allocation-gc.md" target="_blank" rel="noopener">内存分配与回收策略</a></li><li><a href="https://github.com/doocs/jvm/blob/master/docs/06-jvm-performance-tuning.md" target="_blank" rel="noopener">JVM 性能调优</a></li><li><a href="https://github.com/doocs/jvm/blob/master/docs/07-class-structure.md" target="_blank" rel="noopener">类文件结构</a></li><li><a href="https://github.com/doocs/jvm/blob/master/docs/08-load-class-time.md" target="_blank" rel="noopener">类加载的时机</a></li><li><a href="https://github.com/doocs/jvm/blob/master/docs/09-load-class-process.md" target="_blank" rel="noopener">类加载的过程</a></li><li><a href="https://github.com/doocs/jvm/blob/master/docs/10-class-loader.md" target="_blank" rel="noopener">类加载器</a></li></ul><hr><p><a href="https://github.com/doocs/jvm" target="_blank" rel="noopener">java 虚拟机底层原理知识总结</a></p><p><a href="https://zhuanlan.zhihu.com/p/34426768" target="_blank" rel="noopener">纯洁的微笑jvm</a></p>]]></content>
      
      
      <categories>
          
          <category> java基础语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树</title>
      <link href="/2020/08/21/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF/"/>
      <url>/2020/08/21/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><blockquote><p>线段树是算法竞赛中常用的用来维护 <strong>区间信息</strong> 的数据结构。</p></blockquote><blockquote><p>线段树可以在 的时间复杂度内实现<strong>单点修改</strong>、<strong>区间修改</strong>、<strong>区间查询</strong>（区间求和，求区间最大值，求区间最小值）等操作。</p></blockquote><blockquote><p>线段树维护的信息，需要满足可加性，即能以可以接受的速度合并信息和修改信息，包括在使用懒惰标记时，标记也要满足可加性（例如取模就不满足可加性，对 取模然后对 取模，两个操作就不能合并在一起做）。</p></blockquote><h3 id="1-区间求和的线段树"><a href="#1-区间求和的线段树" class="headerlink" title="1.区间求和的线段树"></a>1.区间求和的线段树</h3><blockquote><p>若只需要求区间和，而不需要改变区间值 –&gt; 使用前缀和</p><p>若在求区间和的基础上，还要修改区间数组的值，为了更快的维护一个前缀和数组 —&gt; 线段树</p><p>线段树实际就是在前缀和的基础上使用二分构建二叉搜索树，提高修改区间值的时间</p><p>线段树一般支持三个基本操作：构建树，修改某元素的值，查询区间和</p></blockquote><p>如图：原数组和它对应的线段树</p><img style="zoom:70%" data-src="https://i.loli.net/2020/08/21/Y9XGImNind54BvA.png" class="lazyload"><p>修改下标为4的元素为6后的线段树：</p><img style="zoom:70%" data-src="https://i.loli.net/2020/08/21/wRps6XunvfmyBQP.png" class="lazyload"><p>一个区间求和线段树的Java基本模板：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SegmentTree</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] data;   <span class="comment">// 原始数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] tree;   <span class="comment">// 线段树</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SegmentTree</span><span class="params">(<span class="keyword">int</span>[] data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        tree = <span class="keyword">new</span> <span class="keyword">int</span>[data.length*<span class="number">4</span>];     <span class="comment">// 线段树为原始数据4倍</span></span><br><span class="line">        buildTree(<span class="number">0</span>,<span class="number">0</span>,data.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建树</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span> treeIndex, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">            tree[treeIndex] = data[l];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> leftTreeIndex = <span class="number">2</span> * treeIndex + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> rightTreeIndex = <span class="number">2</span> * treeIndex + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">        buildTree(leftTreeIndex, l, mid); <span class="comment">//先构建两棵子树</span></span><br><span class="line">        buildTree(rightTreeIndex, mid + <span class="number">1</span>, r);</span><br><span class="line">        tree[treeIndex] = tree[leftTreeIndex] + tree[rightTreeIndex];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新下标为index的值为val</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> treeIndex, <span class="keyword">int</span> l, <span class="keyword">int</span> r,<span class="keyword">int</span> index,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">            data[index] = val;</span><br><span class="line">            tree[treeIndex] = val;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> leftTreeIndex = <span class="number">2</span> * treeIndex + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> rightTreeIndex = <span class="number">2</span> * treeIndex + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= l &amp;&amp; index &lt;= mid)&#123;</span><br><span class="line">            update(leftTreeIndex, l, mid,index,val);</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            update(rightTreeIndex, mid+<span class="number">1</span>, r,index,val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 自底往上更新线段树</span></span><br><span class="line">        tree[treeIndex] = tree[leftTreeIndex] + tree[rightTreeIndex];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询 L-R 区域的值的和</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> treeIndex, <span class="keyword">int</span> l, <span class="keyword">int</span> r,<span class="keyword">int</span> queryL,<span class="keyword">int</span> queryR)</span></span>&#123;</span><br><span class="line">        System.out.println(l + <span class="string">" "</span> + r);</span><br><span class="line">        <span class="keyword">if</span>(queryR &lt; l || queryL &gt; r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(queryL &lt;= l &amp;&amp; r &lt;= queryR) <span class="keyword">return</span> tree[treeIndex];</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> leftTreeIndex = <span class="number">2</span> * treeIndex + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> rightTreeIndex = <span class="number">2</span> * treeIndex + <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> sum_left =  query(leftTreeIndex, l, mid, queryL, queryR);</span><br><span class="line">            <span class="keyword">int</span> sum_right = query(rightTreeIndex, mid + <span class="number">1</span>, r, queryL, queryR);</span><br><span class="line">            <span class="keyword">return</span> sum_left + sum_right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>若要使用更复杂的数据结构和运算规则，修改：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] data;   <span class="comment">// 原始数据</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] tree;   <span class="comment">// 线段树</span></span><br><span class="line">和</span><br><span class="line"> tree[treeIndex] = tree[leftTreeIndex] + tree[rightTreeIndex];<span class="comment">// 此处在进行区间求和</span></span><br></pre></td></tr></table></figure><p>参考资料：<br><a href="https://www.bilibili.com/video/BV1cb411t7AM?from=search&seid=6594271608262607100" target="_blank" rel="noopener">灯笼大神讲线段树</a></p><p><a href="https://oi-wiki.org/ds/seg/" target="_blank" rel="noopener">线段树百科</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反射机制</title>
      <link href="/2020/08/19/java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
      <url>/2020/08/19/java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="java反射机制"><a href="#java反射机制" class="headerlink" title="java反射机制"></a>java反射机制</h1><blockquote><p><strong>反射就是在运行时才知道要操作的类是什么，并且可以在运行时获取类的完整构造，并调用对应的方法。</strong></p></blockquote><p><img alt="jvm" data-src="https://pic2.zhimg.com/80/v2-4face8109e0d52ef5894c41c69e4ec6b_720w.jpg?source=1940ef5c" class="lazyload"></p><h4 id="通俗理解："><a href="#通俗理解：" class="headerlink" title="通俗理解："></a>通俗理解：</h4><p>当我们的程序在运行时，需要动态的加载一些类这些类可能之前用不到所以不用加载到<code>jvm</code>，而是在运行时根据需要才加载。例如：大家如果接触过spring，会发现当你配置各种各样的bean时，是以配置文件的形式配置的，你需要用到哪些bean就配哪些，spring容器就会根据你的需求去动态加载，你的程序就能健壮地运行。</p><h2 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h2><blockquote><p>Reflection 使用 JDK 提供的反射 API 进行反射调用类的信息</p></blockquote><ul><li>反射就是在运行时才知道要操作的类是什么，并且可以在运行时获取类的完整构造，并调用对应的方法。</li></ul><p><img alt="image" data-src="https://pics7.baidu.com/feed/8b13632762d0f703ecd825d4bde727382697c577.jpeg?token=12cc273c0cc8b6d4fbf23e5f99a8e14c&s=8070E532C533C0224E7518DB000080B2" class="lazyload"></p><h4 id="正常使用类"><a href="#正常使用类" class="headerlink" title="正常使用类"></a>正常使用类</h4><ol><li>引入包</li><li>new实例化</li><li>获取实例化对象</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Apple apple = new Apple(); //直接初始化，「正射」</span><br><span class="line">apple.setPrice(4);</span><br></pre></td></tr></table></figure><h4 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h4><ol><li>一开始并不知道初始化的类对象是什么</li><li>无法使用 new 关键字来创建对象</li><li>使用 JDK 提供的反射 API 进行反射调用</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class clz = Class.forName(&quot;com.chenshuyi.reflect.Apple&quot;);</span><br><span class="line">Method method = clz.getMethod(&quot;setPrice&quot;, int.class);</span><br><span class="line">Constructor constructor = clz.getConstructor();</span><br><span class="line">Object object = constructor.newInstance();</span><br><span class="line">method.invoke(object, 4);</span><br></pre></td></tr></table></figure><ul><li>从这个简单的例子可以看出，一般情况下我们使用反射获取一个对象的步骤：</li></ul><ol><li><p>获取类的 Class 对象实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class clz = Class.forName(&quot;com.zhenai.api.Apple&quot;);</span><br></pre></td></tr></table></figure></li><li><p>根据 Class 对象实例获取 Constructor 对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Constructor appleConstructor = clz.getConstructor();</span><br></pre></td></tr></table></figure></li><li><p>使用 Constructor 对象的 newInstance 方法获取反射类对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object appleObj = appleConstructor.newInstance();</span><br></pre></td></tr></table></figure></li><li><p>而如果要调用某一个方法，则需要经过下面的步骤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">获取方法的 Method 对象</span><br><span class="line">Method setPriceMethod = clz.getMethod(&quot;setPrice&quot;, int.class);</span><br><span class="line"></span><br><span class="line">利用 invoke 方法调用方法</span><br><span class="line">setPriceMethod.invoke(appleObj, 14);</span><br></pre></td></tr></table></figure></li></ol><h4 id="Class对象的获取方法"><a href="#Class对象的获取方法" class="headerlink" title="Class对象的获取方法"></a>Class对象的获取方法</h4><p>第一种，使用 Class.forName 静态方法。当你知道该类的全路径名时，你可以使用该方法获取 Class 类对象。</p><p><code>Class clz = Class.forName(&quot;java.lang.String&quot;);</code></p><p>第二种，使用 .class 方法。<br>这种方法只适合在编译前就知道操作的 Class。</p><p><code>Class clz = String.class;</code></p><p>第三种，使用类对象的 getClass() 方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str = new String(&quot;Hello&quot;);</span><br><span class="line">Class clz = str.getClass();</span><br></pre></td></tr></table></figure><h4 id="反射机制提供的功能："><a href="#反射机制提供的功能：" class="headerlink" title="反射机制提供的功能："></a>反射机制提供的功能：</h4><ol><li>在运行时判断任意一个对象所属的类；</li><li>在运行时构造任意一个类的对象；</li><li>在运行时判断任意一个类所具有的成员变量和方法；</li><li>在运行时调用任意一个对象的成员变量和方法；</li><li>生成动态代理。</li></ol>]]></content>
      
      
      <categories>
          
          <category> java基础语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java并发编程小结</title>
      <link href="/2020/08/18/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%B0%8F%E7%BB%93/"/>
      <url>/2020/08/18/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<hr><p>参考资料：<br><a href="http://concurrent.redspider.group/" target="_blank" rel="noopener">深入浅出Java多线程</a><br><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1255943750561472" target="_blank" rel="noopener">廖雪峰的官网</a></p><h2 id="一、并发基础"><a href="#一、并发基础" class="headerlink" title="一、并发基础"></a>一、并发基础</h2><h3 id="1-线程与进程"><a href="#1-线程与进程" class="headerlink" title="1.线程与进程"></a>1.线程与进程</h3><p>进程：单独占有一定的内存地址空间，数据隔离，数据共享复杂，同步复杂。稳定但资源开销大。</p><p>线程：共享进程的内存资源，数据共享简单，同步复杂。可靠性低但资源开销小。</p><p>线程并非越多越好，线程越多，上下文切换越多，消耗大量的CPU时间。</p><hr><h3 id="2-多线程入门和接口"><a href="#2-多线程入门和接口" class="headerlink" title="2.多线程入门和接口"></a>2.多线程入门和接口</h3><h4 id="1-Thread类"><a href="#1-Thread类" class="headerlink" title="1.Thread类"></a>1.Thread类</h4><ul><li>继承<code>Thread</code>类，并重写<code>run</code>方法；</li></ul><h4 id="2-Runnable接口"><a href="#2-Runnable接口" class="headerlink" title="2.Runnable接口"></a>2.Runnable接口</h4><ul><li>实现Runnable接口，并重写<code>run</code>方法；</li></ul><h4 id="3-Callable接口"><a href="#3-Callable接口" class="headerlink" title="3.Callable接口"></a>3.Callable接口</h4><ul><li>Callable一般是配合线程池工具<code>ExecutorService</code>来使用的。有返回值</li></ul><h4 id="4-Future接口"><a href="#4-Future接口" class="headerlink" title="4.Future接口"></a>4.Future接口</h4><ul><li>拥有取消，获取线程状态的功能。有返回值</li></ul><h4 id="5-FutureTask类"><a href="#5-FutureTask类" class="headerlink" title="5.FutureTask类"></a>5.FutureTask类</h4><ul><li>同时实现Runnable和Future接口。有返回值</li></ul><hr><h3 id="3-线程组和线程优先级"><a href="#3-线程组和线程优先级" class="headerlink" title="3.线程组和线程优先级"></a>3.线程组和线程优先级</h3><h4 id="1-线程组："><a href="#1-线程组：" class="headerlink" title="1.线程组："></a>1.线程组：</h4><ul><li>使用线程组对线程进行批量控制。线程组是一个标准的<strong>向下引用</strong>的树状结构。</li></ul><h4 id="2-线程优先级："><a href="#2-线程优先级：" class="headerlink" title="2.线程优先级："></a>2.线程优先级：</h4><ul><li>Java中线程优先级可以指定，范围是<code>1~10</code>。</li><li>Java默认的线程优先级为5，线程的执行顺序由调度程序来决定，线程的优先级会在线程被调用之前设定。</li><li>高优先级的线程将会比低优先级的线程有<strong>更高的几率</strong>得到执行。</li><li>使用方法<code>Thread</code>类的<code>setPriority()</code>实例方法来设定线程的优先级。</li><li>总结：优先级你设置了，理不理你就是系统调度的事情了。</li></ul><hr><h3 id="4-线程状态及转换"><a href="#4-线程状态及转换" class="headerlink" title="4.线程状态及转换"></a>4.线程状态及转换</h3><h4 id="1-操作系统线程主要有以下三个状态："><a href="#1-操作系统线程主要有以下三个状态：" class="headerlink" title="1.操作系统线程主要有以下三个状态："></a>1.操作系统线程主要有以下三个状态：</h4><ul><li>就绪状态(ready)：线程正在等待使用CPU，经调度程序调用之后可进入running状态。</li><li>执行状态(running)：线程正在使用CPU。</li><li>等待状态(waiting): 线程经过等待事件的调用或者正在等待其他资源（如I/O）。</li></ul><h4 id="2-Java线程的6个状态"><a href="#2-Java线程的6个状态" class="headerlink" title="2.Java线程的6个状态"></a>2.Java线程的6个状态</h4><ul><li><p>NEW：未启动状态。还没调用Thread实例的start()方法。</p></li><li><p>RUNNABLE：线程正在运行中。（正在Java虚拟机中运行 | 等待CPU分配资源。）</p></li><li><p>BLOCKED：阻塞状态。处于阻塞状态的线程正等待锁的释放以进入同步区。</p></li><li><p>WAITING：等待状态。处于等待状态的线程变成RUNNABLE状态需要其他线程唤醒。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">调用如下<span class="number">3</span>个方法会使线程进入等待状态：</span><br><span class="line">* Object.wait()：使当前线程处于等待状态直到另一个线程唤醒它；</span><br><span class="line">* Thread.join()：等待线程执行完毕，底层调用的是Object实例的wait方法；</span><br><span class="line">* LockSupport.park()：除非获得调用许可，否则禁用当前线程进行线程调度。</span><br><span class="line"></span><br><span class="line">调用如下<span class="number">2</span>个方法唤醒线程：</span><br><span class="line">* notify()：唤醒一个等待的线程</span><br><span class="line">* notifyAll()：唤醒所有等待的线程</span><br></pre></td></tr></table></figure></li><li><p>TIMED_WAITING：超时等待状态。线程等待一个具体的时间，时间到后会被自动唤醒。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">调用如下方法会使线程进入超时等待状态：</span><br><span class="line"></span><br><span class="line">Thread.sleep(<span class="keyword">long</span> millis)：使当前线程睡眠指定时间；</span><br><span class="line">Object.wait(<span class="keyword">long</span> timeout)：线程休眠指定时间，等待期间可以通过notify()/notifyAll()唤醒；</span><br><span class="line">Thread.join(<span class="keyword">long</span> millis)：等待当前线程最多执行millis毫秒，如果millis为<span class="number">0</span>，则会一直执行；</span><br><span class="line">LockSupport.parkNanos(<span class="keyword">long</span> nanos)： 除非获得调用许可，否则禁用当前线程进行线程调度指定时间；</span><br><span class="line">LockSupport.parkUntil(<span class="keyword">long</span> deadline)：同上，也是禁止线程进行调度指定时间；</span><br></pre></td></tr></table></figure></li><li><p>TERMINATED：终止状态。此时线程已执行完毕。</p></li></ul><hr><h3 id="5-线程间通信"><a href="#5-线程间通信" class="headerlink" title="5.线程间通信"></a>5.线程间通信</h3><p>线程同步：线程之间按照<strong>一定的顺序</strong>执行。</p><ol><li>锁与同步（对象锁<code>synchronized</code>）</li><li>等待/通知机制（在<code>synchronized</code>基础上+ wait()和notify() 通知唤醒线程）</li><li>信号量 （<code>Semaphore</code>对象或者<code>volatile</code>关键字）</li><li>管道（管道是基于“管道流”的通信方式。JDK提供了许多）</li><li>其他信道相关<ol><li><code>join()</code>线程礼让，排队等待其他线程完成。</li><li><code>sleep()</code>线程睡眠，不释放锁，（wait释放）</li><li><code>ThreadLocal</code>线程本地变量，内部是一个弱引用的<code>Map</code></li><li><code>InheritableThreadLocal</code>添加子线程继承父线程本地变量</li></ol></li><li>JDK通讯工具类</li></ol><h2 id="二、并发原理"><a href="#二、并发原理" class="headerlink" title="二、并发原理"></a>二、并发原理</h2><h3 id="1-java内存模型基础"><a href="#1-java内存模型基础" class="headerlink" title="1.java内存模型基础"></a>1.java内存模型基础</h3><p><img alt="Java内存模型" data-src="http://concurrent.redspider.group/article/02/imgs/Java%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA.png" class="lazyload"></p><p><img alt data-src="http://concurrent.redspider.group/article/02/imgs/JMM%E6%8A%BD%E8%B1%A1%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" class="lazyload"></p><h5 id="存在一个问题，各线程之间变量的一致性问题"><a href="#存在一个问题，各线程之间变量的一致性问题" class="headerlink" title="存在一个问题，各线程之间变量的一致性问题"></a>存在一个问题，各线程之间变量的一致性问题</h5><h3 id="2-重排序与happens-before"><a href="#2-重排序与happens-before" class="headerlink" title="2.重排序与happens-before"></a>2.重排序与happens-before</h3><ol><li>指令重排</li></ol><blockquote><p>指令重排对于提高CPU处理性能十分必要。虽然由此带来了乱序的问题，但是这点牺牲是值得的。</p><p><strong>指令重排可以保证串行语义一致，但是没有义务保证多线程间的语义也一致</strong>。</p></blockquote><ol start="2"><li>顺序一致性模型</li></ol><p>Java内存模型（JMM）对于正确同步多线程程序的内存一致性做了以下保证：</p><blockquote><p><strong>如果程序是正确同步的，程序的执行将具有顺序一致性</strong>。 即程序的执行结果和该程序在顺序一致性模型中执行的结果相同。</p></blockquote><p>这里的同步包括了使用<code>volatile</code>、<code>final</code>、<code>synchronized</code>等关键字来实现<strong>多线程下的同步</strong>。</p><ol start="3"><li><p>happens-before规则</p><p>JMM提供了<strong>happens-before规则</strong>（JSR-133规范），满足了程序员的需求——<strong>简单易懂，并且提供了足够强的内存可见性保证。</strong></p><p>总之，如果操作A happens-before操作B，那么操作A在内存上所做的操作对操作B都是可见的，不管它们在不在一个线程。</p></li></ol><h3 id="3-volatile共享变量"><a href="#3-volatile共享变量" class="headerlink" title="3.volatile共享变量"></a>3.volatile共享变量</h3><p>volatile关键字有特殊的内存语义。volatile主要有以下两个功能：</p><ul><li>保证变量的<strong>内存可见性</strong></li><li>禁止volatile变量与普通变量<strong>重排序</strong></li></ul><p><strong>在功能上，锁比volatile更强大；在性能上，volatile更有优势</strong>。</p><h3 id="4-synchronized与锁"><a href="#4-synchronized与锁" class="headerlink" title="4.synchronized与锁"></a>4.synchronized与锁</h3><blockquote><p>Java多线程的锁都是基于对象的。</p><p>CAS: Compare and Swap</p><p>比较并设置。用于在硬件层面上提供原子性操作。在 Intel 处理器中，比较并交换通过指令cmpxchg实现。 比较是否和给定的数值一致，如果一致则修改，不一致则不修改。</p></blockquote><h4 id="1-java对象头：（java锁存放的地方）"><a href="#1-java对象头：（java锁存放的地方）" class="headerlink" title="1.java对象头：（java锁存放的地方）"></a>1.java对象头：（java锁存放的地方）</h4><blockquote><p>每个Java对象都有对象头。如果是非数组类型，则用2个字宽来存储对象头，如果是数组，则会用3个字宽来存储对象头。</p><p>Mark Word :  存储对象的<code>hashCode</code>或锁信息等</p></blockquote><h4 id="2-几种锁"><a href="#2-几种锁" class="headerlink" title="2.几种锁"></a>2.几种锁</h4><p>在Java 6 及其以后，一个对象其实有四种锁状态，它们级别由低到高依次是：</p><ol><li>无锁状态</li><li>偏向锁状态</li><li>轻量级锁状态</li><li>重量级锁状态</li></ol><p>几种锁会随着竞争情况逐渐升级，锁的升级很容易发生，但是锁降级发生的条件会比较苛刻</p><h5 id="1-偏向锁-："><a href="#1-偏向锁-：" class="headerlink" title="1.偏向锁 ："></a>1.偏向锁 ：</h5><p>偏向锁在资源无竞争情况下消除了同步语句，连CAS操作都不做了，提高了程序的运行性能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">锁记录偏向的线程ID</span><br><span class="line">if(下次进入同步块 == 自己的ID) 无需CAS操作加锁和解锁</span><br><span class="line">else 升级为轻量级锁 竞争</span><br></pre></td></tr></table></figure><p>适用于竞争少的情况。</p><h5 id="2-轻量级锁："><a href="#2-轻量级锁：" class="headerlink" title="2.轻量级锁："></a>2.轻量级锁：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">尝试用CAS将锁的Mark Word替换为指向锁记录的指针</span><br><span class="line">if(成功) 当前线程获得锁</span><br><span class="line">else 当前线程就尝试使用自旋来竞争获取锁。</span><br><span class="line"></span><br><span class="line">自旋到一定程度升级成重量级锁。</span><br></pre></td></tr></table></figure><h5 id="3-重量级锁："><a href="#3-重量级锁：" class="headerlink" title="3.重量级锁："></a>3.重量级锁：</h5><blockquote><p>依赖于操作系统的互斥量（mutex） 实现的，而操作系统中线程间状态的转换需要相对比较长的时间，所以重量级锁效率很低，但被阻塞的线程不会消耗CPU。</p></blockquote><p>当调用一个锁对象的<code>wait</code>或<code>notify</code>方法时，<strong>如当前锁的状态是偏向锁或轻量级锁则会先膨胀成重量级锁</strong>。</p><h5 id="4-各种锁对比："><a href="#4-各种锁对比：" class="headerlink" title="4.各种锁对比："></a>4.各种锁对比：</h5><table><thead><tr><th>锁</th><th>优点</th><th>缺点</th><th>适用场景</th></tr></thead><tbody><tr><td>偏向锁</td><td>加锁和解锁不需要额外的消耗，和执行非同步方法比仅存在纳秒级的差距。</td><td>如果线程间存在锁竞争，会带来额外的锁撤销的消耗。</td><td>适用于只有一个线程访问同步块场景。</td></tr><tr><td>轻量级锁</td><td>竞争的线程不会阻塞，提高了程序的响应速度。</td><td>如果始终得不到锁竞争的线程使用自旋会消耗CPU。</td><td>追求响应时间。同步块执行速度非常快。</td></tr><tr><td>重量级锁</td><td>线程竞争不使用自旋，不会消耗CPU。</td><td>线程阻塞，响应时间缓慢。</td><td>追求吞吐量。同步块执行时间较长。</td></tr></tbody></table><h3 id="5-CAS与原子操作"><a href="#5-CAS与原子操作" class="headerlink" title="5.CAS与原子操作"></a>5.CAS与原子操作</h3><p><strong>悲观锁：</strong></p><p>悲观锁就是我们常说的锁。对于悲观锁来说，它总是认为每次访问共享资源时会发生冲突，所以必须对每次数据操作加上锁，以保证临界区的程序同一时间只能有一个线程在执行。</p><p><strong>乐观锁：</strong></p><p>乐观锁又称为“无锁”，顾名思义，它是乐观派。乐观锁总是假设对共享资源的访问没有冲突，线程可以不停地执行，无需加锁也无需等待。而一旦多个线程发生冲突，乐观锁通常是使用一种称为CAS的技术来保证线程执行的安全性。</p><p>由于无锁操作中没有锁的存在，因此不可能出现死锁的情况，也就是说<strong>乐观锁天生免疫死锁</strong>。</p><p>乐观锁多用于“读多写少“的环境，避免频繁加锁影响性能；而悲观锁多用于”写多读少“的环境，避免频繁失败和重试影响性能。</p><ol><li>CAS概念</li></ol><p>CAS的全称是：比较并交换（Compare And Swap）。在CAS中，有这样三个值：</p><ul><li>V：要更新的变量(var)</li><li>E：预期值(expected)</li><li>N：新值(new)</li></ul><p>比较并交换的过程如下：</p><p>判断V是否等于E，如果等于，将V的值设置为N；如果不等，说明已经有其它线程更新了V，则当前线程放弃更新，什么都不做。</p><ol start="2"><li><p>Java实现CAS的原理 - Unsafe类</p></li><li><p>原子操作-AtomicInteger类</p></li><li><p>CAS实现原子操作的三大问题</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.ABA问题</span><br><span class="line">2.循环时间长开销大</span><br><span class="line">3.只能保证一个共享变量的原子操作</span><br></pre></td></tr></table></figure><h3 id="6-AQS抽象队列同步器"><a href="#6-AQS抽象队列同步器" class="headerlink" title="6.AQS抽象队列同步器"></a>6.AQS抽象队列同步器</h3><p><strong>AQS</strong>是<code>AbstractQueuedSynchronizer</code>的简称，即<code>抽象队列同步器</code>，从字面意思上理解:</p><ul><li>抽象：抽象类，只实现一些主要逻辑，有些方法由子类实现；</li><li>队列：使用先进先出（FIFO）队列存储数据；</li><li>同步：实现了同步的功能。</li></ul><p>那AQS有什么用呢？AQS是一个用来构建锁和同步器的框架，使用AQS能简单且高效地构造出应用广泛的同步器，比如我们提到的<code>ReentrantLock</code>，<code>Semaphore</code>，<code>ReentrantReadWriteLock</code>，<code>SynchronousQueue</code>，<code>FutureTask</code>等等皆是基于AQS的。</p><p>…..</p><p>…..</p><h2 id="三、JDK并发工具"><a href="#三、JDK并发工具" class="headerlink" title="三、JDK并发工具"></a>三、JDK并发工具</h2><h4 id="1-线程池-ThreadPoolExecutor"><a href="#1-线程池-ThreadPoolExecutor" class="headerlink" title="1.线程池 ThreadPoolExecutor"></a>1.线程池 <code>ThreadPoolExecutor</code></h4><p><strong>使用线程池主要有以下三个原因</strong>：</p><ol><li>创建/销毁线程需要消耗系统资源，线程池可以<strong>复用已创建的线程</strong>。</li><li><strong>控制并发的数量</strong>。并发数量过多，可能会导致资源消耗过多，从而造成服务器崩溃。（主要原因）</li><li><strong>可以对线程做统一管理</strong>。</li></ol><p><strong>四种拒绝策略</strong>：（线程数量大于最大线程数就会采用拒绝处理策略）</p><ol><li><strong><code>ThreadPoolExecutor.AbortPolicy</code></strong>：<strong>默认拒绝处理策略</strong>，丢弃任务并抛出<code>RejectedExecutionException</code>异常。</li><li><strong><code>ThreadPoolExecutor.DiscardPolicy</code></strong>：丢弃新来的任务，但是不抛出异常。</li><li><strong><code>ThreadPoolExecutor.DiscardOldestPolicy</code></strong>：丢弃队列头部（最旧的）的任务，然后重新尝试执行程序（如果再次失败，重复此过程）。</li><li><strong><code>ThreadPoolExecutor.CallerRunsPolicy</code></strong>：由调用线程处理该任务。</li></ol><p><strong>四种常见线程池</strong>：</p><ol><li><code>CacheThreadPool</code> 核心线程数=0，全部是临时线程。</li><li><code>newFixedThreadPool</code> 核心线程数=最大线程数</li><li><code>newSingleThreadExecutor</code> 核心线程数=最大线程数=1</li><li><code>newScheduledThreadPool</code> 一个定长线程池</li></ol><h4 id="2-阻塞队列"><a href="#2-阻塞队列" class="headerlink" title="2.阻塞队列"></a>2.阻塞队列</h4><blockquote><p>源自生产者-消费者模式。</p><p>只管往里面存、取就行，而不用担心多线程环境下存、取共享变量的线程安全问题。</p></blockquote><ol><li><p><code>BlockingQueue</code>的操作方法</p><table><thead><tr><th align="center">方法\处理方式</th><th align="center">抛出异常</th><th align="center">返回特殊值</th><th align="center">一直阻塞</th><th align="center">超时退出</th></tr></thead><tbody><tr><td align="center">插入方法</td><td align="center">add(e)</td><td align="center">offer(e)</td><td align="center"><strong>put(e)</strong></td><td align="center">offer(e,time,unit)</td></tr><tr><td align="center">移除方法</td><td align="center">remove()</td><td align="center">poll()</td><td align="center"><strong>take()</strong></td><td align="center">poll(time,unit)</td></tr><tr><td align="center">检查方法</td><td align="center">element()</td><td align="center">peek()</td><td align="center">-</td><td align="center">-</td></tr></tbody></table></li><li><p><code>BlockingQueue</code>的实现类</p><ol><li><code>ArrayBlockingQueue</code>  由<strong>数组</strong>结构组成的<strong>有界</strong>阻塞队列。</li><li><code>LinkedBlockingQueue</code>  由<strong>链表</strong>结构组成的<strong>有界</strong>阻塞队列。</li><li><code>DelayQueue</code>  <strong>没有大小限制</strong>，只有当其指定的<strong>延迟时间</strong>到了，才能够从队列中获取到该元素 。</li><li><code>PriorityBlockingQueue</code>  优先队列，内部采用非公平锁</li><li><code>SynchronousQueue</code>   <strong>没有任何内部容量</strong>，并且每个 put 必须等待一个 take，反之亦然。</li></ol><p>对于无界队列：<strong>生产者生产数据的速度绝对不能快于消费者消费数据的速度，否则时间一长，会最终耗尽所有的可用堆内存空间。</strong></p></li><li><p>阻塞队列的原理</p></li></ol><ul><li>阻塞队列的原理很简单，利用了Lock锁的多条件（Condition）阻塞控制。</li></ul><h4 id="3-锁和接口类"><a href="#3-锁和接口类" class="headerlink" title="3.锁和接口类"></a>3.锁和接口类</h4><blockquote><p>Java原生的锁——基于对象的锁，它一般是配合synchronized关键字来使用的。</p><p>Java在<code>java.util.concurrent.locks</code>包下，还为我们提供了几个关于锁的类和接口。它们有更强大的功能或更高的性能。</p></blockquote><ol><li><h4 id="synchronized的不足："><a href="#synchronized的不足：" class="headerlink" title="synchronized的不足："></a>synchronized的不足：</h4><ul><li>无论读写，<strong>同一时间只能有一个线程执行</strong>。</li><li>无法知道线程有没有成功获取到锁</li><li>如果临界区因为IO或者sleep方法等原因阻塞了，而当前线程又没有释放锁，就会导致<strong>所有线程等待</strong>。</li></ul></li><li><h4 id="锁的几种分类："><a href="#锁的几种分类：" class="headerlink" title="锁的几种分类："></a>锁的几种分类：</h4><ol><li>可重入锁（<code>synchronized</code>、<code>ReentrantLock</code>）和 非可重入锁</li><li>公平锁与非公平锁  (<code>ReentrantLock</code>支持非公平锁和公平锁两种。)</li><li>读写锁和排它锁(<code>synchronized</code>、<code>ReentrantLock</code>）</li></ol></li><li><h4 id="JDK中有关锁的一些接口和类"><a href="#JDK中有关锁的一些接口和类" class="headerlink" title="JDK中有关锁的一些接口和类"></a>JDK中有关锁的一些接口和类</h4></li></ol><blockquote><p>JDK中关于并发的类大多都在<code>java.util.concurrent</code>（以下简称<code>juc</code>）包下。</p></blockquote><ol><li>抽象类AQS/AQLS/AOS</li><li>接口<code>Condition</code>/<code>Lock</code>/<code>ReadWriteLock</code>(读写锁)</li><li><code>ReentrantLock</code>可重入锁</li><li><code>ReentrantReadWriteLock</code>可重入读写锁</li><li><strong><code>StampedLock</code></strong> 基于无锁，性能之王</li></ol><h4 id="4-并发容器集合"><a href="#4-并发容器集合" class="headerlink" title="4.并发容器集合"></a>4.并发容器集合</h4><p>整体架构(列举常用的容器类)</p><p><img alt="整体架构" data-src="http://concurrent.redspider.group/article/03/imgs/%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8.png" class="lazyload"></p><p>大致分为：</p><ol><li>阻塞队列</li><li><code>CopyOnWrite</code>容器</li><li>并发Map、Set</li></ol><h4 id="5-CopyOnWrite"><a href="#5-CopyOnWrite" class="headerlink" title="5.CopyOnWrite"></a>5.CopyOnWrite</h4><blockquote><p><code>CopyOnWrite</code>容器即<strong>写时复制的容器</strong> ,适合读多写少,读不加锁</p></blockquote><p><code>CopyOnWrite</code>容器有<strong>数据一致性</strong>的问题，它只能保证<strong>最终数据一致性</strong>。</p><h4 id="6-通讯工具类"><a href="#6-通讯工具类" class="headerlink" title="6.通讯工具类"></a>6.通讯工具类</h4><blockquote><p>它们都在<code>java.util.concurrent</code>包下。</p></blockquote><table><thead><tr><th>类</th><th>作用</th></tr></thead><tbody><tr><td>Semaphore</td><td>限制线程的数量</td></tr><tr><td>Exchanger</td><td>两个线程交换数据</td></tr><tr><td>CountDownLatch</td><td>线程等待直到计数器减为0时开始工作</td></tr><tr><td>CyclicBarrier</td><td>作用跟CountDownLatch类似，但是可以重复使用</td></tr><tr><td>Phaser</td><td>增强的CyclicBarrier</td></tr></tbody></table><h4 id="7-Fork-Join框架"><a href="#7-Fork-Join框架" class="headerlink" title="7.Fork/Join框架"></a>7.Fork/Join框架</h4><blockquote><p><strong>分而治之</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">solve(任务):</span><br><span class="line">    if(任务已经划分到足够小):</span><br><span class="line">        顺序执行任务</span><br><span class="line">    else:</span><br><span class="line">        for(划分任务得到子任务)</span><br><span class="line">            solve(子任务)</span><br><span class="line">        结合所有子任务的结果到上一层循环</span><br><span class="line">        return 最终结合的结果</span><br></pre></td></tr></table></figure><h4 id="8-Java8-Stream并行计算原理"><a href="#8-Java8-Stream并行计算原理" class="headerlink" title="8.Java8 Stream并行计算原理"></a>8.Java8 Stream并行计算原理</h4><blockquote><p>从Java 8 开始，我们可以使用<code>Stream</code>接口以及<strong>lambda表达式</strong>进行“流式计算”。</p><p>它可以让我们对集合的操作更加简洁、更加可读、更加高效。</p><p>Stream接口有非常多用于集合计算的方法，比如判空操作empty、过滤操作filter、求最max值、查找操作findFirst和findAny等等。</p></blockquote><h4 id="9-计划任务"><a href="#9-计划任务" class="headerlink" title="9.计划任务"></a>9.计划任务</h4><blockquote><p>自JDK 1.5 开始，JDK提供了<code>ScheduledThreadPoolExecutor</code>类用于计划任务（又称定时任务）</p><p>内部使用优化的<code>DelayQueue</code>来实现</p></blockquote><p>这个类有两个用途：</p><ul><li>在给定的延迟之后运行任务</li><li>周期性重复执行任务</li></ul><hr><p>本文只是简要概括，详情查看：</p><p><a href="http://concurrent.redspider.group/" target="_blank" rel="noopener">深入浅出Java多线程</a><br><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1255943750561472" target="_blank" rel="noopener">廖雪峰的官网</a></p><p>《Java 并发编程的艺术》</p><p>《实战Java高并发程序设计》</p>]]></content>
      
      
      <categories>
          
          <category> java基础语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java注解</title>
      <link href="/2020/05/09/java%E6%B3%A8%E8%A7%A3/"/>
      <url>/2020/05/09/java%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>餐考资料：<br><a href="https://juejin.im/post/5b45bd715188251b3a1db54f" target="_blank" rel="noopener">注解解析</a><br><a href="https://juejin.im/post/5d81a92c518825280e3e40dd" target="_blank" rel="noopener">注解用途</a></p><h3 id="1-注解的实质"><a href="#1-注解的实质" class="headerlink" title="1.注解的实质"></a>1.注解的实质</h3><blockquote><p>所有的注解类型都继承自这个普通的接口（Annotation）</p></blockquote><p>如， @Override 的定义，其实它本质上就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface Override extends Annotation&#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-元注解"><a href="#2-元注解" class="headerlink" title="2.元注解"></a>2.元注解</h3><blockquote><p>『元注解』是用于修饰注解的注解，通常用在注解的定义上</p></blockquote><ul><li>@Target：注解的作用目标</li><li>@Retention：注解的生命周期</li><li>@Documented：注解是否应当被包含在 JavaDoc 文档中</li><li>@Inherited：是否允许子类继承该注解</li></ul><h5 id="Target-用于指明被修饰的注解最终可以作用的目标是谁，也就是指明，你的注解到底是用来修饰方法的？修饰类的？还是用来修饰字段属性的。"><a href="#Target-用于指明被修饰的注解最终可以作用的目标是谁，也就是指明，你的注解到底是用来修饰方法的？修饰类的？还是用来修饰字段属性的。" class="headerlink" title="@Target 用于指明被修饰的注解最终可以作用的目标是谁，也就是指明，你的注解到底是用来修饰方法的？修饰类的？还是用来修饰字段属性的。"></a>@Target 用于指明被修饰的注解最终可以作用的目标是谁，也就是指明，你的注解到底是用来修饰方法的？修饰类的？还是用来修饰字段属性的。</h5><p><img alt data-src="https://user-gold-cdn.xitu.io/2018/7/11/164886bda8c37809?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" class="lazyload"></p><p>我们可以通过以下的方式来为这个 value 传值：</p><blockquote><p>@Target(value = {ElementType.FIELD})</p></blockquote><p>被这个 @Target 注解修饰的注解将只能作用在成员字段上，不能用于修饰方法或者类。</p><p>其中，ElementType 是一个枚举类型，有以下一些值：</p><ul><li>ElementType.TYPE：允许被修饰的注解作用在类、接口和枚举上</li><li>ElementType.FIELD：允许作用在属性字段上</li><li>ElementType.METHOD：允许作用在方法上</li><li>ElementType.PARAMETER：允许作用在方法参数上</li><li>ElementType.CONSTRUCTOR：允许作用在构造器上</li><li>ElementType.LOCAL_VARIABLE：允许作用在本地局部变量上</li><li>ElementType.ANNOTATION_TYPE：允许作用在注解上</li><li>ElementType.PACKAGE：允许作用在包上</li></ul><h5 id="Retention-用于指明当前注解的生命周期"><a href="#Retention-用于指明当前注解的生命周期" class="headerlink" title="@Retention 用于指明当前注解的生命周期"></a>@Retention 用于指明当前注解的生命周期</h5><p><img alt data-src="https://user-gold-cdn.xitu.io/2018/7/11/164886bdb3a58c5f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" class="lazyload"></p><p>同样的，它也有一个 value 属性：</p><blockquote><p>@Retention(value = RetentionPolicy.RUNTIME</p></blockquote><p>RetentionPolicy 依然是一个枚举类型，它有以下几个枚举值可取：</p><ul><li>RetentionPolicy.SOURCE：当前注解编译期可见，不会写入 class 文件</li><li>RetentionPolicy.CLASS：类加载阶段丢弃，会写入 class 文件</li><li>RetentionPolicy.RUNTIME：永久保存，可以反射获取</li></ul><p>@Retention 注解指定了被修饰的注解的生命周期，</p><ol><li>是只能在编译期可见，编译后会被丢弃</li><li>会被编译器编译进 class 文件中，无论是类或是方法，乃至字段，他们都是有属性表的，而 JAVA 虚拟机也定义了几种注解属性表用于存储注解信息，但是这种可见性不能带到方法区，类加载时会予以丢弃</li><li>最后一种则是永久存在的可见性。</li></ol><h5 id="Documented-注解修饰的注解，当我们执行-JavaDoc-文档打包时会被保存进-doc-文档，反之将在打包时丢弃。"><a href="#Documented-注解修饰的注解，当我们执行-JavaDoc-文档打包时会被保存进-doc-文档，反之将在打包时丢弃。" class="headerlink" title="@Documented 注解修饰的注解，当我们执行 JavaDoc 文档打包时会被保存进 doc 文档，反之将在打包时丢弃。"></a>@Documented 注解修饰的注解，当我们执行 JavaDoc 文档打包时会被保存进 doc 文档，反之将在打包时丢弃。</h5><h5 id="Inherited-注解修饰的注解是具有可继承性的，也就说我们的注解修饰了一个类，而该类的子类将自动继承父类的该注解。"><a href="#Inherited-注解修饰的注解是具有可继承性的，也就说我们的注解修饰了一个类，而该类的子类将自动继承父类的该注解。" class="headerlink" title="@Inherited 注解修饰的注解是具有可继承性的，也就说我们的注解修饰了一个类，而该类的子类将自动继承父类的该注解。"></a>@Inherited 注解修饰的注解是具有可继承性的，也就说我们的注解修饰了一个类，而该类的子类将自动继承父类的该注解。</h5><h4 id="3-JAVA-的内置三大注解"><a href="#3-JAVA-的内置三大注解" class="headerlink" title="3.JAVA 的内置三大注解"></a>3.JAVA 的内置三大注解</h4><p>除了上述四种元注解外，JDK 还为我们预定义了另外三种注解，它们是：</p><ul><li>@Override</li><li>@Deprecated</li><li>@SuppressWarnings</li></ul><h5 id="Override-注解：该方法已被替代，它的定义如下："><a href="#Override-注解：该方法已被替代，它的定义如下：" class="headerlink" title="@Override 注解：该方法已被替代，它的定义如下："></a>@Override 注解：该方法已被替代，它的定义如下：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.METHOD)</span><br><span class="line">@Retention(RetentionPolicy.SOURCE)</span><br><span class="line">public @interface Override &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它没有任何的属性，所以并不能存储任何其他信息。它只能作用于方法之上，编译结束后将被丢弃。是一种典型的『标记式注解』，仅被编译器可知。</p><h5 id="Deprecated-：标记当前的类或者方法或者字段等已经不再被推荐使用了，可能下一次的-JDK-版本就会删除"><a href="#Deprecated-：标记当前的类或者方法或者字段等已经不再被推荐使用了，可能下一次的-JDK-版本就会删除" class="headerlink" title="@Deprecated ：标记当前的类或者方法或者字段等已经不再被推荐使用了，可能下一次的 JDK 版本就会删除"></a>@Deprecated ：标记当前的类或者方法或者字段等已经不再被推荐使用了，可能下一次的 JDK 版本就会删除</h5><p><img alt data-src="https://user-gold-cdn.xitu.io/2018/7/11/164886bdc54f9b3d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" class="lazyload"></p><h5 id="SuppressWarnings-主要用来压制-java-的警告，它的基本定义如下："><a href="#SuppressWarnings-主要用来压制-java-的警告，它的基本定义如下：" class="headerlink" title="@SuppressWarnings 主要用来压制 java 的警告，它的基本定义如下："></a>@SuppressWarnings 主要用来压制 java 的警告，它的基本定义如下：</h5><p><img alt data-src="https://user-gold-cdn.xitu.io/2018/7/11/164886bdbc0a6ae9?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" class="lazyload"><br>value 属性需要你主动的传值,这个 value 代表的就是需要被压制的警告类型。</p><h4 id="4-注解自定义及其应用"><a href="#4-注解自定义及其应用" class="headerlink" title="4.注解自定义及其应用"></a>4.注解自定义及其应用</h4><blockquote><p>只有@Retention定义为RetentionPolicy.RUNTIME时，我们才能通过注解反射获取到注解。</p></blockquote><h5 id="1-自定义一个注解"><a href="#1-自定义一个注解" class="headerlink" title="1.自定义一个注解"></a>1.自定义一个注解</h5><ol><li>自定义注解</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.FIELD)  //  注解用于字段上</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)  // 保留到运行时，可通过注解获取</span><br><span class="line">public @interface MyField &#123;</span><br><span class="line">    String description();</span><br><span class="line">    int length();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>通过反射获取注解</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class MyFieldTest &#123;</span><br><span class="line"></span><br><span class="line">    //使用我们的自定义注解</span><br><span class="line">    @MyField(description = &quot;用户名&quot;, length = 12)</span><br><span class="line">    private String username;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testMyField()&#123;</span><br><span class="line"></span><br><span class="line">        // 获取类模板</span><br><span class="line">        Class c = MyFieldTest.class;</span><br><span class="line"></span><br><span class="line">        // 获取所有字段</span><br><span class="line">        for(Field f : c.getDeclaredFields())&#123;</span><br><span class="line">            // 判断这个字段是否有MyField注解</span><br><span class="line">            if(f.isAnnotationPresent(MyField.class))&#123;</span><br><span class="line">                MyField annotation = f.getAnnotation(MyField.class);</span><br><span class="line">                System.out.println(&quot;字段:[&quot; + f.getName() + &quot;], 描述:[&quot; + annotation.description() + &quot;], 长度:[&quot; + annotation.length() +&quot;]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-应用场景一：自定义注解-拦截器-实现登录校验"><a href="#2-应用场景一：自定义注解-拦截器-实现登录校验" class="headerlink" title="2.应用场景一：自定义注解+拦截器 实现登录校验"></a>2.应用场景一：自定义注解+拦截器 实现登录校验</h5><ol><li>我们使用springboot拦截器实现这样一个功能，如果方法上加了@LoginRequired，则提示用户该接口需要登录才能访问，否则不需要登录。 首先定义一个LoginRequired注解</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.METHOD)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">public @interface LoginRequired &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>然后写两个简单的接口，访问sourceA，sourceB资源</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class IndexController &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/sourceA&quot;)</span><br><span class="line">    public String sourceA()&#123;</span><br><span class="line">        return &quot;你正在访问sourceA资源&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/sourceB&quot;)</span><br><span class="line">    public String sourceB()&#123;</span><br><span class="line">        return &quot;你正在访问sourceB资源&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>没添加拦截器之前成功访问</li><li>实现spring的HandlerInterceptor 类先实现拦截器，但不拦截，只是简单打印日志，如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class SourceAccessInterceptor implements HandlerInterceptor &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;进入拦截器了&quot;);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>实现spring类WebMvcConfigurer，创建配置类把拦截器添加到拦截器链中</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class InterceptorTrainConfigurer implements WebMvcConfigurer &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void addInterceptors(InterceptorRegistry registry) &#123;</span><br><span class="line">        registry.addInterceptor(new SourceAccessInterceptor()).addPathPatterns(&quot;/**&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时拦截成功！</p><ol start="6"><li>在sourceB方法上添加我们的登录注解@LoginRequired</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class IndexController &#123;</span><br><span class="line">    @GetMapping(&quot;/sourceA&quot;)</span><br><span class="line">    public String sourceA()&#123;</span><br><span class="line">        return &quot;你正在访问sourceA资源&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    @LoginRequired</span><br><span class="line">    @GetMapping(&quot;/sourceB&quot;)</span><br><span class="line">    public String sourceB()&#123;</span><br><span class="line">        return &quot;你正在访问sourceB资源&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>简单实现登录拦截逻辑</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class="line">    System.out.println(&quot;进入拦截器了&quot;);</span><br><span class="line"></span><br><span class="line">    // 反射获取方法上的LoginRequred注解</span><br><span class="line">    HandlerMethod handlerMethod = (HandlerMethod)handler;</span><br><span class="line">    LoginRequired loginRequired = handlerMethod.getMethod().getAnnotation(LoginRequired.class);</span><br><span class="line">    if(loginRequired == null)&#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 有LoginRequired注解说明需要登录，提示用户登录</span><br><span class="line">    response.setContentType(&quot;application/json; charset=utf-8&quot;);</span><br><span class="line">    response.getWriter().print(&quot;你访问的资源需要登录&quot;);</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行成功，访问sourceB时需要登录了，访问sourceA则不用登录</p><h5 id="3-应用场景二：自定义注解-AOP-实现日志打印"><a href="#3-应用场景二：自定义注解-AOP-实现日志打印" class="headerlink" title="3.应用场景二：自定义注解+AOP 实现日志打印"></a>3.应用场景二：自定义注解+AOP 实现日志打印</h5><ol><li>先导入切面需要的依赖包</li><li>定义一个注解@MyLog</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.METHOD)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">public @interface MyLog &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>定义一个切面类，见如下代码注释理解：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">@Aspect // 1.表明这是一个切面类</span><br><span class="line">@Component</span><br><span class="line">public class MyLogAspect &#123;</span><br><span class="line"></span><br><span class="line">    // 2. PointCut表示这是一个切点，@annotation表示这个切点切到一个注解上，后面带该注解的全类名</span><br><span class="line">    // 切面最主要的就是切点，所有的故事都围绕切点发生</span><br><span class="line">    // logPointCut()代表切点名称</span><br><span class="line">    @Pointcut(&quot;@annotation(me.zebin.demo.annotationdemo.aoplog.MyLog)&quot;)</span><br><span class="line">    public void logPointCut()&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    // 3. 环绕通知</span><br><span class="line">    @Around(&quot;logPointCut()&quot;)</span><br><span class="line">    public void logAround(ProceedingJoinPoint joinPoint)&#123;</span><br><span class="line">        // 获取方法名称</span><br><span class="line">        String methodName = joinPoint.getSignature().getName();</span><br><span class="line">        // 获取入参</span><br><span class="line">        Object[] param = joinPoint.getArgs();</span><br><span class="line"></span><br><span class="line">        StringBuilder sb = new StringBuilder();</span><br><span class="line">        for(Object o : param)&#123;</span><br><span class="line">            sb.append(o + &quot;; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;进入[&quot; + methodName + &quot;]方法,参数为:&quot; + sb.toString());</span><br><span class="line"></span><br><span class="line">        // 继续执行方法</span><br><span class="line">        try &#123;</span><br><span class="line">            joinPoint.proceed();</span><br><span class="line">        &#125; catch (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(methodName + &quot;方法执行结束&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>在步骤二中的IndexController写一个sourceC进行测试，加上我们的自定义注解：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@MyLog</span><br><span class="line">@GetMapping(&quot;/sourceC/&#123;source_name&#125;&quot;)</span><br><span class="line">public String sourceC(@PathVariable(&quot;source_name&quot;) String sourceName)&#123;</span><br><span class="line">    return &quot;你正在访问sourceC资源&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>启动springboot web项目，输入访问地址</li></ol>]]></content>
      
      
      <categories>
          
          <category> java基础语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划模板</title>
      <link href="/2020/05/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%A8%A1%E6%9D%BF/"/>
      <url>/2020/05/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h3 id="动态规划分类："><a href="#动态规划分类：" class="headerlink" title="动态规划分类："></a>动态规划分类：</h3><ol><li>线性dp</li><li>区间dp</li><li>背包dp</li><li>树形dp</li><li>状态压缩dp</li><li>数位dp</li><li>计数型dp</li><li>递推型dp</li><li>概率型dp</li><li>博弈型dp</li><li>记忆化搜索</li></ol><h4 id="动态规划思考方式："><a href="#动态规划思考方式：" class="headerlink" title="动态规划思考方式："></a>动态规划思考方式：</h4><p><img alt data-src="https://pic.downk.cc/item/5ea395e3c2a9a83be5423f5e.png" class="lazyload"></p><h4 id="1-线性dp"><a href="#1-线性dp" class="headerlink" title="1.线性dp"></a>1.线性dp</h4><ul><li><p>线性 DP 问题是指递推方程具有明显的线性关系，有一维线性和二维线性。</p></li><li><p>如：</p></li></ul><ol><li><a href="https://leetcode-cn.com/problems/triangle/" target="_blank" rel="noopener">三角形最小路径和</a></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public int minimumTotal(List&lt;List&lt;Integer&gt;&gt; triangle) &#123;</span><br><span class="line">    int len = triangle.size();</span><br><span class="line">    int[] dp = new int[len+1];</span><br><span class="line">    for (int i = len-1; i &gt;=0 ; i--) &#123;</span><br><span class="line">        for (int j = 0; j &lt;=i ; j++) &#123;</span><br><span class="line">            int num = triangle.get(i).get(j);</span><br><span class="line">            dp[j] = Math.min(dp[j],dp[j+1]) + num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return dp[0];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/" target="_blank" rel="noopener">最长上升子序列</a></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public int lengthOfLIS(int[] nums) &#123;</span><br><span class="line">    int max = 0;</span><br><span class="line">    int[] dp = new int[nums.length];</span><br><span class="line">    for (int i = 0; i &lt; nums.length; i++) &#123;</span><br><span class="line">        int count = 0;</span><br><span class="line">        for (int j = 0; j &lt;i ; j++) &#123;</span><br><span class="line">            if(nums[j] &lt; nums[i] &amp;&amp; dp[j] &gt; count) count = dp[j];</span><br><span class="line">        &#125;</span><br><span class="line">        dp[i] = count + 1;</span><br><span class="line">        if(max &lt; dp[i]) max = dp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><a href="https://leetcode-cn.com/problems/longest-common-subsequence/" target="_blank" rel="noopener">最长公共子序列</a></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public int longestCommonSubsequence(String text1, String text2) &#123;</span><br><span class="line">    int n = text1.length();</span><br><span class="line">    int m = text2.length();</span><br><span class="line">    int[][] dp = new int[n+1][m+1];</span><br><span class="line">    for (int i = 1; i &lt;=n ; i++) &#123;</span><br><span class="line">        for (int j = 1; j &lt;=m ; j++) &#123;</span><br><span class="line">            if(text1.charAt(i-1) == text2.charAt(j-1)) dp[i][j] = dp[i-1][j-1] +1;</span><br><span class="line">            else dp[i][j] = Math.max(dp[i-1][j],dp[i][j-1]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return dp[n][m];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-区间dp"><a href="#2-区间dp" class="headerlink" title="2.区间dp"></a>2.区间dp</h4><ul><li>区间DP 问题是指递推方程具有明显的区间关系，有左端点和右端点。</li><li>如：</li></ul><ol><li><a href="https://leetcode-cn.com/problems/longest-palindromic-subsequence/" target="_blank" rel="noopener">最长回文子序列</a></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public static int longestPalindromeSubseq(String s) &#123;</span><br><span class="line">    int len = s.length();</span><br><span class="line">    char[] chars = s.toCharArray();</span><br><span class="line">    int[][] dp = new int[len][len];</span><br><span class="line">    for (int i = len-1; i &gt;=0; i--) dp[i][i] = 1;    //base case</span><br><span class="line">    for (int i = len-1; i &gt;=0; i--) &#123;</span><br><span class="line">        for (int j = i+1; j &lt;len ; j++) &#123;</span><br><span class="line">            if(chars[i] == chars[j]) dp[i][j] = dp[i+1][j-1]+2;</span><br><span class="line">            else dp[i][j] = Math.max(dp[i+1][j],dp[i][j-1]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return dp[0][len-1];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-背包dp"><a href="#3-背包dp" class="headerlink" title="3.背包dp"></a>3.背包dp</h4><ul><li>背包DP 问题是指递推方程具有明显的限制条件</li><li>在N中情况中 且满足某条件的 情况下 最优的选择情况</li><li>如在背包重量不超过w的情况下，从N中物品中选择出 最有价值的物品 （01背包）</li><li>详情参考 背包模板</li></ul><h4 id="4-树形dp"><a href="#4-树形dp" class="headerlink" title="4.树形dp"></a>4.树形dp</h4><ul><li>在树的结构上求解问题，大部分可以直接用递归+记忆化解决</li><li>如果有明显的递推关系，可以尝试使用递推+递归 直接消除子问题区间的重复计算 即树形dp</li><li>如：</li></ul><ol><li><a href="https://leetcode-cn.com/problems/house-robber-iii/" target="_blank" rel="noopener">打家劫舍 III</a></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public int rob(TreeNode root) &#123;</span><br><span class="line">    int[] res = dfs(root);</span><br><span class="line">    return Math.max(res[0],res[1]);</span><br><span class="line">&#125;</span><br><span class="line">//0 代表不偷，1 代表偷</span><br><span class="line">public int[] dfs(TreeNode root) &#123;</span><br><span class="line">    if(root == null) return new int[]&#123;0,0&#125;;</span><br><span class="line">    int[] res = &#123;0,0&#125;;</span><br><span class="line">    int[] left = dfs(root.left);</span><br><span class="line">    int[] right = dfs(root.right);</span><br><span class="line">    res[0] = Math.max(left[0],left[1]) + Math.max(right[0],right[1]);</span><br><span class="line">    res[1] = left[0] + right[0] + root.val;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-状压dp"><a href="#5-状压dp" class="headerlink" title="5.状压dp"></a>5.状压dp</h4><h5 id="1-对于n个元素选与不选2种状态的问题（位运算）"><a href="#1-对于n个元素选与不选2种状态的问题（位运算）" class="headerlink" title="1. 对于n个元素选与不选2种状态的问题（位运算）"></a>1. 对于n个元素选与不选2种状态的问题（位运算）</h5><ul><li>用2^n表示所有状态，第i位的状态 对应二进制数 第i位是0 还是1</li></ul><p><img alt data-src="https://pic.downk.cc/item/5eb22c30c2a9a83be5b29bae.png" class="lazyload"></p><h5 id="2-对于n个元素k种状态的问题（幂运算或累乘）"><a href="#2-对于n个元素k种状态的问题（幂运算或累乘）" class="headerlink" title="2. 对于n个元素k种状态的问题（幂运算或累乘）"></a>2. 对于n个元素k种状态的问题（幂运算或累乘）</h5><ul><li>1.如果每种物品选择的数量是相同的 m种状态，可用m^n表示所有状态</li></ul><p><img alt data-src="https://pic.downk.cc/item/5eb22c30c2a9a83be5b29bae.png" class="lazyload"></p><ul><li>2.如果每种物品的选择数量不同<br>： 无论如何都要让每一种状态与一个数字一一对应</li></ul><ul><li>如：</li></ul><ol><li><a href="https://leetcode-cn.com/problems/beautiful-arrangement/" target="_blank" rel="noopener">526. 优美的排列</a></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public int countArrangement(int N) &#123;</span><br><span class="line">    int dp[]=new int[1&lt;&lt;N];</span><br><span class="line">    dp[0]=1;</span><br><span class="line">    for(int i=0;i&lt;dp.length;i++)&#123;</span><br><span class="line">        int len=1;</span><br><span class="line">        for(int j=0;j&lt;N;j++)</span><br><span class="line">            len+=i&gt;&gt;j&amp;1;</span><br><span class="line">        for(int j=1;j&lt;=N;j++)&#123;</span><br><span class="line">            if((i &gt;&gt; (j - 1) &amp; 1)==0&amp;&amp; (j % len == 0 || len % j == 0)) &#123;</span><br><span class="line">                dp[i | (1 &lt;&lt; j - 1)] += dp[i];   // 或运算，进行状态转移</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return dp[(1&lt;&lt;N)-1];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-数位-DP"><a href="#6-数位-DP" class="headerlink" title="6.数位 DP"></a>6.数位 DP</h4><ul><li>给定一个闭区间[l,r]，求这个区间中满足某种条件的数的总量</li></ul><h4 id="7-计数型-DP"><a href="#7-计数型-DP" class="headerlink" title="7.计数型 DP"></a>7.计数型 DP</h4><ul><li><p>计数型DP都可以以组合数学的方法写出组合数，然后dp求组合数</p></li><li><p>如：</p></li></ul><p><a href="https://leetcode-cn.com/problems/unique-paths/" target="_blank" rel="noopener">62. 不同路径 I</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static int uniquePaths(int m, int n) &#123;</span><br><span class="line">    int[][] dp = new int[m+1][n+1];</span><br><span class="line">    dp[1][1] = 1;</span><br><span class="line">    for (int i = 1; i &lt;=m ; i++) &#123;</span><br><span class="line">        for (int j = 1; j &lt;=n ; j++) &#123;</span><br><span class="line">            dp[i][j] += dp[i-1][j] + dp[i][j-1];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return dp[m][n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode-cn.com/problems/unique-paths-ii/" target="_blank" rel="noopener">63. 不同路径 II</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public int uniquePathsWithObstacles(int[][] grid) &#123;</span><br><span class="line">    int[][] dp = new int[grid.length+1][grid[0].length+1];</span><br><span class="line">    if(grid[0][0] == 1) return 0;</span><br><span class="line">    dp[1][1] = 1;</span><br><span class="line">    for (int i = 1; i &lt;=grid.length ; i++) &#123;</span><br><span class="line">        for (int j = 1; j &lt;=grid[0].length ; j++) &#123;</span><br><span class="line">            if(grid[i-1][j-1] == 0) dp[i][j] += dp[i-1][j] + dp[i][j-1];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return dp[grid.length][grid[0].length];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-递推型-DP"><a href="#8-递推型-DP" class="headerlink" title="8.递推型 DP"></a>8.递推型 DP</h4><ul><li><p>所有线性递推关系都可以用矩阵快速幂做，可以O(logN)，最典型是斐波那契数列</p></li><li><p>如：</p></li></ul><p><a href="https://leetcode-cn.com/problems/climbing-stairs/" target="_blank" rel="noopener">70. 爬楼梯</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> public int climbStairs(int n) &#123;</span><br><span class="line">    int tmp = 0;</span><br><span class="line">    int a = 1;</span><br><span class="line">    int b = 2;</span><br><span class="line">    if(n == 1) tmp = 1;</span><br><span class="line">    if(n == 2) tmp = 2;    </span><br><span class="line">    for(int i=3;i&lt;=n;i++)&#123;</span><br><span class="line">        tmp = a+b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = tmp;     </span><br><span class="line">    &#125;</span><br><span class="line">    return tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-概率型-DP"><a href="#9-概率型-DP" class="headerlink" title="9.概率型 DP"></a>9.概率型 DP</h4><ul><li><p>给定一些的事件及其发生的概率问在某个条件下发生的概率 且这些事件之间有递推关系</p></li><li><p>看似可以用dfs也能用dp，但要注意概率型问题都有一个精度边界</p></li></ul><ul><li>如：</li></ul><p><a href="https://leetcode-cn.com/problems/soup-servings/" target="_blank" rel="noopener">808. 分汤</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public double soupServings(int N) &#123;</span><br><span class="line">    if(N&gt;=4800) return 1.0;</span><br><span class="line">    int n = (int) Math.ceil(N/25.0);</span><br><span class="line">    double[][] dp = new double[n+1][n+1];</span><br><span class="line">    dp[0][0] = 0.5;</span><br><span class="line">    for (int i = 1; i &lt;= n ; i++) &#123;</span><br><span class="line">        dp[i][0] = 0;</span><br><span class="line">        dp[0][i] = 1;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = 1; i &lt;= n; ++i)&#123;</span><br><span class="line">        int a1 = i - 4 &gt; 0 ? i - 4 : 0;//不足4，按4算（实际上是不足100，按100算，然后分配完了，没有剩余）</span><br><span class="line">        int a2 = i - 3 &gt; 0 ? i - 3 : 0;//不足3，按3算（实际上是不足75，按75算，然后分配完了，没有剩余）</span><br><span class="line">        int a3 = i - 2 &gt; 0 ? i - 2 : 0;//不足2，按2算（实际上是不足50，按75算，然后分配完了，没有剩余）</span><br><span class="line">        int a4 = i - 1 &gt; 0 ? i - 1 : 0;//不足1，按1算（实际上是不足25，按25算，然后分配完了，没有剩余）</span><br><span class="line">        for(int j = 1; j &lt;= n; ++j) &#123;</span><br><span class="line">            int b1 = j;</span><br><span class="line">            int b2 = j - 1 &gt; 0 ? j - 1 : 0;//不足1，按1算（实际上是不足25，按25算，然后分配完了，没有剩余）</span><br><span class="line">            int b3 = j - 2 &gt; 0 ? j - 2 : 0;//不足2，按2算（实际上是不足50，按75算，然后分配完了，没有剩余）</span><br><span class="line">            int b4 = j - 3 &gt; 0 ? j - 3 : 0;//不足3，按3算（实际上是不足75，按75算，然后分配完了，没有剩余）</span><br><span class="line">            //状态转移方程：dp[i][j] = 0.25 * (dp[i-100][j] + dp[i-75][j-25] + dp[i-50][j-50] + dp[i-75][j-25])</span><br><span class="line">            //将N缩小为原来的25分之一的转移方程：dp[i][j] = 0.25 * (dp[i-4][j] + dp[i-3][j-1] + dp[i-2][j-2] + dp[i-3][j-1])</span><br><span class="line">            dp[i][j]= 0.25 * (dp[a1][b1] + dp[a2][b2] + dp[a3][b3] + dp[a4][b4]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return dp[n][n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dfs解法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">static Map&lt;String,Double&gt; map;</span><br><span class="line">public double soupServings(int N) &#123;</span><br><span class="line">    if(N&gt;=4800) return 1;</span><br><span class="line">    map = new HashMap&lt;&gt;();</span><br><span class="line">    int n = (int) Math.ceil(N/25.0);</span><br><span class="line">    return dfs(n,n);</span><br><span class="line">&#125;</span><br><span class="line">public static double dfs(int i,int j)&#123;</span><br><span class="line">    if(i&lt;=0 &amp;&amp; j&lt;=0) return 0.5;</span><br><span class="line">    else if(i&lt;=0 &amp;&amp; j&gt;0) return 1;</span><br><span class="line">    else if(i&gt;0 &amp;&amp; j&lt;=0) return 0;</span><br><span class="line">    else if(map.containsKey(i + &quot; &quot; + j)) return map.get(i + &quot; &quot; + j);</span><br><span class="line">    else&#123;</span><br><span class="line">        double sum = 0.25*(dfs(i-4,j)+dfs(i-3,j-1)+</span><br><span class="line">                dfs(i-2,j-2)+dfs(i-1,j-3));</span><br><span class="line">        map.put(i + &quot; &quot; + j,sum);</span><br><span class="line">        return sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode-cn.com/problems/new-21-game/" target="_blank" rel="noopener">837. 新21点</a><br>反向递推</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public double new21Game(int N, int K, int W) &#123;</span><br><span class="line">    double[] dp = new double[N+W+1];</span><br><span class="line">    for (int i = K; i &lt;=N ; i++) dp[i] = 1;</span><br><span class="line">    double sum = 0;</span><br><span class="line">    for (int i = 0; i &lt;W ; i++) sum += dp[K+i];</span><br><span class="line">    for (int i = K-1; i &gt;=0 ; i--) &#123;</span><br><span class="line">        dp[i] = sum/W;</span><br><span class="line">        sum += dp[i] - dp[i+W];</span><br><span class="line">    &#125;</span><br><span class="line">    return dp[0];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面待更新….</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯模板</title>
      <link href="/2020/04/25/%E5%9B%9E%E6%BA%AF%E6%A8%A1%E6%9D%BF/"/>
      <url>/2020/04/25/%E5%9B%9E%E6%BA%AF%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">result = []</span><br><span class="line">def backtrack(路径, 选择列表):</span><br><span class="line">    if 满足结束条件:</span><br><span class="line">        result.add(路径)</span><br><span class="line">        return</span><br><span class="line">    </span><br><span class="line">    for 选择 in 选择列表:</span><br><span class="line">        做选择</span><br><span class="line">        backtrack(路径, 选择列表)</span><br><span class="line">        撤销选择</span><br></pre></td></tr></table></figure><p>如LeetCode第46题，<a href="https://leetcode-cn.com/problems/permutations/comments/" target="_blank" rel="noopener">全排列</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">static List&lt;List&lt;Integer&gt;&gt; res;</span><br><span class="line">public List&lt;List&lt;Integer&gt;&gt; permute(int[] nums) &#123;</span><br><span class="line">    res = new ArrayList&lt;&gt;();</span><br><span class="line">    dfs(nums,new ArrayList&lt;&gt;(),new boolean[nums.length]);</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line">public static void dfs(int[] nums,List&lt;Integer&gt; tmp,boolean[] visd)&#123;</span><br><span class="line">    if(tmp.size()== nums.length) &#123;</span><br><span class="line">        res.add(new ArrayList&lt;&gt;(tmp));</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = 0; i &lt;nums.length ; i++) &#123;</span><br><span class="line">        if(visd[i]) continue;</span><br><span class="line">        visd[i] = true;     // 标记 去重</span><br><span class="line">        tmp.add(nums[i]);</span><br><span class="line">        dfs(nums,tmp,visd);</span><br><span class="line">        visd[i] = false;    // 解除标记，恢复现场</span><br><span class="line">        tmp.remove(tmp.size()-1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot定时任务@Scheduled</title>
      <link href="/2019/12/26/Springboot%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-Scheduled/"/>
      <url>/2019/12/26/Springboot%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-Scheduled/</url>
      
        <content type="html"><![CDATA[<h2 id="Springboot定时任务-Scheduled"><a href="#Springboot定时任务-Scheduled" class="headerlink" title="Springboot定时任务@Scheduled"></a>Springboot定时任务@Scheduled</h2><ul><li>项目开发中经常需要执行一些定时任务，比如在每天凌晨，需要汇总分析处理一些数据 后存入到 MySQL 数据库中。</li></ul><h3 id="Java-定时任务的几种实现方式"><a href="#Java-定时任务的几种实现方式" class="headerlink" title="Java 定时任务的几种实现方式"></a>Java 定时任务的几种实现方式</h3><ul><li>基于 java.util.Timer 定时器，实现类似闹钟的定时任务</li><li>使用 Quartz、elastic-job、xxl-job 等开源第三方定时任务框架，适合分布式项目应用</li><li>使用 Spring 提供的一个注解： @Schedule，开发简单，使用比较方便，也是本文介绍的一种方式</li></ul><h3 id="创建定时任务"><a href="#创建定时任务" class="headerlink" title="创建定时任务"></a>创建定时任务</h3><ol><li>首先，在项目启动类上添加 @EnableScheduling 注解，开启对定时任务的支持</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableScheduling</span><br><span class="line">public class ScheduledApplication &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(ScheduledApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>其次，编写定时任务类和方法，定时任务类通过 Spring IOC 加载，使用 @Component 注解，定时方法使用 @Scheduled 注解。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class ScheduledTask &#123;</span><br><span class="line">    @Scheduled(fixedRate = 3000)</span><br><span class="line">    public void scheduledTask() &#123;</span><br><span class="line">        System.out.println(&quot;任务执行时间：&quot; + LocalDateTime.now());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>fixedRate 是 long 类型，表示任务执行的间隔毫秒数，以上代码中的定时任务每 3 秒执行一次。</li></ul><h3 id="Scheduled详解"><a href="#Scheduled详解" class="headerlink" title="@Scheduled详解"></a>@Scheduled详解</h3><p>在上面的入门例子中，使用了@Scheduled(fixedRate = 3000) 注解来定义每过 3 秒执行的任务，对于 @Scheduled 的使用可以总结如下几种方式：</p><ul><li>@Scheduled(fixedRate = 3000) ：上一次开始执行时间点之后 3 秒再执行（fixedRate 属性：定时任务开始后再次执行定时任务的延时（需等待上次定时任务完成），单位毫秒）</li><li>@Scheduled(fixedDelay = 3000) ：上一次执行完毕时间点之后 3 秒再执行（fixedDelay 属性：定时任务执行完成后再次执行定时任务的延时（需等待上次定时任务完成），单位毫秒）</li><li>@Scheduled(initialDelay = 1000, fixedRate = 3000) ：第一次延迟1秒后执行，之后按fixedRate的规则每 3 秒执行一次（initialDelay 属性：第一次执行定时任务的延迟时间，需配合fixedDelay或者fixedRate来使用）</li><li>@Scheduled(cron=”0 0 2 1 * ? *”) ：通过cron表达式定义规则</li></ul><p>其中，常用的cron表达式有：</p><ul><li>0 0 2 1 * ? * ：表示在每月 1 日的凌晨 2 点执行</li><li>0 15 10 ? * MON-FRI ：表示周一到周五每天上午 10:15 执行</li><li>0 15 10 ? 6L 2019-2020 ：表示 2019-2020 年的每个月的最后一个星期五上午 10:15 执行</li><li>0 0 10,14,16 * * ? ：每天上午 10 点，下午 2 点，4 点执行</li><li>0 0/30 9-17 * * ? ：朝九晚五工作时间内每半小时执行</li><li>0 0 12 ? * WED ：表示每个星期三中午 12 点执行</li><li>0 0 12 * * ? ：每天中午 12点执行</li><li>0 15 10 ? * * ：每天上午 10:15 执行</li><li>0 15 10 * * ? ：每天上午 10:15 执行</li><li>0 15 10 * * ? * ：每天上午 10:15 执行</li><li>0 15 10 * * ? 2019 ：2019 年的每天上午 10:15 执行</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文主要介绍了基于 Spring Boot 内置的定时任务的配置使用，主要涉及两个注解，四个属性的配置：</p><ul><li>主程序入口 @EnableScheduling 开启定时任务</li><li>定时方法上 @Scheduled 设置定时</li><li>cron属性：按cron规则执行</li><li>fixedRate 属性：以固定速率执行</li><li>fixedDelay 属性：上次执行完毕后延迟再执行</li><li>initialDelay 属性：第一次延时执行，第一次执行完毕后延迟后再次执行</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 定时任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot整合异步邮件服务</title>
      <link href="/2019/12/26/Springboot%E6%95%B4%E5%90%88%E5%BC%82%E6%AD%A5%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1/"/>
      <url>/2019/12/26/Springboot%E6%95%B4%E5%90%88%E5%BC%82%E6%AD%A5%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="Springboot整合异步邮件服务"><a href="#Springboot整合异步邮件服务" class="headerlink" title="Springboot整合异步邮件服务"></a>Springboot整合异步邮件服务</h2><ul><li>在很多场景都需要使用到用户和系统的其他交互如：验证码。。。此时可以选择短信或者邮件的形式，但是短信业务需要收费，所以我们就近选择邮件服务</li></ul><h3 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--spring boot mail 集成jar--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="2-配置邮件服务"><a href="#2-配置邮件服务" class="headerlink" title="2.配置邮件服务"></a>2.配置邮件服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 邮件设置</span><br><span class="line">spring:</span><br><span class="line">  mail:</span><br><span class="line">    host: smtp.qq.com</span><br><span class="line">    username: 1447250889@qq.com # 邮箱账号</span><br><span class="line">    password: dsadadasdada    # 授权码（在邮箱开启pop3和smtp后会给你）</span><br><span class="line">    properties:</span><br><span class="line">      mail:</span><br><span class="line">        smtp:</span><br><span class="line">          auth: true</span><br><span class="line">          starttls:</span><br><span class="line">            enable: true</span><br><span class="line">            required: true</span><br><span class="line"># 邮箱信息</span><br><span class="line">mail:</span><br><span class="line">  fromMail:</span><br><span class="line">    addr: 1447250889@qq.com</span><br></pre></td></tr></table></figure><h3 id="3-邮箱工具类"><a href="#3-邮箱工具类" class="headerlink" title="3.邮箱工具类"></a>3.邮箱工具类</h3><ul><li>提供各种邮件服务：纯文本邮件，html邮件…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line">package kid1999.upload.utils;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class="line">import org.springframework.core.io.FileSystemResource;</span><br><span class="line">import org.springframework.mail.SimpleMailMessage;</span><br><span class="line">import org.springframework.mail.javamail.JavaMailSender;</span><br><span class="line">import org.springframework.mail.javamail.MimeMessageHelper;</span><br><span class="line">import org.springframework.scheduling.annotation.Async;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import javax.mail.MessagingException;</span><br><span class="line">import javax.mail.internet.MimeMessage;</span><br><span class="line">import java.io.File;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kid1999</span><br><span class="line"> * @title: MailUtil</span><br><span class="line"> * @date 2019/12/22 15:32</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">@Slf4j</span><br><span class="line">public class MailUtil &#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private JavaMailSender mailSender;</span><br><span class="line"></span><br><span class="line">// 注入常量</span><br><span class="line">@Value(&quot;$&#123;mail.fromMail.addr&#125;&quot;)</span><br><span class="line">private String from;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 发送文本邮件</span><br><span class="line"> * @param toAddr</span><br><span class="line"> * @param title</span><br><span class="line"> * @param content</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@Async(&quot;taskExecutor&quot;)</span><br><span class="line">public void sendTextMail(String toAddr, String title, String content) &#123;</span><br><span class="line">// 纯文本邮件对象</span><br><span class="line">SimpleMailMessage message = new SimpleMailMessage();</span><br><span class="line">message.setFrom(from);</span><br><span class="line">message.setTo(toAddr);</span><br><span class="line">message.setSubject(title);</span><br><span class="line">message.setText(content);</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">mailSender.send(message);</span><br><span class="line">log.info(&quot;Text邮件已经发送。&quot;);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">log.error(&quot;发送Text邮件时发生异常！&quot;, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 发送html邮件</span><br><span class="line"> * @param toAddr</span><br><span class="line"> * @param title</span><br><span class="line"> * @param content</span><br><span class="line"> */</span><br><span class="line">@Async(&quot;taskExecutor&quot;)</span><br><span class="line">public void sendHtmlMail(String toAddr, String title, String content) &#123;</span><br><span class="line">// html 邮件对象</span><br><span class="line">MimeMessage message = mailSender.createMimeMessage();</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">//true表示需要创建一个multipart message</span><br><span class="line">MimeMessageHelper helper = new MimeMessageHelper(message, true);</span><br><span class="line">helper.setFrom(from);</span><br><span class="line">helper.setTo(toAddr);</span><br><span class="line">helper.setSubject(title);</span><br><span class="line">helper.setText(content, true);</span><br><span class="line"></span><br><span class="line">mailSender.send(message);</span><br><span class="line">log.info(&quot;html邮件发送成功&quot;);</span><br><span class="line">&#125; catch (MessagingException e) &#123;</span><br><span class="line">log.error(&quot;发送html邮件时发生异常！&quot;, e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 发送带附件的邮件</span><br><span class="line"> * @param toAddr</span><br><span class="line"> * @param title</span><br><span class="line"> * @param content</span><br><span class="line"> * @param filePath</span><br><span class="line"> */</span><br><span class="line">@Async(&quot;taskExecutor&quot;)</span><br><span class="line">public void sendAttachmentsMail(String toAddr, String title, String content, String filePath)&#123;</span><br><span class="line">MimeMessage message = mailSender.createMimeMessage();</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">MimeMessageHelper helper = new MimeMessageHelper(message, true);</span><br><span class="line">helper.setFrom(from);</span><br><span class="line">helper.setTo(toAddr);</span><br><span class="line">helper.setSubject(title);</span><br><span class="line">helper.setText(content, true);</span><br><span class="line"></span><br><span class="line">FileSystemResource file = new FileSystemResource(new File(filePath));</span><br><span class="line">String fileName = filePath.substring(filePath.lastIndexOf(File.separator));</span><br><span class="line">helper.addAttachment(fileName, file);</span><br><span class="line">//helper.addAttachment(&quot;test&quot;+fileName, file);</span><br><span class="line"></span><br><span class="line">mailSender.send(message);</span><br><span class="line">log.info(&quot;带附件的邮件已经发送。&quot;);</span><br><span class="line">&#125; catch (MessagingException e) &#123;</span><br><span class="line">log.error(&quot;发送带附件的邮件时发生异常！&quot;, e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 发送正文中有静态资源（图片）的邮件</span><br><span class="line"> * @param toAddr</span><br><span class="line"> * @param title</span><br><span class="line"> * @param content</span><br><span class="line"> * @param rscPath</span><br><span class="line"> * @param rscId</span><br><span class="line"> */</span><br><span class="line">@Async(&quot;taskExecutor&quot;)</span><br><span class="line">public void sendInlineResourceMail(String toAddr, String title, String content, String rscPath, String rscId)&#123;</span><br><span class="line">MimeMessage message = mailSender.createMimeMessage();</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">MimeMessageHelper helper = new MimeMessageHelper(message, true);</span><br><span class="line">helper.setFrom(from);</span><br><span class="line">helper.setTo(toAddr);</span><br><span class="line">helper.setSubject(title);</span><br><span class="line">helper.setText(content, true);</span><br><span class="line"></span><br><span class="line">FileSystemResource res = new FileSystemResource(new File(rscPath));</span><br><span class="line">helper.addInline(rscId, res);</span><br><span class="line"></span><br><span class="line">mailSender.send(message);</span><br><span class="line">log.info(&quot;嵌入静态资源的邮件已经发送。&quot;);</span><br><span class="line">&#125; catch (MessagingException e) &#123;</span><br><span class="line">log.error(&quot;发送嵌入静态资源的邮件时发生异常！&quot;, e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 发送邮箱验证码</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@Async(&quot;taskExecutor&quot;)</span><br><span class="line">public void sendMailCode(String toAddr, String title, String mailCode) &#123;</span><br><span class="line">log.info(&quot;发送邮箱验证码&quot;);</span><br><span class="line">// html 邮件对象</span><br><span class="line">MimeMessage message = mailSender.createMimeMessage();</span><br><span class="line"></span><br><span class="line">String content=&quot;&lt;html&gt;\n&quot; +</span><br><span class="line">&quot;&lt;body&gt;\n&quot; +</span><br><span class="line">&quot;    &lt;h3&gt;你的验证码是：&quot;+ mailCode +&quot;&lt;/h3&gt;\n&quot; +</span><br><span class="line">&quot;&lt;/body&gt;\n&quot; +</span><br><span class="line">&quot;&lt;/html&gt;&quot;;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">//true表示需要创建一个multipart message</span><br><span class="line">MimeMessageHelper helper = new MimeMessageHelper(message, true);</span><br><span class="line">helper.setFrom(from);</span><br><span class="line">helper.setTo(toAddr);</span><br><span class="line">helper.setSubject(title);</span><br><span class="line">helper.setText(content, true);</span><br><span class="line">mailSender.send(message);</span><br><span class="line">log.info(&quot;html邮件发送成功&quot;);</span><br><span class="line">&#125; catch (MessagingException e) &#123;</span><br><span class="line">log.error(&quot;发送html邮件时发生异常！&quot;, e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-发送邮件："><a href="#4-发送邮件：" class="headerlink" title="4.发送邮件："></a>4.发送邮件：</h3><ul><li>本处以申请修改密码时，需要核对账号-邮箱，然后发送验证码到邮箱</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// 填写表单 （核对账号，邮箱）</span><br><span class="line">@PostMapping(&quot;/checktable&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">Result checkTable(HttpServletRequest request,</span><br><span class="line">                  @RequestParam(value = &quot;name&quot;) String name,</span><br><span class="line">                  @RequestParam(value = &quot;email&quot;) String email,</span><br><span class="line">                  @RequestParam(value = &quot;code&quot;) String code)&#123;</span><br><span class="line">log.info(&quot;核对账户，邮箱&quot;);</span><br><span class="line">if(checkVerificationCode(code,request))&#123;</span><br><span class="line">if(name.equals(&quot;&quot;) || email.equals(&quot;&quot;))&#123;</span><br><span class="line">return Result.fail(400,&quot;用户名或邮箱不能为空&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">User user = userService.findUserByName(name);</span><br><span class="line">if( user == null)&#123;</span><br><span class="line">return Result.fail(400,&quot;用户名不存在&quot;);</span><br><span class="line">&#125;</span><br><span class="line">if(!user.getEmail().equals(email))&#123;</span><br><span class="line">return Result.fail(400,&quot;用户，邮箱不匹配&quot;);</span><br><span class="line">&#125;</span><br><span class="line">String mailCode = RandomUtil.randomString(6);</span><br><span class="line">mailUtil.sendMailCode(email,&quot;你的验证码&quot;,mailCode);</span><br><span class="line">request.getSession().setAttribute(&quot;mailCode&quot;,mailCode);</span><br><span class="line">return Result.success(&quot;请填写邮箱验证码&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">return Result.fail(400,&quot;验证码不对&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异步事件优化"><a href="#异步事件优化" class="headerlink" title="异步事件优化"></a>异步事件优化</h2><ul><li>由于同步事件，发送邮件的时间会很长，如果使用同步，前端会得不到返回一直在等待，影响客户体验</li><li>使用异步即可修复这个问题</li></ul><h3 id="1-在springboot中配置异步线程池"><a href="#1-在springboot中配置异步线程池" class="headerlink" title="1.在springboot中配置异步线程池"></a>1.在springboot中配置异步线程池</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package kid1999.upload.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.Executor;</span><br><span class="line">import java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kid1999</span><br><span class="line"> * @title: TaskPoolConfig</span><br><span class="line"> * @date 2019/12/22 16:09</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class TaskPoolConfig &#123;</span><br><span class="line">@Bean(&quot;taskExecutor&quot;)</span><br><span class="line">public Executor taskExecutor () &#123;</span><br><span class="line">ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();</span><br><span class="line">// 核心线程数10：线程池创建时候初始化的线程数</span><br><span class="line">executor.setCorePoolSize(10);</span><br><span class="line">// 最大线程数20：线程池最大的线程数，只有在缓冲队列满了之后才会申请超过核心线程数的线程</span><br><span class="line">executor.setMaxPoolSize(15);</span><br><span class="line">// 缓冲队列200：用来缓冲执行任务的队列</span><br><span class="line">executor.setQueueCapacity(200);</span><br><span class="line">// 允许线程的空闲时间60秒：当超过了核心线程数之外的线程在空闲时间到达之后会被销毁</span><br><span class="line">executor.setKeepAliveSeconds(60);</span><br><span class="line">// 线程池名的前缀：设置好了之后可以方便定位处理任务所在的线程池</span><br><span class="line">executor.setThreadNamePrefix(&quot;taskExecutor-&quot;);</span><br><span class="line">        /*</span><br><span class="line">        线程池对拒绝任务的处理策略：这里采用了CallerRunsPolicy策略，</span><br><span class="line">        当线程池没有处理能力的时候，该策略会直接在 execute 方法的调用线程中运行被拒绝的任务；</span><br><span class="line">        如果执行程序已关闭，则会丢弃该任务</span><br><span class="line">         */</span><br><span class="line">executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line">// 设置线程池关闭的时候等待所有任务都完成再继续销毁其他的Bean</span><br><span class="line">executor.setWaitForTasksToCompleteOnShutdown(true);</span><br><span class="line">// 设置线程池中任务的等待时间，如果超过这个时候还没有销毁就强制销毁，以确保应用最后能够被关闭，而不是阻塞住。</span><br><span class="line">executor.setAwaitTerminationSeconds(600);</span><br><span class="line">return executor;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-在程序入口类添加-EnableAsync注解"><a href="#2-在程序入口类添加-EnableAsync注解" class="headerlink" title="2.在程序入口类添加 @EnableAsync注解"></a>2.在程序入口类添加 @EnableAsync注解</h3><h3 id="3-在需要异步的方法上注入-Async-“taskExecutor”-异步事件"><a href="#3-在需要异步的方法上注入-Async-“taskExecutor”-异步事件" class="headerlink" title="3.在需要异步的方法上注入 @Async(“taskExecutor”) 异步事件"></a>3.在需要异步的方法上注入 @Async(“taskExecutor”) 异步事件</h3><ul><li>此处的注解使用的 “taskExecutor” 就是我们刚才定义的 异步线程池</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 邮箱 </tag>
            
            <tag> 异步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LayUI和Springboot的基本使用</title>
      <link href="/2019/12/26/LayUI%E5%92%8CSpringboot%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/12/26/LayUI%E5%92%8CSpringboot%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="LayUI是一款非常好用的动态前端库"><a href="#LayUI是一款非常好用的动态前端库" class="headerlink" title="LayUI是一款非常好用的动态前端库"></a>LayUI是一款非常好用的动态前端库</h2><ul><li>主要提供丰富的动作组件，区别于Boostrap静态库缺乏js支持</li></ul><h3 id="1-首先聊聊前后端交互的几种方式："><a href="#1-首先聊聊前后端交互的几种方式：" class="headerlink" title="1.首先聊聊前后端交互的几种方式："></a>1.首先聊聊前后端交互的几种方式：</h3><ul><li><ol><li>前后端耦合开发，后端根据请求生成在前端模板。</li></ol></li><li><ol start="2"><li>半耦合，我现在大部分的状态，后端根据用户请求生成在前端模板，但是没有数据。前端利用ajax再获取数据填充页面。</li></ol></li><li><ol start="3"><li>前后端分离，纯RestFul风格开发。用户和前端交互，前端使用三大框架（vue,aj,react），通过http协议向后端请求数据填充页面，同时完成权限管理和用户的交互。后端只负责根据请求返回对应的数据（多用一个公用的包装类进行包装，传输json）</li></ol></li></ul><h3 id="2-所以，我们今天聊到的LayUI就是属于半耦合开发"><a href="#2-所以，我们今天聊到的LayUI就是属于半耦合开发" class="headerlink" title="2.所以，我们今天聊到的LayUI就是属于半耦合开发"></a>2.所以，我们今天聊到的LayUI就是属于半耦合开发</h3><ul><li>用户请求 –&gt; 后端渲染前端模板 –&gt; LayUI利用ajax获取数据，并填充生成页面 –&gt; 返回用户</li></ul><h2 id="使用LayUI和Springboot实现作业的显示和删除"><a href="#使用LayUI和Springboot实现作业的显示和删除" class="headerlink" title="使用LayUI和Springboot实现作业的显示和删除"></a>使用LayUI和Springboot实现作业的显示和删除</h2><h3 id="1-首先是后端返回模板："><a href="#1-首先是后端返回模板：" class="headerlink" title="1.首先是后端返回模板："></a>1.首先是后端返回模板：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 某个项目详情页面</span><br><span class="line"> * @param model</span><br><span class="line"> * @param userId</span><br><span class="line"> * @param workId</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@GetMapping(&quot;/deatils&quot;)</span><br><span class="line">String Test(Model model,</span><br><span class="line">            @RequestParam(value = &quot;userid&quot;) int userId,</span><br><span class="line">@RequestParam(value = &quot;workid&quot;) int workId)&#123;</span><br><span class="line">HomeWork homeWork = homeworkService.findUserIdByWorkId(workId);</span><br><span class="line">if(homeWork.getUserId() == userId)&#123;</span><br><span class="line">model.addAttribute(&quot;workid&quot;,workId);</span><br><span class="line">return &quot;homeworks/homeworkDetails&quot;;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">return &quot;index&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-前端初始化时，ajax获取数据"><a href="#2-前端初始化时，ajax获取数据" class="headerlink" title="2.前端初始化时，ajax获取数据"></a>2.前端初始化时，ajax获取数据</h3><ul><li>此处是LayUI自己封装的请求，默认是get请求</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;script th:inline=&quot;JavaScript&quot;&gt;</span><br><span class="line">   // 加载表</span><br><span class="line">    layui.use(&apos;table&apos;, function()&#123;</span><br><span class="line">        var table = layui.table;</span><br><span class="line">        // 加载表</span><br><span class="line">        table.render(&#123;</span><br><span class="line">            elem: &apos;#test&apos;</span><br><span class="line">            ,url:&apos;/api/homeworks&apos;</span><br><span class="line">            ,id: &apos;TestId&apos;</span><br><span class="line">            ,where: &#123;</span><br><span class="line">                userid: [[$&#123;session.user.getId()&#125;]],</span><br><span class="line">                workid: [[$&#123;workid&#125;]]</span><br><span class="line">            &#125;</span><br><span class="line">            ,title: &apos;学生上传信息&apos;</span><br><span class="line">            ,totalRow: true</span><br><span class="line">            ,totalRowText: &apos;合计：&apos;</span><br><span class="line">            ,toolbar: &apos;#toolbarDemo&apos;</span><br><span class="line">            ,cols: [</span><br><span class="line">                [</span><br><span class="line">                    &#123;type: &apos;checkbox&apos;, fixed: &apos;left&apos;&#125;</span><br><span class="line">                    ,&#123;field:&apos;id&apos;, title:&apos;学号&apos;,sort: true&#125;</span><br><span class="line">                    ,&#123;field:&apos;name&apos;, title:&apos;姓名&apos;&#125;</span><br><span class="line">                    ,&#123;field:&apos;classname&apos;, title:&apos;班级&apos;,sort: true&#125;</span><br><span class="line">                    ,&#123;field:&apos;uptime&apos;, title:&apos;上传时间&apos;,sort: true&#125;</span><br><span class="line">                    ,&#123;field:&apos;filename&apos;, title:&apos;文件名&apos;&#125;</span><br><span class="line">                    ,&#123;field:&apos;filesize&apos;, title:&apos;文件大小(kb)&apos;,sort: true&#125;</span><br><span class="line">                    ,&#123;fixed: &apos;right&apos;, align:&apos;center&apos;, toolbar: &apos;#barDemo&apos;&#125; //这里的toolbar值是模板元素的选择器</span><br><span class="line">                ]</span><br><span class="line">            ]</span><br><span class="line">            ,page: true</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        //监听头工具栏事件</span><br><span class="line">        table.on(&apos;toolbar(test)&apos;, function(obj)&#123;</span><br><span class="line">            var checkStatus = table.checkStatus(obj.config.id)</span><br><span class="line">                ,data = checkStatus.data; //获取选中的数据</span><br><span class="line">            switch(obj.event)&#123;</span><br><span class="line">                case &apos;download&apos;:</span><br><span class="line">                    console.info(data);</span><br><span class="line">                    console.info(data.length)</span><br><span class="line">                    if(data.length == 0)&#123;</span><br><span class="line">                        layer.msg(&apos;请选择需要下载的文件！&apos;);</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                        layer.msg(&apos;开始下载！&apos;);</span><br><span class="line">                        download(data);</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        //监听行工具事件</span><br><span class="line">        table.on(&apos;tool(test)&apos;, function(obj)&#123; //注：tool 是工具条事件名，test 是 table 原始容器的属性 lay-filter=&quot;对应的值&quot;</span><br><span class="line">            var data = obj.data //获得当前行数据</span><br><span class="line">                ,layEvent = obj.event; //获得 lay-event 对应的值</span><br><span class="line">            console.info(data);</span><br><span class="line">            if(layEvent === &apos;detail&apos;)&#123;</span><br><span class="line">                layer.msg(&apos;查看操作&apos;);</span><br><span class="line">            &#125; else if(layEvent === &apos;del&apos;)&#123;</span><br><span class="line">                layer.confirm(&apos;真的删除行吗？&apos;, function(index)&#123;</span><br><span class="line">                    obj.del(); //删除对应行（tr）的DOM结构</span><br><span class="line">                    layer.close(index);</span><br><span class="line">                    //向服务端发送删除指令</span><br><span class="line">                    deleteHomeWork(data);</span><br><span class="line">                    table.reload(&apos;TestId&apos;, &#123;</span><br><span class="line">                    where: &#123;</span><br><span class="line">                        userid: [[$&#123;session.user.getId()&#125;]],</span><br><span class="line">                            worktitle: [[$&#123;worktitle&#125;]],</span><br><span class="line">                            page : 1,</span><br><span class="line">                            pageSize: 10</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;); //只重载数据</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; else if(layEvent === &apos;edit&apos;)&#123;</span><br><span class="line">                layer.msg(&apos;编辑操作&apos;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="3-后端返回ajax数据，带包装"><a href="#3-后端返回ajax数据，带包装" class="headerlink" title="3.后端返回ajax数据，带包装"></a>3.后端返回ajax数据，带包装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 获取homework列表</span><br><span class="line"> */</span><br><span class="line">@GetMapping(&quot;/homeworks&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">Layui getHomeworks(@RequestParam(value = &quot;workid&quot;) String workid,</span><br><span class="line">                    @RequestParam(value = &quot;userid&quot;) int userid,</span><br><span class="line">                    @RequestParam(value = &quot;limit&quot;,defaultValue = &quot;10&quot;) int limit,</span><br><span class="line">                    @RequestParam(value = &quot;page&quot;,defaultValue = &quot;1&quot;) int page</span><br><span class="line">)&#123;</span><br><span class="line">    log.info(&quot;获取homeworks&quot;);</span><br><span class="line">    List&lt;Student&gt; students = studentService.getStudentsByWorkId(workid,page,limit);</span><br><span class="line">    return Layui.data(1,students);   // 使用包装类包装返回结果</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package kid1999.upload.utils;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @desc:  LayUI 的工具类</span><br><span class="line"> * @auther: kid1999</span><br><span class="line"> * @date: 2019/12/21 22:05</span><br><span class="line"> **/</span><br><span class="line">public class Layui extends HashMap&lt;String, Object&gt; &#123;</span><br><span class="line">    public static Layui data(Integer count, List&lt;?&gt; data)&#123;</span><br><span class="line">        Layui r = new Layui();</span><br><span class="line">        r.put(&quot;code&quot;, 0);</span><br><span class="line">        r.put(&quot;msg&quot;, &quot;&quot;);</span><br><span class="line">        r.put(&quot;count&quot;, count);</span><br><span class="line">        r.put(&quot;data&quot;, data);</span><br><span class="line">        return r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-前端解包装"><a href="#4-前端解包装" class="headerlink" title="4.前端解包装"></a>4.前端解包装</h3><ul><li>如上，安装此类包装会被LayUI自动解包：</li><li>code：0 为正确返回</li><li>msg： 信息</li><li>data：数据（核心）</li><li><h3 id="5-前端发出ajax请求"><a href="#5-前端发出ajax请求" class="headerlink" title="5.前端发出ajax请求"></a>5.前端发出ajax请求</h3></li><li>jq的ajax请求</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 删除作业</span><br><span class="line">function deleteHomeWork(data)&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: &apos;/api/homework&apos;,</span><br><span class="line">        type: &quot;delete&quot;,</span><br><span class="line">        async: true, // 是否异步请求（此处需这只为异步请求true，否则bootstrap的modal不会顺序显示）</span><br><span class="line">        cache: false, // 是否缓存此页面，每次都请求服务器</span><br><span class="line">        contentType: &quot;application/json&quot;, //&quot;application/x-www-form-urlencoded&quot;, // 内容编码类型，默认</span><br><span class="line">        dataType: &quot;json&quot;, // 预期服务器返回数据格式</span><br><span class="line">        timeout: 3000, // 超时时间，60s</span><br><span class="line">        data: JSON.stringify(data), // 请求参数</span><br><span class="line">        success: function(data)&#123;</span><br><span class="line">            if(data.code === 200)&#123;</span><br><span class="line">                layer.msg(data.info);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                layer.msg(data.info);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        error: function(xhr, errMsg, e)&#123;</span><br><span class="line">            console.info(JSON.stringify(data));</span><br><span class="line">            layer.msg(errMsg)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-后端返回"><a href="#6-后端返回" class="headerlink" title="6.后端返回"></a>6.后端返回</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 删除student记录</span><br><span class="line"> */</span><br><span class="line">@DeleteMapping(&quot;/homework&quot;)</span><br><span class="line">Result deleteHomeWork(@RequestBody Student student)&#123;</span><br><span class="line">    log.info(&quot;删除student记录&quot;);</span><br><span class="line">    fastDFSClientUtils.deleteFile(student.getFileurl());</span><br><span class="line">    studentService.deleteStudentById(student.getId());</span><br><span class="line">    return Result.success(&quot;删除成功&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="…-后面都类似了"><a href="#…-后面都类似了" class="headerlink" title="….后面都类似了"></a>….后面都类似了</h3><p>更多LayUI的问题参考其 <a href="https://www.layui.com/doc/" target="_blank" rel="noopener">官方文档</a> 和 <a href="https://www.layui.com/demo/" target="_blank" rel="noopener">示例</a></p>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LayUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot整合Kaptcha支持验证码</title>
      <link href="/2019/12/21/Springboot%E6%95%B4%E5%90%88Kaptcha%E6%94%AF%E6%8C%81%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
      <url>/2019/12/21/Springboot%E6%95%B4%E5%90%88Kaptcha%E6%94%AF%E6%8C%81%E9%AA%8C%E8%AF%81%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="Kaptcha"><a href="#Kaptcha" class="headerlink" title="Kaptcha"></a>Kaptcha</h1><ul><li>Kaptcha，是Google开源的一个可高度配置的实用验证码生成工具。</li></ul><h2 id="1-在Springboot中导入："><a href="#1-在Springboot中导入：" class="headerlink" title="1.在Springboot中导入："></a>1.在Springboot中导入：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.penggle&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;kaptcha&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.3.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="2-添加Kaptcha的配置规则"><a href="#2-添加Kaptcha的配置规则" class="headerlink" title="2.添加Kaptcha的配置规则"></a>2.添加Kaptcha的配置规则</h2><ul><li>可用xml也可以Class （此处采用Class配置）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">package kid1999.upload.config;</span><br><span class="line"></span><br><span class="line">import com.google.code.kaptcha.impl.DefaultKaptcha;</span><br><span class="line">import com.google.code.kaptcha.util.Config;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @desc:  Kaptcha 配置类</span><br><span class="line"> * @auther: kid1999</span><br><span class="line"> * @date: 2019/12/21 12:19</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class KaptchaConfig &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public DefaultKaptcha getDefaultKaptcha() &#123;</span><br><span class="line">        com.google.code.kaptcha.impl.DefaultKaptcha defaultKaptcha = new com.google.code.kaptcha.impl.DefaultKaptcha();</span><br><span class="line">        Properties properties = new Properties();</span><br><span class="line">        // 图片边框</span><br><span class="line">        properties.setProperty(&quot;kaptcha.border&quot;, &quot;yes&quot;);</span><br><span class="line">        // 边框颜色</span><br><span class="line">        properties.setProperty(&quot;kaptcha.border.color&quot;, &quot;105,179,90&quot;);</span><br><span class="line">        // 字体颜色</span><br><span class="line">        properties.setProperty(&quot;kaptcha.textproducer.font.color&quot;, &quot;red&quot;);</span><br><span class="line">        // 图片宽</span><br><span class="line">        properties.setProperty(&quot;kaptcha.image.width&quot;, &quot;120&quot;);</span><br><span class="line">        // 图片高</span><br><span class="line">        properties.setProperty(&quot;kaptcha.image.height&quot;, &quot;40&quot;);</span><br><span class="line">        // 字体大小</span><br><span class="line">        properties.setProperty(&quot;kaptcha.textproducer.font.size&quot;, &quot;30&quot;);</span><br><span class="line">        // session key</span><br><span class="line">        properties.setProperty(&quot;kaptcha.session.key&quot;, &quot;code&quot;);</span><br><span class="line">        // 验证码长度</span><br><span class="line">        properties.setProperty(&quot;kaptcha.textproducer.char.length&quot;, &quot;4&quot;);</span><br><span class="line">        // 字体</span><br><span class="line">        properties.setProperty(&quot;kaptcha.textproducer.font.names&quot;, &quot;宋体,楷体,微软雅黑&quot;);</span><br><span class="line"></span><br><span class="line">        properties.setProperty(&quot;kaptcha.noise.color&quot;, &quot;35,37,38&quot;);</span><br><span class="line"></span><br><span class="line">        Config config = new Config(properties);</span><br><span class="line">        defaultKaptcha.setConfig(config);</span><br><span class="line"></span><br><span class="line">        return defaultKaptcha;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-配置验证码的生成和核对"><a href="#3-配置验证码的生成和核对" class="headerlink" title="3.配置验证码的生成和核对"></a>3.配置验证码的生成和核对</h2><ul><li>新建一个Controller<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">package kid1999.upload.controller;</span><br><span class="line"></span><br><span class="line">import com.google.code.kaptcha.impl.DefaultKaptcha;</span><br><span class="line">import kid1999.upload.dto.Result;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line">import javax.imageio.ImageIO;</span><br><span class="line">import javax.servlet.ServletOutputStream;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import javax.servlet.http.HttpSession;</span><br><span class="line">import java.awt.image.BufferedImage;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @desc:</span><br><span class="line"> * @auther: kid1999</span><br><span class="line"> * @date: 2019/12/21 12:20</span><br><span class="line"> **/</span><br><span class="line">@Slf4j</span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/api/kaptcha&quot;)</span><br><span class="line">public class KaptchaController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    DefaultKaptcha defaultKaptcha;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 生成验证码</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/vrifyCode&quot;)</span><br><span class="line">    public ModelAndView getKaptchaImage(HttpServletRequest request, HttpServletResponse response) throws Exception &#123;</span><br><span class="line">        log.info(&quot;生成验证码&quot;);</span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        response.setDateHeader(&quot;Expires&quot;, 0);</span><br><span class="line">        response.setHeader(&quot;Cache-Control&quot;,&quot;no-store, no-cache, must-revalidate&quot;);</span><br><span class="line">        response.addHeader(&quot;Cache-Control&quot;, &quot;post-check=0, pre-check=0&quot;);</span><br><span class="line">        response.setHeader(&quot;Pragma&quot;, &quot;no-cache&quot;);</span><br><span class="line">        response.setContentType(&quot;image/jpeg&quot;);</span><br><span class="line">        // 获取KAPTCHA验证的随机文本</span><br><span class="line">        String capText = defaultKaptcha.createText();</span><br><span class="line">        // 将生成好的图片放入会话中</span><br><span class="line">        session.setAttribute(&quot;vrifyCode&quot;, capText);</span><br><span class="line">        // create the image with the text</span><br><span class="line">        BufferedImage bi = defaultKaptcha.createImage(capText);</span><br><span class="line">        ServletOutputStream out = response.getOutputStream();</span><br><span class="line">        ImageIO.write(bi, &quot;jpg&quot;, out);</span><br><span class="line">        try &#123;</span><br><span class="line">            out.flush();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            out.close();//关闭</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 校对验证码</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public Result checkVerificationCode(String vrifyCode, HttpServletRequest request) &#123;</span><br><span class="line">        String verificationCodeIn = (String) request.getSession().getAttribute(&quot;vrifyCode&quot;);</span><br><span class="line">        request.getSession().removeAttribute(&quot;vrifyCode&quot;);</span><br><span class="line">        if (StringUtils.isEmpty(verificationCodeIn) || !verificationCodeIn.equals(vrifyCode)) &#123;</span><br><span class="line">            return Result.fail(400,&quot;验证码错误，或已失效&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return Result.success(&quot;验证通过&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-前端的配置"><a href="#4-前端的配置" class="headerlink" title="4.前端的配置"></a>4.前端的配置</h2><ul><li>此处以登录的验证码为例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;input-group&quot; style=&quot;float: left;width: 195px;&quot;&gt;</span><br><span class="line">        &lt;label&gt;验证码: &lt;/label&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; name=&quot;code&quot; id=&quot;code&quot; class=&quot;form-control&quot; style=&quot;width: 150px&quot; maxlength=&quot;5&quot; placeholder=&quot;验证码&quot; autocomplete=&quot;off&quot;&gt;&amp;nbsp;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;img id=&quot;captcha-img&quot; style=&quot;width: 120px;height: 40px;display: inline-block;float: right&quot;  src=&quot;/api/kaptcha/vrifyCode&quot; onclick=&quot;this.src=&apos;/api/kaptcha/vrifyCode?d=&apos;+ new Date()*1&quot; title=&quot;看不清？换一张&quot; /&gt;</span><br><span class="line">    &lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="5-核对"><a href="#5-核对" class="headerlink" title="5.核对"></a>5.核对</h2><ul><li>在生成验证码图片的时候，已经将验证码写入session中了</li><li>所以此时只需要从session中获取code验证回传的code即可</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/** 验证码验证</span><br><span class="line"> */</span><br><span class="line">public Boolean checkVerificationCode(String vrifyCode, HttpServletRequest request) &#123;</span><br><span class="line">String verificationCodeIn = (String) request.getSession().getAttribute(&quot;vrifyCode&quot;);</span><br><span class="line">request.getSession().removeAttribute(&quot;vrifyCode&quot;);</span><br><span class="line">if (StringUtils.isEmpty(verificationCodeIn) || !verificationCodeIn.equals(vrifyCode)) &#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效果如下："><a href="#效果如下：" class="headerlink" title="效果如下："></a>效果如下：</h3><p><img alt data-src="https://pic1.superbed.cn/item/5dfdc73f76085c3289aac3a2.png" class="lazyload"></p>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kaptcha </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis,Spring与前端之间的时间格式</title>
      <link href="/2019/12/21/MyBatis-Spring%E4%B8%8E%E5%89%8D%E7%AB%AF%E4%B9%8B%E9%97%B4%E7%9A%84%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F/"/>
      <url>/2019/12/21/MyBatis-Spring%E4%B8%8E%E5%89%8D%E7%AB%AF%E4%B9%8B%E9%97%B4%E7%9A%84%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-首先是MySQL与Java的时间格式对应图"><a href="#1-首先是MySQL与Java的时间格式对应图" class="headerlink" title="1.首先是MySQL与Java的时间格式对应图"></a>1.首先是MySQL与Java的时间格式对应图</h2><p><img alt data-src="https://pic2.superbed.cn/item/5dfdc7fc76085c3289ab0855.png" class="lazyload"></p><h2 id="2-四种时间格式的选择"><a href="#2-四种时间格式的选择" class="headerlink" title="2.四种时间格式的选择"></a>2.四种时间格式的选择</h2><p><img alt data-src="https://gss0.baidu.com/9vo3dSag_xI4khGko9WTAnF6hhy/zhidao/wh%3D600%2C800/sign=312277d3a04bd1130498bf346a9f8837/cdbf6c81800a19d8458917a53efa828ba71e468c.jpg" class="lazyload"></p><ul><li>date 只有年月日</li><li>datetime 最完整 也是最占内存的</li><li>timestamp 较完整，但是最大上限是2038年</li><li>time 只表示时间</li><li>year 只表示年</li></ul><h2 id="3-在Spring中自动时间的转换"><a href="#3-在Spring中自动时间的转换" class="headerlink" title="3.在Spring中自动时间的转换"></a>3.在Spring中自动时间的转换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package kid1999.upload.model;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line">import com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line">import com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line">import com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import org.springframework.format.annotation.DateTimeFormat;</span><br><span class="line"></span><br><span class="line">import java.sql.Timestamp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">@TableName(&quot;homework&quot;)</span><br><span class="line">public class HomeWork &#123;</span><br><span class="line"></span><br><span class="line">  @TableId(type = IdType.AUTO)    // 自增</span><br><span class="line">  private int id;</span><br><span class="line">  private String title;</span><br><span class="line">  private String infomation;</span><br><span class="line">  @DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br><span class="line">  @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;,timezone=&quot;GMT+8&quot;)</span><br><span class="line">  private Timestamp createtime;</span><br><span class="line">  @DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br><span class="line">  @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;,timezone=&quot;GMT+8&quot;)</span><br><span class="line">  private Timestamp endtime;</span><br><span class="line">  private String type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JsonFormat 负责前端和后端的转换 json &lt;-&gt; class</li><li>DateTimeFormat 负责后端与数据库的转换 class &lt;-&gt; row</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时间格式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合FastDFS</title>
      <link href="/2019/12/21/SpringBoot%E6%95%B4%E5%90%88FastDFS/"/>
      <url>/2019/12/21/SpringBoot%E6%95%B4%E5%90%88FastDFS/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-整合-FastDFS-实现文件上传打包下载"><a href="#SpringBoot-整合-FastDFS-实现文件上传打包下载" class="headerlink" title="SpringBoot 整合 FastDFS 实现文件上传打包下载"></a>SpringBoot 整合 FastDFS 实现文件上传打包下载</h1><h2 id="FastDFS"><a href="#FastDFS" class="headerlink" title="FastDFS"></a>FastDFS</h2><ul><li>FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。</li></ul><h2 id="1-FastDFS的安装"><a href="#1-FastDFS的安装" class="headerlink" title="1.FastDFS的安装"></a>1.FastDFS的安装</h2><ul><li>参照 baidu | Google</li><li>docker 安装</li></ul><h2 id="2-使用fastdfs-client操作FastDFS"><a href="#2-使用fastdfs-client操作FastDFS" class="headerlink" title="2.使用fastdfs-client操作FastDFS"></a>2.使用fastdfs-client操作FastDFS</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- fastDFS --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.tobato&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastdfs-client&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.26.7&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-io&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.6&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="3-添加FastDFS的配置"><a href="#3-添加FastDFS的配置" class="headerlink" title="3.添加FastDFS的配置"></a>3.添加FastDFS的配置</h2><ul><li>可xml 可 bean 可yaml(此处使用)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># fastDFS 配置</span><br><span class="line">fdfs:</span><br><span class="line">  soTimeout: 1500 #socket连接超时时长</span><br><span class="line">  connectTimeout: 600 #连接tracker服务器超时时长</span><br><span class="line">  resHost: 10.6.11.xxx</span><br><span class="line">  storagePort: 23000</span><br><span class="line">  thumbImage: #缩略图生成参数，可选</span><br><span class="line">    width: 150</span><br><span class="line">    height: 150</span><br><span class="line">  trackerList: #TrackerList参数,支持多个，我这里只有一个，如果有多个在下方加- x.x.x.x:port</span><br><span class="line">    - 10.16.11.xxx:22122</span><br></pre></td></tr></table></figure><h2 id="4-加载FastDFS的配置信息"><a href="#4-加载FastDFS的配置信息" class="headerlink" title="4.加载FastDFS的配置信息"></a>4.加载FastDFS的配置信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package kid1999.upload.config;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @desc:  fastDFS配置类</span><br><span class="line"> * @auther: kid1999</span><br><span class="line"> * @date: 2019/12/19 19:23</span><br><span class="line"> **/</span><br><span class="line">@Component</span><br><span class="line">@Data</span><br><span class="line">public class FastDfsConfig &#123;</span><br><span class="line">    @Value(&quot;$&#123;fdfs.resHost&#125;&quot;)</span><br><span class="line">    private String resHost;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;fdfs.storagePort&#125;&quot;)</span><br><span class="line">    private String storagePort;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-配置自己需要的FastDFS操作"><a href="#5-配置自己需要的FastDFS操作" class="headerlink" title="5.配置自己需要的FastDFS操作"></a>5.配置自己需要的FastDFS操作</h2><ul><li>如上传，下载，查看信息，删除 …</li><li><a href="https://github.com/tobato/FastDFS_Client" target="_blank" rel="noopener">更多操作</a> 参考源码中的测试案例<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">package kid1999.upload.utils;</span><br><span class="line"></span><br><span class="line">import com.github.tobato.fastdfs.domain.fdfs.FileInfo;</span><br><span class="line">import com.github.tobato.fastdfs.domain.fdfs.StorePath;</span><br><span class="line">import com.github.tobato.fastdfs.domain.proto.storage.DownloadByteArray;</span><br><span class="line">import com.github.tobato.fastdfs.exception.FdfsUnsupportStorePathException;</span><br><span class="line">import com.github.tobato.fastdfs.service.FastFileStorageClient;</span><br><span class="line">import kid1999.upload.config.FastDfsConfig;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.apache.commons.io.FilenameUtils;</span><br><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kid1999</span><br><span class="line"> * @desc:</span><br><span class="line"> * @auther: kid1999</span><br><span class="line"> * @date: 2019/12/19 19:25</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">public class FastDFSClientUtils &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private FastFileStorageClient storageClient;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private FastDfsConfig appConfig;   // 项目参数配置</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 上传文件</span><br><span class="line">     * @param file 文件对象</span><br><span class="line">     * @return 文件访问地址</span><br><span class="line">     * @throws IOException</span><br><span class="line">     */</span><br><span class="line">    public String uploadFile(MultipartFile file) throws IOException &#123;</span><br><span class="line">        StorePath storePath = storageClient.uploadFile(file.getInputStream(),file.getSize(), FilenameUtils.getExtension(file.getOriginalFilename()),null);</span><br><span class="line">        return getResAccessUrl(storePath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 查询文件信息</span><br><span class="line">     * @param fileUrl</span><br><span class="line">     * @return  FileInfo 远程文件信息</span><br><span class="line">     */</span><br><span class="line">    public FileInfo getFileInfo(String fileUrl)&#123;</span><br><span class="line">        if (StringUtils.isEmpty(fileUrl)) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        StorePath storePath = StorePath.parseFromUrl(fileUrl);</span><br><span class="line">        return storageClient.queryFileInfo(storePath.getGroup(), storePath.getPath());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 删除文件</span><br><span class="line">     * @param fileUrl 文件访问地址</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public void deleteFile(String fileUrl) &#123;</span><br><span class="line">        if (StringUtils.isEmpty(fileUrl)) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            StorePath storePath = StorePath.parseFromUrl(fileUrl);</span><br><span class="line">            storageClient.deleteFile(storePath.getGroup(), storePath.getPath());</span><br><span class="line">        &#125; catch (FdfsUnsupportStorePathException e) &#123;</span><br><span class="line">            log.warn(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 下载文件</span><br><span class="line">     * @param fileUrl  文件访问地址</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public byte[] downloadFile(String fileUrl)&#123;</span><br><span class="line">        if(StringUtils.isEmpty(fileUrl))&#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            StorePath storePath = StorePath.parseFromUrl(fileUrl);</span><br><span class="line">            DownloadByteArray callback = new DownloadByteArray();</span><br><span class="line">            byte[] content = storageClient.downloadFile(storePath.getGroup(), storePath.getPath(), callback);</span><br><span class="line">            return content;</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            log.warn(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 更新文件（复写）</span><br><span class="line">     * @param file</span><br><span class="line">     * @param oldFileUrl    原文件</span><br><span class="line">     * @return  文件路径</span><br><span class="line">     * @throws IOException</span><br><span class="line">     */</span><br><span class="line">    public String updateFile(MultipartFile file,String oldFileUrl) throws IOException &#123;</span><br><span class="line">        deleteFile(oldFileUrl);</span><br><span class="line">        StorePath storePath = storageClient.uploadFile(file.getInputStream(),file.getSize(), FilenameUtils.getExtension(file.getOriginalFilename()),null);</span><br><span class="line">        return getResAccessUrl(storePath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 封装完整URL地址</span><br><span class="line">     * @param storePath</span><br><span class="line">     */</span><br><span class="line">    private String getResAccessUrl(StorePath storePath) &#123;</span><br><span class="line">        String fileUrl = &quot;http://&quot; + appConfig.getResHost()</span><br><span class="line">                + &quot;:&quot; + appConfig.getStoragePort() + &quot;/&quot; + storePath.getFullPath();</span><br><span class="line">        return fileUrl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="—–这里已经完成正常的CRUD操作—–"><a href="#—–这里已经完成正常的CRUD操作—–" class="headerlink" title="—–这里已经完成正常的CRUD操作—–"></a>—–这里已经完成正常的CRUD操作—–</h2><h2 id="—–下面是一些具体案例—–"><a href="#—–下面是一些具体案例—–" class="headerlink" title="—–下面是一些具体案例—–"></a>—–下面是一些具体案例—–</h2><h2 id="6-封装上面完成上传文件和批量打包下载"><a href="#6-封装上面完成上传文件和批量打包下载" class="headerlink" title="6.封装上面完成上传文件和批量打包下载"></a>6.封装上面完成上传文件和批量打包下载</h2><ul><li>上传文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">// 文件上传处理</span><br><span class="line">@PostMapping(&quot;/upfile&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">Result singleFileUpload(@RequestParam(&quot;file&quot;) MultipartFile file,</span><br><span class="line">                        @RequestParam(&quot;workid&quot;) int workid,</span><br><span class="line">                        @RequestParam(&quot;type&quot;) String type,</span><br><span class="line">                        @RequestParam(&quot;remarks&quot;) String remarks,</span><br><span class="line">                        @RequestParam(&quot;name&quot;) String sname,</span><br><span class="line">                        @RequestParam(&quot;studentClass&quot;) String classname,</span><br><span class="line">                        @RequestParam(&quot;studentId&quot;) String studentno,</span><br><span class="line">                        Model model,</span><br><span class="line">                        HttpServletRequest request) &#123;</span><br><span class="line"></span><br><span class="line">Result result = new Result();</span><br><span class="line">if (file.isEmpty())&#123;</span><br><span class="line">return Result.fail(400,&quot;文件不允许为空&quot;);</span><br><span class="line">&#125;</span><br><span class="line">// 获取来访页面url</span><br><span class="line">String referer = request.getHeader(&quot;referer&quot;);</span><br><span class="line">if(referer != null)&#123;</span><br><span class="line">model.addAttribute(&quot;referer&quot;,referer);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">model.addAttribute(&quot;referer&quot;,request.getHeader(&quot;host&quot;));</span><br><span class="line">&#125;</span><br><span class="line">// 文件信息处理</span><br><span class="line">String fname = file.getOriginalFilename();</span><br><span class="line">String filename = &quot;&quot;;</span><br><span class="line">//  姓名-项目名   学号-项目名   学号-姓名-项目名   班级-姓名-项目名   班级-姓名-学号-项目名</span><br><span class="line">// 处理保存的文件名</span><br><span class="line">switch (type)&#123;</span><br><span class="line">case &quot;1&quot; : filename = sname + &quot;-&quot; + fname;break;</span><br><span class="line">case &quot;2&quot; : filename = studentno + &quot;-&quot; + fname;break;</span><br><span class="line">case &quot;3&quot; : filename = studentno + &quot;-&quot; + sname + &quot;-&quot; + fname;break;</span><br><span class="line">case &quot;4&quot; : filename = classname + &quot;-&quot; + sname + &quot;-&quot; + fname;break;</span><br><span class="line">case &quot;5&quot; : filename = classname + &quot;-&quot; + sname + &quot;-&quot; + studentno + &quot;-&quot; + fname;break;</span><br><span class="line">case &quot;6&quot; : filename = sname + &quot;.&quot; + fname.substring(fname.lastIndexOf(&quot;.&quot;) + 1);break;</span><br><span class="line">case &quot;7&quot; : filename = sname + &quot;.&quot; + fname.substring(fname.lastIndexOf(&quot;.&quot;) + 1);break;</span><br><span class="line">&#125;</span><br><span class="line">log.info(sname+ &quot;--&quot; + studentno + &quot;--&quot; + filename );</span><br><span class="line">// 构造student</span><br><span class="line">Student newStudent = new Student();</span><br><span class="line">newStudent.setName(sname);</span><br><span class="line">newStudent.setClassname(classname);</span><br><span class="line">newStudent.setRemarks(remarks);</span><br><span class="line">newStudent.setUptime(new Timestamp(System.currentTimeMillis()));</span><br><span class="line">newStudent.setWorkid(workid);</span><br><span class="line">newStudent.setFilename(filename);</span><br><span class="line"></span><br><span class="line">// 先查看是否重复</span><br><span class="line">Student student = studentService.getStudentBySname(workid,sname);</span><br><span class="line"></span><br><span class="line">// 文件已提交过了</span><br><span class="line">if(student != null)&#123;</span><br><span class="line">try&#123;</span><br><span class="line">newStudent.setId(student.getId());    // 把id带走</span><br><span class="line">String fileUrl = fastDFSClientUtils.updateFile(file,student.getFileurl());//使用fastDFS写入</span><br><span class="line">newStudent.setFileurl(fileUrl);</span><br><span class="line">studentService.updateStudent(newStudent);</span><br><span class="line">return Result.success(&quot;你已经提交过了，上传成功！&quot;);</span><br><span class="line">&#125;catch (Exception e)&#123;</span><br><span class="line">return Result.fail(400,&quot;文件上传失败！&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">try&#123;</span><br><span class="line">String fileUrl = fastDFSClientUtils.uploadFile(file);</span><br><span class="line">newStudent.setFileurl(fileUrl);</span><br><span class="line">studentService.addStudent(newStudent);</span><br><span class="line">return Result.success(&quot;文件上传成功！&quot;);</span><br><span class="line">&#125;catch (Exception e)&#123;</span><br><span class="line">return Result.fail(400,&quot;文件上传失败！&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>批量打包下载</li></ul><p>封装批量打包下载工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">package kid1999.upload.utils;</span><br><span class="line"></span><br><span class="line">import kid1999.upload.dto.ZipModel;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.*;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.zip.ZipEntry;</span><br><span class="line">import java.util.zip.ZipOutputStream;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @desc:</span><br><span class="line"> * @auther: kid1999</span><br><span class="line"> * @date: 2019/12/19 20:21</span><br><span class="line"> **/</span><br><span class="line">@Component</span><br><span class="line">@Slf4j</span><br><span class="line">public class ZipUtil &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private FastDFSClientUtils fastDFSClientUtils;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 压缩文件列表中的文件</span><br><span class="line">     *</span><br><span class="line">     * @param files</span><br><span class="line">     * @param outputStream</span><br><span class="line">     * @throws IOException</span><br><span class="line">     */</span><br><span class="line">    public void zipFile(List&lt;ZipModel&gt; files, ZipOutputStream outputStream)&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            int size = files.size();</span><br><span class="line">            //压缩列表中的文件</span><br><span class="line">            for (int i = 0; i &lt; size; i++) &#123;</span><br><span class="line">                ZipModel zipModel = files.get(i);</span><br><span class="line">                zipFile(zipModel, outputStream);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将文件写入到zip文件中</span><br><span class="line">     *</span><br><span class="line">     * @param zipModel</span><br><span class="line">     * @param outputstream</span><br><span class="line">     * @throws IOException</span><br><span class="line">     */</span><br><span class="line">    public  void zipFile(ZipModel zipModel, ZipOutputStream outputstream) throws IOException &#123;</span><br><span class="line">        if (zipModel != null &amp;&amp; zipModel.getFilePath() != null &amp;&amp; zipModel.getFileName() != null) &#123;</span><br><span class="line">            log.info(zipModel.getFileName() + &quot;,被下载: &quot; + zipModel.getFilePath());</span><br><span class="line">            byte[] content = fastDFSClientUtils.downloadFile(zipModel.getFilePath());</span><br><span class="line">            InputStream bInStream = new ByteArrayInputStream(content);</span><br><span class="line">            ZipEntry entry = new ZipEntry(zipModel.getFileName());</span><br><span class="line">            outputstream.putNextEntry(entry);</span><br><span class="line">            final int MAX_BYTE = 10 * 1024 * 1024; //最大的流为10M</span><br><span class="line">            long streamTotal = 0;      //接受流的容量</span><br><span class="line">            int streamNum = 0;      //流需要分开的数量</span><br><span class="line">            int leaveByte = 0;      //文件剩下的字符数</span><br><span class="line">            byte[] inOutbyte;       //byte数组接受文件的数据</span><br><span class="line"></span><br><span class="line">            streamTotal = bInStream.available();      //通过available方法取得流的最大字符数</span><br><span class="line">            streamNum = (int) Math.floor(streamTotal / MAX_BYTE); //取得流文件需要分开的数量</span><br><span class="line">            leaveByte = (int) streamTotal % MAX_BYTE;    //分开文件之后,剩余的数量</span><br><span class="line"></span><br><span class="line">            if (streamNum &gt; 0) &#123;</span><br><span class="line">                for (int j = 0; j &lt; streamNum; ++j) &#123;</span><br><span class="line">                    inOutbyte = new byte[MAX_BYTE];</span><br><span class="line">                    //读入流,保存在byte数组</span><br><span class="line">                    bInStream.read(inOutbyte, 0, MAX_BYTE);</span><br><span class="line">                    outputstream.write(inOutbyte, 0, MAX_BYTE); //写出流</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //写出剩下的流数据</span><br><span class="line">            inOutbyte = new byte[leaveByte];</span><br><span class="line">            bInStream.read(inOutbyte, 0, leaveByte);</span><br><span class="line">            outputstream.write(inOutbyte);</span><br><span class="line">            outputstream.closeEntry();</span><br><span class="line">            bInStream.close(); //关闭</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 下载打包的文件</span><br><span class="line">     * @param file</span><br><span class="line">     * @param response</span><br><span class="line">     */</span><br><span class="line">    public void downloadZip(File file, HttpServletResponse response) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (!file.exists()) &#123;</span><br><span class="line">                file.createNewFile();</span><br><span class="line">            &#125;</span><br><span class="line">            // 以流的形式下载文件。</span><br><span class="line">            BufferedInputStream fis = new BufferedInputStream(new FileInputStream(file.getPath()));</span><br><span class="line">            byte[] buffer = new byte[fis.available()];</span><br><span class="line">            fis.read(buffer);</span><br><span class="line">            fis.close();</span><br><span class="line">            // 清空response</span><br><span class="line">            response.reset();</span><br><span class="line"></span><br><span class="line">            OutputStream toClient = new BufferedOutputStream(response.getOutputStream());</span><br><span class="line">            response.setContentType(&quot;application/octet-stream&quot;);</span><br><span class="line">            response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename=&quot; + file.getName());</span><br><span class="line">            toClient.write(buffer);</span><br><span class="line">            toClient.flush();</span><br><span class="line">            toClient.close();</span><br><span class="line">            file.delete();  //将生成的服务器端文件删除</span><br><span class="line">        &#125; catch (IOException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用批量打包下载工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">package kid1999.upload.controller;</span><br><span class="line"></span><br><span class="line">import kid1999.upload.dto.ZipModel;</span><br><span class="line">import kid1999.upload.utils.ZipUtil;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.zip.ZipOutputStream;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@Slf4j</span><br><span class="line">public class download &#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private ZipUtil zipUtil;</span><br><span class="line"></span><br><span class="line">@PostMapping(&quot;download&quot;)</span><br><span class="line">void download(HttpServletRequest request,</span><br><span class="line"> HttpServletResponse response) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">if (request.getParameterValues(&quot;filenames&quot;) == null) &#123;</span><br><span class="line">response.sendRedirect(request.getHeader(&quot;REFERER&quot;));</span><br><span class="line">&#125; else &#123;</span><br><span class="line">List&lt;ZipModel&gt; zipModelList = new ArrayList&lt;&gt;();</span><br><span class="line">String[] filenames = request.getParameterValues(&quot;filenames&quot;);</span><br><span class="line">for (int i = 0; i &lt; filenames.length; i++) &#123;</span><br><span class="line">String[] files = filenames[i].split(&quot; &quot;);</span><br><span class="line">zipModelList.add(new ZipModel(files[0], files[1]));</span><br><span class="line">&#125;</span><br><span class="line">//todo:设置打包后的文件名</span><br><span class="line">String fileName = &quot;File.zip&quot;;</span><br><span class="line">//todo:临时文件目录,用于存储打包的下载文件</span><br><span class="line">String globalUploadPath = request.getSession().getServletContext().getRealPath(&quot;/&quot;);</span><br><span class="line">String outFilePath = globalUploadPath + File.separator + fileName;</span><br><span class="line">File file = new File(outFilePath);</span><br><span class="line">//文件输出流 压缩流</span><br><span class="line">ZipOutputStream toClient = new ZipOutputStream(new FileOutputStream(file));</span><br><span class="line">//todo:调用通用方法下载fastfds文件，打包成zip文件</span><br><span class="line">zipUtil.zipFile(zipModelList, toClient);</span><br><span class="line">toClient.close();</span><br><span class="line">response.setHeader(&quot;content-disposition&quot;, &quot;attachment;fileName=&quot; + fileName);</span><br><span class="line">//todo:将zip文件下载下来</span><br><span class="line">zipUtil.downloadZip(file, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">log.error(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FastDFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>素数筛法</title>
      <link href="/2019/12/15/%E7%B4%A0%E6%95%B0%E7%AD%9B%E6%B3%95/"/>
      <url>/2019/12/15/%E7%B4%A0%E6%95%B0%E7%AD%9B%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="埃式筛法"><a href="#埃式筛法" class="headerlink" title="埃式筛法"></a>埃式筛法</h2><ul><li>O(n*logn)</li></ul><p>原理: 利用一个数组保存0-n的数据,未访问过的就是素数,每次素数从素数N开始,依次递加晒除非素数,直到最后剩下的都是素数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">埃式 筛法</span><br><span class="line">public int countPrimes(int n) &#123;</span><br><span class="line">    int res = 0;</span><br><span class="line">    boolean[] flag = new boolean[n+1];</span><br><span class="line">    for(int i=2;i&lt;n;i++)&#123;</span><br><span class="line">        if(!flag[i]) res++;</span><br><span class="line">        for(int j=2*i;j&lt;n;j+=i)&#123;</span><br><span class="line">            flag[j] = true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="欧式筛法"><a href="#欧式筛法" class="headerlink" title="欧式筛法"></a>欧式筛法</h2><ul><li>O(n)</li></ul><p>原理: 在埃式筛法的基础上排除那些重复筛选的计算.</p><p>prime数组 中的素数是递增的,当 i 能整除 prime[j]，那么 i<em>prime[j+1] 这个合数肯定被 prime[j] 乘以某个数筛掉。<br>因为i中含有prime[j], prime[j] 比 prime[j+1] 小。接下去的素数同理。所以不用筛下去了。<br>在满足i%prme[j]==0这个条件之前以及第一次满足改条件时,prime[j]必定是prime[j]</em>i的最小因子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 欧式 筛法</span><br><span class="line"> public int countPrimes(int n) &#123;</span><br><span class="line">    byte[] check = new byte[n];//用来标记是否已经访问过了，如果访问过了就打1，没访问过打0</span><br><span class="line">    int[] primeList = new int[n]; //用来记素数</span><br><span class="line"></span><br><span class="line">    int count = 0;//用来记录素数个数</span><br><span class="line">    for(int i = 2;i&lt; n;i++) &#123;</span><br><span class="line">        if(check[i]==0) &#123;    //打了1的就不会再看了，重复赋值浪费时间</span><br><span class="line">            primeList[count++] = i; //count变量记录素数个数，数组记录已知的素数的值</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for(int j=0;j&lt;count&amp;&amp;i*primeList[j]&lt;n;j++) &#123;</span><br><span class="line">            check[i*primeList[j]] = 1; //标记 x=i*primeList[j],x位置是我访问过的位置，打1</span><br><span class="line">            if(i%primeList[j]==0) &#123;   //这一部分不好理解，比方说6，之前访问过（2,3），那么6%2==0,不用再检查6%3了，真正负责记录数据的是count变量</span><br><span class="line">                break;</span><br><span class="line">            &#125;           </span><br><span class="line">        &#125;          </span><br><span class="line">    &#125;  </span><br><span class="line">    return count;   </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="普通优化筛法"><a href="#普通优化筛法" class="headerlink" title="普通优化筛法"></a>普通优化筛法</h2><p>原理: 只用遍历到i到sqrt(n),每遇到一个质数,从 i平方 开始以 步进为i 的筛</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 普通优化 筛法    </span><br><span class="line">public int countPrimes(int n) &#123;</span><br><span class="line">    boolean[] nums = new boolean[n];</span><br><span class="line">    //只需要遍历到n的平方根</span><br><span class="line">    int sqrt = (int)Math.sqrt(n);</span><br><span class="line">    for (int i = 2; i &lt;= sqrt; i++) &#123;</span><br><span class="line">        if (!nums[i]) &#123;</span><br><span class="line">            for (int j = i * i; j &lt; n; j += i) &#123;</span><br><span class="line">                nums[j] = true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    int res = 0;</span><br><span class="line">    for (int i = 2; i &lt; n; i++) &#123;</span><br><span class="line">        if (!nums[i])&#123;</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="经过试验对比，欧式筛和普通优化的筛法拥有相似的速度，而普通优化更利于理解，所以推荐使用最后一种方法"><a href="#经过试验对比，欧式筛和普通优化的筛法拥有相似的速度，而普通优化更利于理解，所以推荐使用最后一种方法" class="headerlink" title="经过试验对比，欧式筛和普通优化的筛法拥有相似的速度，而普通优化更利于理解，所以推荐使用最后一种方法"></a>经过试验对比，欧式筛和普通优化的筛法拥有相似的速度，而普通优化更利于理解，所以推荐使用最后一种方法</h3>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 素数筛法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分模板</title>
      <link href="/2019/12/15/%E4%BA%8C%E5%88%86%E6%A8%A1%E6%9D%BF/"/>
      <url>/2019/12/15/%E4%BA%8C%E5%88%86%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="二分模板"><a href="#二分模板" class="headerlink" title="二分模板"></a>二分模板</h2><ul><li>有单调性一定可以二分，可以二分的，不一定具有单调性</li></ul><h4 id="1-整数二分模板"><a href="#1-整数二分模板" class="headerlink" title="1.整数二分模板"></a>1.整数二分模板</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">bool check(int x) &#123;/* ... */&#125; // 检查x是否满足某种性质</span><br><span class="line"></span><br><span class="line">// 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用：</span><br><span class="line">int bsearch_1(int l, int r)</span><br><span class="line">&#123;</span><br><span class="line">    while (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        int mid = l + r &gt;&gt; 1;</span><br><span class="line">        if (check(mid)) r = mid;    // check()判断mid是否满足性质</span><br><span class="line">        else l = mid + 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return l;</span><br><span class="line">&#125;</span><br><span class="line">// 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：</span><br><span class="line">int bsearch_2(int l, int r)</span><br><span class="line">&#123;</span><br><span class="line">    while (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        int mid = l + r + 1 &gt;&gt; 1;   //向右逼近时保证+1向上取整</span><br><span class="line">        if (check(mid)) l = mid;</span><br><span class="line">        else r = mid - 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 区间[l, r]被划分成[l, mid - 1]和[mid+1, r]时使用：</span><br><span class="line">int bsearch_3(int l, int r)</span><br><span class="line">&#123;</span><br><span class="line">    while(l&lt;=r)&#123;</span><br><span class="line">        int mid = l+r&gt;&gt;1;</span><br><span class="line">        if(check(mid)) return mid;</span><br><span class="line">        else if(target &gt; M.get(mid)) r = mid-1;</span><br><span class="line">        else l = mid+1;</span><br><span class="line">    &#125;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="两个模板的区别"><a href="#两个模板的区别" class="headerlink" title="两个模板的区别:"></a>两个模板的区别:</h5><p>当target==nums[mid] 时返回 r = mid; 向左逼近,返回左边界</p><p>当target==nums[mid] 时返回 l = mid; 向右逼近,返回右边界</p><h4 id="2-小数二分模板"><a href="#2-小数二分模板" class="headerlink" title="2.小数二分模板"></a>2.小数二分模板</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">bool check(double x) &#123;/* ... */&#125; // 检查x是否满足某种性质</span><br><span class="line"></span><br><span class="line">double bsearch_3(double l, double r)</span><br><span class="line">&#123;</span><br><span class="line">    const double eps = 1e-6;   // eps 表示精度，取决于题目对精度的要求</span><br><span class="line">    while (r - l &gt; eps)</span><br><span class="line">    &#123;</span><br><span class="line">        double mid = (l + r) / 2;</span><br><span class="line">        if (check(mid)) r = mid;</span><br><span class="line">        else l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    return l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h3><ul><li>搜索时可以用二分也可以用双指针</li><li>二分需要对中间值进行比较的情况</li><li>双指针需要对两个数的和进行比较的情况</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速幂</title>
      <link href="/2019/12/15/%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
      <url>/2019/12/15/%E5%BF%AB%E9%80%9F%E5%B9%82/</url>
      
        <content type="html"><![CDATA[<h4 id="1-a-b-题链接"><a href="#1-a-b-题链接" class="headerlink" title="1. a ^ b : 题链接"></a>1. a ^ b : <a href="https://www.acwing.com/problem/content/877/" target="_blank" rel="noopener">题链接</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">a ^ b = </span><br><span class="line">a * a * a * a * a .....</span><br><span class="line">把 指数b 化作二进制  = </span><br><span class="line">a ^ 1 * a ^ 2 * a ^ 4 ....</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 例如: 求 m^k % p</span><br><span class="line">public static int qmi(int m, int k, int p)&#123;</span><br><span class="line">int res = 1, t = m;</span><br><span class="line">while(k &gt; 0)&#123;</span><br><span class="line">if( (k&amp;1) == 1)&#123;</span><br><span class="line">res = res * t % p;</span><br><span class="line">&#125;</span><br><span class="line">t = t * t % p;  //t^1 t^2 t^4 ...</span><br><span class="line">k = k&gt;&gt;1;</span><br><span class="line">&#125;</span><br><span class="line">return res % p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-a-b-题链接"><a href="#2-a-b-题链接" class="headerlink" title="2. a * b : 题链接"></a>2. a * b : <a href="https://www.acwing.com/problem/content/92/" target="_blank" rel="noopener">题链接</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a * b = </span><br><span class="line">a + a + a + a + a .....</span><br><span class="line">把 指数b 化作二进制  = </span><br><span class="line">a * 1 + a * 2 + a * 4 ....</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 例如: 求 m*k % p</span><br><span class="line">public static int qci(int m, int k, int p)&#123;</span><br><span class="line">int res = 0, t = m;</span><br><span class="line">while(k &gt; 0)&#123;</span><br><span class="line">if((b&amp;1) == 1) res = (res + t) % p;</span><br><span class="line">        t = (t * 2) % p;</span><br><span class="line">        b &gt;&gt;= 1;</span><br><span class="line">&#125;</span><br><span class="line">return res % p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速幂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背包模板</title>
      <link href="/2019/12/15/%E8%83%8C%E5%8C%85%E6%A8%A1%E6%9D%BF/"/>
      <url>/2019/12/15/%E8%83%8C%E5%8C%85%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><ol><li><p>0-1背包问题 : 对于物品而言只能选择1个或者0个两种情况(选不选)</p></li><li><p>完全背包 : 对于物品而言可以无限制选取,也可以不选</p></li><li><p>多重背包 : 对于某物品而言最多能够选择从s个,同样也可不选</p></li><li><p>混合背包 : 有些物品可以选择1,有些物品可以选择无数个,有些物品只能选择是s[i]个.即:01背包+完全背包+多重背包</p></li><li><p>二维费用背包 : 在重量的基础上增加空间的限制</p></li><li><p>分组背包:多重背包的普遍版本 一些物品捆绑在一起,每一组物品中只能选择其中的一个物品s[i]</p></li><li><p>贪心 : 对于物品只需要价值比最大,物品可分</p></li></ol><h3 id="1-0-1背包-参考"><a href="#1-0-1背包-参考" class="headerlink" title="1. 0-1背包 参考"></a>1. 0-1背包 <a href="https://www.acwing.com/problem/content/2/" target="_blank" rel="noopener">参考</a></h3><p>dp 解释 : 前i个物品在空间为j的情况下的 (最值)</p><h5 id="1-朴素版"><a href="#1-朴素版" class="headerlink" title="1.朴素版"></a>1.朴素版</h5><p><code>普通0-1背包:  dp[i][j] = max(dp[i-1][j] , dp[i-1][j−w[i]] + v[i])</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line">    Scanner sc = new Scanner(System.in);</span><br><span class="line">    int w = sc.nextInt();</span><br><span class="line">    int n = sc.nextInt();</span><br><span class="line">    int[][] dp = new int[n+1][w+1];</span><br><span class="line">    int[] weight = new int[n+1];</span><br><span class="line">    int[] value = new int[n+1];</span><br><span class="line">    for (int i = 1; i &lt;=n ; i++) &#123;</span><br><span class="line">      weight[i] = sc.nextInt();</span><br><span class="line">      value[i] = sc.nextInt();</span><br><span class="line">    &#125;</span><br><span class="line">    // 若是比第i个物品在j 的空间下放不下 就取前一个物品的最大值 填充 ,若放得下 就比较放于不放 </span><br><span class="line">    for (int i = 1; i &lt;=n ; i++) &#123;</span><br><span class="line">      for (int j = 1; j &lt;=w ; j++) &#123;</span><br><span class="line">        if(weight[i] &gt; j)&#123;</span><br><span class="line">          dp[i][j] = dp[i-1][j];</span><br><span class="line">        &#125;else&#123;      //变数在这里 dp递推方程</span><br><span class="line">          int v1 = dp[i-1][j];</span><br><span class="line">          int v2 = dp[i-1][j-weight[i]] + value[i]*weight[i]; </span><br><span class="line">          dp[i][j] = Math.max(v1,v2);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(dp[n][w]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-一维空间优化版"><a href="#2-一维空间优化版" class="headerlink" title="2.一维空间优化版"></a>2.一维空间优化版</h5><p><code>空间优化0-1背包:  f[j] = max(f[j] , f[j−w[i]] + v[i])</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for (int i = 1; i &lt;= n; i++)</span><br><span class="line">for (int j = W; j &gt;= w[i]; j--)</span><br><span class="line">f[j] = max(f[j], f[j - w[i]] + v[i]);</span><br><span class="line">printf(&quot;%d\n&quot;, f[W]);</span><br></pre></td></tr></table></figure><h4 id="理解空间优化"><a href="#理解空间优化" class="headerlink" title="理解空间优化:"></a>理解空间优化:</h4><p>我们可以看到内层循环对于容量的计算是逆序的。本来之前二维的数组，是利用上一层来转移到下一层来表示每个物品最多只能拿一次。现在丢弃了一个物品维度，无法这样表示。所以可以倒序枚举空间大小，转移之前的状态都是未更新的，这样来表示每个物品只能够拿一次</p><p>当我们计算f[j]时，用到了f[j]和f[j-w[i]]，f[j]表示不拿当前的物品，f[j-w[i]]表示拿当前的物品。因为对于容量是从大到小逆序计算的，所以f[j-w[i]]是没有被更新过的，表示还没有拿当前层的物品，这样就表示每个物品最多只能拿一次。</p><p>而如果正向从小到大进行计算，f[j-w[i]]则是已经更新过的，这样就表示每个物品都能拿无数次，这样正向计算就成了完全背包。</p><h3 id="2-完全背包-参考"><a href="#2-完全背包-参考" class="headerlink" title="2.完全背包 参考"></a>2.完全背包 <a href="https://www.acwing.com/problem/content/3/" target="_blank" rel="noopener">参考</a></h3><h5 id="1-朴素版-1"><a href="#1-朴素版-1" class="headerlink" title="1.朴素版"></a>1.朴素版</h5><p><code>dp[i][j] = max(dp[i-1][j] , dp[i][j−w[i]] + v[i])</code></p><p>朴素版类似上面 只是dp递推时可以是 <code>max(dp[i-1][j] , dp[i][j−w[i]] + v[i])</code> 即可以多次选择本物品</p><h5 id="2-一维空间优化版-1"><a href="#2-一维空间优化版-1" class="headerlink" title="2.一维空间优化版"></a>2.一维空间优化版</h5><p>此为洛谷1616题,求单位时间内采药价值最大<br>(运用一维优化空间)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">public class P1616 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line">int t = sc.nextInt();</span><br><span class="line">int m = sc.nextInt();</span><br><span class="line">int[] dp = new int[t+1];</span><br><span class="line">int[] weight = new int[m+1];</span><br><span class="line">int[] value = new int[m+1];</span><br><span class="line">for (int i = 1; i &lt;=m ; i++) &#123;</span><br><span class="line">weight[i] = sc.nextInt();</span><br><span class="line">value[i] = sc.nextInt();</span><br><span class="line">&#125;</span><br><span class="line">for (int i = 1; i &lt;=m ; i++) &#123;</span><br><span class="line">for (int j = weight[i]; j &lt;=t; j++) &#123;</span><br><span class="line">dp[j] = Math.max(dp[j],dp[j-weight[i]] + value[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(dp[t]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-多重背包-参考"><a href="#3-多重背包-参考" class="headerlink" title="3.多重背包 参考"></a>3.多重背包 <a href="https://www.acwing.com/problem/content/4/" target="_blank" rel="noopener">参考</a></h3><ul><li>解法类似01背包 转化为0k背包<h5 id="1-朴素版-2"><a href="#1-朴素版-2" class="headerlink" title="1.朴素版"></a>1.朴素版</h5><code>dp[i][j] = max(dp[i-1][j-k*w[i]] + k*v[i]) | 0&lt;=k&lt;=n[i]</code></li></ul><ul><li>朴素版类: 在前i个物品可选，容量为j的情况下，选k个物品的最大值</li><li>即可以选择k次本物品</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        int n = sc.nextInt();</span><br><span class="line">        int v = sc.nextInt();</span><br><span class="line">        int[] weight = new int[n+1];</span><br><span class="line">        int[] values = new int[n+1];</span><br><span class="line">        int[] counts = new int[n+1];</span><br><span class="line">        for (int i = 0; i &lt;n ; i++) &#123;</span><br><span class="line">            weight[i] = sc.nextInt();</span><br><span class="line">            values[i] = sc.nextInt();</span><br><span class="line">            counts[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        int[] dp = new int[v+1];</span><br><span class="line">        for (int i = 0; i &lt;n ; i++) &#123;</span><br><span class="line">            for (int j = v; j &gt;= 0 ; j--) &#123;</span><br><span class="line">                for (int k = 1; k&lt;=counts[i] &amp;&amp; k*weight[i] &lt;= j ; k++) &#123;</span><br><span class="line">                    dp[j] = Math.max(dp[j],dp[j-k*weight[i]]+k*values[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dp[v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-二进制优化"><a href="#2-二进制优化" class="headerlink" title="2.二进制优化"></a>2.二进制优化</h5><ul><li>首先将所有k*w 单独表示成一个个重kw价值kv的物品</li><li>利用类似快速幂的思想，用k = 1,2,4,8.. + 余数可以表示取k次该物品</li><li>时间复杂度从N^3 降到N^2*logN</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        int n = sc.nextInt();</span><br><span class="line">        int w = sc.nextInt();</span><br><span class="line">        List&lt;Pair&lt;Integer,Integer&gt;&gt; goods = new ArrayList&lt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt;n ; i++) &#123;</span><br><span class="line">            int weight = sc.nextInt();</span><br><span class="line">            int value = sc.nextInt();</span><br><span class="line">            int count = sc.nextInt();</span><br><span class="line">            for (int j = 1; j &lt;=count ; j*=2) &#123;</span><br><span class="line">                count -= j;</span><br><span class="line">                goods.add(new Pair&lt;&gt;(weight*j,value*j));</span><br><span class="line">            &#125;</span><br><span class="line">            if(count &gt; 0) goods.add(new Pair&lt;&gt;(count*weight,count*value));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int[] dp = new int[w+1];</span><br><span class="line">        for (Pair&lt;Integer,Integer&gt; good:goods) &#123;</span><br><span class="line">            for (int j = w; j &gt;=good.getKey() ; j--) &#123;</span><br><span class="line">                dp[j] = Math.max(dp[j],dp[j-good.getKey()]+good.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dp[w]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-混合背包-参考"><a href="#4-混合背包-参考" class="headerlink" title="4.混合背包 参考"></a>4.混合背包 <a href="https://www.acwing.com/problem/content/7/" target="_blank" rel="noopener">参考</a></h3><ul><li><p>将各种背包分类处理</p><h5 id="1-朴素版-3"><a href="#1-朴素版-3" class="headerlink" title="1.朴素版"></a>1.朴素版</h5></li><li><p>将多重背包处理为01背包</p></li><li><p>对01和完全背包分开处理</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class 混合背包 &#123;</span><br><span class="line"></span><br><span class="line">    private static class Thing&#123;</span><br><span class="line">        int kind;   // 种类</span><br><span class="line">        int weight;  // 重量</span><br><span class="line">        int value;   // 价值</span><br><span class="line">        Thing(int kind,int weight,int value)&#123;</span><br><span class="line">            this.kind = kind;</span><br><span class="line">            this.value = value;</span><br><span class="line">            this.weight = weight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        int n = sc.nextInt();</span><br><span class="line">        int w = sc.nextInt();</span><br><span class="line">        List&lt;Thing&gt; things = new ArrayList&lt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt;n ; i++) &#123;</span><br><span class="line">            int weight = sc.nextInt();</span><br><span class="line">            int value = sc.nextInt();</span><br><span class="line">            int count = sc.nextInt();</span><br><span class="line">            if(count &lt; 0) things.add(new Thing(-1,weight,value));       // 01背包</span><br><span class="line">            else if(count == 0) things.add(new Thing(0,weight,value));  // 完全背包</span><br><span class="line">            else&#123;                                                            // 多重背包</span><br><span class="line">                for (int j = 1; j &lt;=count ; j*=2) &#123;</span><br><span class="line">                    count -= j;</span><br><span class="line">                    things.add(new Thing(-1,weight*j,value*j));</span><br><span class="line">                &#125;</span><br><span class="line">                if(count &gt; 0) things.add(new Thing(-1,weight*count,value*count));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int[] dp = new int[w+1];</span><br><span class="line">        for (Thing thing:things) &#123;</span><br><span class="line">            if(thing.kind &lt; 0)&#123;</span><br><span class="line">                for (int j = w; j &gt;=thing.weight ; j--) dp[j] = Math.max(dp[j],dp[j-thing.weight]+thing.value);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                for (int j = thing.weight; j &lt;= w ; j++) dp[j] = Math.max(dp[j],dp[j-thing.weight]+thing.value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dp[w]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-二维费用背包-参考"><a href="#5-二维费用背包-参考" class="headerlink" title="5.二维费用背包 参考"></a>5.二维费用背包 <a href="https://www.acwing.com/problem/content/8/" target="_blank" rel="noopener">参考</a></h3><ul><li><p>dp[i] 变为二维的 dp[i][j] 表示二维空间的容量</p><h5 id="1-朴素版-4"><a href="#1-朴素版-4" class="headerlink" title="1.朴素版"></a>1.朴素版</h5></li><li><p>和一维背包类似，只是做二维的扩展了</p></li><li><p>如本题就是在01背包的基础上做了空间的限制</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">public class 二维费用背包 &#123;</span><br><span class="line">    // 在重量的基础上 限制体积</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        int n = sc.nextInt();</span><br><span class="line">        int w = sc.nextInt();   // 重量</span><br><span class="line">        int v = sc.nextInt();   // 体积</span><br><span class="line">        int[][] dp = new int[w+1][v+1];</span><br><span class="line">        for (int i = 0; i &lt;n ; i++) &#123;</span><br><span class="line">            int weight = sc.nextInt();</span><br><span class="line">            int volume = sc.nextInt();</span><br><span class="line">            int value = sc.nextInt();</span><br><span class="line">            for (int j = w; j &gt;=weight ; j--) &#123;</span><br><span class="line">                for (int k = v; k &gt;=volume ; k--) &#123;</span><br><span class="line">                    dp[j][k] = Math.max(dp[j][k],dp[j-weight][k-volume]+value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dp[w][v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-分组背包-参考"><a href="#6-分组背包-参考" class="headerlink" title="6.分组背包 参考"></a>6.分组背包 <a href="https://www.acwing.com/problem/content/9/" target="_blank" rel="noopener">参考</a></h3><ul><li>实际上也是基于01背包</li><li>是多重背包的普遍版，相当于多重背包的分解为 w…kw的物品 而分组背包就是w[0]..w[k]的物品 同组物品之间无关联</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">public class 分组背包 &#123;</span><br><span class="line">    // 在01背包的基础上 划分组</span><br><span class="line">    // 相当于 多重背包的 普遍情况</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        int n = sc.nextInt();</span><br><span class="line">        int w = sc.nextInt();</span><br><span class="line">        int[] dp = new int[w+1];</span><br><span class="line">        for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">            int len = sc.nextInt();</span><br><span class="line">            int[] weight = new int[len+1];</span><br><span class="line">            int[] values = new int[len+1];</span><br><span class="line">            for (int j = 0; j &lt;len ; j++) &#123;</span><br><span class="line">                weight[j] = sc.nextInt();</span><br><span class="line">                values[j] = sc.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">            for (int j = w; j &gt;=0 ; j--) &#123;</span><br><span class="line">                for (int k = 0; k &lt; len; k++) &#123;</span><br><span class="line">                    if(j &gt;= weight[k]) dp[j] = Math.max(dp[j],dp[j-weight[k]]+values[k]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dp[w]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 背包问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小公倍数与最大公因数</title>
      <link href="/2019/12/15/%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0%E4%B8%8E%E6%9C%80%E5%A4%A7%E5%85%AC%E5%9B%A0%E6%95%B0/"/>
      <url>/2019/12/15/%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0%E4%B8%8E%E6%9C%80%E5%A4%A7%E5%85%AC%E5%9B%A0%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="1-求两个数最大公约数"><a href="#1-求两个数最大公约数" class="headerlink" title="1.求两个数最大公约数"></a>1.求两个数最大公约数</h3><p>欧几里得算法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static int gcd(int x,int y)&#123;</span><br><span class="line">if(x&gt;y)&#123;</span><br><span class="line">int tmp = x;</span><br><span class="line">x = y;</span><br><span class="line">y = tmp;</span><br><span class="line">&#125;</span><br><span class="line">return x == 0 ? y : gcd(y%x,x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-求两个数最小公倍数"><a href="#2-求两个数最小公倍数" class="headerlink" title="2.求两个数最小公倍数"></a>2.求两个数最小公倍数</h3><p>在求的最大公约数的基础上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//求a、b的最小公倍数</span><br><span class="line">int lcm(int a, int b)&#123;</span><br><span class="line">    return a*b/gcd(a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即<br><code>lcm(a,b) * gcd(a,b) = a * b</code></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 最小公倍数-最大公因数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中国剩余定理</title>
      <link href="/2019/12/15/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/"/>
      <url>/2019/12/15/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="欧几里得算法："><a href="#欧几里得算法：" class="headerlink" title="欧几里得算法："></a>欧几里得算法：</h3><ul><li>详见最大公因数gcd 和 最小公倍数lcm</li></ul><h3 id="扩展欧几里得算法："><a href="#扩展欧几里得算法：" class="headerlink" title="扩展欧几里得算法："></a>扩展欧几里得算法：</h3><ul><li>对于不完全为 0 的非负整数 a和b，gcd（a，b）表示 a，b 的最大公约数，必然存在整数对 x，y ，使得 gcd（a，b）=ax+by。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">private static int extend_getGCD(int a, int b, int x, int y) &#123;</span><br><span class="line">int temp,ans;</span><br><span class="line">if (b == 0) &#123;</span><br><span class="line">x = 1;</span><br><span class="line">y = 0;</span><br><span class="line">return a;</span><br><span class="line">&#125;</span><br><span class="line">    ans = extend_getGCD(b, a%b, x, y); </span><br><span class="line">temp = x;</span><br><span class="line">x = y;</span><br><span class="line">y = temp - a / b * y;</span><br><span class="line">return ans;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="中国剩余定理"><a href="#中国剩余定理" class="headerlink" title="中国剩余定理"></a>中国剩余定理</h3><ul><li>也就是 给你一组同余方程，并保证两两互质 求最小的满足方程的非负整数 X</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">/**</span><br><span class="line"> * @author kid1999</span><br><span class="line"> * @title: P1495</span><br><span class="line"> * @date 2019/11/12 20:33</span><br><span class="line"> */</span><br><span class="line">public class P1495 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// 输入数据</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line">int n = sc.nextInt();</span><br><span class="line">long nums[] = new long[n+1];</span><br><span class="line">long mod[] = new long[n+1];</span><br><span class="line">for (int i = 0; i &lt;n ; i++) &#123;</span><br><span class="line">nums[i] = sc.nextInt();</span><br><span class="line">mod[i] = sc.nextInt();</span><br><span class="line">&#125;</span><br><span class="line">// 用 同余的 加法 性质 统计出 sum(ai)</span><br><span class="line">// 其中 ai = 除i以外的num相加 得lcm_num 再用lcm_num*n mod num[i] == mod[i]</span><br><span class="line">long res = 0;</span><br><span class="line">for (int i = 0; i &lt;n ; i++) &#123;</span><br><span class="line">long lcm_num = 1;</span><br><span class="line">for (int j = 0; j &lt;n ; j++) &#123;</span><br><span class="line">if(j == i) continue;</span><br><span class="line">lcm_num = lcm(lcm_num,nums[j]);</span><br><span class="line">&#125;</span><br><span class="line">int k = 1;</span><br><span class="line">while (true)&#123;</span><br><span class="line">if(lcm_num*k % nums[i] == mod[i])&#123;</span><br><span class="line">res += lcm_num*k;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 计算出 最小公倍数</span><br><span class="line">long stander = 1;</span><br><span class="line">for (int i = 0; i &lt;n ; i++) &#123;</span><br><span class="line">stander = lcm(stander,nums[i]);</span><br><span class="line">&#125;</span><br><span class="line">// 逼近最小的 结果</span><br><span class="line">while (res - stander &gt;= 0)&#123;</span><br><span class="line">res -= stander;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(res);</span><br><span class="line">&#125;</span><br><span class="line">public static long gcd(long a,long b)&#123;</span><br><span class="line">return a == 0 ? b : gcd(b%a, a);</span><br><span class="line">&#125;</span><br><span class="line">public static long lcm(long a,long b)&#123;</span><br><span class="line">return (a*b)/gcd(a,b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="相关资料："><a href="#相关资料：" class="headerlink" title="相关资料："></a>相关资料：</h3><p><a href="https://www.cnblogs.com/yefeng1627/archive/2012/12/31/2841058.html" target="_blank" rel="noopener">同余线性方程组</a></p><p><a href="http://www.voidcn.com/article/p-hrgcksch-rt.html" target="_blank" rel="noopener">欧几里得算法扩展</a></p><p><a href="https://www.youtube.com/watch?v=bFisuyRQEGk" target="_blank" rel="noopener">来着油管的中国剩余定理讲解</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中国剩余定理 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于java的算法IO读写优化</title>
      <link href="/2019/12/15/%E5%85%B3%E4%BA%8Ejava%E7%9A%84%E7%AE%97%E6%B3%95IO%E8%AF%BB%E5%86%99%E4%BC%98%E5%8C%96/"/>
      <url>/2019/12/15/%E5%85%B3%E4%BA%8Ejava%E7%9A%84%E7%AE%97%E6%B3%95IO%E8%AF%BB%E5%86%99%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h4 id="1-普通写法"><a href="#1-普通写法" class="headerlink" title="1.普通写法"></a>1.普通写法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line">int n = sc.nextInt();</span><br></pre></td></tr></table></figure><h4 id="2-读取测试文件"><a href="#2-读取测试文件" class="headerlink" title="2.读取测试文件"></a>2.读取测试文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Scanner sc = new Scanner(new FileInputStream(&quot;path&quot;));</span><br><span class="line">int n = sc.nextInt();</span><br></pre></td></tr></table></figure><h4 id="3-bufferReader加速读写"><a href="#3-bufferReader加速读写" class="headerlink" title="3.bufferReader加速读写"></a>3.bufferReader加速读写</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BufferedReader bf = new BufferedReader(new InputStreamReader(new FileInputStream(&quot;path&quot;)));</span><br><span class="line">String s = bf.readLine();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MybatisPlus的基础使用</title>
      <link href="/2019/12/11/MybatisPlus%E7%9A%84%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/12/11/MybatisPlus%E7%9A%84%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Mybatis-Plus的基础使用"><a href="#Mybatis-Plus的基础使用" class="headerlink" title="Mybatis Plus的基础使用"></a>Mybatis Plus的基础使用</h2><ul><li>为简化开发而生</li></ul><h3 id="1-实体类的定义"><a href="#1-实体类的定义" class="headerlink" title="1.实体类的定义"></a>1.实体类的定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">@TableName(&quot;userswork&quot;)  // 映射表</span><br><span class="line">public class Userwork &#123;</span><br><span class="line">  @TableId(type = IdType.AUTO)  // 主键策略</span><br><span class="line">  private int id;</span><br><span class="line">  private int workid;</span><br><span class="line">  private int userid;</span><br><span class="line">  </span><br><span class="line">  @TableField(exist = false) // 列策略：是否对应表属性，查询时是否返回结果....</span><br><span class="line">  private int other;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Mapper的书写（多表查询使用SQL拼接）"><a href="#2-Mapper的书写（多表查询使用SQL拼接）" class="headerlink" title="2.Mapper的书写（多表查询使用SQL拼接）"></a>2.Mapper的书写（多表查询使用SQL拼接）</h3><ul><li>继承BaseMapper实现基本的CURD功能</li><li>简单语句可以使用自带的CRUD </li><li>复杂语句也可以使用sql语句拼接</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package kid1999.upload.mapper;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line">import kid1999.upload.model.HomeWork;</span><br><span class="line">import org.apache.ibatis.annotations.Insert;</span><br><span class="line">import org.apache.ibatis.annotations.Mapper;</span><br><span class="line">import org.apache.ibatis.annotations.Select;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Mapper</span><br><span class="line">public interface homeworkMapper extends BaseMapper&lt;HomeWork&gt; &#123;</span><br><span class="line"></span><br><span class="line">    @Select(&quot;select * from homework where title = #&#123;title&#125; and id in (select workid from userswork where userid = #&#123;userId&#125;)&quot;)</span><br><span class="line">    HomeWork findHKByTitleAndUserID(String title,int userId);</span><br><span class="line"></span><br><span class="line">    @Insert(&quot;insert into homework(title, infomation, createtime, endtime, type, addr) values (#&#123;title&#125;,#&#123;infomation&#125; ,#&#123;createtime&#125; ,#&#123;endtime&#125; ,#&#123;type&#125; ,#&#123;addr&#125; )&quot;)</span><br><span class="line">    void addHomeWork(HomeWork homeWork);</span><br><span class="line"></span><br><span class="line">    @Select(&quot;select * from homework where id in (select workid from userswork where userid = #&#123;userid&#125; ) &quot;)</span><br><span class="line">    List&lt;HomeWork&gt; findByUserId(Integer userid);</span><br><span class="line">    </span><br><span class="line">    @Select(&quot;select addr from homework where id = (select workid from student where student.id = #&#123;uid&#125;)&quot;)</span><br><span class="line">    String findaddrBySid(int uid);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    @Select(&quot;select * from homework where title = #&#123;title&#125; and id in (select workid from userwork where userid = #&#123;userId&#125;)&quot;)</span><br><span class="line">    HomeWork findHKByTitle(String title,int userId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-在Service中实现一些简单的单表CRUD"><a href="#3-在Service中实现一些简单的单表CRUD" class="headerlink" title="3.在Service中实现一些简单的单表CRUD"></a>3.在Service中实现一些简单的单表CRUD</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">package kid1999.upload.service;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line">import kid1999.upload.mapper.userMapper;</span><br><span class="line">import kid1999.upload.model.User;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class userService &#123;</span><br><span class="line"></span><br><span class="line">  @Autowired</span><br><span class="line">  private userMapper userMapper;</span><br><span class="line"></span><br><span class="line">  // 简单查询使用 QueryWrapper </span><br><span class="line">  public User findUserByName(String name) &#123;</span><br><span class="line">    QueryWrapper wrapper = new QueryWrapper();</span><br><span class="line">    wrapper.eq(&quot;name&quot;,name);</span><br><span class="line">    return userMapper.selectOne(wrapper);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 增加 使用自带的 insert</span><br><span class="line">  public int addUser(User user) &#123;</span><br><span class="line">    return userMapper.insert(user);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public User login(User user) &#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = new QueryWrapper&lt;&gt;();</span><br><span class="line">    wrapper.eq(&quot;name&quot;,user.getName())</span><br><span class="line">            .eq(&quot;password&quot;,user.getPassword());</span><br><span class="line">    return userMapper.selectOne(wrapper);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  // 更新student</span><br><span class="line">  public int updateStudent(Student student) &#123;</span><br><span class="line">QueryWrapper&lt;Student&gt; wrapper = new QueryWrapper&lt;&gt;();</span><br><span class="line">wrapper.eq(&quot;id&quot;,student.getId())</span><br><span class="line">.eq(&quot;name&quot;,student.getName());</span><br><span class="line">return studentMapper.update(student,wrapper);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后续再修订-。。。。"><a href="#后续再修订-。。。。" class="headerlink" title="后续再修订 。。。。"></a>后续再修订 。。。。</h3>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatisPlus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EasyMock的简单使用</title>
      <link href="/2019/12/10/EasyMock%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/12/10/EasyMock%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="EasyMock简单使用"><a href="#EasyMock简单使用" class="headerlink" title="EasyMock简单使用"></a>EasyMock简单使用</h2><h4 id="1-安装使用，不说了…"><a href="#1-安装使用，不说了…" class="headerlink" title="1.安装使用，不说了…"></a>1.安装使用，不说了…</h4><h4 id="2-数据随机生成规则："><a href="#2-数据随机生成规则：" class="headerlink" title="2.数据随机生成规则："></a>2.数据随机生成规则：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">&quot;cname&quot;: &quot;@cname&quot;,//中文人名</span><br><span class="line">&quot;id&quot;: &quot;@id&quot;,//生成20 位数字</span><br><span class="line">&quot;title&quot;: &quot;@ctitle&quot;,//中文title</span><br><span class="line">&quot;city&quot;: &quot;@city&quot;,//中文城市</span><br><span class="line">&quot;ip&quot;: &quot;@ip&quot;,//ip 地址</span><br><span class="line">&quot;email&quot;: &quot;@email&quot;,//email</span><br><span class="line">&quot;url&quot;: &quot;@url&quot;,//url</span><br><span class="line">&quot;cfirst&quot;: &quot;@cfirst&quot;,//姓名，姓</span><br><span class="line">&quot;clast&quot;: &quot;@clast&quot;,//姓名，名</span><br><span class="line">&quot;cword&quot;: &quot;@cword(&apos;123456&apos;)&quot;,//123456 从中选取一个字符</span><br><span class="line">&quot;csentence&quot;: &quot;@csentence(1,5)&quot;,//文字文段</span><br><span class="line">&quot;csentence5&quot;: &quot;@csentence(5)&quot;,//文字文段</span><br><span class="line">&quot;cparagraph&quot;: &quot;@cparagraph(1,3)&quot;,//文字文段</span><br><span class="line">&quot;string&quot;: &quot;@string(11)&quot;,//输出11 个字符长度的字符串</span><br><span class="line">&quot;float&quot;: &quot;@float(0,10)&quot;,//0 到 10 的浮点数</span><br><span class="line">&quot;int&quot;: &quot;@integer(60,70)&quot;,//60 到 70 之间的整数</span><br><span class="line">&quot;boolean&quot;: &quot;@boolean&quot;,//boolean 类型 true,false</span><br><span class="line">&quot;array|1-3&quot;: [&#123;</span><br><span class="line">&quot;id&quot;: &quot;@integer(1,10)&quot;,//整数 1到10 取整数</span><br><span class="line">&quot;name&quot;: &quot;cname&quot;</span><br><span class="line">&#125;],//数组（随机 1 到3个）</span><br><span class="line">&quot;array_sort_add|+1&quot;: [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;],//数组1，2，3轮询输出</span><br><span class="line">&quot;boolean|1-2&quot;: true,//boolean 类型 true,false</span><br><span class="line">&quot;actionType|1&quot;: [&apos;click_url&apos;, &apos;open_resource_detail&apos;, &apos;open_resource_search&apos;],</span><br><span class="line">&quot;payload&quot;: function() &#123;</span><br><span class="line">      var returnClickUrl = &#123;</span><br><span class="line">        &quot;linkUrl&quot;: &quot;http://tob.zhisland.com/apph5&quot;</span><br><span class="line">      &#125;;</span><br><span class="line">      var returnResourceDetail = &#123;</span><br><span class="line">        &quot;resourceId&quot;: &quot;606&quot;</span><br><span class="line">      &#125;;</span><br><span class="line">      var returnResourceSearch = &#123;</span><br><span class="line">        &quot;keyWords&quot;: &quot;&quot;,</span><br><span class="line">        &quot;tagCategory&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;tag&quot;: &quot;1&quot;</span><br><span class="line">      &#125;;</span><br><span class="line">      var s = this.actionType == &apos;click_url&apos; ? returnClickUrl : this.actionType == &apos;open_resource_detail&apos; ? returnResourceDetail : returnResourceSearch;</span><br><span class="line">      return s;</span><br><span class="line">&#125;//function 返回设置返回的数据</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EasyMock </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后端分页的简单实现</title>
      <link href="/2019/12/03/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E9%A1%B5%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/12/03/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E9%A1%B5%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前后端分页的简单实现"><a href="#前后端分页的简单实现" class="headerlink" title="前后端分页的简单实现"></a>前后端分页的简单实现</h2><ul><li>Vue.js Element-UI</li><li>SpringBoot Jpa</li></ul><p>基本效果图如下：<br><img alt data-src="https://ae01.alicdn.com/kf/Hbf0b27aa338e4964809bce09f3eacacch.png" class="lazyload"></p><h3 id="1-前端基于Element的分页组件"><a href="#1-前端基于Element的分页组件" class="headerlink" title="1.前端基于Element的分页组件"></a>1.前端基于Element的分页组件</h3><p>Element分页组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;block&quot; style=&quot;margin-top:15px;&quot;&gt;</span><br><span class="line">      &lt;el-pagination align=&apos;center&apos;</span><br><span class="line">      @current-change=&quot;handleCurrentChange&quot; // 改变页码时触发的方法，还有很多其他的触发事件</span><br><span class="line">      :current-page=&quot;currentPage&quot;   // 当前页</span><br><span class="line">      :page-size=&quot;pageSize&quot;         // 分页大小</span><br><span class="line">      layout=&quot;total, prev, pager, next&quot;     // 分页条的功能(主题) 可定制</span><br><span class="line">      :total=&quot;total&quot;&gt;   // 元素总数量</span><br><span class="line">      &lt;/el-pagination&gt;   </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>定义数据参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tableData:[],  // 元素列表</span><br><span class="line">currentPage: 1, // 当前页码</span><br><span class="line">total: 0,  // 总条数</span><br><span class="line">pageSize: 10,   // 每页的数据条数</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>请求后端数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// get page</span><br><span class="line">to_getPage()&#123;</span><br><span class="line">    var self = this;</span><br><span class="line">    this.$axios.get(&quot;/member?currentPage=&quot; + self.currentPage + &quot;&amp;pageSize=&quot; + self.pageSize).then((response)=&gt;&#123;</span><br><span class="line">        let data = response.data;</span><br><span class="line">        console.info(data);</span><br><span class="line">        self.tableData = data.content;</span><br><span class="line">        self.total = data.totalElements;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="2-后端基于Jpa的简单分页方法"><a href="#2-后端基于Jpa的简单分页方法" class="headerlink" title="2.后端基于Jpa的简单分页方法"></a>2.后端基于Jpa的简单分页方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;/member&quot;)</span><br><span class="line">Page&lt;Member&gt; getmembers(Integer pageSize,</span><br><span class="line">Integer currentPage)&#123;</span><br><span class="line">// 生成一个分页器，包括当前页，大小，排序规则</span><br><span class="line">Pageable pageable = PageRequest.of(currentPage,pageSize,Sort.by(&quot;memId&quot;));</span><br><span class="line">return memberRepository.findAll(pageable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-更多关于Jpa分页的步骤知识点："><a href="#3-更多关于Jpa分页的步骤知识点：" class="headerlink" title="3.更多关于Jpa分页的步骤知识点："></a>3.更多关于Jpa分页的步骤知识点：</h3><ol><li>创建实体类</li><li>定义Repository并继承<code>PagingAndSortingRepository</code>或其子类 如：<code>JpaRepository</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 相应约定好的分页方法就送上门来了</span><br><span class="line">public interface ArticleRepository extends PagingAndSortingRepository&lt;Article,Long&gt; &#123;</span><br><span class="line">     //查询article表的所有数据，传入Pageable分页参数，不需要自己写SQL</span><br><span class="line">    Page&lt;Article&gt; findAll(Pageable pageable);</span><br><span class="line">    //根据author字段查询article表数据，传入Pageable分页参数，不需要自己写SQL</span><br><span class="line">    Page&lt;Article&gt; findByAuthor(String author, Pageable pageable);</span><br><span class="line">    //根据author字段和title字段，查询article表数据，传入Pageable分页参数，不需要自己写SQL</span><br><span class="line">    Slice&lt;Article&gt; findByAuthorAndTitle(String author, String title, Pageable pageable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>生成分页器 实现分页</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 查询第一页(从0开始)的数据，每页10条数据</span><br><span class="line">Pageable pageable = PageRequest.of(0, 10);   //第一页</span><br><span class="line">//Pageable pageable = PageRequest.of(1, 10);  //第二页</span><br><span class="line">//Pageable pageable = PageRequest.of(2, 10);  // 第三页</span><br><span class="line">//数据库操作获取查询结果</span><br><span class="line">Page&lt;Article&gt; articlePage = articleRepository.findAll(pageable);</span><br><span class="line">//将查询结果转换为List</span><br><span class="line">List&lt;Article&gt; articleList = articlePage.getContent();</span><br></pre></td></tr></table></figure><ol start="4"><li>实现排序</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 简单排序</span><br><span class="line">articleRepository.findAll(Sort.by(&quot;createTime&quot;));</span><br><span class="line"></span><br><span class="line">// 复合排序</span><br><span class="line">articleRepository.findAll(Sort.by(&quot;author&quot;).ascending()</span><br><span class="line">                        .and(Sort.by(&quot;createTime&quot;).descending()));</span><br><span class="line"></span><br><span class="line">// 分页排序</span><br><span class="line">Pageable pageable = PageRequest.of(0, 10,Sort.by(&quot;createTime&quot;));</span><br></pre></td></tr></table></figure><ol start="5"><li>关于分页器的返回对象Page<obj>继承自Slice，这里介绍一些方法内容</obj></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">List &lt;T&gt;  getContent（）; //获取元素数组</span><br><span class="line"></span><br><span class="line">Pageable  getPageable（）; //当前切片的分页信息</span><br><span class="line"></span><br><span class="line">boolean  hasContent（）; //是否有查询结果？</span><br><span class="line"></span><br><span class="line">boolean  isFirst（）;  //是否是第一个切片</span><br><span class="line"></span><br><span class="line">boolean  isLast（）;  //是否是最后一个切片</span><br><span class="line"></span><br><span class="line">Pageable nextPageable(); // 下一个切片的分页信息</span><br><span class="line"></span><br><span class="line">Pageable previousPageable(); // 上一个切片的分页信息</span><br></pre></td></tr></table></figure><ol start="6"><li>Page的方法</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//总页数</span><br><span class="line">int getTotalPages();</span><br><span class="line"></span><br><span class="line">//总数据条数</span><br><span class="line">long getTotalElements();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JPA </tag>
            
            <tag> Element-UI </tag>
            
            <tag> Axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后端通讯实测</title>
      <link href="/2019/12/03/%E5%89%8D%E5%90%8E%E7%AB%AF%E9%80%9A%E8%AE%AF%E5%AE%9E%E6%B5%8B/"/>
      <url>/2019/12/03/%E5%89%8D%E5%90%8E%E7%AB%AF%E9%80%9A%E8%AE%AF%E5%AE%9E%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="前后端通讯实测"><a href="#前后端通讯实测" class="headerlink" title="前后端通讯实测"></a>前后端通讯实测</h1><h2 id="以Vue-js为代表的前端"><a href="#以Vue-js为代表的前端" class="headerlink" title="以Vue.js为代表的前端"></a>以Vue.js为代表的前端</h2><h4 id="1-基于axios的请求"><a href="#1-基于axios的请求" class="headerlink" title="1.基于axios的请求"></a>1.基于axios的请求</h4><ul><li>在main.js中配置默认请求地址：<code>axios.defaults.baseURL = &#39;http://localhost:9999/&#39;;</code></li><li>在main.js中配置全局使用axios：<code>Vue.prototype.$axios = axios;</code></li></ul><h2 id="以Springboot为代表的后端"><a href="#以Springboot为代表的后端" class="headerlink" title="以Springboot为代表的后端"></a>以Springboot为代表的后端</h2><h4 id="1-配置跨域允许"><a href="#1-配置跨域允许" class="headerlink" title="1.配置跨域允许"></a>1.配置跨域允许</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package io.kid19999.backstage.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.web.cors.CorsConfiguration;</span><br><span class="line">import org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span><br><span class="line">import org.springframework.web.filter.CorsFilter;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class CorsConfig &#123;</span><br><span class="line">  private CorsConfiguration buildConfig() &#123;</span><br><span class="line">    CorsConfiguration corsConfiguration = new CorsConfiguration();</span><br><span class="line">    corsConfiguration.addAllowedOrigin(&quot;*&quot;); // 1允许任何域名使用</span><br><span class="line">    corsConfiguration.addAllowedHeader(&quot;*&quot;); // 2允许任何头</span><br><span class="line">    corsConfiguration.addAllowedMethod(&quot;*&quot;); // 3允许任何方法（post、get等）</span><br><span class="line">    return corsConfiguration;</span><br><span class="line">  &#125;</span><br><span class="line">  @Bean</span><br><span class="line">  public CorsFilter corsFilter() &#123;</span><br><span class="line">    UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();</span><br><span class="line">    source.registerCorsConfiguration(&quot;/**&quot;, buildConfig()); // 4</span><br><span class="line">    return new CorsFilter(source);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="综合测试："><a href="#综合测试：" class="headerlink" title="综合测试："></a>综合测试：</h2><h4 id="素材准备："><a href="#素材准备：" class="headerlink" title="素材准备："></a>素材准备：</h4><ul><li>前端 对象</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">        data:&#123;&apos;adminId&apos;:&apos;kid&apos;,&apos;adminPwd&apos;:&apos;132456456&apos;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>后端 对象<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import lombok.Data;</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">public class Login &#123;</span><br><span class="line">  private String adminId;</span><br><span class="line">  private String adminPwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-POST测试："><a href="#1-POST测试：" class="headerlink" title="1.POST测试："></a>1.POST测试：</h3><ul><li>基于对象的传输：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">前端： </span><br><span class="line">putObj()&#123;</span><br><span class="line">    var self = this;</span><br><span class="line">    this.$axios.put(&apos;/test&apos;, self.data).then(function (response) &#123;</span><br><span class="line">        console.info(self.data);</span><br><span class="line">        console.log(response.data);</span><br><span class="line">    &#125;).catch(function (error) &#123;</span><br><span class="line">        console.error(&quot;请求错误！&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">后端：</span><br><span class="line">post请求，如果是接收json格式（要求传输参数是json(application/json;charset=utf-8)，接收参数要是一个参数或者是一个对象并且参数前加上@RequestBody注解）；如果是表单提交(application/x-www-form-urlencoded)，接收参数没有要求即可以是对象也可以是多个参数的接收方式</span><br><span class="line">@PutMapping(&quot;/test&quot;)</span><br><span class="line">Result putObj(@RequestBody Login login)&#123;</span><br><span class="line">System.out.println(login);</span><br><span class="line">Result result = new Result();</span><br><span class="line">result.setStatusCode(1);</span><br><span class="line">result.setInfo(&quot;put obj success&quot;);</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>基于表单的传输：</li><li>基于 FormData 填充（Content-Type: multipart/form-data）协议<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">前端： </span><br><span class="line">postForm()&#123;</span><br><span class="line">    var self = this;</span><br><span class="line">    let data = new FormData();</span><br><span class="line">    data.append(&apos;adminId&apos;,&apos;kid&apos;);</span><br><span class="line">    data.append(&apos;adminPwd&apos;,&apos;132456456&apos;);</span><br><span class="line">    this.$axios.post(&apos;/test2&apos;, data).then(function (response) &#123;</span><br><span class="line">        console.info(self.data);</span><br><span class="line">        console.log(response.data);</span><br><span class="line">    &#125;).catch(function (error) &#123;</span><br><span class="line">        console.error(&quot;请求错误！&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">后端：</span><br><span class="line">@PostMapping(&quot;/test2&quot;)</span><br><span class="line">Result postForm(@RequestParam(&quot;adminId&quot;) String adminId,</span><br><span class="line">@RequestParam(&quot;adminPwd&quot;) String adminPwd)&#123;</span><br><span class="line">System.out.println(adminId + &quot; &quot; + adminPwd);</span><br><span class="line">Result result = new Result();</span><br><span class="line">result.setStatusCode(1);</span><br><span class="line">result.setInfo(&quot;post form success&quot;);</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-PUT测试："><a href="#2-PUT测试：" class="headerlink" title="2.PUT测试："></a>2.PUT测试：</h3><ul><li>基于对象的传输：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">前端： </span><br><span class="line">post()&#123;</span><br><span class="line">    var self = this;</span><br><span class="line">    this.$axios.post(&apos;/test&apos;, self.data).then(function (response) &#123;</span><br><span class="line">        console.info(self.data);</span><br><span class="line">        console.log(response.data);</span><br><span class="line">    &#125;).catch(function (error) &#123;</span><br><span class="line">        console.error(&quot;请求错误！&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">后端：</span><br><span class="line">@PostMapping(&quot;/test&quot;)</span><br><span class="line">Result toPost(@RequestBody Login login)&#123;</span><br><span class="line">System.out.println(login);</span><br><span class="line">Result result = new Result();</span><br><span class="line">result.setStatusCode(1);</span><br><span class="line">result.setInfo(&quot;success&quot;);</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>基于表单的传输：</li><li>基于qs库，(Content-Type: application/x-www-form-urlencoded)协议<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">前端： </span><br><span class="line">putForm()&#123;</span><br><span class="line">    var self = this;</span><br><span class="line">    this.$axios.put(&apos;/test2&apos;, qs.stringify(self.data)</span><br><span class="line">    ).then(function (response) &#123;</span><br><span class="line">        console.info(self.data);</span><br><span class="line">        console.log(response.data);</span><br><span class="line">    &#125;).catch(function (error) &#123;</span><br><span class="line">        console.error(&quot;请求错误！&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">后端：</span><br><span class="line">@PutMapping(&quot;/test2&quot;)</span><br><span class="line">Result putForm(@RequestParam(&quot;adminId&quot;) String adminId,</span><br><span class="line">   @RequestParam(&quot;adminPwd&quot;) String adminPwd)&#123;</span><br><span class="line">System.out.println(adminId + &quot; &quot; + adminPwd);</span><br><span class="line">Result result = new Result();</span><br><span class="line">result.setStatusCode(1);</span><br><span class="line">result.setInfo(&quot;put form success&quot;);</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-GET测试："><a href="#3-GET测试：" class="headerlink" title="3.GET测试："></a>3.GET测试：</h3><ul><li>只能！！！  基于表单的传输：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">前端： </span><br><span class="line">getForm()&#123;</span><br><span class="line">    var self = this;</span><br><span class="line">    this.$axios.get(&apos;/test&apos;, &#123;params: self.data&#125;).then(function (response) &#123;</span><br><span class="line">        console.info(self.data);</span><br><span class="line">        console.log(response.data);</span><br><span class="line">    &#125;).catch(function (error) &#123;</span><br><span class="line">        console.error(&quot;请求错误！&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">后端：</span><br><span class="line"></span><br><span class="line">@GetMapping(&quot;/test&quot;)</span><br><span class="line">Result getObj(@RequestParam(&quot;adminId&quot;) String adminId,</span><br><span class="line">  @RequestParam(&quot;adminPwd&quot;) String adminPwd)&#123;</span><br><span class="line">System.out.println(adminId + &quot; &quot; + adminPwd);</span><br><span class="line">Result result = new Result();</span><br><span class="line">result.setStatusCode(1);</span><br><span class="line">result.setInfo(&quot;get obj success&quot;);</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-DELETE测试："><a href="#4-DELETE测试：" class="headerlink" title="4.DELETE测试："></a>4.DELETE测试：</h3><ul><li>基于对象的传输：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">前端： </span><br><span class="line">deleteObj()&#123;</span><br><span class="line">    var self = this;</span><br><span class="line">    this.$axios.delete(&apos;/test&apos;, &#123;data: self.data&#125;).then(function (response) &#123;</span><br><span class="line">        console.info(self.data);</span><br><span class="line">        console.log(response.data);</span><br><span class="line">    &#125;).catch(function (error) &#123;</span><br><span class="line">        console.error(&quot;请求错误！&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">后端：</span><br><span class="line">@DeleteMapping(&quot;/test&quot;)</span><br><span class="line">Result deleteObj(@RequestBody Login login)&#123;</span><br><span class="line">System.out.println(login);</span><br><span class="line">Result result = new Result();</span><br><span class="line">result.setStatusCode(1);</span><br><span class="line">result.setInfo(&quot;delete obj success&quot;);</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>基于表单的传输：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">前端： </span><br><span class="line">deleteForm()&#123;</span><br><span class="line">    var self = this;</span><br><span class="line">    this.$axios.delete(&apos;/test2&apos;, &#123;params: self.data&#125;).then(function (response) &#123;</span><br><span class="line">        console.info(self.data);</span><br><span class="line">        console.log(response.data);</span><br><span class="line">    &#125;).catch(function (error) &#123;</span><br><span class="line">        console.error(&quot;请求错误！&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">后端：</span><br><span class="line">@DeleteMapping(&quot;/test2&quot;)</span><br><span class="line">Result deletForm(@RequestParam(&quot;adminId&quot;) String adminId,</span><br><span class="line"> @RequestParam(&quot;adminPwd&quot;) String adminPwd)&#123;</span><br><span class="line">System.out.println(adminId + &quot; &quot; + adminPwd);</span><br><span class="line">Result result = new Result();</span><br><span class="line">result.setStatusCode(1);</span><br><span class="line">result.setInfo(&quot;delete form success&quot;);</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>post和put类似可用各种方式传输，也最为安全</li><li>get只能用表单传输， {params: self.data}</li><li>delete两种方式都能，但是参数格式略有不同：表单{params: self.data}，对象{data: self.data}</li></ol><h4 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h4><ul><li><a href="https://juejin.im/post/5d7a019bf265da03a31d65bb" target="_blank" rel="noopener">axios基本使用</a></li><li><a href="https://segmentfault.com/a/1190000015261229" target="_blank" rel="noopener">axios中post的三种方式</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Axios </tag>
            
            <tag> Vue.js </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thymeleaf模板技术尝试</title>
      <link href="/2019/11/30/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%8A%80%E6%9C%AF%E5%B0%9D%E8%AF%95/"/>
      <url>/2019/11/30/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%8A%80%E6%9C%AF%E5%B0%9D%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Thymeleaf-模板技术尝试"><a href="#Thymeleaf-模板技术尝试" class="headerlink" title="Thymeleaf 模板技术尝试"></a>Thymeleaf 模板技术尝试</h1><ul><li><p>Thymeleaf是一个Java XML / XHTML / HTML5 模板引擎 ，可以在Web（基于servlet ）和非Web环境中工作。 它更适合在基于MVC的Web应用程序的视图层提供XHTML / HTML5，但它甚至可以在脱机环境中处理任何XML文件。 它提供完整的Spring Framework。</p></li><li><p>在Web应用程序中，Thymeleaf旨在成为JavaServer Pages （JSP）的完全替代品，并实现自然模板的概念：模板文件可以直接在浏览器中打开，并且仍然可以正确显示为网页。</p></li><li><p><a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html" target="_blank" rel="noopener">Thymeleaf 3.0 官方文档</a></p></li></ul><h2 id="Thymeleaf-常用关键字"><a href="#Thymeleaf-常用关键字" class="headerlink" title="Thymeleaf 常用关键字"></a>Thymeleaf 常用关键字</h2><p><img alt data-src="https://ae01.alicdn.com/kf/Ha6d22c20c9d245df8d8521475655a66aB.png" class="lazyload"></p><h2 id="1-创建HTML"><a href="#1-创建HTML" class="headerlink" title="1.创建HTML"></a>1.创建HTML</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="2-获取变量值-…"><a href="#2-获取变量值-…" class="headerlink" title="2.获取变量值${…}"></a>2.获取变量值${…}</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p th:text=&quot;&apos;Hello！, &apos; + $&#123;name&#125; + &apos;!&apos;&quot;&gt;3333&lt;/p&gt;</span><br></pre></td></tr></table></figure><h2 id="3-链接表达式-…"><a href="#3-链接表达式-…" class="headerlink" title="3.链接表达式: @{…}"></a>3.链接表达式: @{…}</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;details.html&quot; th:href=&quot;@&#123;/order/details(orderId=$&#123;o.id&#125;)&#125;&quot;&gt;view&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;details.html&quot; th:href=&quot;@&#123;order/&#123;orderId&#125;/details(orderId=$&#123;o.id&#125;)&#125;&quot;&gt;Content路径,默认访问static下的order文件夹&lt;/a&gt;</span><br></pre></td></tr></table></figure><h2 id="4-文本替换"><a href="#4-文本替换" class="headerlink" title="4.文本替换"></a>4.文本替换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span th:text=&quot;&apos;Welcome to our application, &apos; + $&#123;user.name&#125; + &apos;!&apos;&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="5-运算符"><a href="#5-运算符" class="headerlink" title="5.运算符"></a>5.运算符</h2><ul><li>默认支持</li></ul><h2 id="6-条件"><a href="#6-条件" class="headerlink" title="6.条件"></a>6.条件</h2><ul><li>if/unless</li><li>使用th:if和th:unless属性进行条件判断</li><li>th:unless于th:if恰好相反，只有表达式中的条件不成立，才会显示其内容。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;a th:href=&quot;@&#123;/login&#125;&quot; th:unless=$&#123;session.user != null&#125;&gt;Login&lt;/a&gt;</span><br></pre></td></tr></table></figure></li><li>switch</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div th:switch=&quot;$&#123;user.role&#125;&quot;&gt;</span><br><span class="line">  &lt;p th:case=&quot;&apos;admin&apos;&quot;&gt;User is an administrator&lt;/p&gt;</span><br><span class="line">  &lt;p th:case=&quot;#&#123;roles.manager&#125;&quot;&gt;User is a manager&lt;/p&gt;</span><br><span class="line">  &lt;p th:case=&quot;*&quot;&gt;User is some other thing&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="7-循环"><a href="#7-循环" class="headerlink" title="7.循环"></a>7.循环</h2><ul><li>th:each</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;tr th:each=&quot;prod : $&#123;prods&#125;&quot;&gt;</span><br><span class="line">    &lt;td th:text=&quot;$&#123;prod.name&#125;&quot;&gt;Onions&lt;/td&gt;</span><br><span class="line">    &lt;td th:text=&quot;$&#123;prod.price&#125;&quot;&gt;2.41&lt;/td&gt;</span><br><span class="line">    &lt;td th:text=&quot;$&#123;prod.inStock&#125;? #&#123;true&#125; : #&#123;false&#125;&quot;&gt;yes&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br></pre></td></tr></table></figure><h2 id="8-模板布局"><a href="#8-模板布局" class="headerlink" title="8.模板布局"></a>8.模板布局</h2><ul><li>Thymeleaf需要我们定义这些部分，“片段”，以便包含，这可以使用th:fragment属性来完成。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div th:fragment=&quot;navbar&quot;&gt;</span><br><span class="line">      &amp;copy; 2011 The Good Thymes Virtual Grocery</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>我们可以使用其中一个th:insert或th:replace属性轻松地在我们的主页中包含这些片段。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  ...</span><br><span class="line">  &lt;div th:insert=&quot;~&#123;base :: navbar&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">  或者</span><br><span class="line">  &lt;div th:insert=&quot;base :: navbar&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thymeleaf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiro安全框架基础知识点</title>
      <link href="/2019/11/27/Shiro%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2019/11/27/Shiro%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="Shiro基础知识点"><a href="#Shiro基础知识点" class="headerlink" title="Shiro基础知识点"></a>Shiro基础知识点</h1><ul><li><p>Apache Shiro 是ASF旗下的一款开源软件（Shiro发音为“shee-roh”，日语“堡垒（Castle）”的意思），提供了一个强大而灵活的安全框架。可为任何应用提供安全保障— 从命令行应用、移动应用到大型网络及企业应用。</p></li><li><p>Apache Shiro提供了认证、授权、加密和会话管理功能，将复杂的问题隐藏起来，提供清晰直观的API使开发者可以很轻松地开发自己的程序安全代码。并且在实现此目标时无须依赖第三方的框架、容器或服务，当然也能做到与这些环境的整合，使其在任何环境下都可拿来使用。</p></li></ul><h2 id="Shiro的核心四部分"><a href="#Shiro的核心四部分" class="headerlink" title="Shiro的核心四部分"></a>Shiro的核心四部分</h2><ul><li><p>认证（Authentication）：用户身份识别。有时可看作为“登录（login）”，它是用户证明自己是谁的一个行为。</p></li><li><p>授权（Authorization）：访问控制过程，好比决定“认证（who）”可以访问“什么（what）”.</p></li><li><p>会话管理（SessionManagement）：管理用户的会话（sessions），甚至在没有WEB或EJB容器的环境中。管理用户与时间相关的状态。</p></li><li><p>加密（Cryptography）：使用加密算法保护数据更加安全，防止数据被偷窥。</p></li></ul><h3 id="1-Spring整合Shiro"><a href="#1-Spring整合Shiro" class="headerlink" title="1.Spring整合Shiro"></a>1.Spring整合Shiro</h3><ol><li>pom 依赖<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--整合shiro--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-ShiroConfig"><a href="#2-ShiroConfig" class="headerlink" title="2. ShiroConfig"></a>2. ShiroConfig</h3><ul><li>shiro的基本配置</li><li>1.ShiroFilterFactoryBean    #Shiro对外的接口，代表当前“用户”</li><li>2.DefaultWebSecurityManager   #关联realm</li><li>3.UserRealm   #负责登录验证和资源授权</li><li><img alt data-src="https://pic2.zhimg.com/80/v2-8526e78cc56a9505dcca6d0f3fcac3dd_hd.jpg" class="lazyload"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">package io.kid1999.operatesystem.config;</span><br><span class="line"></span><br><span class="line">import org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line">import org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line">import org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">import java.util.LinkedHashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kid1999</span><br><span class="line"> * @title: Shiro 的 配置</span><br><span class="line"> * @date 2019/11/26 21:27</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class ShiroConfig &#123;</span><br><span class="line"></span><br><span class="line">// 3. 创建 ShiroFilterFactoryBean</span><br><span class="line">@Bean</span><br><span class="line">public ShiroFilterFactoryBean getShiroFilterFactoryBean(@Qualifier(&quot;securityManager&quot;) DefaultWebSecurityManager securityManager)&#123;</span><br><span class="line">ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();</span><br><span class="line">// 设置安全管理器</span><br><span class="line">shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">/**  添加Shiro的内置过滤器</span><br><span class="line"> * 常用：</span><br><span class="line"> * anon : 无需认证（登录） 可以访问</span><br><span class="line"> * authc ：必须认证才可以访问</span><br><span class="line"> * user : 如果使用remenberMe功能可以直接访问</span><br><span class="line"> * perms: 该资源必须获得相关权限才可访问</span><br><span class="line"> * role: 该资源必须获得角色权限才可以访问</span><br><span class="line"> *</span><br><span class="line"> *  注意： 这个授权拦截链 是按顺序执行的！！！</span><br><span class="line"> */</span><br><span class="line">Map&lt;String,String&gt; filterMap = new LinkedHashMap&lt;&gt;();</span><br><span class="line">filterMap.put(&quot;/&quot;,&quot;anon&quot;);</span><br><span class="line">filterMap.put(&quot;/login&quot;,&quot;anon&quot;);</span><br><span class="line">filterMap.put(&quot;/error&quot;,&quot;anon&quot;);</span><br><span class="line">//filterMap.put(&quot;/admin&quot;,&quot;authc&quot;);</span><br><span class="line"></span><br><span class="line">// 权限过滤器  也可以设置角色过滤</span><br><span class="line">filterMap.put(&quot;/admin&quot;,&quot;perms[user:admin]&quot;);</span><br><span class="line"></span><br><span class="line">shiroFilterFactoryBean.setLoginUrl(&quot;/login&quot;);       // 设置跳转的登录页面</span><br><span class="line">shiroFilterFactoryBean.setUnauthorizedUrl(&quot;/noAuth&quot;);   // 设置未授权访问页面</span><br><span class="line">shiroFilterFactoryBean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line"></span><br><span class="line">return shiroFilterFactoryBean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 2. 创建DefaultWebSecurityManager </span><br><span class="line">// 所有与安全有关的操作都会与SecurityManager进行交互</span><br><span class="line">@Bean(name = &quot;securityManager&quot;)</span><br><span class="line">public DefaultWebSecurityManager getDefaultWebSecurityManager(@Qualifier(&quot;getRealm&quot;) UserRealm userRealm)&#123;</span><br><span class="line">DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();</span><br><span class="line">// 关联realm</span><br><span class="line">securityManager.setRealm(getRealm());</span><br><span class="line">return securityManager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 1. 创建Realm</span><br><span class="line">// Shiro从Realm获取安全数据（用户、角色、权限）</span><br><span class="line">@Bean</span><br><span class="line">public UserRealm getRealm()&#123;</span><br><span class="line">return new UserRealm();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-UserRealm"><a href="#3-UserRealm" class="headerlink" title="3. UserRealm"></a>3. UserRealm</h3><ul><li>Shiro从从Realm获取安全数据（如用户、角色、权限）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">package io.kid1999.operatesystem.config;</span><br><span class="line"></span><br><span class="line">import io.kid1999.operatesystem.model.Admin;</span><br><span class="line">import io.kid1999.operatesystem.repository.AdminRepository;</span><br><span class="line">import org.apache.shiro.authc.*;</span><br><span class="line">import org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line">import org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class="line">import org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line">import org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kid1999</span><br><span class="line"> * @title: UserRealm 自定义 realm 处理 授权和认证</span><br><span class="line"> * @date 2019/11/26 21:29</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class UserRealm extends AuthorizingRealm  &#123;</span><br><span class="line">@Autowired</span><br><span class="line">private AdminRepository adminRepository;</span><br><span class="line"></span><br><span class="line">// 授权执行逻辑</span><br><span class="line">@Override</span><br><span class="line">protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) &#123;</span><br><span class="line">System.out.println(&quot;授权执行逻辑&quot;);</span><br><span class="line"></span><br><span class="line">// 给资源进行授权</span><br><span class="line">SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();</span><br><span class="line"></span><br><span class="line">// 添加资源授权字符串</span><br><span class="line">info.addStringPermission(&quot;user:admin&quot;);</span><br><span class="line"></span><br><span class="line">return info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 认证执行逻辑</span><br><span class="line">@Override</span><br><span class="line">protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException &#123;</span><br><span class="line">System.out.println(&quot;认证执行逻辑&quot;);</span><br><span class="line"></span><br><span class="line">// 1. 获取传来验证的token</span><br><span class="line">UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken;</span><br><span class="line">String name = token.getUsername();</span><br><span class="line">String password = String.valueOf(token.getPassword());</span><br><span class="line">// 2. 通过用户名 取出数据库的数据</span><br><span class="line">Admin user = adminRepository.findByAdminId(name);</span><br><span class="line"></span><br><span class="line">// 3. 判断用户名</span><br><span class="line">if (user == null)&#123;</span><br><span class="line">return null;        // 找不到用户名 报 UnknownAccountException</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 4. 判断密码</span><br><span class="line">/**</span><br><span class="line"> * arg0: 回传login的数据</span><br><span class="line"> * arg1: 数据库的密码</span><br><span class="line"> * arg2: realm 的name</span><br><span class="line"> */</span><br><span class="line">return new SimpleAuthenticationInfo(&quot;&quot;,user.getAdminPwd(),&quot;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-AdminRepository-链接数据库"><a href="#4-AdminRepository-链接数据库" class="headerlink" title="4.AdminRepository 链接数据库"></a>4.AdminRepository 链接数据库</h3><ul><li>Realm 会连接数据源 进行身份验证</li><li>此处放上我的JPA</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package io.kid1999.operatesystem.repository;</span><br><span class="line">import io.kid1999.operatesystem.model.Admin;</span><br><span class="line">import org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line">import org.springframework.data.jpa.repository.Query;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kid1999</span><br><span class="line"> * @title: ManagerRepository</span><br><span class="line"> * @date 2019/11/24 10:07</span><br><span class="line"> */</span><br><span class="line">public interface AdminRepository extends JpaRepository&lt;Admin,Integer&gt; &#123;</span><br><span class="line">@Query(value = &quot;select * from admin m where m.admin_id = ?1 and m.admin_pwd = ?2&quot; ,nativeQuery = true)</span><br><span class="line">Admin login(String studentId, String passWord);</span><br><span class="line"></span><br><span class="line">Admin findByAdminId(String adminId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-登录Controller"><a href="#5-登录Controller" class="headerlink" title="5.登录Controller"></a>5.登录Controller</h3><ul><li>此处没有使用加密 和 缓存机制<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 使用Shiro实现登录</span><br><span class="line"> */</span><br><span class="line">@PostMapping(&quot;/login&quot;)</span><br><span class="line">String toLogin(String studentId,</span><br><span class="line">               String passWord,</span><br><span class="line">               Model model)&#123;</span><br><span class="line">// 1.获取Subject</span><br><span class="line">Subject subject = SecurityUtils.getSubject();</span><br><span class="line">// 2.封装登录方法</span><br><span class="line">UsernamePasswordToken token = new UsernamePasswordToken(studentId,passWord);</span><br><span class="line">// 3.执行登录方法</span><br><span class="line">try &#123;</span><br><span class="line">subject.login(token);       // 调用login方法 -&gt; realm 做验证</span><br><span class="line">return &quot;admin&quot;;</span><br><span class="line">&#125;catch (UnknownAccountException e)&#123;</span><br><span class="line">model.addAttribute(&quot;msg&quot;,&quot;用户名不存在&quot;);</span><br><span class="line">return &quot;login&quot;;</span><br><span class="line">&#125;catch (IncorrectCredentialsException e)&#123;</span><br><span class="line">model.addAttribute(&quot;msg&quot;,&quot;密码错误&quot;);</span><br><span class="line">return &quot;login&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-整合redis接管session和缓存"><a href="#6-整合redis接管session和缓存" class="headerlink" title="6.整合redis接管session和缓存"></a>6.整合redis接管session和缓存</h3><ol><li>再导入两个包</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-ehcache&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- shiro+redis缓存插件 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.crazycake&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-redis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.2.3&lt;/version&gt;</span><br><span class="line">    &lt;!--     剔除这个错误依赖       --&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">    &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>在ShiroConfig 配置到 securityManager </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 2. 创建DefaultWebSecurityManager  管理器</span><br><span class="line">@Bean(name = &quot;securityManager&quot;)</span><br><span class="line">public DefaultWebSecurityManager getDefaultWebSecurityManager(@Qualifier(&quot;getRealm&quot;) UserRealm userRealm)&#123;</span><br><span class="line">DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();</span><br><span class="line">// 关联realm</span><br><span class="line">securityManager.setRealm(getRealm());</span><br><span class="line">// 自定义缓存实现 使用redis</span><br><span class="line">securityManager.setCacheManager(cacheManager());</span><br><span class="line">// 自定义session管理 使用redis</span><br><span class="line">securityManager.setSessionManager(sessionManager());</span><br><span class="line">return securityManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-整合redis接管session和缓存"><a href="#7-整合redis接管session和缓存" class="headerlink" title="7.整合redis接管session和缓存"></a>7.整合redis接管session和缓存</h3><ol><li>继承FormAuthenticationFilter 重写一些方法</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">package io.kid19999.backstage.config.Shiro;</span><br><span class="line"></span><br><span class="line">import io.kid19999.backstage.repository.SignLogRepository;</span><br><span class="line">import org.apache.shiro.authc.AuthenticationException;</span><br><span class="line">import org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line">import org.apache.shiro.subject.Subject;</span><br><span class="line">import org.apache.shiro.web.filter.authc.FormAuthenticationFilter;</span><br><span class="line">import org.apache.shiro.web.util.WebUtils;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletRequest;</span><br><span class="line">import javax.servlet.ServletResponse;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @desc:   自定义 登录验证 的操作</span><br><span class="line"> * @auther: kid1999</span><br><span class="line"> * @date: 2019/11/28 20:52</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">public class AuthenticationFilter extends FormAuthenticationFilter &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private SignLogRepository signLogRepository;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected boolean onLoginSuccess(AuthenticationToken token, Subject subject, ServletRequest request, ServletResponse response) throws Exception &#123;</span><br><span class="line">        //获取已登录的用户信息</span><br><span class="line">        String username = (String) subject.getPrincipal();</span><br><span class="line">        //获取session</span><br><span class="line">        HttpServletRequest httpServletRequest = WebUtils.toHttp(request);</span><br><span class="line">        HttpSession session = httpServletRequest.getSession();</span><br><span class="line">        //把用户信息保存到session</span><br><span class="line">        session.setAttribute(&quot;activeUser&quot;, username);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;login success&quot;);</span><br><span class="line">        System.out.println(token.getPrincipal());</span><br><span class="line">        String name = token.getPrincipal().toString();</span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line">        return super.onLoginSuccess(token, subject, request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected boolean onAccessDenied(ServletRequest request, ServletResponse response) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;拒绝访问&quot;);</span><br><span class="line">        return super.onAccessDenied(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected boolean onLoginFailure(AuthenticationToken token, AuthenticationException e, ServletRequest request, ServletResponse response) &#123;</span><br><span class="line">        System.out.println(&quot;登录失败&quot;);</span><br><span class="line">        return super.onLoginFailure(token, e, request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在ShiroConfig 注入 自定义拦截器</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 注入 拦截器和认证</span><br><span class="line">shiroFilterFactoryBean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line">Map&lt;String,Filter&gt; filter = new HashMap&lt;&gt;();</span><br><span class="line">filter.put(&quot;authc&quot;,new AuthenticationFilter());</span><br><span class="line">shiroFilterFactoryBean.setFilters(filter);</span><br></pre></td></tr></table></figure><ol start="3"><li>拦截器的实际工作流程：<br><a href="https://blog.wuwii.com/shiro-2.html" target="_blank" rel="noopener">详见</a></li></ol><h3 id="8-Vue的简单安全认证："><a href="#8-Vue的简单安全认证：" class="headerlink" title="8.Vue的简单安全认证："></a>8.Vue的简单安全认证：</h3><ol><li><p>导入vue-cookies 使用cookie保存当前用户的状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import VueCookies from &apos;vue-cookies&apos;</span><br><span class="line">Vue.use(VueCookies);</span><br></pre></td></tr></table></figure></li><li><p>使用钩子函数对路由进行权限跳转</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">  let cookieRoles = window.$cookies.get(&quot;role&quot;);</span><br><span class="line">  if(to.path === &apos;/&apos;)&#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125; else if (!cookieRoles &amp;&amp; to.path !== &apos;/login&apos;) &#123; // cookie中有登陆用户信息跳转页面，否则到登陆页面</span><br><span class="line">    next(&apos;/login&apos;);</span><br><span class="line">  &#125; else if (to.meta.permission) &#123;// 如果该页面配置了权限属性（自定义permission）</span><br><span class="line">    // 如果是管理员权限则可进入</span><br><span class="line">    roles.indexOf(&apos;admin&apos;) &gt; -1 ? next() : next(&apos;/403&apos;);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>登录后返回状态 存入cookie中 默认保存一天</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">this.$axios.post(&apos;/login&apos;, qs.stringify(data), &#123;headers:&#123;&apos;Content-Type&apos;:&apos;application/x-www-form-urlencoded&apos;&#125;&#125;).then(function (response) &#123;</span><br><span class="line">      let res = response.data;</span><br><span class="line">      if(res[&apos;reslut&apos;] === 1)&#123;</span><br><span class="line">        self.$store.commit(&apos;Login&apos;);</span><br><span class="line">        let arr = res[&apos;info&apos;].split(&apos; &apos;);</span><br><span class="line">        window.$cookies.set(&quot;role&quot;,arr[1]);</span><br><span class="line">        window.$cookies.set(&quot;sessionId&quot;,arr[0]);</span><br><span class="line">        self.$router.push(&quot;/&quot;);</span><br><span class="line">        self.$message.success(&#123;message:&quot;登录成功&quot;&#125;);</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        self.$message.error(res[&apos;info&apos;]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).catch(function (error) &#123;</span><br><span class="line">      console.log(error);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h2 id="流程总结："><a href="#流程总结：" class="headerlink" title="流程总结："></a>流程总结：</h2><ol><li>首先 ShiroFilterFactoryBean 查询拦截规则 跳转 login（或者自己访问login）</li><li>登录验证Controller 调用 subject.login(token)</li><li>Realm接收信息，并且和数据源的数据进行对比 返回 判断结果</li><li>如果不成功 返回错误，如果成功 去往资源网站。 </li><li>ShiroFilterFactoryBean 判断资源访问权限</li><li>调用 Realm的 授权方法 从数据源获取 用户权限 返回结果</li><li>如果 不成功 返回错误。成功 允许访问 </li></ol><h3 id="思考："><a href="#思考：" class="headerlink" title="思考："></a>思考：</h3><p><img alt data-src="https://ae01.alicdn.com/kf/H0c51e33d70144f179cf8600f263263e3R.png" class="lazyload"><br>前端验证cookie是可见的 role 容易被查看 修改不安全</p><p>后端再次验证 session是否存在(超时被抹除|logout被抹除)</p><p>每次访问的时候先去过滤器一下是否session存在</p><hr><p>参考资料：</p><p><a href="https://zhuanlan.zhihu.com/p/63910997" target="_blank" rel="noopener">知乎-Shiro详解</a></p><p><a href="https://juejin.im/post/5ac78b31f265da237411387e" target="_blank" rel="noopener">掘金-spring整合shiro</a></p><p><a href="https://www.bilibili.com/video/av40342174" target="_blank" rel="noopener">B站视频</a></p><ul><li><p>Apache Shiro 是ASF旗下的一款开源软件（Shiro发音为“shee-roh”，日语“堡垒（Castle）”的意思），提供了一个强大而灵活的安全框架。可为任何应用提供安全保障— 从命令行应用、移动应用到大型网络及企业应用。</p></li><li><p>Apache Shiro提供了认证、授权、加密和会话管理功能，将复杂的问题隐藏起来，提供清晰直观的API使开发者可以很轻松地开发自己的程序安全代码。并且在实现此目标时无须依赖第三方的框架、容器或服务，当然也能做到与这些环境的整合，使其在任何环境下都可拿来使用。</p></li></ul><h2 id="Shiro的核心四部分-1"><a href="#Shiro的核心四部分-1" class="headerlink" title="Shiro的核心四部分"></a>Shiro的核心四部分</h2><ul><li><p>认证（Authentication）：用户身份识别。有时可看作为“登录（login）”，它是用户证明自己是谁的一个行为。</p></li><li><p>授权（Authorization）：访问控制过程，好比决定“认证（who）”可以访问“什么（what）”.</p></li><li><p>会话管理（SessionManagement）：管理用户的会话（sessions），甚至在没有WEB或EJB容器的环境中。管理用户与时间相关的状态。</p></li><li><p>加密（Cryptography）：使用加密算法保护数据更加安全，防止数据被偷窥。</p></li></ul><h3 id="1-Spring整合Shiro-1"><a href="#1-Spring整合Shiro-1" class="headerlink" title="1.Spring整合Shiro"></a>1.Spring整合Shiro</h3><ol><li>pom 依赖<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--整合shiro--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-ShiroConfig-1"><a href="#2-ShiroConfig-1" class="headerlink" title="2. ShiroConfig"></a>2. ShiroConfig</h3><ul><li>shiro的基本配置</li><li>1.ShiroFilterFactoryBean    #Shiro对外的接口，代表当前“用户”</li><li>2.DefaultWebSecurityManager   #关联realm</li><li>3.UserRealm   #负责登录验证和资源授权</li><li><img alt data-src="https://pic2.zhimg.com/80/v2-8526e78cc56a9505dcca6d0f3fcac3dd_hd.jpg" class="lazyload"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">package io.kid1999.operatesystem.config;</span><br><span class="line"></span><br><span class="line">import org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line">import org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line">import org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">import java.util.LinkedHashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kid1999</span><br><span class="line"> * @title: Shiro 的 配置</span><br><span class="line"> * @date 2019/11/26 21:27</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class ShiroConfig &#123;</span><br><span class="line"></span><br><span class="line">// 3. 创建 ShiroFilterFactoryBean</span><br><span class="line">@Bean</span><br><span class="line">public ShiroFilterFactoryBean getShiroFilterFactoryBean(@Qualifier(&quot;securityManager&quot;) DefaultWebSecurityManager securityManager)&#123;</span><br><span class="line">ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();</span><br><span class="line">// 设置安全管理器</span><br><span class="line">shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">/**  添加Shiro的内置过滤器</span><br><span class="line"> * 常用：</span><br><span class="line"> * anon : 无需认证（登录） 可以访问</span><br><span class="line"> * authc ：必须认证才可以访问</span><br><span class="line"> * user : 如果使用remenberMe功能可以直接访问</span><br><span class="line"> * perms: 该资源必须获得相关权限才可访问</span><br><span class="line"> * role: 该资源必须获得角色权限才可以访问</span><br><span class="line"> *</span><br><span class="line"> *  注意： 这个授权拦截链 是按顺序执行的！！！</span><br><span class="line"> */</span><br><span class="line">Map&lt;String,String&gt; filterMap = new LinkedHashMap&lt;&gt;();</span><br><span class="line">filterMap.put(&quot;/&quot;,&quot;anon&quot;);</span><br><span class="line">filterMap.put(&quot;/login&quot;,&quot;anon&quot;);</span><br><span class="line">filterMap.put(&quot;/error&quot;,&quot;anon&quot;);</span><br><span class="line">//filterMap.put(&quot;/admin&quot;,&quot;authc&quot;);</span><br><span class="line"></span><br><span class="line">// 权限过滤器  也可以设置角色过滤</span><br><span class="line">filterMap.put(&quot;/admin&quot;,&quot;perms[user:admin]&quot;);</span><br><span class="line"></span><br><span class="line">shiroFilterFactoryBean.setLoginUrl(&quot;/login&quot;);       // 设置跳转的登录页面</span><br><span class="line">shiroFilterFactoryBean.setUnauthorizedUrl(&quot;/noAuth&quot;);   // 设置未授权访问页面</span><br><span class="line">shiroFilterFactoryBean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line"></span><br><span class="line">return shiroFilterFactoryBean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 2. 创建DefaultWebSecurityManager </span><br><span class="line">// 所有与安全有关的操作都会与SecurityManager进行交互</span><br><span class="line">@Bean(name = &quot;securityManager&quot;)</span><br><span class="line">public DefaultWebSecurityManager getDefaultWebSecurityManager(@Qualifier(&quot;getRealm&quot;) UserRealm userRealm)&#123;</span><br><span class="line">DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();</span><br><span class="line">// 关联realm</span><br><span class="line">securityManager.setRealm(getRealm());</span><br><span class="line">return securityManager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 1. 创建Realm</span><br><span class="line">// Shiro从Realm获取安全数据（用户、角色、权限）</span><br><span class="line">@Bean</span><br><span class="line">public UserRealm getRealm()&#123;</span><br><span class="line">return new UserRealm();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-UserRealm-1"><a href="#3-UserRealm-1" class="headerlink" title="3. UserRealm"></a>3. UserRealm</h3><ul><li>Shiro从从Realm获取安全数据（如用户、角色、权限）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">package io.kid1999.operatesystem.config;</span><br><span class="line"></span><br><span class="line">import io.kid1999.operatesystem.model.Admin;</span><br><span class="line">import io.kid1999.operatesystem.repository.AdminRepository;</span><br><span class="line">import org.apache.shiro.authc.*;</span><br><span class="line">import org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line">import org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class="line">import org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line">import org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kid1999</span><br><span class="line"> * @title: UserRealm 自定义 realm 处理 授权和认证</span><br><span class="line"> * @date 2019/11/26 21:29</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class UserRealm extends AuthorizingRealm  &#123;</span><br><span class="line">@Autowired</span><br><span class="line">private AdminRepository adminRepository;</span><br><span class="line"></span><br><span class="line">// 授权执行逻辑</span><br><span class="line">@Override</span><br><span class="line">protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) &#123;</span><br><span class="line">System.out.println(&quot;授权执行逻辑&quot;);</span><br><span class="line"></span><br><span class="line">// 给资源进行授权</span><br><span class="line">SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();</span><br><span class="line"></span><br><span class="line">// 添加资源授权字符串</span><br><span class="line">info.addStringPermission(&quot;user:admin&quot;);</span><br><span class="line"></span><br><span class="line">return info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 认证执行逻辑</span><br><span class="line">@Override</span><br><span class="line">protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException &#123;</span><br><span class="line">System.out.println(&quot;认证执行逻辑&quot;);</span><br><span class="line"></span><br><span class="line">// 1. 获取传来验证的token</span><br><span class="line">UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken;</span><br><span class="line">String name = token.getUsername();</span><br><span class="line">String password = String.valueOf(token.getPassword());</span><br><span class="line">// 2. 通过用户名 取出数据库的数据</span><br><span class="line">Admin user = adminRepository.findByAdminId(name);</span><br><span class="line"></span><br><span class="line">// 3. 判断用户名</span><br><span class="line">if (user == null)&#123;</span><br><span class="line">return null;        // 找不到用户名 报 UnknownAccountException</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 4. 判断密码</span><br><span class="line">/**</span><br><span class="line"> * arg0: 回传login的数据</span><br><span class="line"> * arg1: 数据库的密码</span><br><span class="line"> * arg2: realm 的name</span><br><span class="line"> */</span><br><span class="line">return new SimpleAuthenticationInfo(&quot;&quot;,user.getAdminPwd(),&quot;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-AdminRepository-链接数据库-1"><a href="#4-AdminRepository-链接数据库-1" class="headerlink" title="4.AdminRepository 链接数据库"></a>4.AdminRepository 链接数据库</h3><ul><li>Realm 会连接数据源 进行身份验证</li><li>此处放上我的JPA</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package io.kid1999.operatesystem.repository;</span><br><span class="line">import io.kid1999.operatesystem.model.Admin;</span><br><span class="line">import org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line">import org.springframework.data.jpa.repository.Query;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kid1999</span><br><span class="line"> * @title: ManagerRepository</span><br><span class="line"> * @date 2019/11/24 10:07</span><br><span class="line"> */</span><br><span class="line">public interface AdminRepository extends JpaRepository&lt;Admin,Integer&gt; &#123;</span><br><span class="line">@Query(value = &quot;select * from admin m where m.admin_id = ?1 and m.admin_pwd = ?2&quot; ,nativeQuery = true)</span><br><span class="line">Admin login(String studentId, String passWord);</span><br><span class="line"></span><br><span class="line">Admin findByAdminId(String adminId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-登录Controller-1"><a href="#5-登录Controller-1" class="headerlink" title="5.登录Controller"></a>5.登录Controller</h3><ul><li>此处没有使用加密 和 缓存机制<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 使用Shiro实现登录</span><br><span class="line"> */</span><br><span class="line">@PostMapping(&quot;/login&quot;)</span><br><span class="line">String toLogin(String studentId,</span><br><span class="line">               String passWord,</span><br><span class="line">               Model model)&#123;</span><br><span class="line">// 1.获取Subject</span><br><span class="line">Subject subject = SecurityUtils.getSubject();</span><br><span class="line">// 2.封装登录方法</span><br><span class="line">UsernamePasswordToken token = new UsernamePasswordToken(studentId,passWord);</span><br><span class="line">// 3.执行登录方法</span><br><span class="line">try &#123;</span><br><span class="line">subject.login(token);       // 调用login方法 -&gt; realm 做验证</span><br><span class="line">return &quot;admin&quot;;</span><br><span class="line">&#125;catch (UnknownAccountException e)&#123;</span><br><span class="line">model.addAttribute(&quot;msg&quot;,&quot;用户名不存在&quot;);</span><br><span class="line">return &quot;login&quot;;</span><br><span class="line">&#125;catch (IncorrectCredentialsException e)&#123;</span><br><span class="line">model.addAttribute(&quot;msg&quot;,&quot;密码错误&quot;);</span><br><span class="line">return &quot;login&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="流程总结：-1"><a href="#流程总结：-1" class="headerlink" title="流程总结："></a>流程总结：</h2><ol><li>首先 ShiroFilterFactoryBean 查询拦截规则 跳转 login（或者自己访问login）</li><li>登录验证Controller 调用 subject.login(token)</li><li>Realm接收信息，并且和数据源的数据进行对比 返回 判断结果</li><li>如果不成功 返回错误，如果成功 去往资源网站。 </li><li>ShiroFilterFactoryBean 判断资源访问权限</li><li>调用 Realm的 授权方法 从数据源获取 用户权限 返回结果</li><li>如果 不成功 返回错误。成功 允许访问 </li></ol><hr><p>参考资料：</p><p><a href="https://zhuanlan.zhihu.com/p/63910997" target="_blank" rel="noopener">知乎-Shiro详解</a></p><p><a href="https://www.bilibili.com/video/av40342174" target="_blank" rel="noopener">B站视频</a></p>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shiro </tag>
            
            <tag> security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jpa基础知识点</title>
      <link href="/2019/11/27/Jpa%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2019/11/27/Jpa%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="Jpa基础知识点"><a href="#Jpa基础知识点" class="headerlink" title="Jpa基础知识点"></a>Jpa基础知识点</h1><ul><li>JPA是Java Persistence API的简称，中文名Java持久层API，是JDK 5.0注解或XML描述对象－关系表的映射关系，并将运行期的实体对象持久化到数据库中。</li><li>Spring Data JPA是较大的Spring Data系列的一部分，可轻松实现基于JPA的存储库。该模块处理对基于JPA的数据访问层的增强支持。它使构建使用数据访问技术的Spring支持的应用程序变得更加容易。</li></ul><h2 id="1-JPA的基本配置"><a href="#1-JPA的基本配置" class="headerlink" title="1.JPA的基本配置"></a>1.JPA的基本配置</h2><ol><li>pom依赖</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="2-项目配置文件"><a href="#2-项目配置文件" class="headerlink" title="2. 项目配置文件"></a>2. 项目配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  # mysql 配置：</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql://10.16.11.211:3306/test?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf8</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">  jpa:</span><br><span class="line">    hibernate:</span><br><span class="line">      ddl-auto: update</span><br><span class="line">    show-sql: true</span><br><span class="line">    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect  #不加这句则默认为myisam引擎</span><br><span class="line">    open-in-view: true</span><br></pre></td></tr></table></figure><h2 id="3-创建一个简单实体类"><a href="#3-创建一个简单实体类" class="headerlink" title="3. 创建一个简单实体类"></a>3. 创建一个简单实体类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package io.kid1999.teacher_manager.model;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import javax.persistence.*;</span><br><span class="line"></span><br><span class="line">@Entity     // 表示这是一个数据库实体</span><br><span class="line">@Table(name = &quot;user&quot;)   // 表示对于的表，不设置name时 默认和类名相同</span><br><span class="line">@Data   </span><br><span class="line">public class User &#123;</span><br><span class="line"></span><br><span class="line">@Id     // 指定 ID</span><br><span class="line">@GeneratedValue  // 指定主键生成策略，默认自增长</span><br><span class="line">@Column(name = &quot;id&quot;)</span><br><span class="line">private Integer id;</span><br><span class="line"></span><br><span class="line">@Basic   // 默认会加上这个注解，表示该属性到数据库同名字段的映射</span><br><span class="line">private String addr;</span><br><span class="line"></span><br><span class="line">@Column(name = &quot;name&quot;)      // 默认不写的时候=Basic 表示该属性到数据库name字段的映射</span><br><span class="line">private String name;</span><br><span class="line"></span><br><span class="line">@Transient  // 表示此字段与数据库无关，取消@Basic</span><br><span class="line">private String info;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@GeneratedValue JPA自带的几种主键生成策略：</span><br><span class="line">TABLE： 使用一个特定的数据库表格来保存主键。</span><br><span class="line">SEQUENCE： 根据底层数据库的序列来生成主键，条件是数据库支持序列。这个值要与generator一起使用，generator 指定生成主键使用的生成器（可能是orcale中自己编写的序列）。</span><br><span class="line">IDENTITY： 主键由数据库自动生成（主要是支持自动增长的数据库，如mysql）。</span><br><span class="line">AUTO： 主键由程序控制，也是GenerationType的默认值。</span><br></pre></td></tr></table></figure><h2 id="4-创建一些关联关系的对象"><a href="#4-创建一些关联关系的对象" class="headerlink" title="4. 创建一些关联关系的对象"></a>4. 创建一些关联关系的对象</h2><ul><li>关联关系必须注意维护端和被维护端的选取</li><li><ol><li>在一对多中，多的一方作为维护端，一的一方作为被维护端</li></ol></li><li><ol start="2"><li>在一对一中，任意选取一方作为维护端，宁一方作为被维护端</li></ol></li><li><ol start="3"><li>在多对多中，任意选取一方作为维护端，但必须记住中间表的关系由维护端负责</li></ol></li></ul><h3 id="1-多对一-的配置"><a href="#1-多对一-的配置" class="headerlink" title="1. 多对一 的配置"></a>1. 多对一 的配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package io.kid1999.teacher_manager.model;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import javax.persistence.*;</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">@Entity</span><br><span class="line">@Table</span><br><span class="line">public class Student &#123;</span><br><span class="line">    @Id</span><br><span class="line">    private Integer studentId;</span><br><span class="line">    private String studentName;</span><br><span class="line">    private Integer gradeId;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 多对一 ManyToOne</span><br><span class="line">     * JPA中，many一端作为维护端，One一端作为被维护端</span><br><span class="line">     * many一方指定@ManyToOne注解 ，并使用 @JoinClomn指定关联的外键</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    @ManyToOne(targetEntity = Grade.class,fetch = FetchType.LAZY)  //对应的对象,且设置为懒加载（不在每一次查询时都进行多表关联）</span><br><span class="line">    @JoinColumn(name = &quot;gradeId&quot;,insertable = false,updatable = false)   //对应关联的键,在插入更新时不插入grade</span><br><span class="line">    private Grade grade;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 必须重新toString  不然在打印时候会递归查询 grade</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;&quot; +</span><br><span class="line">                &quot;studentId=&quot; + studentId +</span><br><span class="line">                &quot;, studentName=&apos;&quot; + studentName + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, gradeId=&quot; + gradeId +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-一对多-的配置"><a href="#2-一对多-的配置" class="headerlink" title="2. 一对多 的配置"></a>2. 一对多 的配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package io.kid1999.teacher_manager.model;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line">import javax.persistence.*;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">@Entity</span><br><span class="line">@Table</span><br><span class="line">public class Grade &#123;</span><br><span class="line">    @Id</span><br><span class="line">    private Integer gradeId;</span><br><span class="line">    private String gradeName;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 一对多 OneTOMany</span><br><span class="line">     * 可以在 One 一方指定@OneToMany注释 并设置 mappedBy属性，以指定他是这一关联中被维护的一端</span><br><span class="line">     */</span><br><span class="line">    @OneToMany(mappedBy = &quot;grade&quot;)</span><br><span class="line">    private List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试：学生和班级之间的多对一关系"><a href="#测试：学生和班级之间的多对一关系" class="headerlink" title="测试：学生和班级之间的多对一关系"></a>测试：学生和班级之间的多对一关系</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">  @Autowired</span><br><span class="line">  private StudentRepository studentRepository;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private GradeRepository gradeRepository;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">@Transactional</span><br><span class="line">void TestManyToOne()&#123;</span><br><span class="line">    Student student = new Student();</span><br><span class="line">    student.setStudentId(1212);</span><br><span class="line">    student.setStudentName(&quot;kid&quot;);</span><br><span class="line">    student.setGradeId(1);</span><br><span class="line">    studentRepository.save(student);    // 插入</span><br><span class="line">    Grade grade = studentRepository.getOne(1212).getGrade();</span><br><span class="line">    System.out.println(grade.getGradeId() + grade.getGradeName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">@Transactional</span><br><span class="line">void TestOnTomany()&#123;</span><br><span class="line">    Grade grade = new Grade();</span><br><span class="line">    grade.setGradeId(2);</span><br><span class="line">    grade.setGradeName(&quot;math&quot;);</span><br><span class="line">    gradeRepository.save(grade);    // 插入</span><br><span class="line">    List&lt;Student&gt; students = gradeRepository.getOne(1).getStudents();   // 外键查询</span><br><span class="line">    System.out.println(students);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-一对一-的配置"><a href="#3-一对一-的配置" class="headerlink" title="3. 一对一 的配置"></a>3. 一对一 的配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package io.kid1999.teacher_manager.model;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line">import javax.persistence.*;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">@Entity</span><br><span class="line">@Table</span><br><span class="line">public class Grade &#123;</span><br><span class="line">    @Id</span><br><span class="line">    private Integer gradeId;</span><br><span class="line">    private String gradeName;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 一对多 OneTOMany</span><br><span class="line">     * 可以在 One 一方指定@OneToMany注释 并设置 mappedBy属性，以指定他是这一关联中被维护的一端</span><br><span class="line">     */</span><br><span class="line">    @OneToMany(mappedBy = &quot;grade&quot;, fetch = FetchType.LAZY)</span><br><span class="line">    private List&lt;Student&gt; students;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 一对一 被维护端</span><br><span class="line">     */</span><br><span class="line">    @OneToOne(mappedBy = &quot;grade&quot;)</span><br><span class="line">    private Teacher teacher;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Grade&#123;&quot; +</span><br><span class="line">                &quot;gradeId=&quot; + gradeId +</span><br><span class="line">                &quot;, gradeName=&apos;&quot; + gradeName + &apos;\&apos;&apos; +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package io.kid1999.teacher_manager.model;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line">import javax.persistence.*;</span><br><span class="line"></span><br><span class="line">@Entity</span><br><span class="line">@Table</span><br><span class="line">@Data</span><br><span class="line">public class Teacher &#123;</span><br><span class="line">    @Id</span><br><span class="line">    @GeneratedValue</span><br><span class="line">    private Integer teacherId;</span><br><span class="line">    private String teacherName;</span><br><span class="line">    private Integer gradeId;</span><br><span class="line"></span><br><span class="line">    // OnToOne 维护端</span><br><span class="line">    @OneToOne</span><br><span class="line">    @JoinColumn(name = &quot;gradeId&quot;,insertable = false,updatable = false,unique = true) // 查询唯一</span><br><span class="line">    private Grade grade;</span><br><span class="line"></span><br><span class="line">    // 重写toString</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Teacher&#123;&quot; +</span><br><span class="line">                &quot;teacherId=&quot; + teacherId +</span><br><span class="line">                &quot;, taacherName=&quot; + teacherName +</span><br><span class="line">                &quot;, gradeId=&quot; + gradeId +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-教师和班级之间的一对一关系"><a href="#测试-教师和班级之间的一对一关系" class="headerlink" title="测试 教师和班级之间的一对一关系"></a>测试 教师和班级之间的一对一关系</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Transactional</span><br><span class="line">void TestOneToOne()&#123;</span><br><span class="line">//    Teacher teacher = new Teacher();</span><br><span class="line">//    teacher.setGradeId(2);</span><br><span class="line">//    teacher.setTeacherName(&quot;hello&quot;);</span><br><span class="line">//    teacherResitory.saveAndFlush(teacher);</span><br><span class="line">    Teacher teacher1 = teacherResitory.getOne(7);</span><br><span class="line">    Grade grade = teacher1.getGrade();</span><br><span class="line">    System.out.println(grade);</span><br><span class="line">    System.out.println(grade.getStudents());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-多对多-的配置"><a href="#3-多对多-的配置" class="headerlink" title="3.多对多 的配置"></a>3.多对多 的配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package io.kid1999.teacher_manager.model;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line">import javax.persistence.*;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">@Entity</span><br><span class="line">@Table</span><br><span class="line">public class Student &#123;</span><br><span class="line">    @Id</span><br><span class="line">    private Integer studentId;</span><br><span class="line">    private String studentName;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 多对一 ManyToOne</span><br><span class="line">     * JPA中，many一端作为维护端，One一端作为被维护端</span><br><span class="line">     * many一方指定@ManyToOne注解 ，并使用 @JoinClomn指定关联的外键</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    private Integer gradeId;</span><br><span class="line">    @ManyToOne(targetEntity = Grade.class,fetch = FetchType.LAZY)  //对应的对象,且设置为懒加载（不在每一次查询时都进行多表关联）</span><br><span class="line">    @JoinColumn(name = &quot;gradeId&quot;,insertable = false,updatable = false)   //对应关联的键,在插入更新时不插入grade</span><br><span class="line">    private Grade grade;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 多对多的维护端  需要一个中间表进行维护</span><br><span class="line">     */</span><br><span class="line">    @ManyToMany</span><br><span class="line">    @JoinTable(name = &quot;students_roles&quot;,  // 指定中间表名</span><br><span class="line">        joinColumns =&#123;@JoinColumn(name = &quot;studentId&quot;,referencedColumnName = &quot;studentId&quot;)&#125;,   // 指定中间表和student的关联</span><br><span class="line">        inverseJoinColumns = &#123;@JoinColumn(name = &quot;roleId&quot;,referencedColumnName = &quot;roleId&quot;)&#125;  // 指定中间表和role的关联</span><br><span class="line">    )</span><br><span class="line">    private List&lt;Role&gt; roles;</span><br><span class="line"></span><br><span class="line">    // 必须重新toString  不然在打印时候会递归查询 grade</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;&quot; +</span><br><span class="line">                &quot;studentId=&quot; + studentId +</span><br><span class="line">                &quot;, studentName=&apos;&quot; + studentName + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, gradeId=&quot; + gradeId +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package io.kid1999.teacher_manager.model;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line">import javax.persistence.*;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">@Entity</span><br><span class="line">@Table</span><br><span class="line">public class Role &#123;</span><br><span class="line">    @Id</span><br><span class="line">    private Integer roleId;</span><br><span class="line">    private String roleName;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 多对多 被维护端</span><br><span class="line">     */</span><br><span class="line">    @ManyToMany(mappedBy = &quot;roles&quot;)</span><br><span class="line">    private List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-学生和身份之间的多对多关系"><a href="#测试-学生和身份之间的多对多关系" class="headerlink" title="测试 学生和身份之间的多对多关系"></a>测试 学生和身份之间的多对多关系</h4><ul><li>选取的学生作为维护端 所以只能在学生注册时添加对应的关系<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Transactional</span><br><span class="line">void TestManyToMany()&#123;</span><br><span class="line">    Student student = new Student();</span><br><span class="line">    student.setStudentId(123);</span><br><span class="line">    student.setStudentName(&quot;kid&quot;);</span><br><span class="line">    student.setGradeId(2);</span><br><span class="line">    student.setRoles(roleRepository.findAll());</span><br><span class="line">    studentRepository.save(student);    // 插入</span><br><span class="line"></span><br><span class="line">//    Role role = new Role();</span><br><span class="line">//    role.setRoleId(1);</span><br><span class="line">//    role.setRoleName(&quot;hello&quot;);</span><br><span class="line">//    roleRepository.save(role);</span><br><span class="line"></span><br><span class="line">//    Student student = studentRepository.getOne(111);</span><br><span class="line">//    List&lt;Role&gt; roles = student.getRoles();</span><br><span class="line">//    System.out.println(roles);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h4><ol><li>维护端和被维护端的选取</li><li>懒加载</li><li>JoinColumn关联列是否需要插入和更新</li><li>toString的死循环问题</li></ol><h2 id="4-Repository-层-实现-Repository-标准"><a href="#4-Repository-层-实现-Repository-标准" class="headerlink" title="4. Repository 层 实现 Repository 标准"></a>4. Repository 层 实现 Repository 标准</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Repository</span><br><span class="line">public interface AccountRepository extends JpaRepository&lt;Account,String&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-Repository-的继承关系"><a href="#5-Repository-的继承关系" class="headerlink" title="5.Repository 的继承关系"></a>5.Repository 的继承关系</h2><p><img alt data-src="https://pic1.superbed.cn/item/5ddd4baf8e0e2e3ee99f0395.png" class="lazyload"></p><ul><li>epository：空接口，表名任何继承它的均为仓库接口类</li><li>CrudRepository：继承Repository，实现了一组CRUD相关的方法</li><li>PagingAndSortingRepository：继承CrudRepository，实现了一组分页、排序相关的方法</li><li>JpaRepository：继承PagingAndSortRepository，实现一组JPA规范相关的方法<br>自定义的XxxRepository需要继承JpaRepository，这样该接口就具备了通用的数据访问控制层的能力。</li></ul><p><img alt data-src="https://pic1.superbed.cn/item/5ddd4baf8e0e2e3ee99f0393.png" class="lazyload"></p><h2 id="6-Repository的几种写法"><a href="#6-Repository的几种写法" class="headerlink" title="6.Repository的几种写法"></a>6.Repository的几种写法</h2><h4 id="自带的方法"><a href="#自带的方法" class="headerlink" title="自带的方法"></a>自带的方法</h4><ul><li>如： Save(), findAll()， getXXX() ….<h4 id="简单命名拼凑"><a href="#简单命名拼凑" class="headerlink" title="简单命名拼凑"></a>简单命名拼凑</h4></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; findUserByName(String name);</span><br></pre></td></tr></table></figure><h4 id="使用HSQL"><a href="#使用HSQL" class="headerlink" title="使用HSQL"></a>使用HSQL</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**  2. HQL</span><br><span class="line"> * HQL 和 JPQL 语法是一样的</span><br><span class="line"> * sql常用关键字和JPQL一样</span><br><span class="line"> * JPQL特点： 字段，表名 由对象类型和属性代替 （区分大小写）</span><br><span class="line"> * 编码规范： Sql常用关键字全部大写,不能使用 *</span><br><span class="line"> */</span><br><span class="line"> </span><br><span class="line"> // 1.通过 ？1 传参</span><br><span class="line">@Query(&quot;SELECT u FROM User u WHERE u.name = ?1&quot;)</span><br><span class="line">List&lt;User&gt; findUserByHSql(String name);</span><br><span class="line"></span><br><span class="line">// 2.通过 参数名 传参</span><br><span class="line">@Query(&quot;SELECT u FROM User u WHERE u.name = :name&quot;)</span><br><span class="line">List&lt;User&gt; findUserByHsqlAndParams(@Param(&quot;name&quot;) String name);</span><br></pre></td></tr></table></figure><ul><li>？加数字表示占位符，？1代表在方法参数里的第一个参数，区别于其他的index，这里从1开始 </li><li>JPQL的语法中，表名的位置对应Entity的名称，字段对应Entity的属性</li><li>:加上变量名，这里是与方法参数中有@Param的值匹配的，而不是与实际参数匹配的</li></ul><h4 id="使用-原始-SQL"><a href="#使用-原始-SQL" class="headerlink" title="使用 原始 SQL"></a>使用 原始 SQL</h4><ul><li>雷同HQL， 在@Query 中 加入 nativeQuery = true</li><li>注意在修改数据的操作中必须加 @Transactional 事务注解</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//更新</span><br><span class="line">@Transactional</span><br><span class="line">@Modifying</span><br><span class="line">@Query(value = &quot;update user a set a.name=?1 where a.id= ?2&quot;,nativeQuery = true)</span><br><span class="line">int updateName(String name,Integer id);</span><br><span class="line"></span><br><span class="line">// 删除</span><br><span class="line">@Transactional</span><br><span class="line">@Modifying</span><br><span class="line">@Query(value = &quot;delete from user where id = ?1&quot;,nativeQuery = true)</span><br><span class="line">void deletIdBysql(Integer id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 使用 HQL 删除数据</span><br><span class="line">@Transactional</span><br><span class="line">@Modifying</span><br><span class="line">@Query(&quot;delete from User u where u.id = ?1&quot;)</span><br><span class="line">void deletId(Integer id);</span><br></pre></td></tr></table></figure><ul><li>数据修改操作需要加上事务注解，保证数据的一致性</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hello world </tag>
            
            <tag> JPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis基础知识点</title>
      <link href="/2019/11/25/MyBatis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2019/11/25/MyBatis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis基础知识点"><a href="#MyBatis基础知识点" class="headerlink" title="MyBatis基础知识点"></a>MyBatis基础知识点</h1><h2 id="1-基础配置"><a href="#1-基础配置" class="headerlink" title="1.基础配置"></a>1.基础配置</h2><h5 id="1-添加依赖包"><a href="#1-添加依赖包" class="headerlink" title="1.添加依赖包"></a>1.添加依赖包</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--mysql--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;8.0.16&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h5 id="2-配置log4j"><a href="#2-配置log4j" class="headerlink" title="2.配置log4j"></a>2.配置log4j</h5><p>在 resources 目录下增加文件 log4j.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=INFO, stdout</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</span><br></pre></td></tr></table></figure><h5 id="3-自定义model-POJO类"><a href="#3-自定义model-POJO类" class="headerlink" title="3.自定义model (POJO类)"></a>3.自定义model (POJO类)</h5><h5 id="4-MyBatis-的全局配置"><a href="#4-MyBatis-的全局配置" class="headerlink" title="4.MyBatis 的全局配置"></a>4.MyBatis 的全局配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!-- 数据库连接配置 --&gt;</span><br><span class="line">    &lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">        &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">            &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class="line">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/blog_db?useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line">    &lt;!-- 映射文件配置 --&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=&quot;mapper/UserMapper.xml&quot;/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h5 id="5-自定义映射接口"><a href="#5-自定义映射接口" class="headerlink" title="5.自定义映射接口"></a>5.自定义映射接口</h5><p>此接口对应映射配置中的sql语句 实现sql转对象 对象转sql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface UserMapper &#123;</span><br><span class="line">    //根据id获取用户信息</span><br><span class="line">    User findById(Long id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-编写XML映射文件"><a href="#6-编写XML映射文件" class="headerlink" title="6.编写XML映射文件"></a>6.编写XML映射文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC</span><br><span class="line">        &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">        &lt;!-- 对应映射接口的命名空间 --&gt;</span><br><span class="line">&lt;mapper namespace=&quot;mapper.UserMapper&quot;&gt;</span><br><span class="line">    &lt;!-- findById对应接口中的方法 --&gt;</span><br><span class="line">    &lt;select id=&quot;findById&quot; parameterType=&quot;java.lang.Long&quot; resultType=&quot;bean.User&quot;&gt;</span><br><span class="line">        select * from blog_db.user where id=#&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br><span class="line"></span><br><span class="line">注释：</span><br><span class="line">id 对应 接口中的方法名</span><br><span class="line">parameterType ： sql语句中参数的类型</span><br><span class="line">resultType ：返回结果类型</span><br><span class="line">#&#123;id&#125; ： 占位</span><br></pre></td></tr></table></figure><h5 id="7-主函数调用"><a href="#7-主函数调用" class="headerlink" title="7.主函数调用"></a>7.主函数调用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">  public static void main(String[] args) throws Exception&#123;</span><br><span class="line">    // 1.新建session工厂构建类</span><br><span class="line">    SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();</span><br><span class="line">    // 2.session工厂构建类  读取配置文件构造 session工厂</span><br><span class="line">    SqlSessionFactory sessionFactory = sqlSessionFactoryBuilder.build(</span><br><span class="line">            Resources.getResourceAsReader(&quot;mybatis-config.xml&quot;),</span><br><span class="line">            &quot;development&quot;  // 这个参数可以省略，因为 mybatis-config.xml 的&lt;environments&gt;标签指定了默认环境为development</span><br><span class="line">    );</span><br><span class="line">    // 3.会话工厂 构建 会话</span><br><span class="line">    SqlSession sqlSession = sessionFactory.openSession();</span><br><span class="line">    // 4.调用session的操作数据库的一个操作</span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    User user = userMapper.findById(1L);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    // 5.关闭会话</span><br><span class="line">    sqlSession.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基本使用结束—————————"><a href="#基本使用结束—————————" class="headerlink" title="基本使用结束—————————"></a>基本使用结束—————————</h3><h4 id="1-使class的字段与sql中不一致的字段-一一对应"><a href="#1-使class的字段与sql中不一致的字段-一一对应" class="headerlink" title="1.使class的字段与sql中不一致的字段 一一对应"></a>1.使class的字段与sql中不一致的字段 一一对应</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">方案一  新建map规则：</span><br><span class="line">&lt;!-- 此处将User对象的username与sql的name对应 --&gt;</span><br><span class="line">&lt;resultMap id=&quot;userResult&quot; type=&quot;bean.User&quot;&gt;</span><br><span class="line">    &lt;result property=&quot;username&quot; column=&quot;name&quot; javaType=&quot;String&quot; jdbcType=&quot;VARCHAR&quot;/&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line">                                        &lt;!-- 此处遵循userResult的映射规则 --&gt;</span><br><span class="line">&lt;select id=&quot;findById&quot; parameterType=&quot;Long&quot; resultMap=&quot;userResult&quot; resultType=&quot;bean.User&quot;&gt;</span><br><span class="line">    select * from blog_db.user where id=#&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">方案二  修改查询语句使符合字段：</span><br><span class="line">select id, name AS username, email, password from blog_db.user where id=#&#123;id&#125;</span><br></pre></td></tr></table></figure><h4 id="2-多参数查询"><a href="#2-多参数查询" class="headerlink" title="2.多参数查询"></a>2.多参数查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">方案一： 使用默认的param*占位</span><br><span class="line">在接口中配置：</span><br><span class="line">User findUserByNameAndPassWd(String name,String passwd);</span><br><span class="line">在xml中配置：</span><br><span class="line">&lt;select id=&quot;findUserByNameAndPassWd&quot; resultType=&quot;model.User&quot;&gt;</span><br><span class="line">  select * from blog_db.user where name=#&#123;param1&#125; and password=#&#123;param2&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">方案二：使用注解注入参数名 使用参数占位</span><br><span class="line">在接口中配置：</span><br><span class="line">User findUserByNameAndPassWd2(@Param(&quot;name&quot;) String name, @Param(&quot;passwd&quot;) String passwd);</span><br><span class="line">在xml中配置：</span><br><span class="line">&lt;select id=&quot;findUserByNameAndPassWd2&quot; resultType=&quot;model.User&quot;&gt;</span><br><span class="line">  select * from blog_db.user where name=#&#123;name&#125; and password=#&#123;passwd&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h4 id="3-Sort的小细节"><a href="#3-Sort的小细节" class="headerlink" title="3.Sort的小细节"></a>3.Sort的小细节</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">排序的参数不能使用#&#123;&#125; 只能用$&#123;&#125;</span><br><span class="line">&lt;select id=&quot;TestSort&quot; resultType=&quot;model.User&quot;&gt;</span><br><span class="line">  select * from blog_db.user order by $&#123;orderRule&#125; desc</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h4 id="4-事务："><a href="#4-事务：" class="headerlink" title="4.事务："></a>4.事务：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">得到一个数据库的操作对象</span><br><span class="line">UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">然后进行操作：</span><br><span class="line">对于insert delete 和 update 需要有手动提交事务</span><br><span class="line">userMapper.xxx(操作)</span><br><span class="line">sqlSession.rollback(true);  // 强制回滚</span><br><span class="line">sqlSession.commit();  //提交</span><br><span class="line">sqlSession.commit(true);  // 强制提交</span><br></pre></td></tr></table></figure><h4 id="5-动态Sql"><a href="#5-动态Sql" class="headerlink" title="5.动态Sql"></a>5.动态Sql</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">如果该字段不为空就加入where中进行比较</span><br><span class="line">&lt;select id=&quot;find&quot; resultType=&quot;model.User&quot; parameterType=&quot;model.User&quot;&gt;</span><br><span class="line">    select * from blog_db.user</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;if test=&quot; id != null&quot;&gt;</span><br><span class="line">            and id = #&#123;id&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;name != null&quot;&gt;</span><br><span class="line">            and name = #&#123;name&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;email != null&quot;&gt;</span><br><span class="line">            and email = #&#123;email&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;password != null&quot;&gt;</span><br><span class="line">            and password = #&#123;password&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h4 id="6-一对一和一对多连表查询-返回混合值"><a href="#6-一对一和一对多连表查询-返回混合值" class="headerlink" title="6.一对一和一对多连表查询 返回混合值"></a>6.一对一和一对多连表查询 返回混合值</h4><ol><li>使用扩展类，存储返回的数据 （一对一）</li><li>模型里有模型  （一对一）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap id=&quot;blogResult&quot; type=&quot;bean.Blog&quot;&gt;</span><br><span class="line">    &lt;result property=&quot;id&quot; column=&quot;blog_id&quot;/&gt;</span><br><span class="line">    &lt;result property=&quot;ownerId&quot; column=&quot;user_id&quot;/&gt;</span><br><span class="line">    &lt;result property=&quot;title&quot; column=&quot;blog_title&quot;/&gt;</span><br><span class="line">    &lt;result property=&quot;content&quot; column=&quot;blog_content&quot;/&gt;</span><br><span class="line">    &lt;!--模型里有模型 association--&gt;</span><br><span class="line">    &lt;association property=&quot;user&quot; javaType=&quot;bean.User&quot;&gt;</span><br><span class="line">        &lt;id property=&quot;id&quot; column=&quot;user_id&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;name&quot; column=&quot;user_name&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;email&quot; column=&quot;user_email&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;password&quot; column=&quot;user_password&quot;/&gt;</span><br><span class="line">    &lt;/association&gt;</span><br><span class="line"></span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=&quot;findById&quot; parameterType=&quot;Long&quot; resultMap=&quot;blogResult&quot; resultType=&quot;bean.Blog&quot;&gt;</span><br><span class="line">    SELECT</span><br><span class="line">        blog.id AS blog_id,</span><br><span class="line">        blog.title AS blog_title,</span><br><span class="line">        blog.content AS blog_content,</span><br><span class="line">        user.id AS user_id,</span><br><span class="line">        user.name AS user_name,</span><br><span class="line">        user.email AS user_email,</span><br><span class="line">        user.password AS user_password</span><br><span class="line">    FROM blog, user </span><br><span class="line">    WHERE </span><br><span class="line">        blog.id = #&#123;id&#125; </span><br><span class="line">        AND user.id=blog.owner_id;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h4 id="3-模型里有集合-（一对多）"><a href="#3-模型里有集合-（一对多）" class="headerlink" title="3. 模型里有集合  （一对多）"></a>3. 模型里有集合  （一对多）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">    &lt;!--首先创建map映射关系--&gt;</span><br><span class="line">&lt;resultMap id=&quot;userResult&quot; type=&quot;model.User&quot;&gt;</span><br><span class="line">    &lt;result property=&quot;id&quot; column=&quot;user_id&quot;/&gt;</span><br><span class="line">    &lt;result property=&quot;name&quot; column=&quot;user_name&quot;/&gt;</span><br><span class="line">    &lt;result property=&quot;email&quot; column=&quot;user_email&quot;/&gt;</span><br><span class="line">    &lt;result property=&quot;password&quot; column=&quot;user_password&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--result里有集合 collection--&gt;</span><br><span class="line">    &lt;collection property=&quot;blogs&quot; ofType=&quot;model.Blog&quot;&gt;</span><br><span class="line">        &lt;id property=&quot;id&quot; column=&quot;blog_id&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;ownerId&quot; column=&quot;user_id&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;title&quot; column=&quot;blog_title&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;content&quot; column=&quot;blog_content&quot;/&gt;</span><br><span class="line">    &lt;/collection&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=&quot;findById&quot; parameterType=&quot;Long&quot; resultMap=&quot;userResult&quot; resultType=&quot;model.User&quot;&gt;</span><br><span class="line">    SELECT</span><br><span class="line">        user.id AS user_id,</span><br><span class="line">        user.name AS user_name,</span><br><span class="line">        user.email AS user_email,</span><br><span class="line">        user.password AS user_password,</span><br><span class="line">        blog.id AS blog_id,</span><br><span class="line">        blog.title AS blog_title,</span><br><span class="line">        blog.content AS blog_content</span><br><span class="line">    FROM user, blog</span><br><span class="line">    WHERE</span><br><span class="line">        user.id = 1</span><br><span class="line">        AND user.id=blog.owner_id;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h4 id="7-两个表的查询关联"><a href="#7-两个表的查询关联" class="headerlink" title="7.两个表的查询关联"></a>7.两个表的查询关联</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">这个mapper是BlogMapper的xml配置</span><br><span class="line">记得将改xml 注入 全局配置中</span><br><span class="line">&lt;mapper namespace=&quot;mapper.BlogMapper&quot;&gt;</span><br><span class="line">    &lt;!--联合多表查询--&gt;</span><br><span class="line">    &lt;!--首先要有两个表的map关系--&gt;</span><br><span class="line">    &lt;resultMap id=&quot;blogResult&quot; type=&quot;model.Blog&quot;&gt;</span><br><span class="line">        &lt;result property=&quot;id&quot; column=&quot;blog_id&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;ownerId&quot; column=&quot;user_id&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;title&quot; column=&quot;blog_title&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;content&quot; column=&quot;blog_content&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;association property=&quot;user&quot;</span><br><span class="line">                     javaType=&quot;model.User&quot;</span><br><span class="line">                     select=&quot;findOwnerOfBlog&quot;</span><br><span class="line">                     column=&quot;user_id&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;resultMap id=&quot;userResult&quot; type=&quot;model.User&quot;&gt;</span><br><span class="line">        &lt;result property=&quot;id&quot; column=&quot;user_id&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;name&quot; column=&quot;user_name&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;email&quot; column=&quot;user_email&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;password&quot; column=&quot;user_password&quot;/&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--两个查询--&gt;</span><br><span class="line">    &lt;select id=&quot;findById&quot; parameterType=&quot;Long&quot; resultMap=&quot;blogResult&quot; resultType=&quot;model.Blog&quot;&gt;</span><br><span class="line">        SELECT</span><br><span class="line">        id AS blog_id,</span><br><span class="line">        id AS user_id,</span><br><span class="line">        title AS blog_title,</span><br><span class="line">        content AS blog_content</span><br><span class="line">        FROM</span><br><span class="line">        blog</span><br><span class="line">        WHERE</span><br><span class="line">        id = #&#123;id&#125;;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;findOwnerOfBlog&quot;  parameterType=&quot;int&quot;  resultMap=&quot;userResult&quot; resultType=&quot;model.User&quot;&gt;</span><br><span class="line">        SELECT</span><br><span class="line">        id user_id,</span><br><span class="line">        name user_name,</span><br><span class="line">        email user_email,</span><br><span class="line">        password user_password</span><br><span class="line">        FROM</span><br><span class="line">        user</span><br><span class="line">        WHERE</span><br><span class="line">        id=#&#123;user_id&#125;;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br><span class="line"></span><br><span class="line">其流程是： </span><br><span class="line">1.首先 client调用BlogMapper的findById方法</span><br><span class="line">2.sql执行，作出回应，返回Blog的值（此时不直接存储User对象的值）</span><br><span class="line">3.在Blog的mapper映射中 调用 select findOwnerOfBlog 方法 传入 user_id 查询 输出User</span><br></pre></td></tr></table></figure><h4 id="8-延迟加载"><a href="#8-延迟加载" class="headerlink" title="8.延迟加载"></a>8.延迟加载</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在上述案例的基础上，在全局配置文件中增加如下配置即可实现：</span><br><span class="line">&lt;settings&gt;</span><br><span class="line">    &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">    &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">&lt;/settings&gt;</span><br><span class="line">修改后会在需要User值时，才进行select findOwnerOfBlog 方法的触发</span><br></pre></td></tr></table></figure><h4 id="9-多对多的实现"><a href="#9-多对多的实现" class="headerlink" title="9.多对多的实现"></a>9.多对多的实现</h4><h4 id="10-分页查询"><a href="#10-分页查询" class="headerlink" title="10.分页查询"></a>10.分页查询</h4><ol><li>limit显式实现</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;findByUserId&quot; resultType=&quot;model.Blog&quot;&gt;</span><br><span class="line">    select id,owner_id as ownerId,title,content</span><br><span class="line">    from blog</span><br><span class="line">    where owner_id = #&#123;param1&#125;</span><br><span class="line">    order by id asc</span><br><span class="line">    limit #&#123;param2&#125;, #&#123;param3&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>rowBounds + pageHelper 实现</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">在接口中：</span><br><span class="line">List&lt;Blog&gt; findByUserIdWithHelper(Long ownerId, RowBounds rowBounds);</span><br><span class="line">在xml中：</span><br><span class="line">&lt;select id=&quot;findByUserIdWithHelper&quot; resultType=&quot;model.Blog&quot;&gt;</span><br><span class="line">    SELECT</span><br><span class="line">    id,</span><br><span class="line">    owner_id AS ownerId,</span><br><span class="line">    title,</span><br><span class="line">    content</span><br><span class="line">    FROM</span><br><span class="line">        blog</span><br><span class="line">    WHERE</span><br><span class="line">        owner_id = #&#123;param1&#125;</span><br><span class="line">    ORDER BY id ASC</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">最后还要导包，在全局配置中加入插件pagehelper：</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">    &lt;plugin interceptor=&quot;com.github.pagehelper.PageInterceptor&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;rowBoundsWithCount&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">    &lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br></pre></td></tr></table></figure><h4 id="11-使用注解"><a href="#11-使用注解" class="headerlink" title="11.使用注解"></a>11.使用注解</h4><p>在mapper接口内使用注解sql语句实现简单的查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Select(&quot;select * from blog_db.user&quot;)</span><br><span class="line">List&lt;Blog&gt; findAll();</span><br><span class="line">其他更多....用时再查</span><br></pre></td></tr></table></figure><h4 id="12-MyBatis的二级缓存机制"><a href="#12-MyBatis的二级缓存机制" class="headerlink" title="12.MyBatis的二级缓存机制"></a>12.MyBatis的二级缓存机制</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.一级缓存默认开启</span><br><span class="line">    范围：Mapper（同一个mapper 相当于DAO）</span><br><span class="line">    清空：当有 update delete insert操作发生</span><br><span class="line"></span><br><span class="line">2.二级缓存手动开启</span><br><span class="line">    范围：Session（同一个Session会话）</span><br><span class="line">    清空：</span><br><span class="line">    开启：</span><br><span class="line">    1.在全局配置文件中添加：</span><br><span class="line">    &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;   &lt;!--开启二级缓存--&gt;</span><br><span class="line">    2.将Mapper序列化</span><br></pre></td></tr></table></figure><p><a href="https://blog.letiantian.me/mybatis" target="_blank" rel="noopener">优秀的学习资源</a></p>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hello world </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC基本概念和使用</title>
      <link href="/2019/11/25/SpringMVC%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/11/25/SpringMVC%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringMVC基本概念和使用"><a href="#SpringMVC基本概念和使用" class="headerlink" title="SpringMVC基本概念和使用"></a>SpringMVC基本概念和使用</h1><ul><li>Spring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web Flow里面。Spring 框架提供了构建 Web 应用程序的全功能 MVC 模块。</li></ul><h2 id="基本架构流程"><a href="#基本架构流程" class="headerlink" title="基本架构流程"></a>基本架构流程</h2><ul><li>核心思想 MVC分层设计</li></ul><p><img alt data-src="https://pic2.superbed.cn/item/5ddb62008e0e2e3ee94bde32.png" class="lazyload"></p><h2 id="1-入门配置"><a href="#1-入门配置" class="headerlink" title="1.入门配置"></a>1.入门配置</h2><ol><li>导包： 最基本的Spring和SpringMVC 8个包，包括web</li><li>配置SpringMVC 设置</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;</span><br><span class="line">        http://www.springframework.org/schema/beans</span><br><span class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">        http://www.springframework.org/schema/mvc</span><br><span class="line">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span><br><span class="line">        http://www.springframework.org/schema/context</span><br><span class="line">        http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 开启注解扫描 --&gt;</span><br><span class="line">    &lt;context:component-scan base-package=&quot;code.controller&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 视图解析器对象 --&gt;</span><br><span class="line">    &lt;bean id=&quot;internalResourceViewResolver&quot; class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/pages/&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 开启SpringMVC框架注解的支持 --&gt;</span><br><span class="line">    &lt;mvc:annotation-driven /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>web 配置</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span><br><span class="line">         version=&quot;4.0&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;display-name&gt;SpringMVC Project&lt;/display-name&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;!--控制中心--&gt;</span><br><span class="line">        &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--初始化加载SpringMVC配置--&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;classpath:SpringMVC.xml&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--映射监听--&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><p>4.处理函数书写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package code.controller;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(path = &quot;/test&quot;)   //一级路径</span><br><span class="line">public class helloController&#123;</span><br><span class="line"></span><br><span class="line">  // 书写一个方法对请求作出回应</span><br><span class="line">  @RequestMapping(path = &quot;/hello&quot;)  // 二级路径</span><br><span class="line">  public String SayHello()&#123;</span><br><span class="line">    System.out.println(&quot;hello SrpingMVC.&quot;);</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-基本配置"><a href="#2-基本配置" class="headerlink" title="2.基本配置"></a>2.基本配置</h3><ol><li>架构图理解<br><img alt data-src="https://pic2.superbed.cn/item/5ddb62008e0e2e3ee94bde34.png" class="lazyload"></li><li>RequestMapping注解<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.RequestMapping注解Controller下形成一级路径，再书写在func下形成二级目录</span><br><span class="line">2.path属性 = value 属性</span><br><span class="line">3.method属性  post get</span><br><span class="line">4.headers属性  选择接受必须携带哪些headers的url</span><br><span class="line">5.params属性 选择接受符合规定的参数的url</span><br><span class="line">6.参数绑定</span><br><span class="line">    1.普通数据类型，直接通过同名方法参数获取</span><br><span class="line">    2.bean对象类型，通过构建javabean 并通过与对象属性相同的属性名获取</span><br><span class="line">    3.绑定集合类型，通过 list[] 或 map[&apos;&apos;] 对应封装</span><br></pre></td></tr></table></figure></li><li>配置过滤器解决中文乱码问题 (web.xml)中</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置监听器解决中文乱码问题--&gt;</span><br><span class="line">    &lt;filter&gt;</span><br><span class="line">        &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;</span><br><span class="line">        &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;encoding&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;UTF-8&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line">    &lt;/filter&gt;</span><br><span class="line">    &lt;filter-mapping&gt;</span><br><span class="line">        &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>自定义类型转换</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.自建转换类 实现 Converter&lt;&gt;接口</span><br><span class="line">2.Srping.xml中配置</span><br><span class="line">&lt;!--配置自定义类型转换器--&gt;</span><br><span class="line">    &lt;bean id=&quot;conversionService&quot; class=&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;converters&quot;&gt;</span><br><span class="line">            &lt;set&gt;</span><br><span class="line">                &lt;!--加载可用的类型转换器对象--&gt;</span><br><span class="line">                &lt;bean class=&quot;code.utils.StringToDate&quot;&gt;&lt;/bean&gt;</span><br><span class="line">            &lt;/set&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!-- 开启SpringMVC框架注解的支持 --&gt;</span><br><span class="line">    &lt;mvc:annotation-driven conversion-service=&quot;conversionService&quot;/&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li><p>获取 Servlet ,session , reqeust, response</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在参数位置引用: HttpServletRequest 和 HttpServletResponse</span><br><span class="line">@RequestMapping(&quot;/Servlet&quot;)</span><br><span class="line">  public String testServlet(HttpServletRequest request, HttpServletResponse response)&#123;</span><br><span class="line">    System.out.println(request); //request</span><br><span class="line">    System.out.println(request.getSession());   //session</span><br><span class="line">    System.out.println(request.getSession().getServletContext()); //servlet</span><br><span class="line">    System.out.println(response); //response</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>强制绑定该参数名的传入参数 @RequestParam(“”)</p></li><li><p>restfule 编程风格 @PathVariable</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">通过 / 后直接跟&#123;参数&#125;,减少使用 ?传参和方法名</span><br><span class="line">@RequestMapping(&quot;/testPathVariable/&#123;id&#125;&quot;)</span><br><span class="line">  public String testPathVariable(@PathVariable String id)&#123;</span><br><span class="line">    System.out.println(id);</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>拿到整个post请求的请求体: @RequestBody</p></li><li><p>拿到请求的Header @RequestHeader</p></li><li><p>拿到请求的cookie值 @CookieValue(value=””)</p></li><li><p>函数执行前的方法 @ModelAttribute</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ModelAttribute 会先于当前目录下的方法执行，可以利用其性质先进行封装判断后把值传给处理函数</span><br><span class="line">  @ModelAttribute</span><br><span class="line">  public Account testModelAttribute1(String name,String passwd)&#123;</span><br><span class="line">    Account account = new Account();</span><br><span class="line">    account.setName(name);</span><br><span class="line">    account.setPasswd(passwd);</span><br><span class="line">    account.setUser(new User(&quot;kid&quot;,20));</span><br><span class="line">    return account;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  @RequestMapping(&quot;/testModelAttribute&quot;)</span><br><span class="line">  public String testModelAttribute2(Account account)&#123;</span><br><span class="line">    System.out.println(account);</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>SessionAttributes 设置session域的共有数据</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Model默认吧数据存到request 如果要设置到session </span><br><span class="line">需要在class前添加@SessionAttributes(value = &#123;&quot;msg&quot;&#125;)注解</span><br><span class="line"></span><br><span class="line">// set</span><br><span class="line">@RequestMapping(&quot;/testSessionAttribute&quot;)</span><br><span class="line">  public String testSessionAttribute(Model model)&#123;</span><br><span class="line">    model.addAttribute(&quot;msg&quot;,&quot;hello world&quot;);  // 为model添加数据</span><br><span class="line">    // model  会把数据存到request中</span><br><span class="line">    System.out.println(&quot;testSessionAttribute&quot;);</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // get</span><br><span class="line">  @RequestMapping(&quot;/getSessionAttribute&quot;)</span><br><span class="line">  public String getSessionAttribute(ModelMap modelMap)&#123;</span><br><span class="line">    String msg = (String) modelMap.get(&quot;msg&quot;);  //取出session的值</span><br><span class="line">    System.out.println(&quot;getSessionAttribute&quot;);</span><br><span class="line">    System.out.println(msg);</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // del</span><br><span class="line">  @RequestMapping(&quot;/delSessionAttribute&quot;)</span><br><span class="line">  public String delSessionAttribute(SessionStatus status)&#123;</span><br><span class="line">    status.setComplete();   // 清空session</span><br><span class="line">    System.out.println(&quot;清空session&quot;);</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="3-视图解析器"><a href="#3-视图解析器" class="headerlink" title="3.视图解析器"></a>3.视图解析器</h3><h4 id="1-返回值是String-配置视图解析器，正常转发"><a href="#1-返回值是String-配置视图解析器，正常转发" class="headerlink" title="1. 返回值是String 配置视图解析器，正常转发"></a>1. 返回值是String 配置视图解析器，正常转发</h4><h4 id="2-返回值是void，使用HttpServletrequest-response-转发或者重定向"><a href="#2-返回值是void，使用HttpServletrequest-response-转发或者重定向" class="headerlink" title="2. 返回值是void，使用HttpServletrequest / response 转发或者重定向"></a>2. 返回值是void，使用HttpServletrequest / response 转发或者重定向</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/testVoid&quot;)</span><br><span class="line">  public void testVoid(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">    // 编写请求转发：</span><br><span class="line">//    request.getRequestDispatcher(&quot;/WEB-INF/pages/success.jsp&quot;).forward(request,response);</span><br><span class="line">    //重定向</span><br><span class="line">    response.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">    response.setContentType(&quot;text/html;charset=UTF-8&quot;);</span><br><span class="line">    response.getWriter().println(&quot;你好！&quot;);</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="3-返回值是ModelAndView"><a href="#3-返回值是ModelAndView" class="headerlink" title="3. 返回值是ModelAndView"></a>3. 返回值是ModelAndView</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/testModelAndView&quot;)</span><br><span class="line">  public ModelAndView testModelAndView() &#123;</span><br><span class="line">    ModelAndView mv = new ModelAndView();</span><br><span class="line">    User user = new User();</span><br><span class="line">    user.setUage(12);</span><br><span class="line">    user.setUname(&quot;kid&quot;);</span><br><span class="line">    mv.addObject(&quot;user&quot;,user);  //设置request参数</span><br><span class="line">    mv.setViewName(&quot;success&quot;);    // 设置转发页面</span><br><span class="line">    return mv;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="4-开放静态资源加载-SpringMVC-xml"><a href="#4-开放静态资源加载-SpringMVC-xml" class="headerlink" title="4. 开放静态资源加载 SpringMVC.xml"></a>4. 开放静态资源加载 SpringMVC.xml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--前段控制器，那些静态资源不控制--&gt;</span><br><span class="line">    &lt;mvc:resources mapping=&quot;/js/**&quot; location=&quot;/js/&quot; /&gt;</span><br></pre></td></tr></table></figure><h4 id="5-AJAX的小案例"><a href="#5-AJAX的小案例" class="headerlink" title="5. AJAX的小案例"></a>5. AJAX的小案例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">前段ajax请求</span><br><span class="line">&lt;script src=&quot;js/jquery-3.3.1.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      //页面加载，绑定单击事件</span><br><span class="line">      $(function () &#123;</span><br><span class="line">        $(&quot;#btn&quot;).click(function () &#123;</span><br><span class="line">          // alert(&quot;hello world by js.&quot;);</span><br><span class="line">          // 发送ajax请求</span><br><span class="line">          $.ajax(&#123;</span><br><span class="line">            url:&quot;user/testAjax&quot;,</span><br><span class="line">            contentType:&quot;application/json;charset=UTF-8&quot;,</span><br><span class="line">            data:&apos;&#123;&quot;uname&quot;:&quot;kid&quot;,&quot;uage&quot;:18&#125;&apos;,</span><br><span class="line">            dataType:&quot;json&quot;,</span><br><span class="line">            type:&quot;post&quot;,</span><br><span class="line">            success:function (data) &#123;</span><br><span class="line">                alert(data.uname);</span><br><span class="line">                alert(data.uage);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    </span><br><span class="line">controller 执行</span><br><span class="line">// testAjax</span><br><span class="line">@RequestMapping(&quot;/testAjax&quot;)</span><br><span class="line">public @ResponseBody User testAjax(@RequestBody User user)&#123;</span><br><span class="line">System.out.println(&quot;ajax data 已收到...&quot;);</span><br><span class="line">System.out.println(user);</span><br><span class="line">user.setUname(&quot;kid1999&quot;);</span><br><span class="line">return user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">注意：ajax数据传输使用的是json springmvc对json传输的封装，使用的jackson包（需要提前导入）</span><br></pre></td></tr></table></figure><h4 id="6-传统文件上传"><a href="#6-传统文件上传" class="headerlink" title="6. 传统文件上传"></a>6. 传统文件上传</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">1.前端 设置</span><br><span class="line">&lt;form action=&quot;fileupload&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">    选择文件：&lt;input type=&quot;file&quot; name=&quot;upload&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;upload&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">2.后端接收</span><br><span class="line">@RequestMapping(&quot;/fileupload&quot;)</span><br><span class="line">  public String fileupload(HttpServletRequest request) throws Exception &#123;</span><br><span class="line">    System.out.println(&quot;upload success...&quot;);</span><br><span class="line">    // 使用fileupload组件完成文件上传</span><br><span class="line">    // 上传的位置</span><br><span class="line">    String path = request.getSession().getServletContext().getRealPath(&quot;/upload/&quot;);</span><br><span class="line">    // 判断路径是否存在</span><br><span class="line">    File file = new File(path);</span><br><span class="line">    if(!file.exists())&#123;</span><br><span class="line">      // 创建文件夹</span><br><span class="line">      file.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 解析request对象 获取文件上传项</span><br><span class="line">    DiskFileItemFactory factory = new DiskFileItemFactory();</span><br><span class="line">    ServletFileUpload upload = new ServletFileUpload(factory);</span><br><span class="line">    // 解析request</span><br><span class="line">    List&lt;FileItem&gt; items = upload.parseRequest(request);</span><br><span class="line">    // 遍历</span><br><span class="line">    for (FileItem item:items) &#123;</span><br><span class="line">      // 判断，当前item对象是否是上传文件项</span><br><span class="line">      if(item.isFormField())&#123;</span><br><span class="line">        // 普通表单</span><br><span class="line">      &#125;else &#123;</span><br><span class="line">        String filename = item.getName();</span><br><span class="line">        // 文件名设置 唯一值</span><br><span class="line">        String uuid = UUID.randomUUID().toString().replace(&quot;-&quot;,&quot;&quot;);</span><br><span class="line">        filename = uuid + &quot;_&quot; + filename;</span><br><span class="line">        item.write(new File(path,filename));  // 完成文件上传</span><br><span class="line">        item.delete();  //清空临时缓存</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  注意： 需要依赖commons-io和fileupload组件</span><br></pre></td></tr></table></figure><h4 id="7-SpringMVC的文件上传"><a href="#7-SpringMVC的文件上传" class="headerlink" title="7. SpringMVC的文件上传"></a>7. SpringMVC的文件上传</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">1.前端</span><br><span class="line">&lt;form action=&quot;/springmvcUpload&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">    选择文件：&lt;input type=&quot;file&quot; name=&quot;upload&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;upload&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">2.后端SpringMVC处理</span><br><span class="line">// SpringMVC文件上传</span><br><span class="line">  @RequestMapping(&quot;/springmvcUpload&quot;)</span><br><span class="line">  public String springmvcUpload (HttpServletRequest request,MultipartFile upload) throws IOException &#123;</span><br><span class="line">    System.out.println(&quot;upload success...&quot;);</span><br><span class="line">    // 先用</span><br><span class="line">    String path = request.getSession().getServletContext().getRealPath(&quot;/upload/&quot;);</span><br><span class="line">    File file = new File(path);</span><br><span class="line">    if(!file.exists()) file.mkdirs();</span><br><span class="line">    String uuid = UUID.randomUUID().toString().replace(&quot;-&quot;,&quot;&quot;);</span><br><span class="line">    String filename = upload.getOriginalFilename();</span><br><span class="line">    filename = uuid + &quot;_&quot; + filename;</span><br><span class="line">    upload.transferTo(new File(path,filename));</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"> 3.SpringMVC.xml</span><br><span class="line"> &lt;!--配置文件解析器对象--&gt;</span><br><span class="line">&lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;maxUploadSize&quot; value= &quot;10485760&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">注意：前端input的name 对应后端 MultipartFile 的参数名</span><br></pre></td></tr></table></figure><h4 id="8-跨服务器文件上传-（略）"><a href="#8-跨服务器文件上传-（略）" class="headerlink" title="8. 跨服务器文件上传  （略）"></a>8. 跨服务器文件上传  （略）</h4><h4 id="9-异常处理"><a href="#9-异常处理" class="headerlink" title="9. 异常处理"></a>9. 异常处理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">    1.编写自定义异常类，做提示信息 SysException</span><br><span class="line">public class SysException extends Exception&#123;</span><br><span class="line">  // 存储提示信息</span><br><span class="line">  private String message;</span><br><span class="line">  @Override</span><br><span class="line">  public String getMessage() &#123;</span><br><span class="line">    return message;</span><br><span class="line">  &#125;</span><br><span class="line">  public void setMessage(String message) &#123;</span><br><span class="line">    this.message = message;</span><br><span class="line">  &#125;</span><br><span class="line">  public SysException(String message) &#123;</span><br><span class="line">    this.message = message;</span><br><span class="line">  &#125;</span><br><span class="line">  public SysException() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">    2.编写异常处理器 实现 HandlerExceptionResolver</span><br><span class="line">public class SysExceptionSolver implements HandlerExceptionResolver &#123;</span><br><span class="line">  // 处理业务逻辑</span><br><span class="line">  @Override</span><br><span class="line">  public ModelAndView resolveException(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) &#123;</span><br><span class="line">    // 获取异常对象</span><br><span class="line">    SysException ex = null;</span><br><span class="line">    if(e instanceof SysException) ex = (SysException)e;</span><br><span class="line">    else ex = new SysException(&quot;系统正在维护....&quot;);</span><br><span class="line">    // 创建ModelAndView对象</span><br><span class="line">    ModelAndView mv = new ModelAndView();</span><br><span class="line">    mv.addObject(&quot;message&quot;,ex.getMessage());</span><br><span class="line">    mv.setViewName(&quot;error&quot;);    //跳转</span><br><span class="line">    return mv;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">    3.配置异常处理器 bean</span><br><span class="line">    &lt;!--配置异常处理器--&gt;</span><br><span class="line">&lt;bean id=&quot;sysExceptionSolver&quot; class=&quot;code.Exception.SysExceptionSolver&quot;/&gt;</span><br><span class="line"></span><br><span class="line">流程： 上抛错误到前端控制器，自定义异常处理器处理异常。</span><br><span class="line">使用时上抛到该错误：</span><br><span class="line"> public String testError() throws SysException&#123; // 上抛异常</span><br><span class="line">    System.out.println(&quot;异常测试&quot;);</span><br><span class="line">    try &#123;</span><br><span class="line">      int a = 10/0;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">      // 控制台打印</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      // 抛出自定义异常信息</span><br><span class="line">      throw new SysException(&quot;查询所有用户出现错误。。&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="10-SpringMVC拦截器"><a href="#10-SpringMVC拦截器" class="headerlink" title="10. SpringMVC拦截器"></a>10. SpringMVC拦截器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">1.编写拦截器，实现HandlerIntercepter</span><br><span class="line">public class myIntercepter implements HandlerInterceptor &#123;</span><br><span class="line">  // 预处理，controller 方法之前</span><br><span class="line">  // return true 放行。。</span><br><span class="line">  // return false 不放行</span><br><span class="line">  @Override</span><br><span class="line">  public boolean preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o) throws Exception &#123;</span><br><span class="line">    System.out.println(&quot;preHandle拦截器已生效。。。&quot;);</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 预处理，controller 方法之后，web页面之前</span><br><span class="line">  @Override</span><br><span class="line">  public void postHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView) throws Exception &#123;</span><br><span class="line">//    直接做请求转发</span><br><span class="line">    //    httpServletRequest.getRequestDispatcher(&quot;&quot;).forward(httpServletRequest,httpServletResponse);</span><br><span class="line">  &#125;</span><br><span class="line">  // 预处理，web页面之后 最后的方法</span><br><span class="line">  @Override</span><br><span class="line">  public void afterCompletion(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">2.配置拦截器</span><br><span class="line">&lt;!--配置拦截器--&gt;</span><br><span class="line">&lt;mvc:interceptors&gt;</span><br><span class="line">    &lt;!--配置单个--&gt;</span><br><span class="line">    &lt;mvc:interceptor&gt;</span><br><span class="line">        &lt;!--拦截路径--&gt;</span><br><span class="line">        &lt;mvc:mapping path=&quot;/*&quot;/&gt;</span><br><span class="line">        &lt;!--不拦截--&gt;</span><br><span class="line">        &lt;!--&lt;mvc:exclude-mapping path=&quot;&quot;/&gt;--&gt;</span><br><span class="line">        &lt;!--配置bean--&gt;</span><br><span class="line">        &lt;bean class=&quot;code.intercepter.myIntercepter&quot;/&gt;</span><br><span class="line">    &lt;/mvc:interceptor&gt;</span><br><span class="line">&lt;/mvc:interceptors&gt;</span><br></pre></td></tr></table></figure><h3 id="4-SSM整合。。"><a href="#4-SSM整合。。" class="headerlink" title="4.SSM整合。。"></a>4.SSM整合。。</h3>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hello world </tag>
            
            <tag> SpringMVC </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 基础知识点</title>
      <link href="/2019/11/25/Spring%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2019/11/25/Spring%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring框架"><a href="#Spring框架" class="headerlink" title="Spring框架"></a>Spring框架</h1><ul><li>Spring框架是由于软件开发的复杂性而创建的。Spring使用的是基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅仅限于服务器端的开发。从简单性、可测试性和松耦合性角度而言，绝大部分Java应用都可以从Spring中受益。</li><li>控制反转</li><li>面向切片编程</li></ul><h2 id="IOC-控制反转"><a href="#IOC-控制反转" class="headerlink" title="IOC 控制反转"></a>IOC 控制反转</h2><p>将new 对象的（创建，管理，销毁..）任务交给 Spring去管理，程序员只需要去设置bean或者注解，然后申请使用即可</p><h2 id="DI-辅助IOC"><a href="#DI-辅助IOC" class="headerlink" title="DI 辅助IOC"></a>DI 辅助IOC</h2><p>对IOC的依赖进行注入</p><h4 id="bean的三种创建模式："><a href="#bean的三种创建模式：" class="headerlink" title="bean的三种创建模式："></a>bean的三种创建模式：</h4><pre><code>1.空参构造2.静态工厂3.动态工厂</code></pre><h2 id="XML配置模式："><a href="#XML配置模式：" class="headerlink" title="XML配置模式："></a>XML配置模式：</h2><h3 id="bean标签的基本配置"><a href="#bean标签的基本配置" class="headerlink" title="bean标签的基本配置"></a>bean标签的基本配置</h3><p>将需要给spring管理的class进行配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">name: 该对象的名字，供给后面使用的定位 （不建议重复）</span><br><span class="line">class: 给spring管理的类的路径</span><br><span class="line">lazy-init: 懒加载，谁用谁加载</span><br><span class="line">scope:  默认 单例模式，只调用一次构造</span><br><span class="line">        prototype: 多例模式，调用一次，新建一次对象</span><br><span class="line">        request</span><br><span class="line">        session  在web项目中使用，与对应的r/s生命周期相同</span><br><span class="line">init-method: 初始化后调用的 方法</span><br><span class="line">destroy-method: 销毁前调用的方法</span><br><span class="line"></span><br><span class="line">eg: &lt;bean name = &quot;&quot; class = &quot;&quot; lazy-init = &quot;&quot; scope = &quot; &quot; ....&gt;</span><br></pre></td></tr></table></figure><h3 id="属性注入"><a href="#属性注入" class="headerlink" title="属性注入"></a>属性注入</h3><p>为bean对象注入依赖的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.set方法注入：</span><br><span class="line">    1.基本类型注入： &lt;property name = &quot;注入的字段名&quot; value = &quot; &quot;/&gt; </span><br><span class="line">    2.引用类型注入： &lt;property name = &quot;注入的字段名&quot; ref = &quot; &quot;(已经创建的bean 的name)/&gt;</span><br><span class="line">2.构造方法注入：&lt;property name = &quot;注入的字段名&quot; value = &quot;值&quot; ref = &quot;&quot; type = &quot;指定参数类型&quot;  index = &quot;指定参数索引&quot; /&gt; </span><br><span class="line">3.复杂类型注入：</span><br><span class="line">    &lt;property name = &quot;注入的字段名&quot;&gt;</span><br><span class="line">        1.list  &lt;list&gt;&lt;value&gt;&lt;/value&gt;&lt;/list&gt;</span><br><span class="line">        2.map   &lt;map&gt;&lt;entry key = &quot;&quot; value = &quot;&quot;&gt;&lt;/map&gt;</span><br><span class="line">    &lt;/property&gt;</span><br></pre></td></tr></table></figure><h2 id="注解开发模式："><a href="#注解开发模式：" class="headerlink" title="注解开发模式："></a>注解开发模式：</h2><h3 id="bean对象的管理与配置"><a href="#bean对象的管理与配置" class="headerlink" title="bean对象的管理与配置"></a>bean对象的管理与配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">创建bean对象 @Component(&quot;name&quot;)</span><br><span class="line">为了更加细化：  1.@Controller(&quot;name&quot;) web层</span><br><span class="line">               2.@Service(&quot;name&quot;) service层</span><br><span class="line">               3.@Repository(&quot;name&quot;) dao层</span><br><span class="line">@scope</span><br><span class="line">@init-method</span><br><span class="line">@destroy-method</span><br></pre></td></tr></table></figure><h3 id="属性注入-1"><a href="#属性注入-1" class="headerlink" title="属性注入"></a>属性注入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">直接在set方法或者构造方法上加注解</span><br><span class="line">@value（&quot;value&quot;） 注入值类型</span><br><span class="line">@Autowired（）注入引用类型</span><br><span class="line">@Resource(&quot;name&quot;) 手工装配bean的name 注入引用类型</span><br></pre></td></tr></table></figure><h3 id="使用Junit整合Spring进行单元测试"><a href="#使用Junit整合Spring进行单元测试" class="headerlink" title="使用Junit整合Spring进行单元测试"></a>使用Junit整合Spring进行单元测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在测试类中使用注解</span><br><span class="line">@RunWith(SprngJUnit4ClassRunner.class) //使用junit进行测试，创建容器</span><br><span class="line">@ContextConfiguration(&quot;classpath:...xml&quot;) // 读取配置文件</span><br><span class="line">在需要的测试方法上</span><br><span class="line">@Test</span><br></pre></td></tr></table></figure><h3 id="其他内容"><a href="#其他内容" class="headerlink" title="其他内容"></a>其他内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.导入其他的Spring配置文件</span><br><span class="line">&lt;import resource = &quot;...xml&quot;/&gt;</span><br></pre></td></tr></table></figure><h2 id="Spring-AOP-面向切面编程"><a href="#Spring-AOP-面向切面编程" class="headerlink" title="Spring-AOP 面向切面编程"></a>Spring-AOP 面向切面编程</h2><p> 将纵向重复的代码，横向抽取解决  — 基于动态代理<br> （AOP术语解释 <a href="https://blog.csdn.net/yuanye348623610/article/details/8823429）" target="_blank" rel="noopener">https://blog.csdn.net/yuanye348623610/article/details/8823429）</a></p><p> 两种动态代理<br> 1.接口 — 2.继承</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">AOP的配置：</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">&lt;!-- 切入点 --&gt;</span><br><span class="line">&lt;aop:pointcut expression = &quot;切入点表达式(要增强的方法)&quot;  id=&quot;标识&quot;/&gt;</span><br><span class="line">&lt;!-- 切面 通知+切入点 --&gt;</span><br><span class="line">&lt;aop:aspect ref=&quot;通知&quot;&gt;</span><br><span class="line">&lt;aop:before method=&quot;方法名&quot; pointcut-ref = &quot;代理对象&quot;/&gt; 最终通知</span><br><span class="line">&lt;aop:after...&gt; 前置通知</span><br><span class="line">&lt;aop:after-returning...&gt; 成功通知</span><br><span class="line">&lt;aop:after-throwing..&gt; 异常通知</span><br><span class="line">&lt;aop:around...&gt; 环绕活动</span><br><span class="line">&lt;/aop:aspect&gt; </span><br><span class="line"></span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hello world </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript尝试</title>
      <link href="/2019/11/25/TypeScript%E5%B0%9D%E8%AF%95/"/>
      <url>/2019/11/25/TypeScript%E5%B0%9D%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装nodejs"><a href="#1-安装nodejs" class="headerlink" title="1.安装nodejs"></a>1.安装nodejs</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h2 id="2-安装TypeScript包"><a href="#2-安装TypeScript包" class="headerlink" title="2.安装TypeScript包"></a>2.安装TypeScript包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install typescript -g</span><br><span class="line">tsc --version</span><br></pre></td></tr></table></figure><h2 id="3-编写HelloWorld程序"><a href="#3-编写HelloWorld程序" class="headerlink" title="3.编写HelloWorld程序"></a>3.编写HelloWorld程序</h2><ol><li><p>初始化项目：进入你的编程文件夹后，可以使用 <code>npm init -y</code> 来初始化项目，生成package.json文件。</p></li><li><p>创建tsconfig.json文件，在终端中输入 <code>tsc --init</code> ：它是一个TypeScript项目的配置文件，可以通过读取它来设置TypeScript编译器的编译参数。</p></li><li><p>安装@types/node,使用 <code>npm install @types/node --dev-save</code>进行安装。这个主要是解决模块的声明文件问题。</p></li><li><p>编写HelloWorld.ts文件，然后进行保存，代码如下。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a:string = &quot;HelloWorld&quot;</span><br><span class="line">console.log(a)</span><br></pre></td></tr></table></figure><ol start="5"><li><p>在Vscode的任务菜单下，打开运行生成任务，然后选择tsc：构建-tsconfig.json，这时候就会生成一个helloWorld.js文件</p></li><li><p>在终端中输入 <code>node helloWorld.js</code> 就可以看到结果了。</p></li></ol><p><a href="https://jspang.com/" target="_blank" rel="noopener">更多技术信息 参考技术胖Blog</a></p>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hello world </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go初试 六</title>
      <link href="/2019/11/24/Go%E5%88%9D%E8%AF%95%E5%85%AD/"/>
      <url>/2019/11/24/Go%E5%88%9D%E8%AF%95%E5%85%AD/</url>
      
        <content type="html"><![CDATA[<h1 id="Go语言入门尝试-六"><a href="#Go语言入门尝试-六" class="headerlink" title="Go语言入门尝试  六"></a>Go语言入门尝试  六</h1><ul><li>Go（又称 Golang）是 Google 的 Robert Griesemer，Rob Pike 及 Ken Thompson 开发的一种静态强类型、编译型语言。Go 语言语法与 C 相近，但功能上有：内存安全，GC（垃圾回收），结构形态及 CSP-style 并发计算。</li></ul><h2 id="1-Go语言的协程机制"><a href="#1-Go语言的协程机制" class="headerlink" title="1.Go语言的协程机制"></a>1.Go语言的协程机制</h2><ul><li>协程细化于线程<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package ch16</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func TestGroutine(t *testing.T)  &#123;</span><br><span class="line">for i:=0;i&lt;10;i++&#123;</span><br><span class="line">go func(i int) &#123;//go 启动一个协程</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;(i)</span><br><span class="line">time.Sleep(time.Millisecond*50)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-通过共享内存实现协程通讯"><a href="#2-通过共享内存实现协程通讯" class="headerlink" title="2. 通过共享内存实现协程通讯"></a>2. 通过共享内存实现协程通讯</h2><ul><li>通过同享资源 上锁，等待的方式 实现协程的有序执行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">package ch17</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;sync&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">共享内存的并发机制</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">// 线程不安全的</span><br><span class="line">func TestCounterThread(t *testing.T)  &#123;</span><br><span class="line">counter := 0// 存在竞争</span><br><span class="line">for i:=0;i&lt;5000;i++&#123;</span><br><span class="line">go func() &#123;</span><br><span class="line">counter++</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">t.Log(&quot;counter = &quot;,counter)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 加锁线程安全</span><br><span class="line">func TestCounterThreadSafe(t *testing.T)  &#123;</span><br><span class="line">var mut sync.Mutex</span><br><span class="line">counter := 0// 存在竞争</span><br><span class="line">for i:=0;i&lt;5000;i++&#123;</span><br><span class="line">go func() &#123;</span><br><span class="line">defer func() &#123;mut.Unlock()&#125;()//进程错误时释放资源</span><br><span class="line">mut.Lock()// 加锁</span><br><span class="line">counter++</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Second)// 等待内部线程执行完</span><br><span class="line">t.Log(&quot;counter = &quot;,counter)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 等待子线程运行完  类似 join</span><br><span class="line">func TestCounterThreadWaitGroup(t *testing.T)  &#123;</span><br><span class="line">var mut sync.Mutex</span><br><span class="line">var wg sync.WaitGroup</span><br><span class="line">counter := 0// 存在竞争</span><br><span class="line">for i:=0;i&lt;5000;i++&#123;</span><br><span class="line">wg.Add(1)// 开始等待</span><br><span class="line">go func() &#123;</span><br><span class="line">defer func() &#123;mut.Unlock()&#125;()//进程错误时释放资源</span><br><span class="line">mut.Lock()// 加锁</span><br><span class="line">counter++</span><br><span class="line">wg.Done()//等待结束</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()//等待</span><br><span class="line">t.Log(&quot;counter = &quot;,counter)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-使用channel的方式实现协程的通讯"><a href="#3-使用channel的方式实现协程的通讯" class="headerlink" title="3.使用channel的方式实现协程的通讯"></a>3.使用channel的方式实现协程的通讯</h2><ul><li>channel 分两种队列不等待 和 牵手等待 （channel的容量决定）</li><li>此次模拟一个生产消费模型</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package ch17</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">//  串行 运行两个任务</span><br><span class="line">func service() string  &#123;</span><br><span class="line">time.Sleep(time.Millisecond *50)</span><br><span class="line">return &quot;Done&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//并行运行两个协程  通过 channel  通讯</span><br><span class="line">func AsyncService() chan string &#123;</span><br><span class="line">rerch := make(chan string,1)// buffer channel 消息队列</span><br><span class="line">go func() &#123;</span><br><span class="line">ret := service()</span><br><span class="line">fmt.Println(&quot;returned result.&quot;)</span><br><span class="line">rerch &lt;- ret// 如果是普通channel service发送数据后会等待other拿走数据</span><br><span class="line">fmt.Println(&quot;service exited.&quot;)</span><br><span class="line">&#125;()</span><br><span class="line">return rerch</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 其他任务</span><br><span class="line">func otherTask()  &#123;</span><br><span class="line">fmt.Println(&quot;work on someting else&quot;)</span><br><span class="line">time.Sleep(time.Millisecond *100)</span><br><span class="line">fmt.Println(&quot;Task is Done.&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func TestService(t *testing.T)  &#123;</span><br><span class="line">//fmt.Println(service())</span><br><span class="line">retch := AsyncService()</span><br><span class="line">otherTask()</span><br><span class="line">fmt.Println(&lt;-retch)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-select-语句"><a href="#4-select-语句" class="headerlink" title="4.select 语句"></a>4.select 语句</h2><ul><li><p>select 是 Go 中的一个控制结构，类似于用于通信的 switch 语句。每个 case 必须是一个通信操作，要么是发送要么是接收。</p></li><li><p>select 随机执行一个可运行的 case。如果没有 case 可运行，它将阻塞，直到有 case 可运行。一个默认的子句应该总是可运行的。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package ch18</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func service() string  &#123;</span><br><span class="line">time.Sleep(time.Millisecond *500)</span><br><span class="line">return &quot;Done&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func AsyncService() chan string &#123;</span><br><span class="line">rerch := make(chan string,1)// buffer channel 消息队列</span><br><span class="line">go func() &#123;</span><br><span class="line">ret := service()</span><br><span class="line">fmt.Println(&quot;returned result.&quot;)</span><br><span class="line">rerch &lt;- ret// 如果是普通channel service发送数据后会等待other拿走数据</span><br><span class="line">fmt.Println(&quot;service exited.&quot;)</span><br><span class="line">&#125;()</span><br><span class="line">return rerch</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func TestService(t *testing.T)  &#123;</span><br><span class="line">select &#123;</span><br><span class="line">case ret := &lt;-AsyncService():</span><br><span class="line">t.Log(ret)</span><br><span class="line">case &lt;-time.After(time.Millisecond *100):// 超时直接 gg</span><br><span class="line">t.Error(&quot;time out&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-channel-的退出"><a href="#5-channel-的退出" class="headerlink" title="5.channel 的退出"></a>5.channel 的退出</h2><ul><li>生产者使用 close 关闭协程</li><li>当 协程结束时，使用 WaitGroup Done 通知消费者协程关闭</li><li>主进程等待所有Done后结束</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package ch19</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;sync&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 生产者</span><br><span class="line">func dataProducer(ch chan int,wg *sync.WaitGroup)  &#123;</span><br><span class="line">go func() &#123;</span><br><span class="line">for i:=0;i&lt;10 ;i++  &#123;</span><br><span class="line">ch &lt;- i</span><br><span class="line">&#125;</span><br><span class="line">close(ch)// 关闭 chanel</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 消费者</span><br><span class="line">func dataReceiver(ch chan int,wg *sync.WaitGroup)&#123;</span><br><span class="line">go func() &#123;</span><br><span class="line">for&#123;</span><br><span class="line">if data,ok := &lt;-ch;ok&#123;// 在channel时 退出</span><br><span class="line">fmt.Println(data)</span><br><span class="line">&#125;else &#123;</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func TestCloseChannel(t *testing.T)  &#123;</span><br><span class="line">var wg sync.WaitGroup</span><br><span class="line">ch := make(chan int)</span><br><span class="line">wg.Add(1)</span><br><span class="line">dataProducer(ch,&amp;wg)</span><br><span class="line">wg.Add(1)</span><br><span class="line">dataReceiver(ch,&amp;wg)</span><br><span class="line">wg.Wait()//等待两个协程结束</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> 并发编程 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go初试五</title>
      <link href="/2019/11/24/Go%E5%88%9D%E8%AF%95%E4%BA%94/"/>
      <url>/2019/11/24/Go%E5%88%9D%E8%AF%95%E4%BA%94/</url>
      
        <content type="html"><![CDATA[<hr><p>title: Go初试 五<br>date: 2019-11-24 23:27:26<br>tags: “Go”<br>categories: “GoLang”</p><hr><h1 id="Go语言入门尝试-五"><a href="#Go语言入门尝试-五" class="headerlink" title="Go语言入门尝试  五"></a>Go语言入门尝试  五</h1><ul><li>Go（又称 Golang）是 Google 的 Robert Griesemer，Rob Pike 及 Ken Thompson 开发的一种静态强类型、编译型语言。Go 语言语法与 C 相近，但功能上有：内存安全，GC（垃圾回收），结构形态及 CSP-style 并发计算。</li></ul><h2 id="1-Go语言中本地包的构建和使用"><a href="#1-Go语言中本地包的构建和使用" class="headerlink" title="1. Go语言中本地包的构建和使用"></a>1. Go语言中本地包的构建和使用</h2><ul><li><ol><li>生成一个斐波那契数列函数的包  ch15/series/…go<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package series</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;errors&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 初始化函数</span><br><span class="line">func init()  &#123;</span><br><span class="line">fmt.Println(&quot;init...&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func GetFib(n int) ([]int,error) &#123;</span><br><span class="line">if n &lt; 2 || n &gt; 100&#123;</span><br><span class="line">return nil,errors.New(&quot;n should be in [2,100]&quot;)</span><br><span class="line">&#125;</span><br><span class="line">res := []int&#123;1,1&#125;</span><br><span class="line">for i:=2;i&lt;n;i++&#123;</span><br><span class="line">res = append(res,res[i-1]+res[i-2])</span><br><span class="line">&#125;</span><br><span class="line">return res,nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>2.使用刚刚声明的包  ch15/client/…go</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package client</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;ch15/series&quot;       // 引入</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 调用 自定义的包</span><br><span class="line">func TestPackage(t *testing.T)  &#123;</span><br><span class="line">t.Log(series.GetFib(10))// 包内方法必须是大写开头 不然无法识别</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意有几点：</p></li><li><p>包路径，包内方法名必须大写开头…</p></li></ul><h2 id="2-使用网上的包"><a href="#2-使用网上的包" class="headerlink" title="2.使用网上的包"></a>2.使用网上的包</h2><ul><li>远程的包，大多托管于 github </li><li>使用命令 go get github.com/作者/项目名</li><li>例如： go get github.com/emirpasic/Gods<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package remote_package</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;github.com/emirpasic/Gods/lists/arraylist&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">包管理 软件：</span><br><span class="line">dep</span><br><span class="line">golide</span><br><span class="line">go module</span><br><span class="line">。。。</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">func TestRemotePackage(t *testing.T)  &#123;</span><br><span class="line">list := arraylist.New()</span><br><span class="line">a := &apos;a&apos;</span><br><span class="line">for i:=0;i&lt;26;i++&#123;</span><br><span class="line">list.Add(string(a))</span><br><span class="line">a++</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(list)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Go初试 四</title>
      <link href="/2019/11/24/Go%E5%88%9D%E8%AF%95%E5%9B%9B/"/>
      <url>/2019/11/24/Go%E5%88%9D%E8%AF%95%E5%9B%9B/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Go语言入门尝试-四"><a href="#Go语言入门尝试-四" class="headerlink" title="Go语言入门尝试  四"></a>Go语言入门尝试  四</h1><ul><li>Go（又称 Golang）是 Google 的 Robert Griesemer，Rob Pike 及 Ken Thompson 开发的一种静态强类型、编译型语言。Go 语言语法与 C 相近，但功能上有：内存安全，GC（垃圾回收），结构形态及 CSP-style 并发计算。</li></ul><h2 id="1-Go的继承"><a href="#1-Go的继承" class="headerlink" title="1. Go的继承"></a>1. Go的继承</h2><ul><li>Go 的继承是不完整的</li><li>父类无法访问子类的数据和方法 ，只能全部重写 获得新的方法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">package ch12</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">go的继承不能叫做完整的继承：</span><br><span class="line">1. 父类无法访问子类的数据和方法  无多态</span><br><span class="line">2. 只能全部重写 获得新的方法</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">// pet 类</span><br><span class="line">type Pet struct &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (p *Pet) Speak()&#123;</span><br><span class="line">fmt.Print(&quot;....&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (p *Pet) SpeakTo(host string)&#123;</span><br><span class="line">p.Speak()</span><br><span class="line">fmt.Println(&quot; &quot;,host)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// dog 类  继承 pet</span><br><span class="line">/*</span><br><span class="line">type Dog struct &#123;</span><br><span class="line">p *Pet</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (d *Dog) Speak()&#123;</span><br><span class="line">d.p.Speak()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (d *Dog) SpeakTo(host string)&#123;</span><br><span class="line">d.p.SpeakTo(host)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 子类继承父类的简单写法：</span><br><span class="line">type Dog struct &#123;</span><br><span class="line">Pet</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// test</span><br><span class="line">func TestDog(t *testing.T)  &#123;</span><br><span class="line">dog := new(Dog)</span><br><span class="line">dog.SpeakTo(&quot;kid&quot;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-空接口"><a href="#2-空接口" class="headerlink" title="2.空接口"></a>2.空接口</h2><ul><li>Go 允许空接口，但是同时可可以判断接口的type<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package ch13</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func Testfn(p interface&#123;&#125;)&#123;</span><br><span class="line">switch p.(type) &#123;</span><br><span class="line">case int:</span><br><span class="line">fmt.Println(&quot;int &quot;,p)</span><br><span class="line">case string:</span><br><span class="line">fmt.Println(&quot;string &quot;,p)</span><br><span class="line">default:</span><br><span class="line">fmt.Println(&quot;Unknow type.&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 空接口</span><br><span class="line">func TestEmptyAssertion(t *testing.T)  &#123;</span><br><span class="line">Testfn(10)</span><br><span class="line">Testfn(&quot;10&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-通过接口实现多态"><a href="#3-通过接口实现多态" class="headerlink" title="3.通过接口实现多态"></a>3.通过接口实现多态</h2><ul><li>标准步骤：定义接口，父类，子类，抽象方法调用父类</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">package ch13</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type Code string</span><br><span class="line">/*</span><br><span class="line">通过 接口实现 多态</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 定义接口</span><br><span class="line">type Programmer interface &#123;</span><br><span class="line">HelloWrold() Code</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type GOPaogrammer struct &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (p *GOPaogrammer) HelloWrold() Code&#123;</span><br><span class="line">return &quot;Go&apos;s code&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type JavaProgrammer struct &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (p *JavaProgrammer) HelloWrold() Code &#123;</span><br><span class="line">return &quot;Java&apos;s code&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 一个抽象方法</span><br><span class="line">func aProgram(p Programmer)&#123;</span><br><span class="line">fmt.Printf(&quot;%T  %v\n&quot;,p,p.HelloWrold())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func Test(t *testing.T)&#123;</span><br><span class="line">goProg := &amp;GOPaogrammer&#123;&#125;// 新建一个对象返回的实际上一个指针</span><br><span class="line">javaProg := new(JavaProgrammer)</span><br><span class="line">aProgram(goProg)</span><br><span class="line">aProgram(javaProg)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-错误处理"><a href="#4-错误处理" class="headerlink" title="4. 错误处理"></a>4. 错误处理</h2><ul><li>核心： 及早失败，早处理</li><li>使用多返回值的特点把错误信息带出函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package ch14</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;errors&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func GetFib(n int) ([]int,error) &#123;</span><br><span class="line">if n &lt; 2 || n &gt; 100&#123;</span><br><span class="line">return nil,errors.New(&quot;n should be in [2,100]&quot;)</span><br><span class="line">&#125;</span><br><span class="line">res := []int&#123;1,1&#125;</span><br><span class="line">for i:=2;i&lt;n;i++&#123;</span><br><span class="line">res = append(res,res[i-1]+res[i-2])</span><br><span class="line">&#125;</span><br><span class="line">return res,nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> 核心： 及早失败</span><br><span class="line">1.Go 的错误机制： errors.New（）</span><br><span class="line">2.使用多返回值 带出错误</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">func TestFunc(t *testing.T)  &#123;</span><br><span class="line">if v,err:=GetFib(-10);err!=nil&#123;</span><br><span class="line">t.Error(err)</span><br><span class="line">&#125;else &#123;</span><br><span class="line">t.Log(v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-错误恢复"><a href="#5-错误恢复" class="headerlink" title="5. 错误恢复"></a>5. 错误恢复</h2><ul><li>使用recover恢复是很危险的，容易造成僵尸进程</li><li>中断的三种方式的 不同点<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package ch14</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;errors&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// recover 恢复错误  很危险的</span><br><span class="line">func TestPanicVxExit(t *testing.T)  &#123;</span><br><span class="line">defer func() &#123;</span><br><span class="line">if err:= recover();err !=nil&#123;</span><br><span class="line">fmt.Println(&quot;recovered from &quot;,err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">fmt.Println(&quot;start&quot;)</span><br><span class="line">panic(errors.New(&quot;someting error!&quot;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">panic抛出异常退出</span><br><span class="line">exit 异常退出</span><br><span class="line">recover 恢复出错前的状态</span><br><span class="line"> */</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go初试 三</title>
      <link href="/2019/11/24/Go%E5%88%9D%E8%AF%95%E4%B8%89/"/>
      <url>/2019/11/24/Go%E5%88%9D%E8%AF%95%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Go语言入门尝试-三"><a href="#Go语言入门尝试-三" class="headerlink" title="Go语言入门尝试  三"></a>Go语言入门尝试  三</h1><ul><li>Go（又称 Golang）是 Google 的 Robert Griesemer，Rob Pike 及 Ken Thompson 开发的一种静态强类型、编译型语言。Go 语言语法与 C 相近，但功能上有：内存安全，GC（垃圾回收），结构形态及 CSP-style 并发计算。</li></ul><h2 id="1-func-方法"><a href="#1-func-方法" class="headerlink" title="1.func 方法"></a>1.func 方法</h2><ul><li>方法是go里面的一等公民</li><li>方法可以返回方法 类似包装器</li><li>多返回</li><li>多参数</li><li>defer 最后执行 类似finally</li><li>func 都是赋值传递参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">package ch10</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;math/rand&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 类似包装器： 输入func 输出func</span><br><span class="line">func timeSpent(testFunc func(op int) int) func(op int) int  &#123;</span><br><span class="line">return func(n int) int &#123;</span><br><span class="line">start := time.Now()</span><br><span class="line">ret := testFunc(n)</span><br><span class="line">fmt.Print(&quot;time spent:&quot;,time.Since(start).Seconds())</span><br><span class="line">return ret</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func slowFun(op int) int&#123;</span><br><span class="line">time.Sleep(time.Second*1)</span><br><span class="line">return op</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func TestSlowFun(t *testing.T)&#123;</span><br><span class="line">tsSF := timeSpent(slowFun)</span><br><span class="line">t.Log(tsSF(10))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 多返回的方法</span><br><span class="line">func returnMultiValues() (int,int)&#123;</span><br><span class="line">return rand.Intn(10),rand.Intn(25)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func TestFn(t *testing.T)  &#123;</span><br><span class="line">a,b := returnMultiValues()</span><br><span class="line">t.Log(a,b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 多参数方法</span><br><span class="line">func Sum(ops ...int) int&#123;</span><br><span class="line">res:=0</span><br><span class="line">for _,op := range ops&#123;</span><br><span class="line">res += op</span><br><span class="line">&#125;</span><br><span class="line">return res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func TestVarparam(t *testing.T)&#123;</span><br><span class="line">t.Log(Sum(1,2,3,4,5))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 最后执行函数 类似finally</span><br><span class="line">func Clear()&#123;</span><br><span class="line">fmt.Println(&quot;clear resource.&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func TestDefer(t *testing.T)&#123;</span><br><span class="line">defer Clear()// 最后执行</span><br><span class="line">fmt.Println(&quot;start test.&quot;)</span><br><span class="line">panic(&quot;err&quot;) // 异常退出</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-类型预定义"><a href="#2-类型预定义" class="headerlink" title="2. 类型预定义"></a>2. 类型预定义</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package ch11</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 使用类型预定义 简化</span><br><span class="line">type IntConv func(op int) int</span><br><span class="line"></span><br><span class="line">func timeSpent(testFunc IntConv) IntConv  &#123;</span><br><span class="line">return func(n int) int &#123;</span><br><span class="line">start := time.Now()</span><br><span class="line">ret := testFunc(n)</span><br><span class="line">fmt.Print(&quot;time spent:&quot;,time.Since(start).Seconds())</span><br><span class="line">return ret</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func slowFun(op int) int&#123;</span><br><span class="line">time.Sleep(time.Second*1)</span><br><span class="line">return op</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func TestSlowFun(t *testing.T)&#123;</span><br><span class="line">tsSF := timeSpent(slowFun)</span><br><span class="line">t.Log(tsSF(10))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-类（结构体）"><a href="#3-类（结构体）" class="headerlink" title="3. 类（结构体）"></a>3. 类（结构体）</h2><ul><li>go 的类 类似于 结构体 + 包含该结构体指针的func</li><li>2种定义类方法的方式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package ch11</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">&quot;unsafe&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 定义结构体</span><br><span class="line">type Employee struct &#123;</span><br><span class="line">Id string</span><br><span class="line">Name string</span><br><span class="line">Age int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 定义类方法</span><br><span class="line"></span><br><span class="line">// 1. 使用 对象复制传递： 实例成员会进行值复制</span><br><span class="line">func (e Employee) String() string  &#123;</span><br><span class="line">fmt.Printf(&quot;address is %x\n&quot;,unsafe.Pointer(&amp;e.Name))// 输出 name的地址</span><br><span class="line">return fmt.Sprintf(&quot;Id:%s-name:%s-age:%d&quot;,e.Id,e.Name,e.Age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 2. 使用 指针复制传递： 实例成员不会进行值复制</span><br><span class="line">func (e *Employee) toString() string  &#123;</span><br><span class="line">fmt.Printf(&quot;address is %x\n&quot;,unsafe.Pointer(&amp;e.Name))// 输出 name的地址</span><br><span class="line">return fmt.Sprintf(&quot;Id:%s-name:%s-age:%d&quot;,e.Id,e.Name,e.Age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func TestStruct(t *testing.T)&#123;</span><br><span class="line">e := Employee&#123;&quot;0&quot;,&quot;kid&quot;,20&#125;</span><br><span class="line">t.Log(e.String())</span><br><span class="line">t.Logf(&quot;%T&quot;,e)//等得到的是对象</span><br><span class="line"></span><br><span class="line">e1 := &amp;Employee&#123;&quot;0&quot;,&quot;kid&quot;,25&#125;</span><br><span class="line">t.Log(e1.toString())</span><br><span class="line">t.Logf(&quot;%T&quot;,e1)//等得到的是对象</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-接口"><a href="#4-接口" class="headerlink" title="4.接口"></a>4.接口</h2><ul><li>Go 无继承 只有接口</li><li>go 是 鸭子类型</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package ch11</span><br><span class="line"></span><br><span class="line">import &quot;testing&quot;</span><br><span class="line"></span><br><span class="line">type Progarmmer interface &#123;</span><br><span class="line">WriteHelloWorld() string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Goparogrammer struct &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (g *Goparogrammer) WriteHelloWorld() string&#123;</span><br><span class="line">return &quot;fmt.Println(\&quot;Hello world\&quot;)&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// go 接口没有依赖关系 是鸭子类型</span><br><span class="line">func TestClient(t *testing.T)&#123;</span><br><span class="line">var p Progarmmer</span><br><span class="line">p = new (Goparogrammer)</span><br><span class="line">t.Log(p.WriteHelloWorld())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go初试 二</title>
      <link href="/2019/11/24/Go%E5%88%9D%E8%AF%95%E4%BA%8C/"/>
      <url>/2019/11/24/Go%E5%88%9D%E8%AF%95%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="Go语言入门尝试-二"><a href="#Go语言入门尝试-二" class="headerlink" title="Go语言入门尝试  二"></a>Go语言入门尝试  二</h1><ul><li>Go（又称 Golang）是 Google 的 Robert Griesemer，Rob Pike 及 Ken Thompson 开发的一种静态强类型、编译型语言。Go 语言语法与 C 相近，但功能上有：内存安全，GC（垃圾回收），结构形态及 CSP-style 并发计算。</li></ul><h2 id="1-Array数组"><a href="#1-Array数组" class="headerlink" title="1.Array数组"></a>1.Array数组</h2><ul><li>数组的三种初始化方式</li><li>数组的遍历方式</li><li>数组的切片<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package ch6</span><br><span class="line"></span><br><span class="line">import &quot;testing&quot;</span><br><span class="line"></span><br><span class="line">func TestArrayInit(t *testing.T)&#123;</span><br><span class="line">// 默认初始化为0</span><br><span class="line">var arr [3]int</span><br><span class="line">t.Log(arr[1],arr[2])</span><br><span class="line">// 初始化赋值</span><br><span class="line">arr2 := [3]int&#123;1,2,3&#125;</span><br><span class="line">t.Log(arr2)</span><br><span class="line">// 初始化自定义大小</span><br><span class="line">arr3 :=[...]int&#123;1,2,3&#125;</span><br><span class="line">t.Log(arr3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 数组的遍历</span><br><span class="line">func TestArrayTravel(t *testing.T)  &#123;</span><br><span class="line">arr4:=[...]int&#123;1,2,3,4,5&#125;</span><br><span class="line">// 普通写法</span><br><span class="line">for i:=0;i&lt;len(arr4) ;i++  &#123;</span><br><span class="line">t.Log(arr4[i])</span><br><span class="line">&#125;</span><br><span class="line">// for each</span><br><span class="line">for _,e := range arr4&#123;</span><br><span class="line">t.Log(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 数组的切片  [包含，不包含]</span><br><span class="line">func TestArraySection(t *testing.T)&#123;</span><br><span class="line">arr5:= [...]int&#123;1,2,3,4&#125;;</span><br><span class="line">arr5_sec := arr5[:3]</span><br><span class="line">t.Log(arr5,arr5_sec)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-切片"><a href="#2-切片" class="headerlink" title="2.切片"></a>2.切片</h2><ul><li>切片是种数据结构：（起点，当前长度，总容量）</li><li>切片的容量增长规律为 2^n 类似List</li><li>切片的初始化<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package ch6</span><br><span class="line"></span><br><span class="line">import &quot;testing&quot;</span><br><span class="line"></span><br><span class="line">// 切片</span><br><span class="line">func TestSlice(t *testing.T)  &#123;</span><br><span class="line">var s0 []int</span><br><span class="line">t.Log(len(s0),cap(s0))</span><br><span class="line">s0 = append(s0, 1)</span><br><span class="line">t.Log(len(s0),cap(s0))// 可访问序列的长度和容量</span><br><span class="line"></span><br><span class="line">s1:=[]int&#123;1,2,3,4&#125;// 生成一个切片</span><br><span class="line">t.Log(len(s1),cap(s1))</span><br><span class="line"></span><br><span class="line">s2:=make([]int,3,5)// 生成长度为3容量为5的切片</span><br><span class="line">t.Log(len(s2),cap(s2))</span><br><span class="line">t.Log(s2[0],s2[1],s2[2])</span><br><span class="line"></span><br><span class="line">// 往len后追加</span><br><span class="line">s2 = append(s2, 1)</span><br><span class="line">t.Log(s2[0],s2[1],s2[2],s2[3])</span><br><span class="line">t.Log(len(s2),cap(s2))</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 切片容量和长度的增长规律  容量按2^n增长</span><br><span class="line">func TestSliceGrowing(t *testing.T)  &#123;</span><br><span class="line">s:=[]int&#123;&#125;</span><br><span class="line">for i:=0;i&lt;10;i++ &#123;</span><br><span class="line">s = append(s, i)</span><br><span class="line">t.Log(len(s),cap(s))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 切片的数据结构</span><br><span class="line">func TestSliceShareMemory(t *testing.T)&#123;</span><br><span class="line">year := []string&#123;&quot;Jan&quot;,&quot;Feb&quot;,&quot;Mar&quot;,&quot;Apr&quot;,&quot;May&quot;,&quot;Jun&quot;,&quot;Jul&quot;,&quot;Aug&quot;,&quot;Sep&quot;,&quot;Oct&quot;,&quot;Nov&quot;,&quot;Dec&quot;&#125;</span><br><span class="line">Q2 := year[3:6]</span><br><span class="line">t.Log(Q2,len(Q2),cap(Q2))// 长度为3 容量为9</span><br><span class="line"></span><br><span class="line">summer:=year[5:8]</span><br><span class="line">summer[0] = &quot;Unknow&quot;// 整个数组都会被影响</span><br><span class="line">t.Log(year)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-map-k-v键值对"><a href="#3-map-k-v键值对" class="headerlink" title="3.map k-v键值对"></a>3.map k-v键值对</h2><ul><li>map的初始化</li><li>对于不存的元素 返回 状态</li><li>遍历</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package ch7</span><br><span class="line"></span><br><span class="line">import &quot;testing&quot;</span><br><span class="line"></span><br><span class="line">// map 的初始化</span><br><span class="line">func TestInitMap(t *testing.T)  &#123;</span><br><span class="line">m1 := map[int]int&#123;1:1,2:4,3:9&#125;</span><br><span class="line">t.Log(m1[2])</span><br><span class="line">t.Log(&quot;len m1&quot;,len(m1))</span><br><span class="line"></span><br><span class="line">m2 := map[int]int&#123;&#125;</span><br><span class="line">m2[4] = 16</span><br><span class="line">t.Log(&quot;len m2&quot;,len(m2))</span><br><span class="line"></span><br><span class="line">m3:= make(map[int]int,10)// 初始化map容量长度</span><br><span class="line">t.Log(&quot;len m3&quot;,len(m3))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 对比 value = 0 和 元素不存在</span><br><span class="line">func TestAccessNotExistKey(t *testing.T)&#123;</span><br><span class="line">m1 := map[int]int&#123;&#125;// 初始化都为0</span><br><span class="line">t.Log(m1[1])</span><br><span class="line">m1[2] = 0</span><br><span class="line">t.Log(m1[2])</span><br><span class="line"></span><br><span class="line">if v,ok := m1[3];ok&#123;//如果key不存在除了返回value=0，还会返回一个状态为false</span><br><span class="line">t.Log(&quot;key 3&apos;s value is &quot;,v)</span><br><span class="line">&#125;else &#123;</span><br><span class="line">t.Log(&quot;key 3 is not existing.&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 遍历 map</span><br><span class="line">func TestTravelMap(t *testing.T)  &#123;</span><br><span class="line">m1 := map[int]int&#123;1:1,2:4,3:9&#125;</span><br><span class="line">for k,v := range m1 &#123;</span><br><span class="line">t.Log(k,v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-map-的拓展"><a href="#4-map-的拓展" class="headerlink" title="4.map 的拓展"></a>4.map 的拓展</h2><ul><li>map存储func</li><li>map实现set<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package ch8</span><br><span class="line"></span><br><span class="line">import &quot;testing&quot;</span><br><span class="line"></span><br><span class="line">// 将方法作为map的value</span><br><span class="line">func TestMapWithFubValue(t *testing.T)  &#123;</span><br><span class="line">m := map[int] func(op int)int &#123;&#125;</span><br><span class="line">m[1] = func(op int) int &#123;return op&#125;</span><br><span class="line">m[2] = func(op int) int &#123;return op*op&#125;</span><br><span class="line">m[3] = func(op int) int &#123;return op*op*op&#125;</span><br><span class="line"></span><br><span class="line">t.Log(m[1](2),m[2](2),m[3](2))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用map 实现 set</span><br><span class="line">func TestMapForSet(t *testing.T)&#123;</span><br><span class="line">mySet := map[int]bool&#123;&#125;</span><br><span class="line">mySet[1] = true</span><br><span class="line">n:=1</span><br><span class="line">if mySet[n]&#123;</span><br><span class="line">t.Log(n,&quot; is exist&quot;)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">t.Log(n,&quot;is not exist.&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mySet[3] = true</span><br><span class="line">t.Log(len(mySet))</span><br><span class="line">delete(mySet,1)</span><br><span class="line">n=1</span><br><span class="line">if mySet[n]&#123;</span><br><span class="line">t.Log(n,&quot; is exist&quot;)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">t.Log(n,&quot;is not exist.&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-string"><a href="#5-string" class="headerlink" title="5.string"></a>5.string</h2><ul><li>string 默认 utf-8编码</li><li>遍历</li><li>strings的函数</li><li>strconv的函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">package ch9</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;strconv&quot;</span><br><span class="line">&quot;strings&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 字符集 和 字符编码</span><br><span class="line">func TestString(t *testing.T)&#123;</span><br><span class="line">var s string</span><br><span class="line">t.Log(s)</span><br><span class="line">t.Log(len(s))</span><br><span class="line"></span><br><span class="line">s = &quot;\xE4\xB8\xA5&quot;</span><br><span class="line">t.Log(s)</span><br><span class="line">s = &quot;中&quot;</span><br><span class="line">t.Log(len(s))</span><br><span class="line"></span><br><span class="line">c := []rune(s)</span><br><span class="line">t.Logf(&quot;中 unicode %x&quot;,c[0])// 字符编码</span><br><span class="line">t.Logf(&quot;中 UTF8 %x&quot;,s)// 字符编码的具体实现</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 字符串的遍历</span><br><span class="line">func TestStringRange(t *testing.T)&#123;</span><br><span class="line">s:=&quot;中华人民共和国&quot;</span><br><span class="line">for _,value := range s&#123;</span><br><span class="line">t.Logf(&quot;%[1]c  %[1]x&quot;,value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// strings函数</span><br><span class="line">func TestStringFn(t *testing.T)  &#123;</span><br><span class="line">s := &quot;A,B,C&quot;</span><br><span class="line">parts := strings.Split(s,&quot;,&quot;)</span><br><span class="line">for _,part := range parts&#123;</span><br><span class="line">t.Logf(part)</span><br><span class="line">&#125;</span><br><span class="line">t.Log(strings.Join(parts,&quot;-&quot;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// strconv 库函数</span><br><span class="line">func TestConv(t *testing.T)  &#123;</span><br><span class="line">s := strconv.Itoa(10)</span><br><span class="line">t.Log(&quot;str: &quot; + s)</span><br><span class="line">if i,err :=strconv.Atoi(&quot;25&quot;);err == nil&#123;</span><br><span class="line">t.Log(10 + i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go初试 一</title>
      <link href="/2019/11/23/Go%E5%88%9D%E8%AF%95%20%E4%B8%80/"/>
      <url>/2019/11/23/Go%E5%88%9D%E8%AF%95%20%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Go语言入门尝试-一"><a href="#Go语言入门尝试-一" class="headerlink" title="Go语言入门尝试  一"></a>Go语言入门尝试  一</h1><ul><li>Go（又称 Golang）是 Google 的 Robert Griesemer，Rob Pike 及 Ken Thompson 开发的一种静态强类型、编译型语言。Go 语言语法与 C 相近，但功能上有：内存安全，GC（垃圾回收），结构形态及 CSP-style 并发计算。<h2 id="1-标准入门第一步：-HelloWorld"><a href="#1-标准入门第一步：-HelloWorld" class="headerlink" title="1.标准入门第一步： HelloWorld"></a>1.标准入门第一步： HelloWorld</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;os&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 1. package 必须是 main 对应 main方法</span><br><span class="line">// 2. import 引入依赖</span><br><span class="line">// 3. main 方法没有参数也没有退出值 全靠其他依赖完成</span><br><span class="line"></span><br><span class="line">func main()&#123;</span><br><span class="line">fmt.Print(&quot;hello world.&quot; + os.Args[1]);</span><br><span class="line">os.Exit(0)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-测试方法与命名规范："><a href="#2-测试方法与命名规范：" class="headerlink" title="2.测试方法与命名规范："></a>2.测试方法与命名规范：</h2></li><li>以斐波那契数列为例</li><li>测试方法文件必须以 _test.go结尾，package不必是main</li><li>但是方法测试的方法必须是func TestXXX(t *testing.T)的命名</li><li>申请变量有三种方式赋值也有三种方式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">package try_test</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">)</span><br><span class="line">// 变量</span><br><span class="line">func TestFibList(t *testing.T) &#123;</span><br><span class="line">// 直接声明变量</span><br><span class="line">//var a int = 1</span><br><span class="line">//var b int = 1</span><br><span class="line">// 申请多个变量</span><br><span class="line">//var(</span><br><span class="line">//a int = 1</span><br><span class="line">//b int = 1</span><br><span class="line">//)</span><br><span class="line">// 简写申请变量</span><br><span class="line">a := 1</span><br><span class="line">b := 1</span><br><span class="line">t.Log(a,&quot; &quot;)</span><br><span class="line">t.Log(b,&quot; &quot;)</span><br><span class="line">for i:=0;i&lt;5;i++&#123;</span><br><span class="line">t.Log(b,&quot; &quot;)</span><br><span class="line">tmp := a</span><br><span class="line">a = b</span><br><span class="line">b = tmp + a</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 变量赋值</span><br><span class="line">func TestExchange(t *testing.T)  &#123;</span><br><span class="line">a:=1</span><br><span class="line">b:=2</span><br><span class="line"></span><br><span class="line">// 普通的交换变量</span><br><span class="line">//tmp := a</span><br><span class="line">//a = b</span><br><span class="line">//b = tmp</span><br><span class="line">//t.Log(a,b)</span><br><span class="line"></span><br><span class="line">// 多个变量赋值</span><br><span class="line">a,b = b,a</span><br><span class="line">t.Log(a,b)</span><br><span class="line">&#125;</span><br><span class="line">// 常量</span><br><span class="line">const(</span><br><span class="line">// iota 连续赋值</span><br><span class="line">Mondy = 1 + iota</span><br><span class="line">Tuesday</span><br><span class="line">Wednesday</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func TestConstantTry(t *testing.T)  &#123;</span><br><span class="line">t.Log(Mondy,Tuesday)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-变量类型："><a href="#3-变量类型：" class="headerlink" title="3.变量类型："></a>3.变量类型：</h2><ul><li>类型像C但是不支持隐性类型转换</li><li>支持指针但是不支持指针运算</li><li>字符串为空 == “”<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package ch3</span><br><span class="line"></span><br><span class="line">import &quot;testing&quot;</span><br><span class="line"></span><br><span class="line">type MyInt int64        // 自定义类型</span><br><span class="line"></span><br><span class="line">// 数据类型不支持隐形转换</span><br><span class="line">func TestImplicit(t *testing.T)&#123;</span><br><span class="line">var a int = 1</span><br><span class="line">var b int64</span><br><span class="line">b = int64(a)</span><br><span class="line">var c MyInt</span><br><span class="line">c = MyInt(b)</span><br><span class="line">t.Log(a,b,c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 指针可用 但不支持运算</span><br><span class="line">func TestPoint(t *testing.T)  &#123;</span><br><span class="line">a := 1</span><br><span class="line">aPtr := &amp;a</span><br><span class="line">//aPtr = aPtr +1</span><br><span class="line">t.Log(a,aPtr)</span><br><span class="line">t.Logf(&quot;%T %T&quot;,a,aPtr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// String 为空用“”表示</span><br><span class="line">func TestString(t *testing.T)&#123;</span><br><span class="line">var s string</span><br><span class="line">t.Log(s)</span><br><span class="line">t.Log(len(s))</span><br><span class="line">if s == &quot;&quot;&#123;</span><br><span class="line">t.Log(&quot;s 为空&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-数组"><a href="#4-数组" class="headerlink" title="4.数组"></a>4.数组</h2><ul><li>数组的比较只限长度相同的数组</li><li>itoa 自加定义<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package ch4</span><br><span class="line"></span><br><span class="line">import &quot;testing&quot;</span><br><span class="line"></span><br><span class="line">// 数组的比较</span><br><span class="line">func TestCompareArray(t *testing.T)  &#123;</span><br><span class="line">a:=[...] int&#123;1,2,3&#125;</span><br><span class="line">b:=[...] int&#123;1,1,3&#125;</span><br><span class="line">//c:=[...] int&#123;1,2,3,4&#125;</span><br><span class="line">d:=[...] int&#123;1,2,3&#125;</span><br><span class="line"></span><br><span class="line">t.Log(a==b)</span><br><span class="line">//t.Log(a==c)// 长度不同直接报错</span><br><span class="line">t.Log(a==d)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// TestBitClear</span><br><span class="line">const (</span><br><span class="line">read = 1 &lt;&lt; iota</span><br><span class="line">write</span><br><span class="line">exec</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func TestBitClear(t *testing.T)&#123;</span><br><span class="line">a := 7  // 0111</span><br><span class="line">a = a &amp;^ read// 清除可读权限</span><br><span class="line">t.Log(a&amp;read == read,a&amp;write==write,a&amp;exec==exec)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-分支判断"><a href="#5-分支判断" class="headerlink" title="5.分支判断"></a>5.分支判断</h2><ul><li>if 语句与 多返回写法</li><li>多条件的 switch</li><li>使用switch 代替 复杂的 if<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package ch5</span><br><span class="line"></span><br><span class="line">import &quot;testing&quot;</span><br><span class="line"></span><br><span class="line">// if 语句与 多返回</span><br><span class="line">func TestIfMultiSec(t *testing.T)  &#123;</span><br><span class="line">if a:=1 == 1; a&#123;</span><br><span class="line">t.Log(&quot;1==1&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 多返回在if中应用</span><br><span class="line">//if v,err := someFun(); err==nil&#123;</span><br><span class="line">//t.Log(&quot;success&quot;)</span><br><span class="line">//&#125;else&#123;</span><br><span class="line">//t.Log(&quot;error&quot;)</span><br><span class="line">//&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 多条件的 switch</span><br><span class="line">func TestSwitchMultiCase(t *testing.T)&#123;</span><br><span class="line">for i:=0;i&lt;5 ;i++  &#123;</span><br><span class="line">switch i &#123;</span><br><span class="line">case 0,2:t.Log(&quot;even&quot;)</span><br><span class="line">case 1,3:t.Log(&quot;odd&quot;)</span><br><span class="line">default:t.Log(&quot;it is not 0-3&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用switch 代替 复杂的 if</span><br><span class="line">func TestSwitchCaseCondition(t *testing.T)  &#123;</span><br><span class="line">for i:=0;i&lt;5 ;i++  &#123;</span><br><span class="line">switch &#123;</span><br><span class="line">case i%2==0:t.Log(&quot;even&quot;)</span><br><span class="line">case i%2==1:t.Log(&quot;odd&quot;)</span><br><span class="line">default:t.Log(&quot;unknow&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="6-循环条件"><a href="#6-循环条件" class="headerlink" title="6.循环条件"></a>6.循环条件</h2><ul><li>这个和其他语言都一样<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package ch5</span><br><span class="line"></span><br><span class="line">import &quot;testing&quot;</span><br><span class="line"></span><br><span class="line">func TestLoop(t *testing.T)&#123;</span><br><span class="line">n:=0</span><br><span class="line">for n&lt;5&#123;</span><br><span class="line">t.Log(n)</span><br><span class="line">n++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> hello world </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDFS的Shell操作</title>
      <link href="/2019/11/20/HDFS%E7%9A%84Shell%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/11/20/HDFS%E7%9A%84Shell%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="查询-hdfs-的命令"><a href="#查询-hdfs-的命令" class="headerlink" title="查询  hdfs 的命令:"></a>查询  hdfs 的命令:</h1><ul><li>hadoop  fs  xxx</li></ul><h2 id="1-追加内容到hdfs中的文件"><a href="#1-追加内容到hdfs中的文件" class="headerlink" title="1.追加内容到hdfs中的文件"></a>1.追加内容到hdfs中的文件</h2><blockquote><p>hadoop fs -appendToFile 本地文件 hdfs中的文件</p></blockquote><h2 id="2-查看文件内容"><a href="#2-查看文件内容" class="headerlink" title="2.查看文件内容"></a>2.查看文件内容</h2><blockquote><p>hadoop fs -cat 文件</p></blockquote><h2 id="3-修改文件权限"><a href="#3-修改文件权限" class="headerlink" title="3.修改文件权限"></a>3.修改文件权限</h2><blockquote><p>hadoop fs -chmod 权限修改  对象文件</p></blockquote><h2 id="4-修改文件的所属用户和组"><a href="#4-修改文件的所属用户和组" class="headerlink" title="4.修改文件的所属用户和组"></a>4.修改文件的所属用户和组</h2><blockquote><p>hadoop fs -chown  用户名 组名 文件</p></blockquote><h2 id="5-上传本地文件到hdfs"><a href="#5-上传本地文件到hdfs" class="headerlink" title="5.上传本地文件到hdfs"></a>5.上传本地文件到hdfs</h2><blockquote><p>hadoop fs -put 本地文件 hdfs路径<br>hadoop fs -copyFromLocal 本地文件 hdfs路径</p></blockquote><h2 id="6-下载hdfs文件到本地"><a href="#6-下载hdfs文件到本地" class="headerlink" title="6.下载hdfs文件到本地"></a>6.下载hdfs文件到本地</h2><blockquote><p>hadoop fs -get hdfs文件 本地路径<br>hadoop fs -copyToLocal hdfs文件 本地路径</p></blockquote><h2 id="7-在hdfs中拷贝文件"><a href="#7-在hdfs中拷贝文件" class="headerlink" title="7.在hdfs中拷贝文件"></a>7.在hdfs中拷贝文件</h2><blockquote><p>hadoop fs -cp 目标 拷贝路径</p></blockquote><h2 id="8-查询磁盘使用量"><a href="#8-查询磁盘使用量" class="headerlink" title="8.查询磁盘使用量"></a>8.查询磁盘使用量</h2><blockquote><p>hadoop fs -df -h  路径</p></blockquote><h2 id="9-统计磁盘文件的大小"><a href="#9-统计磁盘文件的大小" class="headerlink" title="9.统计磁盘文件的大小"></a>9.统计磁盘文件的大小</h2><blockquote><p>hadoop fs -du -s -h 目标目录-</p></blockquote><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><pre><code>hadoop fs -lshadoop fs -mvhadoop fs mkdirhadoop fs rm -r</code></pre>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDFS的配置和一些操作</title>
      <link href="/2019/11/20/HDFS%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/11/20/HDFS%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="1-返回hadoop集群的信息："><a href="#1-返回hadoop集群的信息：" class="headerlink" title="1.返回hadoop集群的信息："></a>1.返回hadoop集群的信息：</h2><p><code>hdfs dfsadmin -report</code></p><h2 id="2-返回可访问的端口："><a href="#2-返回可访问的端口：" class="headerlink" title="2.返回可访问的端口："></a>2.返回可访问的端口：</h2><p><code>netstat -ntlp</code></p><h2 id="3-hadoop的网页访问-："><a href="#3-hadoop的网页访问-：" class="headerlink" title="3.hadoop的网页访问 ："></a>3.hadoop的网页访问 ：</h2><p> <code>masterip + ：端口50070</code></p><h2 id="4-关闭节点："><a href="#4-关闭节点：" class="headerlink" title="4.关闭节点："></a>4.关闭节点：</h2><p><code>hadoop-daemon.sh stop namenode/datanode</code>  </p><h2 id="5-hadoop-etc-hadoop-下的slaves管理着datanode："><a href="#5-hadoop-etc-hadoop-下的slaves管理着datanode：" class="headerlink" title="5.hadoop/etc/hadoop 下的slaves管理着datanode："></a>5.hadoop/etc/hadoop 下的slaves管理着datanode：</h2><p><code>vim slaves</code></p><blockquote><p>填入所有 datanode名字（S1）</p></blockquote><h2 id="6-利用master管理所有子节点："><a href="#6-利用master管理所有子节点：" class="headerlink" title="6.利用master管理所有子节点："></a>6.利用master管理所有子节点：</h2><blockquote><p><code>start-dfs.sh</code> 启动所有节点</p></blockquote><blockquote><p><code>stop-dfs.sh</code> 关闭所有节点</p></blockquote><h2 id="7-免密登陆："><a href="#7-免密登陆：" class="headerlink" title="7.免密登陆："></a>7.免密登陆：</h2><blockquote><p>ssh-keygen -t rsa<br>cd /.ssh</p></blockquote><p> 一路回车 生成两个文件 一个root的私钥 ，一个公钥</p><blockquote><p>ssh-copy-id S1（子节点）</p></blockquote><p>将公钥给子节点，以后就不用给密码了</p><h2 id="8-hadoop-fs-ls（Linux的命令）-。。。。"><a href="#8-hadoop-fs-ls（Linux的命令）-。。。。" class="headerlink" title="8. hadoop fs  -ls（Linux的命令）  。。。。"></a>8. hadoop fs  -ls（Linux的命令）  。。。。</h2><p>其实是类似linux</p><blockquote><p>例如  <code>hadoop fs -put     ...</code><br>将。。。上传至hdfs系统</p></blockquote><h2 id="9-修改文件备份数量"><a href="#9-修改文件备份数量" class="headerlink" title="9.修改文件备份数量"></a>9.修改文件备份数量</h2><p>vim hdfs-site.xml<br>添加:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;3&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop集群搭建手册</title>
      <link href="/2019/11/20/Hadoop%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E6%89%8B%E5%86%8C/"/>
      <url>/2019/11/20/Hadoop%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop集群搭建手册"><a href="#Hadoop集群搭建手册" class="headerlink" title="Hadoop集群搭建手册"></a>Hadoop集群搭建手册</h1><h2 id="1-准备材料"><a href="#1-准备材料" class="headerlink" title="1.准备材料"></a>1.准备材料</h2><ul><li>centos7 虚拟机N台</li><li>xshell xftp</li><li>hadoop,jdk安装包</li></ul><h2 id="2-将Linux连接到客户端（本机）"><a href="#2-将Linux连接到客户端（本机）" class="headerlink" title="2.将Linux连接到客户端（本机）"></a>2.将Linux连接到客户端（本机）</h2><pre><code>修改网关： 本机为192.168.2.1  其他为101/102/103.。。。在虚拟机中选择host-only网络vim /etc/sysconfig/network&gt;&gt;&gt;NETWORKING=yes&gt;&gt;&gt;GATWAY=192.168.2.1 (本机ip)修改ipvim /etc/sysconfig/network-sripts/ifcfg-enp0s3  (linux网卡名字)&gt;&gt;&gt;TYPE=Ethernet&gt;&gt;&gt;IPADDR=192.168.20  (给linux分配的ip)&gt;&gt;&gt;NETMASK=255.255.255.0修改主机名 ；hostnamectl set-hostname  ....重启网络：service network restart测试是否修改成功：（注意关掉防火墙)ifconfigping 客户端ip</code></pre><h2 id="3-安装好一台linux："><a href="#3-安装好一台linux：" class="headerlink" title="3.安装好一台linux："></a>3.安装好一台linux：</h2><pre><code>装好xshell 利用ssh访问linux装好xftp  将本地下载的 Hadoop jdk 上传 linux安装 jdk：rpm -ivh 。。。rpm   （默认安装在/usr/java）用 java命令检查安装 Hadoop：tar -xvf 。。。tar.gzmv改名</code></pre><p>设置环境变量</p><blockquote><p>vim /etc/profile</p></blockquote><pre><code>export HADOOP_HOME=/usr/local/hadoopexport PATH=$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$PATH</code></pre><p>让设置生效</p><pre><code>source /etc/profile</code></pre><p>设置Hadoop的JAVA_HOME</p><pre><code>cd /usr/local/hadoopvim etc/hadoop/hadoop-env.shexport JAVA_HOME=/usr/java/default</code></pre><h2 id="4-网络联通"><a href="#4-网络联通" class="headerlink" title="4.网络联通"></a>4.网络联通</h2><pre><code>全部关掉防火墙systemctl stop firewalldsystemctl disable firewalld查看防火墙状态firewall-cmd --state停止firewallsystemctl stop firewalld.service禁止firewall开机启动systemctl disable firewalld.service 互相ping测试是否联通分别进行 修改ip/ 修改主机名 / 重启网络 的操作</code></pre><h2 id="5-配置-usr-local-hadoop-etc-hadoop"><a href="#5-配置-usr-local-hadoop-etc-hadoop" class="headerlink" title="5.配置/usr/local/hadoop/etc/hadoop"></a>5.配置/usr/local/hadoop/etc/hadoop</h2><p>中心节点配置：</p><blockquote><p>vim core-site.xml</p></blockquote><pre><code>&lt;!-- 指定HADOOP所使用的文件系统schema（URI），HDFS的老大（NameNode）的地址 --&gt;&lt;property&gt;    &lt;name&gt;fs.defaultFS&lt;/name&gt;    &lt;value&gt;hdfs://master:9000&lt;/value&gt;&lt;/property&gt;&lt;!-- 指定hadoop运行时产生文件的存储目录 --&gt;&lt;property&gt;      &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;    &lt;value&gt;/usr/local/hadoop/tmp&lt;/value&gt;&lt;/property&gt;</code></pre><p> 修改备份数量</p><blockquote><p>vim hdfs-site.xml</p></blockquote><pre><code>&lt;!-- 指定HDFS副本的数量 --&gt;&lt;property&gt;    &lt;name&gt;dfs.replication&lt;/name&gt;    &lt;value&gt;1&lt;/value&gt;&lt;/property&gt; &lt;!-- 指Second namenode的启动位置 --&gt;&lt;property&gt;    &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;    &lt;value&gt;master:50090&lt;/value&gt;&lt;/property&gt;</code></pre><p>修改计算框架    </p><blockquote><p>vim mapred-site.xml</p></blockquote><pre><code>&lt;!-- 指定mr运行在yarn上 --&gt;&lt;property&gt;    &lt;name&gt;mapreduce.framework.name&lt;/name&gt;    &lt;value&gt;yarn&lt;/value&gt;&lt;/property&gt;</code></pre><p>修改资源调用框架</p><blockquote><p>vim yarn-site.xml</p></blockquote><pre><code>&lt;!-- 指定YARN的老大（ResourceManager）的地址 --&gt;&lt;property&gt;        &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;        &lt;value&gt;master&lt;/value&gt;&lt;/property&gt;    &lt;!-- reducer获取数据的方式 --&gt;&lt;property&gt;        &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;        &lt;value&gt;mapreduce_shuffle&lt;/value&gt; &lt;/property&gt;</code></pre><h4 id="如果是完全分布式-将上面的做好的拷贝-修改ip-hostname即可。如果是伪分布式-就这样运行就好了"><a href="#如果是完全分布式-将上面的做好的拷贝-修改ip-hostname即可。如果是伪分布式-就这样运行就好了" class="headerlink" title="如果是完全分布式,将上面的做好的拷贝,修改ip hostname即可。如果是伪分布式,就这样运行就好了"></a>如果是完全分布式,将上面的做好的拷贝,修改ip hostname即可。如果是伪分布式,就这样运行就好了</h4><h2 id="6-启动hdfs"><a href="#6-启动hdfs" class="headerlink" title="6.启动hdfs"></a>6.启动hdfs</h2><pre><code>首先格式化hdfs   hdfs namenode -format将ip与名字对应vim /etc/hosts    192.168.2.20  master    ....    ....    ....master启动 namenode：    hadoop-daemon.sh start namenodejps  检查namenode是否启动vim slaves添加子节点信息    master    s1    ....slave启动 datanode：    hadoop-daemon.sh start datanodejps检查</code></pre><h2 id="错误指南"><a href="#错误指南" class="headerlink" title="错误指南"></a>错误指南</h2><pre><code>1.如果出现javahome问题          &gt;&gt;&gt; 配置javahome路径 vim hadoop-env.sh             /usr/java/default2.出现 -bash  hadoop  。。。not found 问题    &gt;&gt;&gt; 配置 vim /etc/profile增加:    export HADOOP_HOME=/usr/local/hadoop    export PATH=$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$PATH3.修改完配置信息以后记得 source  /。。。4.多次格式化hdfs会导致 namenode与datanode的id不合  &gt;&gt; master启动不了datanode 进入hadoop的logs 下查看日志   &gt;&gt;  修改Version的 natanode 和 namenode 的clusterID一致</code></pre>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019蓝桥杯校赛总结</title>
      <link href="/2019/11/17/2019%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A0%A1%E8%B5%9B/"/>
      <url>/2019/11/17/2019%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A0%A1%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h2 id="2019蓝桥杯校赛总结"><a href="#2019蓝桥杯校赛总结" class="headerlink" title="2019蓝桥杯校赛总结"></a>2019蓝桥杯校赛总结</h2><h4 id="1-2-计算器计算内存-手动忽略"><a href="#1-2-计算器计算内存-手动忽略" class="headerlink" title="1 - 2 计算器计算内存(手动忽略)"></a>1 - 2 计算器计算内存(手动忽略)</h4><h4 id="3-统计1-2019中带’9’的数字有多少个"><a href="#3-统计1-2019中带’9’的数字有多少个" class="headerlink" title="3.统计1-2019中带’9’的数字有多少个"></a>3.统计1-2019中带’9’的数字有多少个</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class C &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int res = 0;</span><br><span class="line">for(int i=1;i&lt;=2019;i++)&#123;</span><br><span class="line">if(func(String.valueOf(i))) res++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(res);</span><br><span class="line">&#125;</span><br><span class="line">public static boolean func(String n) &#123;</span><br><span class="line">for(char c:n.toCharArray())&#123;</span><br><span class="line">if(c == &apos;9&apos;) return true;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>思路很简单,要么用字符串要么用取模判断是不是含有’9’</li></ul><h4 id="4-统计8-8的图里有多少种走对角线的方式"><a href="#4-统计8-8的图里有多少种走对角线的方式" class="headerlink" title="4.统计8*8的图里有多少种走对角线的方式"></a>4.统计8*8的图里有多少种走对角线的方式</h4><p>这个题有点东西是在给了很多限制，其实最后发现都是没啥用的，加不加也是那么多 (只能往右或者往下走) 直接dfs即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class D &#123;</span><br><span class="line">static int res = 0;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">dfs(0,0,0);</span><br><span class="line">System.out.println(res);</span><br><span class="line">&#125;</span><br><span class="line">public static void dfs(int i,int j,int count)&#123;</span><br><span class="line">if(i&lt;0||i&gt;=8||j&lt;0||j&gt;=8||count&gt;14) return;</span><br><span class="line">if(i==7&amp;&amp;j==7&amp;&amp;count==14)&#123;</span><br><span class="line">res++;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">dfs(i+1,j,count+1);</span><br><span class="line">dfs(i,j+1,count+1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-和第三题有点类似-只不过是求1-n直接有多少-由不同数字组成的数字"><a href="#5-和第三题有点类似-只不过是求1-n直接有多少-由不同数字组成的数字" class="headerlink" title="5.和第三题有点类似,只不过是求1-n直接有多少(由不同数字组成的数字)"></a>5.和第三题有点类似,只不过是求1-n直接有多少(由不同数字组成的数字)</h4><ul><li>多加一个vis数组判断该数,是否在这个数字里出现过 复杂度应该是(数字的位数*n)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class E &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line">int n = sc.nextInt();</span><br><span class="line">int res = n;</span><br><span class="line">for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">if(func(i)) res--;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(res);</span><br><span class="line">&#125;</span><br><span class="line">public static boolean func(int num)&#123;</span><br><span class="line">boolean[] vis = new boolean[11];//这里有点费空间</span><br><span class="line">while(num != 0)&#123;</span><br><span class="line">int n = num%10;</span><br><span class="line">if(vis[n]) return true;</span><br><span class="line">else vis[n] = true;</span><br><span class="line">num /= 10;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="6-求最长上升子序列的长度"><a href="#6-求最长上升子序列的长度" class="headerlink" title="6.求最长上升子序列的长度"></a>6.求最长上升子序列的长度</h4><ul><li>直接遍历 (n的时间复杂度) 统计最长的序列长度<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class F &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line">int n = sc.nextInt();</span><br><span class="line">int[] nums = new int[n+1];</span><br><span class="line">for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">nums[i] = sc.nextInt();</span><br><span class="line">&#125;</span><br><span class="line">int max = 1;</span><br><span class="line">int len = 1;</span><br><span class="line">int num = nums[0];</span><br><span class="line">for(int i=1;i&lt;n;i++)&#123;</span><br><span class="line">if(num&lt;nums[i]) len++;</span><br><span class="line">else len = 1;</span><br><span class="line">num = nums[i];</span><br><span class="line">if(len &gt; max ) max = len;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(max);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="7-本来是一道送分题-求逆序对"><a href="#7-本来是一道送分题-求逆序对" class="headerlink" title="7.本来是一道送分题,求逆序对"></a>7.本来是一道送分题,求逆序对</h4><ul><li>写过的题，结果活生生会被自己玩成了丢分题，思路很简单直接两层for暴力也能过，但是使用归并排序理论上是能过10w的测试集的。关键一步没写出来，难受，不想说话…..<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public class G &#123;</span><br><span class="line">static int res = 0;</span><br><span class="line">static int[] nums;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line">int n = sc.nextInt();</span><br><span class="line">nums = new int[n+1];</span><br><span class="line">for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">nums[i] = sc.nextInt();</span><br><span class="line">&#125;</span><br><span class="line">merge_sort(nums,0,n-1);</span><br><span class="line">System.out.println(res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void merge_sort(int[] nums,int l,int r)&#123;</span><br><span class="line">if(l&gt;=r) return;</span><br><span class="line">int mid = l+r&gt;&gt;1;</span><br><span class="line">merge_sort(nums,l,mid);</span><br><span class="line">merge_sort(nums,mid+1,r);</span><br><span class="line">int[] tmp = new int[r-l+1];</span><br><span class="line">int k=0,left=l,right=mid+1;</span><br><span class="line">while(left&lt;=mid &amp;&amp; right&lt;=r)&#123;</span><br><span class="line">if(nums[left]&lt;=nums[right]) tmp[k++] = nums[left++];</span><br><span class="line">else &#123;</span><br><span class="line">tmp[k++] = nums[right++];</span><br><span class="line">res+=mid-left+1;            // 核心: 逆序对 应该是后面的数去前面的路程之和</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">while(left&lt;=mid)&#123;</span><br><span class="line">tmp[k++] = nums[left++];</span><br><span class="line">&#125;</span><br><span class="line">while(right&lt;=r) tmp[k++] = nums[right++];</span><br><span class="line">for(int n:tmp) nums[l++] = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="8-求1-n之间取n个数且满足奇数位大于前一项-偶数位小于前一项"><a href="#8-求1-n之间取n个数且满足奇数位大于前一项-偶数位小于前一项" class="headerlink" title="8.求1-n之间取n个数且满足奇数位大于前一项,偶数位小于前一项"></a>8.求1-n之间取n个数且满足奇数位大于前一项,偶数位小于前一项</h4><ul><li>相当标准的搜索,但是好像拿不了多少分</li><li>思路: 第一个数随便取,后面的按奇偶位分策略搜索<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public class H &#123;</span><br><span class="line">static int res = 0;</span><br><span class="line">static int n,m;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line">m = sc.nextInt();</span><br><span class="line">n = sc.nextInt();</span><br><span class="line">for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">dfs(2,i);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void dfs(int index,int pre)&#123;</span><br><span class="line">if(index == m+1)&#123;</span><br><span class="line">res++;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">if(index % 2 == 0)&#123;</span><br><span class="line">for(int i=1;i&lt;pre;i++)&#123;</span><br><span class="line">dfs(index+1,i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">for(int i=pre+1;i&lt;=n;i++)&#123;</span><br><span class="line">dfs(index+1,i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="9-加上步长-求最短路径"><a href="#9-加上步长-求最短路径" class="headerlink" title="9.加上步长,求最短路径"></a>9.加上步长,求最短路径</h4><ul><li>也是dfs搜索最短路径,不过是搜索的路线有所限制,必须是满足路径之长小于步长(使用dp数组保存该点的最短路径,用空间换时间)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class I &#123;</span><br><span class="line">static boolean[][] vis;</span><br><span class="line">static int[][] dp;</span><br><span class="line">static int n,m;</span><br><span class="line">static double size; </span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line">n = sc.nextInt();</span><br><span class="line">m = sc.nextInt();</span><br><span class="line">size = sc.nextDouble();</span><br><span class="line">vis = new boolean[n+1][m+1];</span><br><span class="line">dp = new int[n+1][m+1];</span><br><span class="line">System.out.println(dfs(1,1));</span><br><span class="line">&#125;</span><br><span class="line">public static int dfs(int i,int j)&#123;</span><br><span class="line">if(i==n&amp;&amp;j==m) return 0;</span><br><span class="line">if(dp[i][j] != 0) return dp[i][j];</span><br><span class="line">int min = Integer.MAX_VALUE;</span><br><span class="line">for(int x=0;x&lt;=n-i;x++)&#123;        // 搜索策略</span><br><span class="line">for(int y=0;y&lt;=m-j;y++)&#123;</span><br><span class="line">if(Math.sqrt((x*x) + (y*y)) &gt; size) break;</span><br><span class="line">if(!vis[i+x][j+y]) &#123;</span><br><span class="line">vis[i+x][j+y] = true;</span><br><span class="line">min = Math.min(min, dfs(i+x,j+y));</span><br><span class="line">vis[i+x][j+y] = false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dp[i][j] = min+1;       // 保存最短路径</span><br><span class="line">return min + 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>但是好像还是过不了1000*1000的矩阵</p><h4 id="10-按原顺序输出前n大的数字"><a href="#10-按原顺序输出前n大的数字" class="headerlink" title="10.按原顺序输出前n大的数字"></a>10.按原顺序输出前n大的数字</h4><ul><li>前n大可以直接sort或者用优先队列</li><li>后面按顺序输出,可以用map记录前n大的数据,再回原数组中按位置输出</li><li>使用map可以用key记录数字,value记录出现次数,处理具有重复数据的情况<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public class J &#123;</span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line">int n = sc.nextInt();</span><br><span class="line">int m = sc.nextInt();</span><br><span class="line">int[] nums = new int[n+1];</span><br><span class="line">PriorityQueue&lt;Integer&gt; q = new PriorityQueue&lt;&gt;(m);</span><br><span class="line">for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">int num = sc.nextInt();</span><br><span class="line">nums[i] = num;</span><br><span class="line">if(q.size() &lt;m) q.add(num);</span><br><span class="line">else if(q.peek() &lt; num)&#123;</span><br><span class="line">q.poll();</span><br><span class="line">q.add(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Map&lt;Integer,Integer&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">for(int i=0;i&lt;m;i++)&#123;</span><br><span class="line">int key = q.poll();</span><br><span class="line">if(map.containsKey(key))&#123;</span><br><span class="line">map.put(key,map.get(key)+1);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">map.put(key,1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">if(map.containsKey(nums[i]))&#123;</span><br><span class="line">System.out.print(nums[i] + &quot; &quot;);</span><br><span class="line">if(map.get(nums[i]) == 1) map.remove(nums[i]);</span><br><span class="line">else map.put(nums[i], map.get(nums[i])-1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>O(nlogn)的复杂度,应该能过,只是最后太着急,忘了加上判断,value为0时删除该元素….</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><p> DFS用的很多，但是剪枝没写好，只能拿部分分。<br> 失误太多，会的没写出来，反而浪费大把时间。希望能过校赛，给个补救的机会。。。。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> DFS </tag>
            
            <tag> 排序算法 </tag>
            
            <tag> 模拟 </tag>
            
            <tag> 竞赛 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序模板</title>
      <link href="/2019/11/16/%E6%8E%92%E5%BA%8F%E6%A8%A1%E6%9D%BF/"/>
      <url>/2019/11/16/%E6%8E%92%E5%BA%8F%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><ul><li>利用分治，选择一个标兵使左右区间分别满足&lt;=和&gt;=标兵，递归子区间直到区间长度为1</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public static void quick_sort(int[] nums, int l, int r) &#123;</span><br><span class="line">if(l&gt;=r) return;</span><br><span class="line">int m = nums[l+r&gt;&gt;1],left = l-1,right = r+1;  //注意此处的标兵取值 必须与下面递归的标兵相反 l - right</span><br><span class="line">while (left&lt;right)&#123;</span><br><span class="line">do left++; while (nums[left] &lt; m);</span><br><span class="line">do right--; while (nums[right] &gt; m);</span><br><span class="line">if(left&lt;right) &#123;</span><br><span class="line">int tmp = nums[left];</span><br><span class="line">nums[left] = nums[right];</span><br><span class="line">nums[right] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">quick_sort(nums,l,right);</span><br><span class="line">quick_sort(nums,right+1, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>持续优化：1.类似荷兰旗问题，当所求值与标兵相同时 不参与下一次递归<br>  2.随机标兵 表现会比固定标兵的效果好</p><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><ul><li>也是分治，先递归，再合并。每次递归二分直到区间长度为1，然后和并返回有序数组</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public static void merge_sort(int[] nums,int l,int r)&#123;</span><br><span class="line">    if(l&gt;=r) return;</span><br><span class="line">    int mid = l+r&gt;&gt;1;</span><br><span class="line">    merge_sort(nums,l,mid);</span><br><span class="line">    merge_sort(nums,mid+1,r);</span><br><span class="line">    int[] tmp = new int[r-l+1];</span><br><span class="line">    int k=0,left=l,right=mid+1;</span><br><span class="line">    while(left&lt;=mid &amp;&amp; right&lt;=r)&#123;</span><br><span class="line">        if(nums[left]&lt;nums[right]) tmp[k++] = nums[left++];</span><br><span class="line">        else tmp[k++] = nums[right++];</span><br><span class="line">    &#125;</span><br><span class="line">    while(left&lt;=mid) tmp[k++] = nums[left++];</span><br><span class="line">    while(right&lt;=r) tmp[k++] = nums[right++];</span><br><span class="line">    for(int n:tmp) nums[l++] = n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="快排重在切分区间，归并重在合并区间"><a href="#快排重在切分区间，归并重在合并区间" class="headerlink" title="快排重在切分区间，归并重在合并区间"></a>快排重在切分区间，归并重在合并区间</h4><h2 id="java中的复合排序"><a href="#java中的复合排序" class="headerlink" title="java中的复合排序"></a>java中的复合排序</h2><ul><li>对新建的结构体使用继承 Comparable接口 实习排序对比</li><li>对于普通的对比，使用 new Comparator类</li><li>对于复合对比 使用多层if-else嵌套</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Comparator;</span><br><span class="line">import java.util.List;</span><br><span class="line">// 对结构体排序</span><br><span class="line">class Node implements Comparable&lt;Node&gt;&#123;</span><br><span class="line">int x;</span><br><span class="line">int y;</span><br><span class="line">public Node(int x, int y) &#123;</span><br><span class="line">this.x = x;</span><br><span class="line">this.y = y;</span><br><span class="line">&#125;</span><br><span class="line">// 先按 x 排序 再按 y排序</span><br><span class="line">@Override</span><br><span class="line">public int compareTo(Node other) &#123;</span><br><span class="line">if(other.x &gt; this.x) return 1;</span><br><span class="line">else if(other.x &lt; this.x) return -1;</span><br><span class="line">else &#123;</span><br><span class="line">return other.y - this.y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class NodeSort &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">List&lt;Node&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">list.sort(new Comparator&lt;Node&gt;() &#123;</span><br><span class="line">@Override</span><br><span class="line">public int compare(Node o1, Node o2) &#123;</span><br><span class="line">return o1.x-o2.x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="java中的优先队列（堆排序）"><a href="#java中的优先队列（堆排序）" class="headerlink" title="java中的优先队列（堆排序）"></a>java中的优先队列（堆排序）</h2><ul><li>堆排序默认维护n大小的最值（默认最大值 小顶堆）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Comparator;</span><br><span class="line">import java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line">public class heapSort &#123;</span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line">    int[] arr = &#123;1,5,3,2,7,6,4,9,8&#125;;</span><br><span class="line">    int k = 3;      // 队的size</span><br><span class="line">    PriorityQueue&lt;Integer&gt; q1 = new PriorityQueue&lt;&gt;(k);   // 维护小顶堆</span><br><span class="line">    PriorityQueue&lt;Integer&gt; q = new PriorityQueue&lt;&gt;(k, new Comparator&lt;Integer&gt;() &#123;   // 维护大顶堆</span><br><span class="line">      @Override</span><br><span class="line">      public int compare(Integer o1, Integer o2) &#123;</span><br><span class="line">        return o2-o1;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    for (int i = 0; i &lt;9 ; i++) &#123;</span><br><span class="line">      if(q.size() &lt; k) q.add(arr[i]);</span><br><span class="line">      else if(arr[i] &lt; q.peek())&#123;</span><br><span class="line">        q.poll();</span><br><span class="line">        q.add(arr[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = 0; i &lt;k ; i++) &#123;</span><br><span class="line">      System.out.println(q.poll());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
