<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>docker-compose详解</title>
      <link href="/2021/07/27/docker-compose%E8%AF%A6%E8%A7%A3/"/>
      <url>/2021/07/27/docker-compose%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="docker-compose详解"><a href="#docker-compose详解" class="headerlink" title="docker-compose详解"></a>docker-compose详解</h1><blockquote><p>Compose 是用于定义和运行<strong>多容器</strong> Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。</p></blockquote><h2 id="基本使用步骤"><a href="#基本使用步骤" class="headerlink" title="基本使用步骤"></a>基本使用步骤</h2><ul><li>使用 Dockerfile 定义应用程序的环境。</li><li>使用 docker-compose.yml 定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。</li><li>最后，执行 docker-compose up 命令来启动并运行整个应用程序。</li></ul><p>docker、docker compose的安装参见百度，Dockerfile的书写见上文。</p><h2 id="yml-配置指令参考"><a href="#yml-配置指令参考" class="headerlink" title="yml 配置指令参考"></a>yml 配置指令参考</h2><h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><blockquote><p>指定本 yml 依从的 compose 哪个版本制定的。</p></blockquote><h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><blockquote><p>使用Dockerfile构建镜像并运行，指定构建镜像的路径。</p></blockquote><p>例如 webapp 服务，指定为从上下文路径 ./dir/Dockerfile 所构建的镜像：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.7&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">webapp:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./dir</span></span><br></pre></td></tr></table></figure><h3 id="image"><a href="#image" class="headerlink" title="image"></a>image</h3><blockquote><p>指定容器运行的镜像。以下格式都可以：</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">ubuntu:14.04</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">tutum/influxdb</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">example-registry.com:4000/postgresql</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">a4bc65fd</span> <span class="comment"># 镜像id</span></span><br></pre></td></tr></table></figure><h3 id="command"><a href="#command" class="headerlink" title="command"></a>command</h3><blockquote><p>覆盖容器启动的默认命令。等价于Dockerfile的<code>CMD</code>。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">command:</span> [<span class="string">&quot;go&quot;</span>, <span class="string">&quot;run&quot;</span>, <span class="string">&quot;./main.go&quot;</span>]</span><br></pre></td></tr></table></figure><h3 id="container-name"><a href="#container-name" class="headerlink" title="container_name"></a>container_name</h3><blockquote><p>指定自定义容器名称，而不是生成的默认名称。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">container_name:</span> <span class="string">my-web-container</span></span><br></pre></td></tr></table></figure><h3 id="depends-on"><a href="#depends-on" class="headerlink" title="depends_on"></a>depends_on</h3><blockquote><p>设置依赖关系。</p><ul><li>docker-compose up ：以依赖性顺序启动服务。在以下示例中，先启动 db 和 redis ，才会启动 web。</li><li>docker-compose up SERVICE ：自动包含 SERVICE 的依赖项。在以下示例中，docker-compose up web 还将创建并启动 db 和 redis。</li><li>docker-compose stop ：按依赖关系顺序停止服务。在以下示例中，web 在 db 和 redis 之前停止。</li></ul></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.7&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：web 服务不会等待 redis db 完全启动 之后才启动。</p><h3 id="volumes"><a href="#volumes" class="headerlink" title="volumes"></a>volumes</h3><blockquote><p>将主机的数据卷或着文件挂载到容器里。等价于Dockerfile的<code>VOLUME</code>。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.7&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:latest</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/localhost/postgres.sock:/var/run/postgres/postgres.sock&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/localhost/data:/var/lib/postgresql/data&quot;</span></span><br></pre></td></tr></table></figure><h3 id="dns"><a href="#dns" class="headerlink" title="dns"></a>dns</h3><blockquote><p>自定义 DNS 服务器，可以是单个值或列表的多个值。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dns:</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dns:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">9.9</span><span class="number">.9</span><span class="number">.9</span></span><br></pre></td></tr></table></figure><h3 id="entrypoint"><a href="#entrypoint" class="headerlink" title="entrypoint"></a>entrypoint</h3><blockquote><p> 覆盖容器默认的 entrypoint。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">entrypoint:</span> <span class="string">/code/entrypoint.sh</span></span><br></pre></td></tr></table></figure><h3 id="environment"><a href="#environment" class="headerlink" title="environment"></a>environment</h3><blockquote><p>添加环境变量。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="attr">RACK_ENV:</span> <span class="string">development</span></span><br><span class="line">  <span class="attr">SHOW:</span> <span class="string">&#x27;true&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="expose"><a href="#expose" class="headerlink" title="expose"></a>expose</h3><blockquote><p>暴露端口，但不映射到宿主机，只被连接的服务访问。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">expose:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;3000&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;8000&quot;</span></span><br></pre></td></tr></table></figure><h3 id="extra-hosts"><a href="#extra-hosts" class="headerlink" title="extra_hosts"></a>extra_hosts</h3><blockquote><p>添加主机名映射。类似 docker client –add-host</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">extra_hosts:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;somehost:162.242.195.82&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;otherhost:50.31.209.229&quot;</span></span><br></pre></td></tr></table></figure><h3 id="tmpfs"><a href="#tmpfs" class="headerlink" title="tmpfs"></a>tmpfs</h3><blockquote><p>在容器内安装一个临时文件系统。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tmpfs:</span> <span class="string">/run</span></span><br></pre></td></tr></table></figure><h3 id="networks"><a href="#networks" class="headerlink" title="networks"></a>networks</h3><blockquote><p>配置容器连接的网络，引用顶级 networks 下的条目 。</p><p>默认使用<code>myapp_default</code>网络，每个services下的服务以自己名字命名自己的网络加入其中。</p></blockquote><p>自定义网络</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">proxy:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./proxy</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">frontend</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./app</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">frontend</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">backend</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">backend</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">frontend:</span></span><br><span class="line">    <span class="comment"># Use a custom driver</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">custom-driver-1</span></span><br><span class="line">  <span class="attr">backend:</span></span><br><span class="line">    <span class="comment"># Use a custom driver which takes special options</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">custom-driver-2</span></span><br><span class="line">    <span class="attr">driver_opts:</span></span><br><span class="line">      <span class="attr">foo:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">      <span class="attr">bar:</span> <span class="string">&quot;2&quot;</span></span><br></pre></td></tr></table></figure><h3 id="ports"><a href="#ports" class="headerlink" title="ports"></a>ports</h3><blockquote><p>设置容器隐射的端口。等价于 -p 8080:8080</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;8000:8000&#x27;</span></span><br></pre></td></tr></table></figure><p>更多信息参考：<a href="https://docs.docker.com/compose/gettingstarted/">https://docs.docker.com/compose/gettingstarted/</a></p><h2 id="实例实践"><a href="#实例实践" class="headerlink" title="实例实践"></a>实例实践</h2><p>使用docker compose构建一个gin web及其mysql环境。</p><ol><li><p>创建文件夹</p></li><li><p>设计 gin web</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">    <span class="string">&quot;gorm.io/driver/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 引入GORM</span></span><br><span class="line">dsn := <span class="string">&quot;root:123456@tcp(db:3306)/myDB?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span></span><br><span class="line">db, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;failed to connect database&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迁移 schema</span></span><br><span class="line">db.AutoMigrate(&amp;User&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create</span></span><br><span class="line">db.Create(&amp;User&#123;UserName: <span class="string">&quot;kid1999&quot;</span>, Age: <span class="number">22</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// gin 逻辑</span></span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/user/:id&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span>&#123;</span><br><span class="line">id := c.Param(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">user := User&#123;&#125;</span><br><span class="line">db.First(&amp;user, id)</span><br><span class="line">c.JSON(<span class="number">200</span>, user)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.POST(<span class="string">&quot;/user&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> u User</span><br><span class="line">c.Bind(&amp;u)</span><br><span class="line">db.Create(&amp;u)</span><br><span class="line">c.JSON(<span class="number">200</span>, u)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">gorm.Model</span><br><span class="line">UserName <span class="keyword">string</span></span><br><span class="line">Age <span class="keyword">int64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>go 依赖初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod init docker-compose</span><br></pre></td></tr></table></figure></li><li><p>设计web的Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">From</span> golang:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将当前文件夹的所有文件复制到容器中</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置go代理</span></span><br><span class="line"><span class="keyword">ENV</span>  GO111MODULE=on GOPROXY=https://goproxy.io,direct</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载go的依赖</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> go mod tidy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> go run main.go</span></span><br></pre></td></tr></table></figure></li><li><p>设计docker compose文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;mysql:5.7&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">&quot;myDB&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mynetwork</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mynetwork</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">mynetwork:</span></span><br></pre></td></tr></table></figure><p>注意此处有一个大坑，<code>restart: always</code>必须写上，不然会出现mysql创建较慢，导致web连接错误退出的事故！！！</p></li><li><p>运行docker compose</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure></li><li><p>关闭所有容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose down </span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dockerfile详解</title>
      <link href="/2021/07/26/Dockerfile%E8%AF%A6%E8%A7%A3/"/>
      <url>/2021/07/26/Dockerfile%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Dockerfile详解"><a href="#Dockerfile详解" class="headerlink" title="Dockerfile详解"></a>Dockerfile详解</h1><blockquote><p>本文基于win10 docker 讲述Dockerfile的书写，并举例示范。</p><p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p></blockquote><h3 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h3><ul><li>创建名为Dockerfile的文件</li><li>书写Dockerfile文件</li><li>构建镜像，如：<code>docker build -t nginx:v3 .</code> (.代表当前目录，nginx:v3是Dockerfile中定义的镜像标签)</li><li>运行docker镜像：<code>docker run -d nginx:v3 </code></li></ul><h3 id="命令介绍"><a href="#命令介绍" class="headerlink" title="命令介绍"></a>命令介绍</h3><h4 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h4><blockquote><p>引用最基础的镜像，即构建的基础镜像。</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx:latest</span><br></pre></td></tr></table></figure><h4 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h4><blockquote><p>用于执行后面跟着的命令行命令。</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> &lt;命令行命令&gt;</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> go build ./main.go</span></span><br><span class="line"></span><br><span class="line">或者：</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> [<span class="string">&quot;可执行文件&quot;</span>, <span class="string">&quot;参数1&quot;</span>, <span class="string">&quot;参数2&quot;</span>]</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> [<span class="string">&quot;go&quot;</span>, <span class="string">&quot;build&quot;</span>, <span class="string">&quot;./main.go&quot;</span>]</span></span><br></pre></td></tr></table></figure><p><strong>&amp;&amp;</strong> 可用于连接命令,如：<code>wget http://redis.tar &amp;&amp; tar -xzvf redis.tar </code></p><h4 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h4><blockquote><p>复制指令，从上下文目录中复制文件或者目录到容器里指定路径。</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> [--chown=&lt;user&gt;:&lt;group&gt;] [<span class="string">&quot;&lt;源路径1&gt;&quot;</span>,...  <span class="string">&quot;&lt;目标路径&gt;&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将当前文件夹下所有的文件复制到镜像/data/myapp文件夹下</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /data/myapp</span></span><br></pre></td></tr></table></figure><h4 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h4><blockquote><p>ADD 指令和 COPY 的使用格类似（同样需求下，官方推荐使用 COPY。</p><p>与COPY的区别是，若 &lt;源文件&gt; 为 tar 压缩文件的话，会<strong>自动复制并解压</strong>到 &lt;目标路径&gt;！！！</p></blockquote><h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><blockquote><p>类似于 RUN 指令，用于运行程序，但二者运行的时间点不同:</p><ul><li>CMD 在docker run 时运行。</li><li>RUN 是在 docker build。</li></ul><p><strong>作用</strong>：为启动的容器指定默认要运行的程序，程序运行结束，容器也就结束。CMD 指令指定的程序可被 docker run 命令行参数中指定要运行的程序所覆盖。</p><p><strong>注意</strong>：如果 Dockerfile 中如果存在多个 CMD 指令，<strong>仅最后一个生效</strong>。</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;&lt;可执行文件或命令&gt;&quot;</span>,<span class="string">&quot;&lt;param1&gt;&quot;</span>,<span class="string">&quot;&lt;param2&gt;&quot;</span>,...] </span></span><br><span class="line">或：</span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> &lt;shell 命令&gt; </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> java -jar server.jar</span></span><br></pre></td></tr></table></figure><h4 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h4><blockquote><p>类似于 CMD 指令，但其不会被 docker run 的命令行参数指定的指令所覆盖，而且这些命令行参数会被当作参数送给 ENTRYPOINT 指令指定的程序。</p><p><strong>优点</strong>：在执行 docker run 的时候可以指定 ENTRYPOINT 运行所需的参数。</p><p><strong>注意</strong>：如果 Dockerfile 中如果存在多个 ENTRYPOINT 指令，仅最后一个生效。</p></blockquote><p>此命令适合搭配CMD使用：一般是变参才会使用 CMD ，这里的 CMD 等于是在给 ENTRYPOINT 传参。</p><p>如构建以下的镜像：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx</span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;nginx&quot;</span>, <span class="string">&quot;-c&quot;</span>] <span class="comment"># 定参</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;/etc/nginx/nginx.conf&quot;</span>] <span class="comment"># 变参 </span></span></span><br></pre></td></tr></table></figure><ol><li><p>不传参数，默认运行dockerfile中的CMD参数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run  nginx:test</span><br></pre></td></tr></table></figure></li><li><p>docker run 传参数，覆盖运行run 的参数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run  nginx:test -c /etc/nginx/new.conf</span><br></pre></td></tr></table></figure></li></ol><p>以上两种方式最后运行的都是：<code>nginx -c /etc/nginx/new.conf</code>，推荐使用数组的方式书写ENTRYPOINT。</p><h4 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h4><blockquote><p>设置环境变量。</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> &lt;key&gt; &lt;value&gt;</span><br><span class="line"><span class="keyword">ENV</span> &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> NODE_VERSION <span class="number">7.2</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h4><blockquote><p>定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。</p><p>作用：</p><ul><li>避免重要的数据，因容器重启而丢失，这是非常致命的。</li><li>避免容器不断变大。</li></ul></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">&quot;&lt;路径1&gt;&quot;</span>, <span class="string">&quot;&lt;路径2&gt;&quot;</span>...]</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> &lt;路径&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /data/<span class="built_in">log</span></span></span><br></pre></td></tr></table></figure><p>在启动容器 docker run 的时候，我们可以通过 -v 参数修改挂载点!!!</p><h4 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h4><blockquote><p>声明端口，需要在运行时搭配 -p端口映射使用。</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPOSE</span> &lt;端口<span class="number">1</span>&gt; [&lt;端口<span class="number">2</span>&gt;...]</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><h4 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h4><blockquote><p>指定工作目录（项目当前路径）。</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> &lt;工作目录路径&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /data</span></span><br></pre></td></tr></table></figure><p>更多命令信息参考：<a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a></p><h3 id="案例示范"><a href="#案例示范" class="headerlink" title="案例示范"></a>案例示范</h3><p>使用dockerfile部署一个简单的gin项目应用。</p><ol><li><p>创建docker文件夹</p></li><li><p>书写gin程序</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;message&quot;</span>: <span class="string">&quot;pong&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>生成go mod 依赖文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod init docker</span><br></pre></td></tr></table></figure></li><li><p>拉取go依赖包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod download</span><br></pre></td></tr></table></figure></li><li><p>测试应用程序，访问<code>localhost:8080/ping</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run main.go</span><br></pre></td></tr></table></figure></li><li><p>书写Dockerfile文件</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">From</span> golang:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将当前文件夹的所有文件复制到容器中</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置go代理</span></span><br><span class="line"><span class="keyword">ENV</span>  GO111MODULE=on GOPROXY=https://goproxy.io,direct</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载go的依赖</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> go mod tidy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> go run main.go</span></span><br></pre></td></tr></table></figure></li><li><p>构建镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t gin-app .</span><br></pre></td></tr></table></figure><p><img data-src="https://pic.imgdb.cn/item/60fe9b095132923bf81ba109.jpg" class="lazyload"></p></li><li><p>运行容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:8080  gin-app</span><br></pre></td></tr></table></figure></li></ol><p>正常运行。</p><p><img alt="项目结构示意图" data-src="https://pic.imgdb.cn/item/60fea06a5132923bf82d1cbe.jpg" class="lazyload"></p><p><strong>参考：</strong></p><p><a href="https://www.runoob.com/docker/docker-dockerfile.html">Dockerfile菜鸟教程</a></p><p><a href="https://docs.docker.com/engine/reference/builder/">Dockerfile官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go同步原语与锁</title>
      <link href="/2021/07/23/Go%E5%90%8C%E6%AD%A5%E5%8E%9F%E8%AF%AD%E4%B8%8E%E9%94%81/"/>
      <url>/2021/07/23/Go%E5%90%8C%E6%AD%A5%E5%8E%9F%E8%AF%AD%E4%B8%8E%E9%94%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>建议搭配Go并发编程一起使用。</p><p>锁是一种并发编程中的同步原语（Synchronization Primitives），它能保证多个 Goroutine 在访问同一片内存时不会出现竞争条件（Race condition）等问题。</p></blockquote><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><strong>context</strong></li><li><strong>锁</strong></li><li><strong>channel</strong></li></ul><h2 id="上下文Context"><a href="#上下文Context" class="headerlink" title="上下文Context"></a>上下文Context</h2><blockquote><p>context是 goroutine 的上下文，包含 goroutine 的运行状态、环境、现场等信息。主要用来在 goroutine 之间传递上下文信息，包括：取消信号、超时时间、截止时间、k-v 等。</p></blockquote><blockquote><p>context.Context 类型的值可以协调多个 groutine 中的代码执行“取消”操作，并且可以存储键值对。最重要的是它是并发安全的。<br>与它协作的 API 都可以由外部控制执行“取消”操作，例如：取消一个 HTTP 请求的执行。</p></blockquote><p><img data-src="https://pic3.zhimg.com/80/v2-6a27526f536505cea08a5813ccce05b2_720w.jpg" class="lazyload"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Context <span class="keyword">interface</span> &#123;</span><br><span class="line">    <span class="comment">// 当 context 被取消或者到了 deadline，返回一个被关闭的 channel</span></span><br><span class="line">    Done() &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在 channel Done 关闭后，返回 context 取消原因</span></span><br><span class="line">    Err() error</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回 context 是否会被取消以及自动取消时间（即 deadline）</span></span><br><span class="line">    Deadline() (deadline time.Time, ok <span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 key 对应的 value</span></span><br><span class="line">    Value(key <span class="keyword">interface</span>&#123;&#125;) <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如：使用Context实现父进程监视子进程自增到5，并关闭的效果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">gen</span><span class="params">(ctx context.Context)</span> &lt;-<span class="title">chan</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> n <span class="keyword">int</span></span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            <span class="keyword">select</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">case</span> ch &lt;- n:</span><br><span class="line">                n++</span><br><span class="line">                time.Sleep(time.Second)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> ch</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ctx, cancel := context.WithCancel(context.Background())</span><br><span class="line">    <span class="keyword">defer</span> cancel() <span class="comment">// 避免其他地方忘记 cancel，且重复调用不影响</span></span><br><span class="line">    <span class="keyword">for</span> n := <span class="keyword">range</span> gen(ctx) &#123;</span><br><span class="line">        fmt.Println(n)</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">5</span> &#123;</span><br><span class="line">            cancel()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建Context的四个方式"><a href="#创建Context的四个方式" class="headerlink" title="创建Context的四个方式"></a>创建Context的四个方式</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithCancel</span><span class="params">(parent Context)</span> <span class="params">(ctx Context, cancel CancelFunc)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithDeadline</span><span class="params">(parent Context, deadline time.Time)</span> <span class="params">(Context, CancelFunc)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithTimeout</span><span class="params">(parent Context, timeout time.Duration)</span> <span class="params">(Context, CancelFunc)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithValue</span><span class="params">(parent Context, key, val <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">Context</span></span></span><br></pre></td></tr></table></figure><h4 id="创建context的四点意见"><a href="#创建context的四点意见" class="headerlink" title="创建context的四点意见"></a>创建context的四点意见</h4><ol><li>不要将 Context 塞到结构体里。直接将 Context 类型作为函数的第一参数，而且一般都命名为 ctx。</li><li>不要向函数传入一个 nil 的 context，如果你实在不知道传什么，标准库给你准备好了一个 context：todo。</li><li>不要把本应该作为函数参数的类型塞到 context 中，context 存储的应该是一些共同的数据。例如：登陆的 session、cookie 等。</li><li>同一个 context 可能会被传递到多个 goroutine，别担心，context 是并发安全的。</li></ol><h4 id="传递共享数据"><a href="#传递共享数据" class="headerlink" title="传递共享数据"></a>传递共享数据</h4><blockquote><p>通过context设置和获取key Value。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ctx := context.Background()</span><br><span class="line">    process(ctx)</span><br><span class="line"></span><br><span class="line">    ctx = context.WithValue(ctx, <span class="string">&quot;traceId&quot;</span>, <span class="string">&quot;qcrao-2019&quot;</span>)</span><br><span class="line">    process(ctx)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">    traceId, ok := ctx.Value(<span class="string">&quot;traceId&quot;</span>).(<span class="keyword">string</span>)</span><br><span class="line">    <span class="keyword">if</span> ok &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;process over. trace_id=%s\n&quot;</span>, traceId)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;process over. no trace_id\n&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="取消-goroutine"><a href="#取消-goroutine" class="headerlink" title="取消 goroutine"></a>取消 goroutine</h4><blockquote><p>假设我们需要让perform进程一直执行某任务，直到主进程关闭为止。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ctx, cancel := context.WithTimeout(context.Background(), time.Hour)</span><br><span class="line"><span class="keyword">go</span> Perform(ctx)</span><br><span class="line">    <span class="comment">// ……</span></span><br><span class="line">    <span class="comment">// app 端返回页面，调用cancel 函数</span></span><br><span class="line">    cancel()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Perform</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        doWork()</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">            <span class="comment">// 被取消，直接返回</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">case</span> &lt;-time.After(time.Second):</span><br><span class="line">            <span class="comment">// block 1 秒钟 继续检查</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="超时退出"><a href="#超时退出" class="headerlink" title="超时退出"></a>超时退出</h4><blockquote><p>假设我们需要为一个任务设置超时时间，超时就关闭，也可以手动调用cancel()结束进程。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ctx, cancel := context.WithTimeout(context.Background(), time.Hour)<span class="comment">// 在此处设置超时时间</span></span><br><span class="line"><span class="keyword">go</span> Perform(ctx)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Perform</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        doWork()</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">            <span class="comment">// 被取消，直接返回</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">case</span> &lt;-time.After(time.Second):</span><br><span class="line">            <span class="comment">// block 1 秒钟 继续检查</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="同步原语与锁"><a href="#同步原语与锁" class="headerlink" title="同步原语与锁"></a>同步原语与锁</h2><p>如下会介绍 Go 语言中常见的同步原语 <a href="https://draveness.me/golang/tree/sync.Mutex"><code>sync.Mutex</code></a>、<a href="https://draveness.me/golang/tree/sync.RWMutex"><code>sync.RWMutex</code></a>、<a href="https://draveness.me/golang/tree/sync.WaitGroup"><code>sync.WaitGroup</code></a>、<a href="https://draveness.me/golang/tree/sync.Once"><code>sync.Once</code></a> 和 <a href="https://draveness.me/golang/tree/sync.Cond"><code>sync.Cond</code></a> 以及扩展原语 <a href="https://draveness.me/golang/tree/golang/sync/errgroup.Group"><code>golang/sync/errgroup.Group</code></a>、<a href="https://draveness.me/golang/tree/golang/sync/semaphore.Weighted"><code>golang/sync/semaphore.Weighted</code></a> 和 <a href="https://draveness.me/golang/tree/golang/sync/singleflight.Group"><code>golang/sync/singleflight.Group</code></a> 的实现原理，同时也会涉及互斥锁、信号量等并发编程中的常见概念。它们是一种相对原始的同步机制，在多数情况下，我们都应该使用抽象层级更高的 Channel 实现同步。</p><p><img data-src="https://img.draveness.me/2020-01-23-15797104327981-golang-basic-sync-primitives.png" class="lazyload"></p><h3 id="Mutex"><a href="#Mutex" class="headerlink" title="Mutex"></a>Mutex</h3><blockquote><p> Go 语言中的互斥锁。 <a href="https://draveness.me/golang/tree/sync.Mutex"><code>sync.Mutex</code></a> 由两个字段 <code>state</code> 和 <code>sema</code> 组成。其中 <code>state</code> 表示当前互斥锁的状态，而 <code>sema</code> 是用于控制锁状态的信号量。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Mutex <span class="keyword">struct</span> &#123;</span><br><span class="line">state <span class="keyword">int32</span></span><br><span class="line">sema  <span class="keyword">uint32</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mutex拥有四种状态，Mutex会在饥饿模式和正常模式间切换，综合效率和公平：</p><ul><li><code>mutexLocked</code> — 表示互斥锁的锁定状态；</li><li><code>mutexWoken</code> — 表示从正常模式被从唤醒；</li><li><code>mutexStarving</code> — 当前的互斥锁进入饥饿状态；</li><li><code>waitersCount</code> — 当前互斥锁上等待的 Goroutine 个数；</li></ul><p>与饥饿模式相比，正常模式下的互斥锁能够提供更好地性能，饥饿模式的能避免 Goroutine 由于陷入等待无法获取锁而造成的高尾延时。</p><ul><li><p>加锁与解锁</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mu sync.Mutex</span><br><span class="line"></span><br><span class="line">mu.Lock()</span><br><span class="line">xxxx</span><br><span class="line">mu.Unlock</span><br></pre></td></tr></table></figure></li></ul><h3 id="RWMutex"><a href="#RWMutex" class="headerlink" title="RWMutex"></a>RWMutex</h3><blockquote><p>读写互斥锁 <a href="https://draveness.me/golang/tree/sync.RWMutex"><code>sync.RWMutex</code></a> 是细粒度的互斥锁，它不限制资源的并发读，但是读写、写写操作无法并行执行。</p><table><thead><tr><th align="center"></th><th align="center">读</th><th align="center">写</th></tr></thead><tbody><tr><td align="center">读</td><td align="center">Y</td><td align="center">N</td></tr><tr><td align="center">写</td><td align="center">N</td><td align="center">N</td></tr></tbody></table></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> RWMutex <span class="keyword">struct</span> &#123;</span><br><span class="line">w           Mutex</span><br><span class="line">writerSem   <span class="keyword">uint32</span></span><br><span class="line">readerSem   <span class="keyword">uint32</span></span><br><span class="line">readerCount <span class="keyword">int32</span></span><br><span class="line">readerWait  <span class="keyword">int32</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>w</code> — 复用互斥锁提供的能力；</li><li><code>writerSem</code> 和 <code>readerSem</code> — 分别用于写等待读和读等待写：</li><li><code>readerCount</code> 存储了当前正在执行的读操作数量；</li><li><code>readerWait</code> 表示当写操作被阻塞时等待的读操作个数；</li></ul><p>我们会依次分析获取写锁和读锁的实现原理，其中：</p><ul><li>写操作使用 <a href="https://draveness.me/golang/tree/sync.RWMutex.Lock"><code>sync.RWMutex.Lock</code></a> 和 <a href="https://draveness.me/golang/tree/sync.RWMutex.Unlock"><code>sync.RWMutex.Unlock</code></a> 方法；</li><li>读操作使用 <a href="https://draveness.me/golang/tree/sync.RWMutex.RLock"><code>sync.RWMutex.RLock</code></a> 和 <a href="https://draveness.me/golang/tree/sync.RWMutex.RUnlock"><code>sync.RWMutex.RUnlock</code></a> 方法； </li></ul><p>调用<code>sync.RWMutex.Lock</code>尝试获取写锁时；</p><ul><li>每次 <a href="https://draveness.me/golang/tree/sync.RWMutex.RUnlock"><code>sync.RWMutex.RUnlock</code></a> 都会将 <code>readerCount</code> 其减一，当它归零时该 Goroutine 会获得写锁；</li><li>将 <code>readerCount</code> 减少 <code>rwmutexMaxReaders</code> 个数以阻塞后续的读操作；</li></ul><p>调用 <a href="https://draveness.me/golang/tree/sync.RWMutex.Unlock"><code>sync.RWMutex.Unlock</code></a> 释放写锁时，会先通知所有的读操作，然后才会释放持有的互斥锁；</p><h3 id="WaitGroup"><a href="#WaitGroup" class="headerlink" title="WaitGroup"></a>WaitGroup</h3><blockquote><p><a href="https://draveness.me/golang/tree/sync.WaitGroup"><code>sync.WaitGroup</code></a> 可以等待一组 Goroutine 的返回，一个比较常见的使用场景是批量发出 RPC 或者 HTTP 请求：</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">requests := []*Request&#123;...&#125;</span><br><span class="line">wg := &amp;sync.WaitGroup&#123;&#125;</span><br><span class="line">wg.Add(<span class="built_in">len</span>(requests))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, request := <span class="keyword">range</span> requests &#123;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(r *Request)</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> wg.Done()</span><br><span class="line">        <span class="comment">// res, err := service.call(r)</span></span><br><span class="line">    &#125;(request)</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br></pre></td></tr></table></figure><h3 id="Once"><a href="#Once" class="headerlink" title="Once"></a>Once</h3><blockquote><p><a href="https://draveness.me/golang/tree/sync.Once"><code>sync.Once</code></a> 可以保证在 Go 程序运行期间的某段代码只会执行一次。在运行如下所示的代码时，我们会看到如下所示的运行结果：</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    o := &amp;sync.Once&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        o.Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;only once&quot;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Cond"><a href="#Cond" class="headerlink" title="Cond"></a>Cond</h3><blockquote><p><a href="https://draveness.me/golang/tree/sync.Cond"><code>sync.Cond</code></a>，它可以让一组的 Goroutine 都在满足特定条件时被唤醒。每一个 <a href="https://draveness.me/golang/tree/sync.Cond"><code>sync.Cond</code></a> 结构体在初始化时都需要传入一个<strong>互斥锁</strong>。</p></blockquote><p>总结一下<code>sync.Mutex</code>的大致用法</p><ol><li>首先声明一个<code>mutex</code>，这里<code>sync.Mutex</code>/<code>sync.RWMutex</code>可根据实际情况选用</li><li>调用<code>sync.NewCond(l Locker) *Cond</code> 使用1中的<code>mutex</code>作为入参 <strong>注意 这里传入的是指针 为了避免<code>c.L.Lock()</code>、<code>c.L.Unlock()</code>调用频繁复制锁 导致死锁</strong></li><li>根据业务条件 满足则调用<code>cond.Wait()</code>挂起<code>goroutine</code></li><li><code>cond.Broadcast()</code>唤起所有挂起的<code>gorotune</code> 另一个方法<code>cond.Signal()</code>唤醒一个最先挂起的<code>goroutine</code></li></ol><p>需要注意的是<code>cond.wait()</code>的使用需要参照如下模版 具体为啥我们后续分析</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> c.L.Lock()</span><br><span class="line"> <span class="keyword">for</span> !condition() &#123;</span><br><span class="line">     c.Wait()</span><br><span class="line"> &#125;</span><br><span class="line"> ... <span class="built_in">make</span> use of condition ...</span><br><span class="line">c.L.Unlock()</span><br></pre></td></tr></table></figure><p>如：唤醒等待队列中的所有goroutine，Singal一个一个唤醒，Broadcast广播全体唤醒。此案例中未涉及wait的条件。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">locker := <span class="built_in">new</span>(sync.Mutex)</span><br><span class="line">cond := sync.NewCond(locker)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span> ; i &lt; <span class="number">30</span> ; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(x <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">cond.L.Lock()</span><br><span class="line">fmt.Println(x,<span class="string">&quot; 获取锁&quot;</span>)</span><br><span class="line"><span class="keyword">defer</span> cond.L.Unlock()</span><br><span class="line">cond.Wait()</span><br><span class="line">fmt.Println(x,<span class="string">&quot; 被唤醒&quot;</span>)</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">fmt.Println(<span class="string">&quot;Signal...&quot;</span>)</span><br><span class="line">cond.Signal()</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">cond.Signal()</span><br><span class="line">time.Sleep(time.Second*<span class="number">3</span>)</span><br><span class="line">cond.Broadcast()</span><br><span class="line"> </span><br><span class="line">fmt.Println(<span class="string">&quot;Broadcast...&quot;</span>)</span><br><span class="line">time.Sleep(time.Minute)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Channel</p><blockquote><p>线程间用于通讯的管道，利用channel+select类似Cond，同理也可以实现像WaitGroup的功能…</p></blockquote><p>详情参见Go并发一文。</p><p>总结：</p><p>本文未对并发做更深刻的了解，只是初略了解其用法。虽然Go提供了许多的并发管理工具，但是如果细心思考，都是想通的在很多情况下，用各种工具都能实现相似的功能，所以这要求我们要熟悉这些工具在各个场景下的应用。至于原理只能深挖的时候再说了。。。</p><p>参考：</p><p><a href="https://draveness.me/golang">Go 语言设计与实现</a></p>]]></content>
      
      
      <categories>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go-IO标准库</title>
      <link href="/2021/07/23/Go-IO%E6%A0%87%E5%87%86%E5%BA%93/"/>
      <url>/2021/07/23/Go-IO%E6%A0%87%E5%87%86%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Go-IO标准库操作"><a href="#Go-IO标准库操作" class="headerlink" title="Go IO标准库操作"></a>Go IO标准库操作</h1><p>Go 语言中，为了方便开发者使用，将 IO 操作封装在了如下几个包中：</p><ul><li><p>os.FileInfo 为文件信息接口</p></li><li><p>io   为 IO 原语（I/O primitives）提供基本的接口</p></li><li><p>io/ioutil  封装一些实用的 I/O 函数</p></li><li><p>fmt  实现格式化 I/O，类似 C 语言中的 printf 和 scanf</p></li><li><p>bufio  实现带缓冲I/O</p></li></ul><h2 id="文件信息"><a href="#文件信息" class="headerlink" title="文件信息"></a>文件信息</h2><h3 id="接口属性"><a href="#接口属性" class="headerlink" title="接口属性"></a>接口属性</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> FileInfo <span class="keyword">interface</span> &#123;</span><br><span class="line">    Name() <span class="keyword">string</span>       <span class="comment">// 文件的名字</span></span><br><span class="line">    Size() <span class="keyword">int64</span>        <span class="comment">// 普通文件返回值表示其大小；其他文件的返回值含义各系统不同</span></span><br><span class="line">    Mode() FileMode     <span class="comment">// 文件的模式位 (例-rw-rw-r--)</span></span><br><span class="line">    ModTime() time.Time <span class="comment">// 文件的修改时间</span></span><br><span class="line">    IsDir() <span class="keyword">bool</span>        <span class="comment">// 等价于Mode().IsDir()</span></span><br><span class="line">    Sys() <span class="keyword">interface</span>&#123;&#125;   <span class="comment">// 底层数据来源（可以返回nil）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="os-fileStat结构体实现了FileInfo接口的所有方法"><a href="#os-fileStat结构体实现了FileInfo接口的所有方法" class="headerlink" title="os.fileStat结构体实现了FileInfo接口的所有方法"></a>os.fileStat结构体实现了FileInfo接口的所有方法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> fileStat <span class="keyword">struct</span> &#123;</span><br><span class="line">    name    <span class="keyword">string</span></span><br><span class="line">    size    <span class="keyword">int64</span></span><br><span class="line">    mode    FileMode</span><br><span class="line">    modTime time.Time</span><br><span class="line">    sys     syscall.Stat_t</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如</span></span><br><span class="line">fileInfo, err := os.Stat(<span class="string">&quot;./aa.txt&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%T: %v&quot;</span>, fileInfo, fileInfo)  <span class="comment">// *os.fileStat: &amp;&#123;aa.txt 23 ...&#125;</span></span><br><span class="line">fmt.Println(fileInfo.Name())              <span class="comment">// aa.txt</span></span><br><span class="line">fmt.Println(fileInfo.IsDir())             <span class="comment">// false</span></span><br><span class="line">fmt.Println(fileInfo.Size())              <span class="comment">// 23</span></span><br><span class="line">fmt.Println(fileInfo.Mode())              <span class="comment">// -rw-rw-r--</span></span><br><span class="line">fmt.Println(fileInfo.ModTime())           <span class="comment">// 2019-02-15 14:44:39.745 +0800 CST</span></span><br></pre></td></tr></table></figure><h3 id="文件路径相关函数"><a href="#文件路径相关函数" class="headerlink" title="文件路径相关函数"></a>文件路径相关函数</h3><p>路径相关的函数有两个包，<code>path</code> 和 <code>path/filepath</code>,<br>两个包内有一些相同的函数，如<code>IsAbs()</code>、<code>Join()</code>、<code>Dir()</code><br>filepath中的函数兼容各个操作系统，涉及到windows系统路径操作时，应该使用filepath包</p><ul><li><code>filepath.Rel(basepath, targpath string) (string, error)</code>获取相对路径</li><li><code>filepath.Abs(path string) (string, error)</code>获取绝对路径，如果path不是绝对路径，会加入当前工作目录以使之成为绝对路径。</li><li><code>path.Join(elem ...string) string</code>路径拼接</li><li><code>path.IsAbs(path string) bool</code>判断文件是否是绝对路径</li><li><code>path.Dir(path string) string</code>获取目录</li></ul><h2 id="文件的常规操作"><a href="#文件的常规操作" class="headerlink" title="文件的常规操作"></a>文件的常规操作</h2><h3 id="创建目录-如果存在则失败"><a href="#创建目录-如果存在则失败" class="headerlink" title="创建目录 如果存在则失败"></a>创建目录 如果存在则失败</h3><ul><li><p>```go<br>os.Mkdir(name string, perm FileMode) error</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 仅创建一层</span><br><span class="line">  - 相当于`linux`命令`mkdir`</span><br><span class="line"></span><br><span class="line">- ```go</span><br><span class="line">  os.MkdirAll(path string, perm FileMode) error</span><br></pre></td></tr></table></figure><ul><li>创建多层</li><li>相当于<code>linux</code>命令<code>mkdir -p</code></li></ul></li></ul><h3 id="创建文件-如果存在会覆盖"><a href="#创建文件-如果存在会覆盖" class="headerlink" title="创建文件 如果存在会覆盖"></a>创建文件 如果存在会覆盖</h3><ul><li>```go<br>os.Create(name string) (file *File, err error)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 底层调用 `os.OpenFile(name, O_RDWR|O_CREATE|O_TRUNC, 0666)`</span><br><span class="line">  - 采用模式`0666`（任何人都可读写，不可执行）</span><br><span class="line">  - 如果文件存在会清空它</span><br><span class="line"></span><br><span class="line">### 打开文件</span><br><span class="line"></span><br><span class="line">* `os.Open(name string) (file *File, err error)`</span><br><span class="line">  * 底层调用`OpenFile(name, O_RDONLY, 0)`</span><br><span class="line">  * 以只读的方式打开文件</span><br><span class="line"></span><br><span class="line">* `os.OpenFile(name string, flag int, perm FileMode) (file *File, err error)`</span><br><span class="line">  * perm可为0066、0777等</span><br><span class="line">  * flag是os包中定义的常量</span><br><span class="line"></span><br><span class="line">```go</span><br><span class="line">const (</span><br><span class="line">    O_RDONLY int = syscall.O_RDONLY // 只读模式打开文件</span><br><span class="line">    O_WRONLY int = syscall.O_WRONLY // 只写模式打开文件</span><br><span class="line">    O_RDWR   int = syscall.O_RDWR   // 读写模式打开文件</span><br><span class="line">    O_APPEND int = syscall.O_APPEND // 写操作时将数据附加到文件尾部</span><br><span class="line">    O_CREATE int = syscall.O_CREAT  // 如果不存在将创建一个新文件</span><br><span class="line">    O_EXCL   int = syscall.O_EXCL   // 和O_CREATE配合使用，文件必须不存在</span><br><span class="line">    O_SYNC   int = syscall.O_SYNC   // 打开文件用于同步I/O</span><br><span class="line">    O_TRUNC  int = syscall.O_TRUNC  // 如果可能，打开时清空文件</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><h3 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h3><ul><li><p>```<br>file.Close() error</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - *File指针的方法</span><br><span class="line">  - 程序与文件之间的连接断开</span><br><span class="line"></span><br><span class="line">### 删除文件或目录</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  os.Remove(name string) error</span><br></pre></td></tr></table></figure><ul><li>只删除一层</li><li>相当于<code>linux</code>命令<code>rm</code></li></ul></li><li><p>```<br>os.RemoveAll(path string) error</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 删除path指定的文件，或目录及它包含的任何下级对象</span><br><span class="line">  - 相当于`linux`命令`rm -r`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 文件的读写操作</span><br><span class="line"></span><br><span class="line">## 读取文件</span><br><span class="line"></span><br><span class="line">- `os.Open(filename)` --&gt; `*File`</span><br><span class="line"></span><br><span class="line">- ```go</span><br><span class="line">  file.Read([]byte) --&gt; n, err</span><br></pre></td></tr></table></figure><ul><li>单次读取的字节数最大为<code>[]byte</code>的长度</li><li><code>n</code>为实际读取到的字节数</li><li>读取到末尾时<code>err</code>为<code>EOF(end of file)</code></li></ul></li><li><p><code>file.Close()</code>关闭文件</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//step1：打开文件</span></span><br><span class="line">fileName := <span class="string">&quot;.text.txt&quot;</span></span><br><span class="line">file, err := os.Open(fileName)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;打开错误&quot;</span>, err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//step2：读/写</span></span><br><span class="line"><span class="comment">//从file中读取最多len(bs)个字节，存入bs切边中，n是实际读取的数量</span></span><br><span class="line">bs := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1024</span>, <span class="number">1024</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    n, err := file.Read(bs)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> || err == io.EOF &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;读取结束&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="keyword">string</span>(bs[:n]))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//step3：关闭文件</span></span><br><span class="line">file.Close()</span><br></pre></td></tr></table></figure><h3 id="写入文件与读取类似"><a href="#写入文件与读取类似" class="headerlink" title="写入文件与读取类似"></a>写入文件与读取类似</h3><ul><li><p><code>os.Open(filename) --&gt; *File</code></p></li><li><p><code>file.Write([]byte) --&gt; n, err</code></p><ul><li>将<code>[]byte</code>中的数据写入文件</li></ul></li><li><p><code>file.WriteString(string) --&gt; n, err</code></p><ul><li>将string写入文件</li></ul></li><li><p><code>file.Close()</code></p></li></ul><h3 id="文件复制"><a href="#文件复制" class="headerlink" title="文件复制"></a>文件复制</h3><ul><li>```<br>io.Copy(dst Writer, src Reader) (written int64, err error)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- dst和src为实现了接口io.Writer和io.Reader的实例</span><br><span class="line"></span><br></pre></td></tr></table></figure>func copyFile(srcFile, destFile string) (int64, error) {<br>  file1, err := os.Open(srcFile)<br>  if err != nil {<pre><code>  return 0, err</code></pre>  }<br>  file2, err := os.OpenFile(destFile, os.O_WRONLY|os.O_CREATE, os.ModePerm)<br>  if err != nil {<pre><code>  return 0, err</code></pre>  }<br>  defer file1.Close()<br>  defer file2.Close()<br>  return io.Copy(file2, file1)<br>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## ioutil包</span><br><span class="line"></span><br><span class="line">* `ReadFile() --&gt; ([]byte, error)`</span><br><span class="line">  * 读取所有数据，返回字节数组</span><br><span class="line"></span><br><span class="line">* `WriteFile(filename string, data []byte, perm os.FileMode) --&gt; error`</span><br><span class="line">  * 文件不存在则创建文件，存在则清空文件</span><br><span class="line">  * `os.FileMode`可以直接用0666或者0777</span><br><span class="line"></span><br><span class="line">* `ReadDir() --&gt; ([]os.FileInfo, error)`</span><br><span class="line">  * 读取一个目录下的字内容，目录或文件，但是只有一层</span><br><span class="line">  * 返回一个`os.FileInfo`切片</span><br><span class="line"></span><br><span class="line">```go</span><br><span class="line">data, err := ioutil.ReadFile(&quot;aa.txt&quot;)</span><br><span class="line">fmt.Println(string(data))</span><br><span class="line">if err != nil &#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">    return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = ioutil.WriteFile(&quot;bb.txt&quot;, data, 0666)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">    return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fileInfos, err := ioutil.ReadDir(&quot;.&quot;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">    return</span><br><span class="line">&#125;</span><br><span class="line">for i := range fileInfos &#123;</span><br><span class="line">    fmt.Println(i, fileInfos[i].IsDir(), fileInfos[i].Name())</span><br></pre></td></tr></table></figure></li></ul><h2 id="bufio包"><a href="#bufio包" class="headerlink" title="bufio包"></a>bufio包</h2><ul><li><code>bufio</code>包实现了有缓冲的<code>I/O</code></li><li><code>bufio</code>封装了一个<code>Reader</code>݊及<code>Writer</code>结构体，分别实现了<code>io.Reader</code>和<code>io.Writer</code>接口</li><li>通过对对<code>io</code>模块的封装，提供了带有缓冲的<code>io</code>操作，减小了大块数据读写的io开销</li></ul><h3 id="io-Reader和io-Writer"><a href="#io-Reader和io-Writer" class="headerlink" title="io.Reader和io.Writer"></a>io.Reader和io.Writer</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Reader <span class="keyword">interface</span> &#123;</span><br><span class="line">    Read(p []<span class="keyword">byte</span>) (n <span class="keyword">int</span>, err error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Writer <span class="keyword">interface</span> &#123;</span><br><span class="line">    Write(p []<span class="keyword">byte</span>) (n <span class="keyword">int</span>, err error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>os.Open(name string) (*File, error)</code>返回的文件指针就实现了<code>io.Reader</code></p><h3 id="bufio-Reader结构体"><a href="#bufio-Reader结构体" class="headerlink" title="bufio.Reader结构体"></a>bufio.Reader结构体</h3><ul><li><p><code>NewReader(rd io.Reader) *Reader</code></p><ul><li><code>NewReader</code>创建一个具有默认大小缓冲、从r读取的<code>*Reader</code></li></ul></li><li><p><code>Reader.Read(p []byte) (n int, err error)</code></p><ul><li><code>Read</code>读取数据写入p。本方法返回写入p的字节数</li><li>返回值n可能小于<code>len(p)</code>,读取到达结尾时，返回值n将为0而err将为<code>io.EOF</code></li><li>类似<code>File.Read()</code>方法</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">s := strings.NewReader(<span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890&quot;</span>)</span><br><span class="line">br := bufio.NewReader(s)</span><br><span class="line">b := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">n, err := br.Read(b)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%-20s %-2v %v\n&quot;</span>, b[:n], n, err)  <span class="comment">// ABCDEFGHIJKLMNOPQRST 20 &lt;nil&gt;</span></span><br><span class="line"></span><br><span class="line">n, err = br.Read(b)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%-20s %-2v %v\n&quot;</span>, b[:n], n, err)  <span class="comment">// UVWXYZ1234567890 16 &lt;nil&gt;</span></span><br><span class="line"></span><br><span class="line">n, err = br.Read(b)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%-20s %-2v %v\n&quot;</span>, b[:n], n, err)  <span class="comment">// 0 EOF</span></span><br></pre></td></tr></table></figure><ul><li><p>```go<br>Reader.ReadBytes(delim byte) (line []byte, err error)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- `delim`是`delimiter`的缩写意为定位符</span><br><span class="line">- `ReadBytes`读取直到第一次遇到`delim`字节，返回一个包含已读取的数据和`delim`字节的切片</span><br><span class="line"></span><br><span class="line">```go</span><br><span class="line">s := strings.NewReader(&quot;ABCDEFG\n123456\n&quot;)</span><br><span class="line">br := bufio.NewReader(s)</span><br><span class="line"></span><br><span class="line">for &#123;</span><br><span class="line">    sli, err := br.ReadBytes(&#x27;\n&#x27;)</span><br><span class="line">    if err err == io.EOF &#123;</span><br><span class="line">        break</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(sli)</span><br><span class="line">&#125;</span><br><span class="line">// [65 66 67 68 69 70 71 10]</span><br><span class="line">// [49 50 51 52 53 54 10]</span><br></pre></td></tr></table></figure></li><li><p>```go<br>Reader.ReadString(delim byte) (line string, err error)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 返回的是字符串类型</span><br><span class="line"></span><br><span class="line">```go</span><br><span class="line">s := strings.NewReader(&quot;ABCDEFG\n123456\n&quot;)</span><br><span class="line">br := bufio.NewReader(s)</span><br><span class="line">for &#123;</span><br><span class="line">    s, err := br.ReadString(&#x27;\n&#x27;)</span><br><span class="line">    if err err == io.EOF &#123;</span><br><span class="line">        break</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Print(s)</span><br><span class="line">&#125;</span><br><span class="line">// ABCDEFG</span><br><span class="line">// 123456</span><br></pre></td></tr></table></figure></li></ul><h3 id="bufio-Writer结构体"><a href="#bufio-Writer结构体" class="headerlink" title="bufio.Writer结构体"></a>bufio.Writer结构体</h3><ul><li><p><code>NewWriter(w io.Writer) *Writer</code></p><ul><li><code>NewWriter</code>创建一个具有默认大小缓冲、写入w的<code>*Writer</code></li></ul></li><li><p><code>Writer.Write(p []byte) (nn int, err error)</code></p><ul><li><code>Write</code>将p的内容写入缓冲。返回写入的字节数。如果返回值<code>nn &lt; len(p)</code>，还会返回一个错误说明原因</li><li>类似<code>File.Write()</code>方法</li></ul></li><li><p><code>Writer.WriteString(s string) (int, error)</code></p><ul><li>写入一个字符串，返回写入的字节数</li></ul></li><li><p><code>Writer.Flush() error</code></p><ul><li>Flush方法将缓冲中的数据输出</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">file1, _ := os.Open(<span class="string">&quot;aa.txt&quot;</span>)</span><br><span class="line"><span class="keyword">defer</span> file1.Close()</span><br><span class="line">reader := bufio.NewReader(file1)</span><br><span class="line">file2, _ := os.Create(<span class="string">&quot;cc.txt&quot;</span>)</span><br><span class="line"><span class="keyword">defer</span> file2.Close()</span><br><span class="line">writer := bufio.NewWriter(file2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    bs, err := reader.ReadBytes(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;读取完毕&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    writer.Write(bs)</span><br><span class="line">    writer.Flush()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="bufio-Scanner结构体"><a href="#bufio-Scanner结构体" class="headerlink" title="bufio.Scanner结构体"></a>bufio.Scanner结构体</h3><ul><li><p><code>NewScanner(r io.Reader) *Scanner</code></p><ul><li>创建并返回一个从r读取数据的Scanner，默认的分割函数是ScanLines</li><li>通过<code>Scanner.Split(split SplitFunc)</code>方法，可以为Scanner指定splitFunc</li><li>Scanner可以通过plitFunc将r中的数据拆分为多个token，然后通过Scanner.Scan()依次读取</li></ul></li><li><p>bufio中提供的默认<code>splitFunc</code>：</p><ul><li><code>ScanBytes</code>，按照byte进程拆分</li><li><code>ScanRunes</code>，按照行(“\n”)进程拆分</li><li><code>ScanWords</code>，按照utf-8字符进行拆分</li><li><code>ScanLines</code>，按照单词(“ “)进程拆分</li></ul></li><li><p>常用方法</p><ul><li><code>Split(split SplitFunc)</code></li><li><code>Scan() bool</code></li><li><code>Text() string</code></li><li><code>Bytes() []byte</code></li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">scanner := bufio.NewScanner(os.Stdin)</span><br><span class="line">scanner.Split(bufio.ScanLines)</span><br><span class="line"><span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">    <span class="keyword">if</span> scanner.Text() == <span class="string">&quot;q&quot;</span> &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(scanner.Text()) <span class="comment">// Println will add back the final &#x27;\n&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := scanner.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Fprintln(os.Stderr, <span class="string">&quot;reading standard input:&quot;</span>, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="https://www.jianshu.com/p/abc396787a32">https://www.jianshu.com/p/abc396787a32</a></p><p><a href="https://blog.csdn.net/sinat_39786086/article/details/87726361">https://blog.csdn.net/sinat_39786086/article/details/87726361</a></p>]]></content>
      
      
      <categories>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go并发基础实践</title>
      <link href="/2021/07/23/Go%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80%E5%AE%9E%E8%B7%B5/"/>
      <url>/2021/07/23/Go%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="GO并发基础实践"><a href="#GO并发基础实践" class="headerlink" title="GO并发基础实践"></a>GO并发基础实践</h1><blockquote><p>此文只记录GO并发的理论，及对IO的并发实践。同步与锁参见Go同步一文。</p></blockquote><h3 id="基础理论"><a href="#基础理论" class="headerlink" title="基础理论"></a>基础理论</h3><p><strong>CSP</strong>：通信顺序进程，是 Go 语言采用的并发同步模型，是一种形式语言，用来描述并发系统间进行交互的模式。</p><p><strong>Actor 模型</strong>：参与者模型采用了 <em>everything is an actor</em> 哲学。所有参与者都是独立的运行单元，参与者可以修改自己的私有状态，参与者之间只能通过发送消息通信（避免任何锁的使用）。</p><h3 id="goroutine"><a href="#goroutine" class="headerlink" title="goroutine"></a>goroutine</h3><p>一个 goroutine 是一个轻量级的可独立工作的单元。通过 go 语句启动。goroutine 有自己独立的调用栈，会按需伸缩，可以并发调度大量 goroutine，每个 goroutine 自身大约占用 4K 空间。可以类比为非常轻量级的线程，例如协程。一个程序可能只有一个线程，但是会有大量 goroutine 被调度到这个线程上。</p><p>操作系统在物理处理器上调度线程来运行，Go 语言为每个物理处理器分配一个逻辑处理器，Go 语言的运行时会在逻辑处理器上调度 goroutine 来运行。</p><p><img alt="goroutine" data-src="https://iswade.github.io/articles/res/goroutine.svg" class="lazyload"></p><p>阻塞系统调用（如打开文件），goroutine 会从逻辑处理器上分离，线程继续阻塞，等待调用返回。调度器创建一个新的线程，继续绑定到该逻辑处理器上，然后调度器从本地队列中选择另一个 goroutine 来运行。一旦被阻塞的系统调用执行完成并返回，对应的 goroutine 会放回本地本地运行队列，之前的线程被保存好，以便之后可以继续使用。</p><p>如果一个 goroutine 需要做网络 I/O 调用，goroutine 会和逻辑处理器分离，并移到集成了网络轮询器的运行时，该轮询器指示某个网络读或者写操作已经就绪，对应的 goroutine 就会重新分配到逻辑处理器上来完成操作。 goroutine 可以被停止并重新调度。</p><p>修改逻辑处理器个数，可以通过下面的相关函数设置。但是使用多个逻辑处理器不一定有更好的性能，在修改任何语言运行时配置参数的时候， 都需要配合基准测试来评估程序的运行效果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">runtime.NumCPU()       // 获得 CPU 个数</span><br><span class="line">runtime.GOMAXPROCS(1)  // 设置最大可用的 CPU 个数</span><br><span class="line">runtime.NumGoroutine() // 获得当前 goroutine 的个数</span><br></pre></td></tr></table></figure><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><ul><li><p>使用go命令开启一条新的运行时<strong>线程</strong>， 即 goroutine。 同一个程序中的所有 goroutine 共享同一个地址空间。当该函数执行结束，Goroutine也随之隐式退出。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">say</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">                time.Sleep(<span class="number">100</span> * time.Millisecond)</span><br><span class="line">                fmt.Println(s)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">go</span> say(<span class="string">&quot;world&quot;</span>)</span><br><span class="line">        say(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Channel</strong>可用于两个 goroutine 之间通过传递一个指定类型的值来同步运行和通讯。操作符 <code>&lt;-</code> 用于指定通道的方向，发送或接收。如果未指定方向，则为双向通道。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ch := make(chan int)</span><br><span class="line">ch &lt;- v    // 把 v 发送到通道 ch</span><br><span class="line">v := &lt;-ch  // 从 ch 接收数据</span><br><span class="line">           // 并把值赋给 v</span><br><span class="line">           </span><br><span class="line">需要注意的是：chan 后面可以跟任意类型表示一个type类型的通道。</span><br></pre></td></tr></table></figure><p>如，使用channel返回线程运行的结果。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">go</span> say(<span class="number">1</span>,ch)</span><br><span class="line"><span class="keyword">go</span> say(<span class="number">2</span>,ch)</span><br><span class="line">a,b := &lt;- ch,&lt;-ch</span><br><span class="line"><span class="built_in">println</span>(a,b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">say</span><span class="params">(n <span class="keyword">int</span>, ch <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">ch &lt;- n*<span class="number">5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Channel可以设置缓冲区</strong>，通过 make 的第二个参数指定缓冲区大小：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>需要注意的是：不带缓冲的channel是同步的channel，如果通道不带缓冲，发送方会阻塞直到接收方从通道中接收了值！导致陷入死锁。<code>fatal error: all goroutines are asleep - deadlock!</code></p><p>而带缓冲的channel运行我们发送的数据可以放在缓冲区里面，实现异步操作。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 这里我们定义了一个可以存储整数类型的带缓冲通道</span></span><br><span class="line">        <span class="comment">// 缓冲区大小为2</span></span><br><span class="line">        ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 因为 ch 是带缓冲的通道，我们可以同时发送两个数据</span></span><br><span class="line">        <span class="comment">// 而不用立刻需要去同步读取数据</span></span><br><span class="line">        ch &lt;- <span class="number">1</span></span><br><span class="line">        ch &lt;- <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取这两个数据</span></span><br><span class="line">        fmt.Println(&lt;-ch)</span><br><span class="line">        fmt.Println(&lt;-ch)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Channel也可以配合range实现遍历</strong>，类似于与数组或切片，也可以关闭。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v, ok := &lt;-ch</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">(n <span class="keyword">int</span>, c <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">        x, y := <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">                c &lt;- x</span><br><span class="line">                x, y = y, x+y</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">close</span>(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line">        <span class="keyword">go</span> fibonacci(<span class="built_in">cap</span>(c), c)</span><br><span class="line">        <span class="comment">// range 函数遍历每个从通道接收到的数据，因为 c 在发送完 10 个</span></span><br><span class="line">        <span class="comment">// 数据之后就关闭了通道，所以这里我们 range 函数在接收到 10 个数据</span></span><br><span class="line">        <span class="comment">// 之后就结束了。如果上面的 c 通道不关闭，那么 range 函数就不</span></span><br><span class="line">        <span class="comment">// 会结束，从而在接收第 11 个数据的时候就阻塞了。</span></span><br><span class="line">        <span class="keyword">for</span> i := <span class="keyword">range</span> c &#123;</span><br><span class="line">                fmt.Println(i)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>值得注意的是，除了异步传输数据：带缓冲区的channel可以像信号量一样使用，用来完成诸如吞吐率限制等功能。该channel的缓冲区容量决定了并发调用<code>process</code>函数的上限，因此在channel初始化时，需要传入相应的容量参数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sem = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, MaxOutstanding)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(r *Request)</span></span> &#123;</span><br><span class="line">    &lt;-sem          <span class="comment">// 等待分配信号量</span></span><br><span class="line">    process(r)     <span class="comment">// 执行task</span></span><br><span class="line">    sem &lt;- <span class="number">1</span>       <span class="comment">// Done; 返回信号量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; MaxOutstanding; i++ &#123;</span><br><span class="line">        sem &lt;- <span class="number">1</span> <span class="comment">// 初始化分配信号量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Serve</span><span class="params">(queue <span class="keyword">chan</span> *Request)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        req := &lt;-queue</span><br><span class="line">        <span class="keyword">go</span> handle(req)  <span class="comment">// Don&#x27;t wait for handle to finish.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>闭包</strong> – 将“函数文本”（function literals）嵌入到一个Goroutine创建之际。保证了在这类函数中被引用的变量在函数结束之前不会被释放。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Announce</span><span class="params">(message <span class="keyword">string</span>, delay time.Duration)</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(delay)</span><br><span class="line">        fmt.Println(message)</span><br><span class="line">    &#125;()  <span class="comment">// Note the parentheses - must call the function.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将上述的信号量模型，改用闭包实现</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sem = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, MaxOutstanding)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; MaxOutstanding; i++ &#123;</span><br><span class="line">        sem &lt;- <span class="number">1</span> <span class="comment">// 初始化分配信号量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Serve</span><span class="params">(queue <span class="keyword">chan</span> *Request)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> req := <span class="keyword">range</span> queue &#123;</span><br><span class="line">        &lt;-sem</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            process(req) <span class="comment">// Buggy; see explanation below.</span></span><br><span class="line">            sem &lt;- <span class="number">1</span></span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，此处的<code>req</code>变量会在所有Goroutine间共享。这样不好，推荐将<code>req</code>设置为私有。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Serve</span><span class="params">(queue <span class="keyword">chan</span> *Request)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> req := <span class="keyword">range</span> queue &#123;</span><br><span class="line">        &lt;-sem</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(req *Request)</span></span> &#123;</span><br><span class="line">            process(req)</span><br><span class="line">            sem &lt;- <span class="number">1</span></span><br><span class="line">        &#125;(req)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>select</strong> 是 Go 中的一个控制结构，类似于用于通信的 switch 语句。每个 case 必须是一个通信操作，要么是发送要么是接收。</p><p>select 随机执行一个可运行的 case。如果没有 case 可运行，它将<strong>阻塞</strong>，直到有 case 可运行。一个默认的子句应该总是可运行的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> c1, c2, c3 <span class="keyword">chan</span> <span class="keyword">int</span></span><br><span class="line">   <span class="keyword">var</span> i1, i2 <span class="keyword">int</span></span><br><span class="line">   <span class="keyword">select</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> i1 = &lt;-c1:</span><br><span class="line">         fmt.Printf(<span class="string">&quot;received &quot;</span>, i1, <span class="string">&quot; from c1\n&quot;</span>)</span><br><span class="line">      <span class="keyword">case</span> c2 &lt;- i2:</span><br><span class="line">         fmt.Printf(<span class="string">&quot;sent &quot;</span>, i2, <span class="string">&quot; to c2\n&quot;</span>)</span><br><span class="line">      <span class="keyword">case</span> i3, ok := (&lt;-c3):  <span class="comment">// same as: i3, ok := &lt;-c3</span></span><br><span class="line">         <span class="keyword">if</span> ok &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;received &quot;</span>, i3, <span class="string">&quot; from c3\n&quot;</span>)</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;c3 is closed\n&quot;</span>)</span><br><span class="line">         &#125;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">         fmt.Printf(<span class="string">&quot;no communication\n&quot;</span>)</span><br><span class="line">   &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>除了并发模型外，channel和select还可以结合实现一些<strong>非并发</strong>的想法，如：一个客户端从某些源接收数据，为了避免频繁的内存分配，实现类似<strong>连接池</strong>的功能。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> freeList = <span class="built_in">make</span>(<span class="keyword">chan</span> *Buffer, <span class="number">100</span>)</span><br><span class="line"><span class="keyword">var</span> serverChan = <span class="built_in">make</span>(<span class="keyword">chan</span> *Buffer)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">client</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> b *Buffer</span><br><span class="line">        <span class="comment">// Grab a buffer if available; allocate if not.</span></span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> b = &lt;-freeList:</span><br><span class="line">            <span class="comment">// Got one; nothing more to do.</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="comment">// None free, so allocate a new one.</span></span><br><span class="line">            b = <span class="built_in">new</span>(Buffer)</span><br><span class="line">        &#125;</span><br><span class="line">        load(b)              <span class="comment">// Read next message from the net.</span></span><br><span class="line">        serverChan &lt;- b      <span class="comment">// Send to server.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务器端循环从客户端接收并处理每个消息，然后将Buffer对象返回到空闲链表中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">func server() &#123;</span><br><span class="line">    for &#123;</span><br><span class="line">        b := &lt;-serverChan    // Wait for work.</span><br><span class="line">        process(b)</span><br><span class="line">        // Reuse buffer if there&#x27;s room.</span><br><span class="line">        select &#123;</span><br><span class="line">        case freeList &lt;- b:</span><br><span class="line">            // Buffer on free list; nothing more to do.</span><br><span class="line">        default:</span><br><span class="line">            // Free list full, just carry on.</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端会尝试从空闲链表<code>freeList</code>中获取Buffer对象；如果没有可用对象，则分配一个新的。服务器端会将用完的Buffer对象 b 加入到空闲链表<code>freeList</code>中，如果链表已满，则将<code>b</code>丢弃，垃圾收集器会在未来某个时刻自动回收对应的内存单元。</p></li><li><p><code>WaitGroup</code> 其实是属于Go并发锁的内容，主进程wait子进程执行完成后再执行！</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// wg.Add(1)  注意将add放在go协程内，容易造成add未执行，而父进程wait已经成功执行！</span></span><br><span class="line">fmt.Println(<span class="string">&quot;halo world start&quot;</span>)</span><br><span class="line">time.Sleep(time.Second * <span class="number">5</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;halo world end&quot;</span>)</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="并发获取API内容"><a href="#并发获取API内容" class="headerlink" title="并发获取API内容"></a>并发获取API内容</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">func TestApi(t *testing.T) &#123;</span><br><span class="line">var wg sync.WaitGroup</span><br><span class="line">for i := 0; i &lt;10;i++&#123;</span><br><span class="line">wg.Add(1)</span><br><span class="line">go func(i int) &#123;</span><br><span class="line">defer wg.Done()</span><br><span class="line">res,_ := http.Get(&quot;https://api.uomg.com/api/rand.qinghua&quot;)</span><br><span class="line">body,_ := ioutil.ReadAll(res.Body)</span><br><span class="line">println(string(body))</span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="https://www.runoob.com/go/go-concurrent.html">菜鸟教程</a></p><p><a href="https://www.kancloud.cn/kancloud/effective/72213">Effective go</a></p>]]></content>
      
      
      <categories>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIT6.824-MapReduce实验总结</title>
      <link href="/2021/07/21/MIT6-824-MapReduce%E5%AE%9E%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
      <url>/2021/07/21/MIT6-824-MapReduce%E5%AE%9E%E9%AA%8C%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="MIT-6-824-Lab-1-MapReduce-试验总结"><a href="#MIT-6-824-Lab-1-MapReduce-试验总结" class="headerlink" title="MIT 6.824 Lab 1: MapReduce 试验总结"></a>MIT 6.824 Lab 1: MapReduce 试验总结</h1><blockquote><ol><li><p>需要注意的是，在试验前，推荐先行阅读MapReduce论文，及MIT6.824第一章节关于MapReduce的介绍。</p></li><li><p>该实验不推荐在Win上实现！</p></li><li><p>本实验并非完整的MapReduce的实现，而是给出Map和Reduce函数(WordCount) 以及RPC等相关操作，要求模仿给定的Example的样子，实现master和worker互相通讯完成单词统计任务。</p></li><li><p>推荐先行了解GRPC调用过程和Go 动态库编译。</p></li></ol></blockquote><h2 id="对官方案例的分析"><a href="#对官方案例的分析" class="headerlink" title="对官方案例的分析"></a>对官方案例的分析</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone git://g.csail.mit.edu/6.824-golabs-2020 6.824</span><br><span class="line">cd 6.824</span><br><span class="line">cd src/main</span><br><span class="line">go build -buildmode=plugin ../mrapps/wc.go</span><br><span class="line">go run mrsequential.go wc.so pg*.txt</span><br></pre></td></tr></table></figure><ol><li>首先可以看到的是，官方以及给定了很朴素的map和reduce函数，即<code>../mrapps/wc.go</code>文件</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 每个输入文件都会调用一次 map 函数。 第一个参数是输入文件的名称，第二个参数是文件的完整内容。 您应该忽略输入文件名，只查看内容参数。 返回值是一段键/值对</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Map</span><span class="params">(filename <span class="keyword">string</span>, contents <span class="keyword">string</span>)</span> []<span class="title">mr</span>.<span class="title">KeyValue</span></span> &#123;</span><br><span class="line"><span class="comment">// function to detect word separators.</span></span><br><span class="line">ff := <span class="function"><span class="keyword">func</span><span class="params">(r <span class="keyword">rune</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> !unicode.IsLetter(r) &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// split contents into an array of words.</span></span><br><span class="line">words := strings.FieldsFunc(contents, ff)</span><br><span class="line"></span><br><span class="line">kva := []mr.KeyValue&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> _, w := <span class="keyword">range</span> words &#123;</span><br><span class="line">kv := mr.KeyValue&#123;w, <span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line">kva = <span class="built_in">append</span>(kva, kv)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> kva</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 为 map 任务生成的每个键调用一次 reduce 函数，其中包含任何 map 任务为该键创建的所有值的列表</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Reduce</span><span class="params">(key <span class="keyword">string</span>, values []<span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="comment">// return the number of occurrences of this word.</span></span><br><span class="line"><span class="keyword">return</span> strconv.Itoa(<span class="built_in">len</span>(values))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>主函数<code>mrsequential.go</code>，只是简单的模拟运行了Map和Reduce函数（读取文件，map、写入中间文件、reduce读取中间文件、调用reduce函数、写入结果），其中并不涉及master和worker的通讯和map、reduce之间shuffle的过程，这是我们后面试验的重点！</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// simple sequential MapReduce.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// go run mrsequential.go wc.so pg*.txt</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;../mr&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;plugin&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;sort&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for sorting by key.</span></span><br><span class="line"><span class="keyword">type</span> ByKey []mr.KeyValue</span><br><span class="line"></span><br><span class="line"><span class="comment">// KeyValue数组的排序策略</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a ByKey)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span>           &#123; <span class="keyword">return</span> <span class="built_in">len</span>(a) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a ByKey)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span>      &#123; a[i], a[j] = a[j], a[i] &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a ByKey)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> a[i].Key &lt; a[j].Key &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(os.Args) &lt; <span class="number">3</span> &#123;</span><br><span class="line">fmt.Fprintf(os.Stderr, <span class="string">&quot;Usage: mrsequential xxx.so inputfiles...\n&quot;</span>)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 动态加载map reduce函数</span></span><br><span class="line">mapf, reducef := loadPlugin(os.Args[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// read each input file,</span></span><br><span class="line"><span class="comment">// pass it to Map,</span></span><br><span class="line"><span class="comment">// accumulate the intermediate Map output.read each input file,</span></span><br><span class="line"><span class="comment">// pass it to Map,</span></span><br><span class="line"><span class="comment">// accumulate the intermediate Map output.</span></span><br><span class="line">    <span class="comment">// 读取每一个文件和内容，生成中间文件</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 此处由于是示范，直接将所有的kv对放到一个数组中不做shuffle操作。</span></span><br><span class="line">intermediate := []mr.KeyValue&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> _, filename := <span class="keyword">range</span> os.Args[<span class="number">2</span>:] &#123;</span><br><span class="line">file, err := os.Open(filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;cannot open %v&quot;</span>, filename)</span><br><span class="line">&#125;</span><br><span class="line">content, err := ioutil.ReadAll(file)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;cannot read %v&quot;</span>, filename)</span><br><span class="line">&#125;</span><br><span class="line">file.Close()</span><br><span class="line">        <span class="comment">// 调用map函数 生成 KeyValue数组</span></span><br><span class="line">kva := mapf(filename, <span class="keyword">string</span>(content))</span><br><span class="line">intermediate = <span class="built_in">append</span>(intermediate, kva...)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// a big difference from real MapReduce is that all the</span></span><br><span class="line"><span class="comment">// intermediate data is in one place, intermediate[],</span></span><br><span class="line"><span class="comment">// rather than being partitioned into NxM buckets.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取完kv直接排序</span></span><br><span class="line">sort.Sort(ByKey(intermediate))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全部reduce后输出到此文件中</span></span><br><span class="line">oname := <span class="string">&quot;mr-out-0&quot;</span></span><br><span class="line">ofile, _ := os.Create(oname)</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// call Reduce on each distinct key in intermediate[],</span></span><br><span class="line"><span class="comment">// and print the result to mr-out-0.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i &lt; <span class="built_in">len</span>(intermediate) &#123;</span><br><span class="line">j := i + <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> j &lt; <span class="built_in">len</span>(intermediate) &amp;&amp; intermediate[j].Key == intermediate[i].Key &#123;</span><br><span class="line">j++</span><br><span class="line">&#125;</span><br><span class="line">values := []<span class="keyword">string</span>&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> k := i; k &lt; j; k++ &#123;</span><br><span class="line">values = <span class="built_in">append</span>(values, intermediate[k].Value)</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 将k,[v...]给reduce函数汇总</span></span><br><span class="line">output := reducef(intermediate[i].Key, values)</span><br><span class="line"></span><br><span class="line"><span class="comment">// this is the correct format for each line of Reduce output.</span></span><br><span class="line">fmt.Fprintf(ofile, <span class="string">&quot;%v %v\n&quot;</span>, intermediate[i].Key, output)</span><br><span class="line"></span><br><span class="line">i = j</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ofile.Close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关于动态调用Map Reduce的过程</span></span><br><span class="line"><span class="comment">// load the application Map and Reduce functions</span></span><br><span class="line"><span class="comment">// from a plugin file, e.g. ../mrapps/wc.so</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadPlugin</span><span class="params">(filename <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">func</span>(<span class="keyword">string</span>, <span class="keyword">string</span>)</span> []<span class="title">mr</span>.<span class="title">KeyValue</span>, <span class="title">func</span><span class="params">(<span class="keyword">string</span>, []<span class="keyword">string</span>)</span> <span class="title">string</span>)</span> &#123;</span><br><span class="line">p, err := plugin.Open(filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;cannot load plugin %v&quot;</span>, filename)</span><br><span class="line">&#125;</span><br><span class="line">xmapf, err := p.Lookup(<span class="string">&quot;Map&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;cannot find Map in %v&quot;</span>, filename)</span><br><span class="line">&#125;</span><br><span class="line">mapf := xmapf.(<span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">string</span>, <span class="keyword">string</span>)</span> []<span class="title">mr</span>.<span class="title">KeyValue</span>)</span></span><br><span class="line">xreducef, err := p.Lookup(<span class="string">&quot;Reduce&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;cannot find Reduce in %v&quot;</span>, filename)</span><br><span class="line">&#125;</span><br><span class="line">reducef := xreducef.(<span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">string</span>, []<span class="keyword">string</span>)</span> <span class="title">string</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> mapf, reducef</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ok，分析完官方案例的流程，我们来设更加完整的MapReduce。</p><h2 id="对MapReduce设计的思考"><a href="#对MapReduce设计的思考" class="headerlink" title="对MapReduce设计的思考"></a>对MapReduce设计的思考</h2><h4 id="官方给定的条件"><a href="#官方给定的条件" class="headerlink" title="官方给定的条件"></a>官方给定的条件</h4><ol><li><p>不使用刚才的<code>mrsequential.go</code>直接完成整个过程，而是分成master和worker分开负责。</p><ol><li><p>其中<code>mrmaster.go</code>负责给输入并启动master, 如：<code>go run mrmaster.go pg-*.txt</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(os.Args) &lt; <span class="number">2</span> &#123;</span><br><span class="line">fmt.Fprintf(os.Stderr, <span class="string">&quot;Usage: mrmaster inputfiles...\n&quot;</span>)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 启动master节点，监听网络，分发任务</span></span><br><span class="line">m := mr.MakeMaster(os.Args[<span class="number">1</span>:], <span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> m.Done() == <span class="literal">false</span> &#123;</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>mrworker.go</code>负责启动worker节点，申请执行map和reduce任务，并回传状态。如： <code>go run mrworker.go wc.so</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(os.Args) != <span class="number">2</span> &#123;</span><br><span class="line">fmt.Fprintf(os.Stderr, <span class="string">&quot;Usage: mrworker xxx.so\n&quot;</span>)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mapf, reducef := loadPlugin(os.Args[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 核心在这里，调用mr.Worker函数</span></span><br><span class="line">mr.Worker(mapf, reducef)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载Map 和 Reduce函数</span></span><br><span class="line"><span class="comment">// load the application Map and Reduce functions</span></span><br><span class="line"><span class="comment">// from a plugin file, e.g. ../mrapps/wc.so</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadPlugin</span><span class="params">(filename <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">func</span>(<span class="keyword">string</span>, <span class="keyword">string</span>)</span> []<span class="title">mr</span>.<span class="title">KeyValue</span>, <span class="title">func</span><span class="params">(<span class="keyword">string</span>, []<span class="keyword">string</span>)</span> <span class="title">string</span>)</span> &#123;</span><br><span class="line">p, err := plugin.Open(filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;cannot load plugin %v&quot;</span>, filename)</span><br><span class="line">&#125;</span><br><span class="line">xmapf, err := p.Lookup(<span class="string">&quot;Map&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;cannot find Map in %v&quot;</span>, filename)</span><br><span class="line">&#125;</span><br><span class="line">mapf := xmapf.(<span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">string</span>, <span class="keyword">string</span>)</span> []<span class="title">mr</span>.<span class="title">KeyValue</span>)</span></span><br><span class="line">xreducef, err := p.Lookup(<span class="string">&quot;Reduce&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;cannot find Reduce in %v&quot;</span>, filename)</span><br><span class="line">&#125;</span><br><span class="line">reducef := xreducef.(<span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">string</span>, []<span class="keyword">string</span>)</span> <span class="title">string</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> mapf, reducef</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>其中RPC网络调用部分，已经被实现如master的<code>server</code>和worker的<code>call</code>方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// start a thread that listens for RPCs from worker.go</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Master)</span> <span class="title">server</span><span class="params">()</span></span> &#123;</span><br><span class="line">rpc.Register(m)</span><br><span class="line">rpc.HandleHTTP()</span><br><span class="line"><span class="comment">//l, e := net.Listen(&quot;tcp&quot;, &quot;:1234&quot;)</span></span><br><span class="line">sockname := masterSock()</span><br><span class="line">os.Remove(sockname)</span><br><span class="line">l, e := net.Listen(<span class="string">&quot;unix&quot;</span>, sockname)</span><br><span class="line"><span class="keyword">if</span> e != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;listen error:&quot;</span>, e)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> http.Serve(l, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// send an RPC request to the master, wait for the response.</span></span><br><span class="line"><span class="comment">// usually returns true.</span></span><br><span class="line"><span class="comment">// returns false if something goes wrong.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">call</span><span class="params">(rpcname <span class="keyword">string</span>, args <span class="keyword">interface</span>&#123;&#125;, reply <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="comment">// c, err := rpc.DialHTTP(&quot;tcp&quot;, &quot;127.0.0.1&quot;+&quot;:1234&quot;)</span></span><br><span class="line">sockname := masterSock()</span><br><span class="line">c, err := rpc.DialHTTP(<span class="string">&quot;unix&quot;</span>, sockname)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;dialing:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> c.Close()</span><br><span class="line"></span><br><span class="line">err = c.Call(rpcname, args, reply)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="我们需要实现那些功能，在刚才的基础上？"><a href="#我们需要实现那些功能，在刚才的基础上？" class="headerlink" title="我们需要实现那些功能，在刚才的基础上？"></a>我们需要实现那些功能，在刚才的基础上？</h4><ol><li>将map和reduce交给worker节点完成，master只负责调用和记录。</li><li>由于有N个worker，所以我们必须考虑中间文件存储和分发的过程，即shuffle的过程。由于没有GFS文件系统，只能在本地文件系统实现，所以我们将每一个map都按map任务id % N  + 分桶id进行存储，即一个map会产生N个中间文件。reduce时，每个reduce将所有以分桶id == reduce id的进行汇总。</li><li>master和worker之间通过rpc通讯。</li></ol><h4 id="需要我们实现的地方"><a href="#需要我们实现的地方" class="headerlink" title="需要我们实现的地方"></a>需要我们实现的地方</h4><ol><li><p>master 定义RPC通讯 的状态</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Master <span class="keyword">struct</span> &#123;</span><br><span class="line">   <span class="comment">// Your definitions here.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>master 定义worker申请任务的处理</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Master)</span> <span class="title">Work</span><span class="params">(args *WorkArgs,reply *WorkReply)</span> <span class="title">error</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>master 定义worker完成任务的处理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func (m *Master) Commit(args *CommitArgs, reply *CommitReply) error &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>master启动时，初始状态的定义</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MakeMaster</span><span class="params">(files []<span class="keyword">string</span>, nReduce <span class="keyword">int</span>)</span> *<span class="title">Master</span></span> &#123;</span><br><span class="line">m := Master&#123;&#125;</span><br><span class="line">m.server()</span><br><span class="line"><span class="keyword">return</span> &amp;m</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>woker申请执行MapReduce任务</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Worker</span><span class="params">(mapf <span class="keyword">func</span>(<span class="keyword">string</span>, <span class="keyword">string</span>)</span> []<span class="title">KeyValue</span>,</span></span><br><span class="line">reducef <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">string</span>, []<span class="keyword">string</span>)</span> <span class="title">string</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>rpc 定义传输的参数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> WorkArgs <span class="keyword">struct</span> &#123;</span><br><span class="line">WorkerId <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> WorkReply <span class="keyword">struct</span> &#123;</span><br><span class="line">IsFinished <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">TaskId    <span class="keyword">int</span></span><br><span class="line">Filename  <span class="keyword">string</span></span><br><span class="line">MapReduce <span class="keyword">string</span></span><br><span class="line">BucketNumber   <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CommitArgs <span class="keyword">struct</span> &#123;</span><br><span class="line">WorkerId <span class="keyword">string</span></span><br><span class="line">TaskId <span class="keyword">int</span></span><br><span class="line">MapReduce <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CommitReply <span class="keyword">struct</span> &#123;</span><br><span class="line">IsOK <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><ul><li>rpc.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mr</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// RPC definitions.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// remember to capitalize all names.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;strconv&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// example to show how to declare the arguments</span></span><br><span class="line"><span class="comment">// and reply for an RPC.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ExampleArgs <span class="keyword">struct</span> &#123;</span><br><span class="line">X <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ExampleReply <span class="keyword">struct</span> &#123;</span><br><span class="line">Y <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add your RPC definitions here.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// work作业的参数</span></span><br><span class="line"><span class="keyword">type</span> WorkArgs <span class="keyword">struct</span> &#123;</span><br><span class="line">WorkerId <span class="keyword">string</span><span class="comment">// worker随机生成作业id，用作唯一标识</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// work作业的回复</span></span><br><span class="line"><span class="keyword">type</span> WorkReply <span class="keyword">struct</span> &#123;</span><br><span class="line">IsFinished <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">TaskId    <span class="keyword">int</span><span class="comment">//master分配的任务id，第几个worker</span></span><br><span class="line">Filename  <span class="keyword">string</span><span class="comment">//需要处理的文件名</span></span><br><span class="line">MapReduce <span class="keyword">string</span><span class="comment">//该任务是map还是reduce任务，直接用string表示</span></span><br><span class="line">BucketNumber   <span class="keyword">int</span><span class="comment">//中间文件的分桶数，设置等于worker的个数,n个worker n个map，n个中间文件，n个reduce程序</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 完成作业的参数</span></span><br><span class="line"><span class="keyword">type</span> CommitArgs <span class="keyword">struct</span> &#123;</span><br><span class="line">WorkerId <span class="keyword">string</span></span><br><span class="line">TaskId <span class="keyword">int</span></span><br><span class="line">MapReduce <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 完成作业的回复</span></span><br><span class="line"><span class="keyword">type</span> CommitReply <span class="keyword">struct</span> &#123;</span><br><span class="line">IsOK <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cook up a unique-ish UNIX-domain socket name</span></span><br><span class="line"><span class="comment">// in /var/tmp, for the master.</span></span><br><span class="line"><span class="comment">// Can&#x27;t use the current directory since</span></span><br><span class="line"><span class="comment">// Athena AFS doesn&#x27;t support UNIX-domain sockets.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">masterSock</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">s := <span class="string">&quot;/var/tmp/824-mr-&quot;</span></span><br><span class="line">s += strconv.Itoa(os.Getuid())</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>master.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mr</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;net/rpc&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// work运行状态，空闲、工作、完成</span></span><br><span class="line"><span class="keyword">const</span>(</span><br><span class="line">TaskIdle = <span class="literal">iota</span></span><br><span class="line">TaskWorking</span><br><span class="line">TaskCommit</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Master <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Your definitions here.</span></span><br><span class="line">    <span class="comment">// 文件列表</span></span><br><span class="line">files []<span class="keyword">string</span></span><br><span class="line">    <span class="comment">// worker数量</span></span><br><span class="line">nReduce <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// map和reduce作业的完成情况</span></span><br><span class="line">mapTasks []<span class="keyword">int</span></span><br><span class="line">reduceTasks []<span class="keyword">int</span></span><br><span class="line"><span class="comment">// map作业完成情况</span></span><br><span class="line">mapCount <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// worker完成情况</span></span><br><span class="line">workerCommit <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span></span><br><span class="line">allCommited <span class="keyword">bool</span></span><br><span class="line"><span class="comment">// worker超时时间</span></span><br><span class="line">timeout time.Duration</span><br><span class="line"><span class="comment">// 资源锁</span></span><br><span class="line">mu sync.RWMutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Your code here -- RPC handlers for the worker to call.</span></span><br><span class="line"><span class="comment">// 申请任务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Master)</span> <span class="title">Work</span><span class="params">(args *WorkArgs,reply *WorkReply)</span> <span class="title">error</span></span>&#123;</span><br><span class="line">m.mu.Lock()</span><br><span class="line"><span class="keyword">defer</span> m.mu.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分配 map 工作</span></span><br><span class="line"><span class="keyword">for</span> k,v := <span class="keyword">range</span> m.files&#123;</span><br><span class="line"><span class="keyword">if</span> m.mapTasks[k] != TaskIdle&#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// RPC通过这些参数的改变传递消息</span></span><br><span class="line">reply.TaskId = k</span><br><span class="line">reply.Filename = v</span><br><span class="line">reply.MapReduce = <span class="string">&quot;map&quot;</span></span><br><span class="line">reply.BucketNumber = m.nReduce</span><br><span class="line">reply.IsFinished = <span class="literal">false</span></span><br><span class="line">m.workerCommit[args.WorkerId] = TaskWorking</span><br><span class="line">m.mapTasks[k] = TaskWorking</span><br><span class="line"></span><br><span class="line">ctx,_ := context.WithTimeout(context.Background(),m.timeout)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.Done():&#123;</span><br><span class="line">m.mu.Lock()</span><br><span class="line"><span class="comment">// 超时的work 进行处理</span></span><br><span class="line"><span class="keyword">if</span> m.workerCommit[args.WorkerId] != TaskCommit &amp;&amp; m.mapTasks[k] != TaskCommit&#123;</span><br><span class="line">m.mapTasks[k] = TaskIdle</span><br><span class="line">log.Println(<span class="string">&quot;[Error]:&quot;</span>, <span class="string">&quot;worker:&quot;</span>, args.WorkerId, <span class="string">&quot;map task:&quot;</span>, k, <span class="string">&quot;timeout&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">m.mu.Unlock()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分配reduce 任务</span></span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> m.reduceTasks &#123;</span><br><span class="line"><span class="keyword">if</span> m.mapCount != <span class="built_in">len</span>(m.files) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> v != TaskIdle &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reply.TaskId = k</span><br><span class="line">reply.Filename = <span class="string">&quot;&quot;</span></span><br><span class="line">reply.MapReduce = <span class="string">&quot;reduce&quot;</span></span><br><span class="line">reply.BucketNumber = <span class="built_in">len</span>(m.files)</span><br><span class="line">reply.IsFinished = <span class="literal">false</span></span><br><span class="line">m.workerCommit[args.WorkerId] = TaskWorking</span><br><span class="line">m.reduceTasks[k] = TaskWorking</span><br><span class="line"></span><br><span class="line">ctx, _ := context.WithTimeout(context.Background(), m.timeout)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">&#123;</span><br><span class="line">m.mu.Lock()</span><br><span class="line"><span class="keyword">if</span> m.workerCommit[args.WorkerId] != TaskCommit &amp;&amp; m.reduceTasks[k] != TaskCommit &#123;</span><br><span class="line">m.reduceTasks[k] = TaskIdle</span><br><span class="line">log.Println(<span class="string">&quot;[Error]:&quot;</span>, <span class="string">&quot;worker:&quot;</span>, args.WorkerId, <span class="string">&quot;reduce task:&quot;</span>, k, <span class="string">&quot;timeout&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">m.mu.Unlock()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">log.Println(<span class="string">&quot;a worker&quot;</span>, args.WorkerId, <span class="string">&quot;apply a reduce task:&quot;</span>, *reply)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查是否都完成了</span></span><br><span class="line"><span class="keyword">for</span> _,v := <span class="keyword">range</span> m.workerCommit&#123;</span><br><span class="line"><span class="keyword">if</span> v == TaskWorking&#123;</span><br><span class="line">reply.IsFinished = <span class="literal">false</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 完成任务</span></span><br><span class="line">reply.IsFinished = <span class="literal">true</span></span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;worker apply but no tasks to dispatch&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 申请完成任务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Master)</span> <span class="title">Commit</span><span class="params">(args *CommitArgs, reply *CommitReply)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">log.Println(<span class="string">&quot;a worker&quot;</span>, args.WorkerId, <span class="string">&quot;commit a &quot;</span>+args.MapReduce+<span class="string">&quot; task:&quot;</span>, args.TaskId)</span><br><span class="line">m.mu.Lock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> args.MapReduce &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;map&quot;</span> : &#123;</span><br><span class="line">m.mapTasks[args.TaskId] = TaskCommit</span><br><span class="line">m.workerCommit[args.WorkerId] = TaskCommit</span><br><span class="line">m.mapCount++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;reduce&quot;</span> :&#123;</span><br><span class="line">m.reduceTasks[args.TaskId] = TaskCommit</span><br><span class="line">m.workerCommit[args.WorkerId] = TaskCommit</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">m.mu.Unlock()</span><br><span class="line"></span><br><span class="line">log.Println(<span class="string">&quot;current&quot;</span>, m.mapTasks, m.reduceTasks)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查map reduce是否运行完成</span></span><br><span class="line"><span class="keyword">for</span> _,v := <span class="keyword">range</span> m.mapTasks&#123;</span><br><span class="line"><span class="keyword">if</span> v != TaskCommit&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _,v := <span class="keyword">range</span> m.reduceTasks&#123;</span><br><span class="line"><span class="keyword">if</span> v != TaskCommit&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m.allCommited = <span class="literal">true</span></span><br><span class="line">log.Println(<span class="string">&quot;all tasks completed&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// an example RPC handler.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// the RPC argument and reply types are defined in rpc.go.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Master)</span> <span class="title">Example</span><span class="params">(args *ExampleArgs, reply *ExampleReply)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">log.Println(<span class="string">&quot;a worker&quot;</span>)</span><br><span class="line">reply.Y = args.X + <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// start a thread that listens for RPCs from worker.go</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Master)</span> <span class="title">server</span><span class="params">()</span></span> &#123;</span><br><span class="line">rpc.Register(m)</span><br><span class="line">rpc.HandleHTTP()</span><br><span class="line"><span class="comment">//l, e := net.Listen(&quot;tcp&quot;, &quot;:1234&quot;)</span></span><br><span class="line">sockname := masterSock()</span><br><span class="line">os.Remove(sockname)</span><br><span class="line">l, e := net.Listen(<span class="string">&quot;unix&quot;</span>, sockname)</span><br><span class="line"><span class="keyword">if</span> e != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;listen error:&quot;</span>, e)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> http.Serve(l, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// main/mrmaster.go calls Done() periodically to find out</span></span><br><span class="line"><span class="comment">// if the entire job has finished.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Master)</span> <span class="title">Done</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="comment">// Your code here.</span></span><br><span class="line"><span class="keyword">return</span> m.allCommited</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// create a Master.</span></span><br><span class="line"><span class="comment">// main/mrmaster.go calls this function.</span></span><br><span class="line"><span class="comment">// nReduce is the number of reduce tasks to use.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MakeMaster</span><span class="params">(files []<span class="keyword">string</span>, nReduce <span class="keyword">int</span>)</span> *<span class="title">Master</span></span> &#123;</span><br><span class="line"><span class="comment">// Your code here.</span></span><br><span class="line">m := Master&#123;</span><br><span class="line">files:        files,</span><br><span class="line">nReduce:      nReduce,</span><br><span class="line">mapTasks:     <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(files)),</span><br><span class="line">reduceTasks:  <span class="built_in">make</span>([]<span class="keyword">int</span>, nReduce),</span><br><span class="line">workerCommit: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>),</span><br><span class="line">allCommited:  <span class="literal">false</span>,</span><br><span class="line">timeout:      <span class="number">10</span> * time.Second,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.Println(<span class="string">&quot;[init] with:&quot;</span>, files, nReduce)</span><br><span class="line"></span><br><span class="line">m.server()</span><br><span class="line"><span class="keyword">return</span> &amp;m</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>worker.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mr</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;crypto/rand&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;sort&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;net/rpc&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;hash/fnv&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Map functions return a slice of KeyValue.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">type</span> KeyValue <span class="keyword">struct</span> &#123;</span><br><span class="line">Key   <span class="keyword">string</span></span><br><span class="line">Value <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for sorting by key.</span></span><br><span class="line"><span class="keyword">type</span> ByKey []KeyValue</span><br><span class="line"></span><br><span class="line"><span class="comment">// for sorting by key.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a ByKey)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span>           &#123; <span class="keyword">return</span> <span class="built_in">len</span>(a) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a ByKey)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span>      &#123; a[i], a[j] = a[j], a[i] &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a ByKey)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> a[i].Key &lt; a[j].Key &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// use ihash(key) % NReduce to choose the reduce</span></span><br><span class="line"><span class="comment">// task number for each KeyValue emitted by Map.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ihash</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">h := fnv.New32a()</span><br><span class="line">h.Write([]<span class="keyword">byte</span>(key))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">int</span>(h.Sum32() &amp; <span class="number">0x7fffffff</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成 workid</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">genWorkerID</span><span class="params">()</span> <span class="params">(uuid <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// generate 32 bits timestamp</span></span><br><span class="line">unix32bits := <span class="keyword">uint32</span>(time.Now().UTC().Unix())</span><br><span class="line"></span><br><span class="line">buff := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">numRead, err := rand.Read(buff)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> numRead != <span class="built_in">len</span>(buff) || err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%x-%x-%x-%x-%x-%x\n&quot;</span>, unix32bits, buff[<span class="number">0</span>:<span class="number">2</span>], buff[<span class="number">2</span>:<span class="number">4</span>], buff[<span class="number">4</span>:<span class="number">6</span>], buff[<span class="number">6</span>:<span class="number">8</span>], buff[<span class="number">8</span>:])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// main/mrworker.go calls this function.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Worker</span><span class="params">(mapf <span class="keyword">func</span>(<span class="keyword">string</span>, <span class="keyword">string</span>)</span> []<span class="title">KeyValue</span>,</span></span><br><span class="line">reducef <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">string</span>, []<span class="keyword">string</span>)</span> <span class="title">string</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Your worker implementation here.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// uncomment to send the Example RPC to the master.</span></span><br><span class="line"><span class="comment">// CallExample()</span></span><br><span class="line">workId := genWorkerID()</span><br><span class="line">retry := <span class="number">3</span><span class="comment">// 任务完成后，再多询问retry次，增加容错性</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>&#123;</span><br><span class="line">args := WorkArgs&#123;WorkerId: workId&#125;</span><br><span class="line">reply := WorkReply&#123;&#125;</span><br><span class="line"><span class="comment">// 申请 task</span></span><br><span class="line">working := call(<span class="string">&quot;Master.Work&quot;</span>, &amp;args, &amp;reply)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> reply.IsFinished || !working&#123;</span><br><span class="line">log.Println(<span class="string">&quot;finished&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">log.Println(<span class="string">&quot;task info:&quot;</span>, reply)</span><br><span class="line"><span class="comment">// 执行 task</span></span><br><span class="line"><span class="keyword">switch</span> reply.MapReduce&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;map&quot;</span>:</span><br><span class="line">MapWork(reply, mapf)</span><br><span class="line">retry = <span class="number">3</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;reduce&quot;</span>:</span><br><span class="line">ReduceWork(reply, reducef)</span><br><span class="line">retry = <span class="number">3</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="comment">// 延时关闭，防止错误</span></span><br><span class="line">log.Println(<span class="string">&quot;error reply: would retry times:&quot;</span>, retry)</span><br><span class="line"><span class="keyword">if</span> retry &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">retry--</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回复任务完成</span></span><br><span class="line">commitArgs := CommitArgs&#123;WorkerId:workId,TaskId:reply.TaskId,MapReduce: reply.MapReduce&#125;</span><br><span class="line">commitReply := CommitReply&#123;&#125;</span><br><span class="line"></span><br><span class="line">call(<span class="string">&quot;Master.Commit&quot;</span>,&amp;commitArgs,&amp;commitReply)</span><br><span class="line"></span><br><span class="line">time.Sleep(<span class="number">500</span> * time.Millisecond)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行map任务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MapWork</span><span class="params">(task WorkReply,mapf <span class="keyword">func</span>(<span class="keyword">string</span>,<span class="keyword">string</span>)</span> []<span class="title">KeyValue</span>)</span>&#123;</span><br><span class="line"><span class="comment">// check task info</span></span><br><span class="line">file,err := os.Open(task.Filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;cannot open %v&quot;</span>, task.Filename)</span><br><span class="line">&#125;</span><br><span class="line">content, err := ioutil.ReadAll(file)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;cannot read %v&quot;</span>, task.Filename)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 正式调用 map 方法</span></span><br><span class="line">kva := mapf(task.Filename, <span class="keyword">string</span>(content))</span><br><span class="line"></span><br><span class="line">sort.Sort(ByKey(kva))</span><br><span class="line"></span><br><span class="line"><span class="comment">// create file buckets 生成 nReduce 个 中间文件</span></span><br><span class="line">tmpName := <span class="string">&quot;mr-tmp-&quot;</span> + strconv.Itoa(task.TaskId)</span><br><span class="line"><span class="keyword">var</span> fileBucket = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]*json.Encoder)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; task.BucketNumber; i++ &#123;</span><br><span class="line">ofile, _ := os.Create(tmpName + <span class="string">&quot;-&quot;</span> + strconv.Itoa(i))</span><br><span class="line">fileBucket[i] = json.NewEncoder(ofile)</span><br><span class="line"><span class="keyword">defer</span> ofile.Close()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, kv := <span class="keyword">range</span> kva &#123;</span><br><span class="line">key := kv.Key</span><br><span class="line">reduce_idx := ihash(key) % task.BucketNumber</span><br><span class="line">err := fileBucket[reduce_idx].Encode(&amp;kv)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;Unable to write to file&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行reduce任务</span></span><br><span class="line"><span class="comment">// get reduce task and reduce all reduce id = task.Taskid files.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReduceWork</span><span class="params">(task WorkReply, reducef <span class="keyword">func</span>(<span class="keyword">string</span>, []<span class="keyword">string</span>)</span> <span class="title">string</span>)</span> &#123;</span><br><span class="line">intermediate := []KeyValue&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// read mr-tmp n files to add inermediate then write reduce获取自己index的中间文件 如：mr-tmp-*-1</span></span><br><span class="line"><span class="keyword">for</span> mapTaskNumber := <span class="number">0</span>; mapTaskNumber &lt; task.BucketNumber;mapTaskNumber++ &#123;</span><br><span class="line">fileName := <span class="string">&quot;mr-tmp-&quot;</span> + strconv.Itoa(mapTaskNumber) + <span class="string">&quot;-&quot;</span> + strconv.Itoa(task.TaskId)</span><br><span class="line">f, err := os.Open(fileName)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;Unable to read from: &quot;</span>, fileName)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line">decoder := json.NewDecoder(f)</span><br><span class="line"><span class="keyword">var</span> kv KeyValue</span><br><span class="line"><span class="keyword">for</span> decoder.More() &#123;</span><br><span class="line">err := decoder.Decode(&amp;kv)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;Json decode failed, &quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">intermediate = <span class="built_in">append</span>(intermediate, kv)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sort.Sort(ByKey(intermediate))</span><br><span class="line"></span><br><span class="line"><span class="comment">// write to &quot;mr-out-Y&quot; Y is reduce task id</span></span><br><span class="line">ofile, err := os.Create(<span class="string">&quot;mr-out-&quot;</span> + strconv.Itoa(task.TaskId+<span class="number">1</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;Unable to create file: &quot;</span>, ofile)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> ofile.Close()</span><br><span class="line"></span><br><span class="line">log.Println(<span class="string">&quot;complete to &quot;</span>, task.TaskId, <span class="string">&quot;start to write in to &quot;</span>, ofile)</span><br><span class="line"></span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i &lt; <span class="built_in">len</span>(intermediate) &#123;</span><br><span class="line">j := i + <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> j &lt; <span class="built_in">len</span>(intermediate) &amp;&amp; intermediate[j].Key == intermediate[i].Key &#123;</span><br><span class="line">j++</span><br><span class="line">&#125;</span><br><span class="line">values := []<span class="keyword">string</span>&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> k := i; k &lt; j; k++ &#123;</span><br><span class="line">values = <span class="built_in">append</span>(values, intermediate[k].Value)</span><br><span class="line">&#125;</span><br><span class="line">output := reducef(intermediate[i].Key, values)</span><br><span class="line"></span><br><span class="line"><span class="comment">// this is the correct format for each line of Reduce output.</span></span><br><span class="line">fmt.Fprintf(ofile, <span class="string">&quot;%v %v\n&quot;</span>, intermediate[i].Key, output)</span><br><span class="line"></span><br><span class="line">i = j</span><br><span class="line">&#125;</span><br><span class="line">ofile.Close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// example function to show how to make an RPC call to the master.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// the RPC argument and reply types are defined in rpc.go.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CallExample</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// declare an argument structure.</span></span><br><span class="line">args := ExampleArgs&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fill in the argument(s).</span></span><br><span class="line">args.X = <span class="number">99</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// declare a reply structure.</span></span><br><span class="line">reply := ExampleReply&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// send the RPC request, wait for the reply.</span></span><br><span class="line">call(<span class="string">&quot;Master.Example&quot;</span>, &amp;args, &amp;reply)</span><br><span class="line"></span><br><span class="line"><span class="comment">// reply.Y should be 100.</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;reply.Y %v\n&quot;</span>, reply.Y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// send an RPC request to the master, wait for the response.</span></span><br><span class="line"><span class="comment">// usually returns true.</span></span><br><span class="line"><span class="comment">// returns false if something goes wrong.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">call</span><span class="params">(rpcname <span class="keyword">string</span>, args <span class="keyword">interface</span>&#123;&#125;, reply <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="comment">// c, err := rpc.DialHTTP(&quot;tcp&quot;, &quot;127.0.0.1&quot;+&quot;:1234&quot;)</span></span><br><span class="line">sockname := masterSock()</span><br><span class="line">c, err := rpc.DialHTTP(<span class="string">&quot;unix&quot;</span>, sockname)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;dialing:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> c.Close()</span><br><span class="line"></span><br><span class="line">err = c.Call(rpcname, args, reply)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><blockquote><p> 修改mr文件夹中上述三个文件的代码。</p><p>在main目录下</p></blockquote><ol><li><p>编译动态链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go build -buildmode=plugin ../mrapps/wc.go</span><br></pre></td></tr></table></figure></li><li><p>运行master server</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run mrmaster.go pg-*.txt</span><br></pre></td></tr></table></figure></li><li><p>运行worker节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run mrworker.go wc.so</span><br></pre></td></tr></table></figure></li><li><p>查看输出的结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat mr-out-* | sort | more</span><br></pre></td></tr></table></figure></li><li><p>运行官方的测试脚本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh ./test-mr.sh</span><br></pre></td></tr></table></figure></li></ol><p>总结：<br>其实写的代码不多，主要是在原有基础上进行修改。难点在对RPC调用和master分配任务，worker执行MapReduce以及对中间文件的读写操作、作业资源的并发控制。<br>理清楚传递的状态和master自身的状态后，就只有几个函数需要实现。</p><p>参考资料：</p><p><a href="http://nil.csail.mit.edu/6.824/2020/labs/lab-mr.html">试验地址</a></p><p><a href="https://www.yuque.com/abser/blog/lab1mapreduce">MIT6.824 Lab 1 解决方案记录</a></p><p><a href="https://mit-public-courses-cn-translatio.gitbook.io/mit6-824/">MIT6.824课程总结</a></p><p><a href="https://pdos.csail.mit.edu/6.824/papers/mapreduce.pdf">MapReduce论文</a></p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式一致性协议之Raft算法</title>
      <link href="/2021/07/12/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE%E4%B9%8BRaft%E7%AE%97%E6%B3%95/"/>
      <url>/2021/07/12/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE%E4%B9%8BRaft%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li><p><strong>CAP理论</strong></p><blockquote><p>描述分布式一致性的三个维度，<strong>一个分布式系统只能满足三项中的两项而不可能满足全部三项</strong>。</p></blockquote><ul><li><p>一致性（Consistency）</p><p>每次读操作都能保证返回的是最新数据；在分布式系统中，如果能针对一个数据项的更新执行成功后，所有的请求都可以读到其最新的值，这样的系统就被认为具有严格的一致性。</p></li><li><p>可用性（Availablity）</p><p>任何一个没有发生故障的节点，会在合理的时间内返回一个正常的结果，也就是对于每一个请求总能够在有限时间内返回结果。</p></li><li><p>分区容忍性（Partition-torlerance）</p><p>当节点间出现网络分区，照样可以提供满足一致性和可用性的服务，除非整个网络环境都发生了故障。</p></li></ul></li><li><p><strong>BASE理论</strong></p><blockquote><p>CAP理论无法全部满足，为了指导工业实现，就需要降低标准，因此出现了BASE理论。</p><p>它的思想是：“即使无法做到强一致性，但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性” 。</p></blockquote><p>BASE理论有三项指标：</p><ul><li>基本可用（Basically Available） ：是指分布式系统在出现不可预知故障的时候，允许损失部分可用性：比如响应时间、功能降级等；</li><li>软状态（ Soft State） ：也称为弱状态，是指允许系统中的数据存在中间状态，并认为该中间状态的存在不会影响系统的整体可用性，即允许系统在不同节点之间进行数据同步的过程存在延时；</li><li>最终一致性（ Eventual Consistency） ：强调的是系统中所有的数据副本，在经过一段时间的同步后，最终能够达成一致的状态。</li></ul><p><img alt="img" data-src="https://p0.itc.cn/q_70/images03/20210307/c3096bb066f5494ea490ca5de70b0d18.png" class="lazyload"></p></li><li><p><strong>分区一致性</strong></p><blockquote><p>详情参考：<a href="https://zhuanlan.zhihu.com/p/67949045">https://zhuanlan.zhihu.com/p/67949045</a></p></blockquote><p>简要假设就是：主从库复制直接同步的是<em>强一致性</em>，主从库异步同步的是<em>弱一致性</em>，其中只保证数据最终一致的是<em>最终一致性</em>。</p></li><li><p><strong>Paxos一致性算法</strong></p><blockquote><p>Paxos 算法是莱斯利·兰伯特于1990年提出的一种基于消息传递且具有高度容错特性的一致性算法。</p></blockquote><p><strong>概念介绍：</strong></p><ol><li>Proposal提案，即分布式系统的修改请求，可以表示为**[提案编号N，提案内容value]**</li><li>Client用户，类似社会民众，负责提出建议</li><li>Propser议员，类似基层人大代表，负责帮Client上交提案</li><li>Acceptor投票者，类似全国人大代表，负责为提案投票，<strong>不同意比自己以前接收过的提案编号要小的提案，其他提案都同意</strong>，例如A以前给N号提案表决过，那么再收到小于等于N号的提案时就直接拒绝了</li><li>Learner提案接受者，类似记录被通过提案的记录员，负责记录提案</li></ol><p><strong>Basic Paxos 算法步骤：</strong></p><ol><li>Propser准备一个N号提案</li><li>Propser询问Acceptor中的多数派是否接收过N号的提案，如果都没有进入下一步，否则本提案不被考虑</li><li>Acceptor开始表决，Acceptor<strong>无条件同意</strong>从未接收过的N号提案，达到多数派同意后，进入下一步</li><li>Learner记录提案</li></ol><p><img alt="Basic Paxos算法" data-src="https://pic3.zhimg.com/80/v2-992940ee3313553711a2a9f9422c2f16_720w.jpg" class="lazyload"></p><p><strong>问题总览：</strong></p><ul><li><p>节点故障</p><ul><li>若Proposer故障，没关系，再从集群中选出Proposer即可</li><li>若Acceptor故障，表决时能达到多数派也没问题</li></ul></li><li><p>潜在问题-<strong>活锁</strong></p><ul><li>假设系统有多个Proposer，他们不断向Acceptor发出提案，还没等到上一个提案达到多数派下一个提案又来了，就会导致Acceptor放弃当前提案转向处理下一个提案，于是所有提案都别想通过了。</li></ul></li></ul></li></ul><ul><li><p><strong>Multi Paxos算法</strong></p><blockquote><p>综上，对Basic Paxos的改进：整个系统<strong>只有一个</strong>Proposer，称之为Leader。</p></blockquote><ol><li>若集群中没有Leader，则在集群中选出一个节点并声明它为<strong>第M任Leader</strong>。</li><li>集群的Acceptor只表决<strong>最新的Leader</strong>发出的最新的提案</li><li>其他步骤和Basic Paxos相同</li></ol><p><img alt="Multi Paxos算法" data-src="https://pic2.zhimg.com/80/v2-79a5a32f39fcb379a6dd47f53be3a8a5_720w.jpg" class="lazyload"></p></li></ul><p>继续优化：Multi Paxos角色过多，对于计算机集群而言，可以将Proposer、Acceptor和Learner三者身份<strong>集中在一个节点上</strong>，此时只需要从集群中选出Proposer，其他节点都是Acceptor和Learner，这就是接下来要讨论的Raft算法。</p><h2 id="Raft算法概述"><a href="#Raft算法概述" class="headerlink" title="Raft算法概述"></a>Raft算法概述</h2><blockquote><p>Raft 是一种为了管理复制日志的一致性算法。</p><p>它提供了和 Paxos 算法相同的功能和性能，但是它的算法结构和 Paxos 不同，使得 Raft 算法更加容易理解并且更容易构建实际的系统。</p></blockquote><p>概念介绍：</p><ol><li>Leader领导节点，负责发出提案</li><li>Follower追随者节点，负责同意Leader发出的提案</li><li>Candidate候选人，负责争夺Leader</li></ol><p>Raft算法将一致性问题分解为两个的子问题，<strong>Leader选举</strong>和<strong>状态复制</strong></p><h2 id="Leader选举"><a href="#Leader选举" class="headerlink" title="Leader选举"></a>Leader选举</h2><blockquote><p>假设网络中有3个节点，最开始大家都是Follower节点，且Term（任期）为0。</p></blockquote><ol><li>每个Follower都有一个<strong>选举超时</strong> ，这是是Follower等待成为Candidate的时间。选举超时随机设置在 150 毫秒和 300 毫秒之间。</li></ol><p><img alt="img" data-src="https://pic2.zhimg.com/80/v2-54ff345bdee35c3b90efef4e525aea69_720w.jpg" class="lazyload"></p><ol start="2"><li>当选举超时时间到了，而仍然没有接收到Leader的心跳信息，Follower将声明自己是Candidate并参与Leader竞举，并且开始新的选举任期（Term+1）为自己投票，同时<strong>将消息发给其他节点来争取他们的投票</strong>。若其他节点长时间没有响应Candidate，将Term + 1且重新发送选举信息。</li></ol><p><img alt="img" data-src="https://pic2.zhimg.com/80/v2-ddf8c68b3e1e57594a08f032482e8251_720w.jpg" class="lazyload"></p><ol start="3"><li>只要集群中其他节点在当前任期Term内还没投票，其他节点将给Candidate投票，并且重置<strong>选举超时</strong>。否则则认为当前的竞选消息不是最新的，拒绝为他投票。</li></ol><p><img alt="img" data-src="https://pic2.zhimg.com/80/v2-b0d887514aa22bf81a9ebdd2f03cc2dd_720w.jpg" class="lazyload"></p><ol start="4"><li>获得多数派支持的Candidate将成为<strong>第M任Leader</strong>（M任是最新的任期Term）</li></ol><p><img alt="img" data-src="https://pic4.zhimg.com/80/v2-2bf8a06c823ad2fb38e1be20fe60b0df_720w.jpg" class="lazyload"></p><ol start="5"><li> 在任期内的Leader会<strong>不断发送心跳和追加条目</strong>给其他节点证明自己还活着，其他节点收到信息后追加日志信息并重置<strong>选举超时</strong>，回复Leader的信息。这个机制保证其他节点不会在Leader任期内参加Leader选举。</li></ol><p><img alt="img" data-src="https://pic1.zhimg.com/80/v2-bd510806788699634cab9500f6c2edfc_720w.jpg" class="lazyload"></p><p><img alt="img" data-src="https://pic3.zhimg.com/80/v2-5beebe7894d879cf1ea54f460467649e_720w.jpg" class="lazyload"></p><ol start="6"><li><p> 当Leader节点出现故障而导致Leader失联，没有接收到心跳的Follower节点将准备成为Candidate进入下一轮Leader选举</p></li><li><p> 若出现两个Candidate同时选举并获得了相同的票数，那么这两个Candidate将<strong>随机推迟一段时间</strong>后再向其他节点发出投票请求，这保证了再次发送投票请求以后不冲突（上述的leader消息计时器时间随机，为的就是减少两个节点同时发送竞选请求，导致二分票，无法生成leader的情况）</p></li></ol><p><img alt="img" data-src="https://pic3.zhimg.com/80/v2-70d1b9ad1fdb058b04ff7d5a521435be_720w.jpg" class="lazyload"></p><p>​            三种状态的转换如图所示：</p><p><img data-src="https://pic.imgdb.cn/item/60ec519a5132923bf84447df.jpg" class="lazyload"></p><h2 id="状态复制"><a href="#状态复制" class="headerlink" title="状态复制"></a>状态复制</h2><blockquote><p>一旦我们选出了一个Leader，就需要将系统的所有更改复制到所有Follower节点。</p></blockquote><ol><li><p>Leader负责接收来自Client的提案请求<strong>（红色提案表示未确认）</strong>，更改将被附加在leader的日志中。</p><blockquote><p>此处需要注意的是，在如etcd中的实现里：client的消息是可以发送给Follower节点，Follower节点再向Leader节点报告。</p></blockquote></li></ol><p><img alt="img" data-src="https://pic1.zhimg.com/80/v2-a27ccc3437ed92669fa479f142176614_720w.jpg" class="lazyload"></p><ol start="2"><li>提案（更改）内容将包含在Leader发出的<strong>下一个心跳中</strong></li></ol><p><img alt="img" data-src="https://pic3.zhimg.com/80/v2-461b76641286d57534288d6b3be4dbf6_720w.jpg" class="lazyload"></p><ol start="3"><li>Follower接收到心跳以后回复Leader的心跳</li></ol><p><img alt="img" data-src="https://pic2.zhimg.com/80/v2-f5e771562f2eda04c8db30d1d8462e39_720w.jpg" class="lazyload"></p><ol start="4"><li>Leader接收到多数派Follower的回复以后<strong>确认提案</strong>持久化到本地并<strong>回复Client</strong></li></ol><p><img alt="img" data-src="https://pic4.zhimg.com/80/v2-3e614177fe59302ec933b629f55be2f7_720w.jpg" class="lazyload"></p><ol start="5"><li>Leader<strong>通知Follower节点确认提案/更改</strong>并写入自己的存储空间，随后所有的节点都拥有相同的数据</li></ol><p><img alt="img" data-src="https://pic2.zhimg.com/80/v2-dd0d388855310707dd85b4ed6c8c5f6d_720w.jpg" class="lazyload"></p><ol start="6"><li>若集群中出现网络异常，导致集群被分割，将出现多个Leader</li></ol><p><img alt="img" data-src="https://pic2.zhimg.com/80/v2-ad1fa60698389bc0efbe3413b2549729_720w.jpg" class="lazyload"></p><ol start="7"><li>被分割出的非多数派集群将无法达到共识，即<strong>脑裂</strong>，如图中的A、B节点将无法确认提案。而多数派集群如C、D、E可以更新任期Term并正常工作。</li></ol><p><img alt="img" data-src="https://pic1.zhimg.com/80/v2-093a8f1ea3c1ea389281036f7ee9c320_720w.jpg" class="lazyload"></p><p><img alt="img" data-src="https://pic2.zhimg.com/80/v2-e54f332371974d6124ba494fc68f6fd5_720w.jpg" class="lazyload"></p><ol start="8"><li>当集群再次连通时，将<strong>只听从最新任期Leader</strong>的指挥，旧Leader将退化为Follower，如图中B节点的Leader（任期1）需要听从D节点的Leader（任期2）的指挥，此时集群重新达到一致性状态。</li></ol><p><img alt="img" data-src="https://pic2.zhimg.com/80/v2-c86b7d545b291d7d07d4b47e53a334cd_720w.jpg" class="lazyload"></p><ol start="9"><li>除此之外，节点 A 和 B 都将回滚其未提交的条目并匹配新领导者的日志。</li></ol><p><img alt="img" data-src="https://pic2.zhimg.com/80/v2-477365ef270e6e967fee60e64886cd6d_720w.jpg" class="lazyload"></p><ol start="10"><li>最终我们的说有节点数据满足最终一致性。</li></ol><p><strong>参考：</strong></p><p><a href="http://thesecretlivesofdata.com/raft/">Raft流程的动画演示</a></p><p><a href="https://houbb.github.io/2018/10/30/raft">Raft-一致性算法Blog</a></p><p><a href="https://raft.github.io/">Raft 共识算法官网</a></p><p><a href="https://www.bilibili.com/video/BV1Wy4y1K7zF?t=2511">易于理解的分布式共识算法，Raft!</a> </p><p><a href="https://zhuanlan.zhihu.com/p/130332285">知乎-分布式一致性介绍</a></p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Raft </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字签名算法之ECDSA</title>
      <link href="/2021/07/07/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E7%AE%97%E6%B3%95%E4%B9%8BECDSA/"/>
      <url>/2021/07/07/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E7%AE%97%E6%B3%95%E4%B9%8BECDSA/</url>
      
        <content type="html"><![CDATA[<p>学习中…..</p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数字签名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字签名算法之RSA</title>
      <link href="/2021/07/06/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E7%AE%97%E6%B3%95%E4%B9%8BRSA/"/>
      <url>/2021/07/06/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E7%AE%97%E6%B3%95%E4%B9%8BRSA/</url>
      
        <content type="html"><![CDATA[<h2 id="数字签名算法之RSA"><a href="#数字签名算法之RSA" class="headerlink" title="数字签名算法之RSA"></a>数字签名算法之RSA</h2><blockquote><p>RSA算法是一种常用的非对称加密算法，常用于数字签名。</p><p>在公开密钥密码体制（PKI）中，加密密钥（即公开密钥）PK是公开信息，而解密密钥（即秘密密钥）SK是需要保密的。加密算法E和解密算法D也都是公开的。虽然解密密钥SK是由公开密钥PK决定的，但却不能根据PK计算出SK，反之亦然。</p><p>RSA公开密钥密码体制的原理是：根据数论，寻求两个大素数比较简单，而将它们的乘积进行因式分解却极其困难，因此可以将乘积公开作为加密密钥。</p></blockquote><h3 id="对称加密与非对称加密"><a href="#对称加密与非对称加密" class="headerlink" title="对称加密与非对称加密"></a>对称加密与非对称加密</h3><h4 id="对称加密："><a href="#对称加密：" class="headerlink" title="对称加密："></a><strong>对称加密：</strong></h4><blockquote><p>加密和解密用的是同一密钥，也是最简单、最快速的加密方式，通常使用的密匙相对较小，容易被破解，如果密钥过大，安全性确实可以得到保证，但同样加密和解密的效率将会很低。<br>因为双方都需要密钥进行加密解密，如果有一方的密钥泄露出去，整个安全性将不复存在，所以这也是对称加密的缺点。</p></blockquote><p><a href="http://img-blog.csdnimg.cn/20190808101443142.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDMxMTU4,size_16,color_FFFFFF,t_70"><img alt="在这里插入图片描述" data-src="http://img-blog.csdnimg.cn/20190808101443142.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDMxMTU4,size_16,color_FFFFFF,t_70" class="lazyload"></a></p><h4 id="非对称加密："><a href="#非对称加密：" class="headerlink" title="非对称加密："></a><strong>非对称加密：</strong></h4><blockquote><p>相较于对称加密，非对称加密使用两个密匙，即<strong>公开密钥</strong>和<strong>私钥密钥</strong>。<br>非对称加密很有趣，公钥是任何人都可以请求得到的，但私钥只有一个人持有，而且用公钥加密的密文只能通过私钥来解开，解密者无需像对称加密一样接收加密者的密钥，而是自己保存一个密钥，这样就不在网上传送密匙，不会被拦截，会更加安全，但是相对于对称加密，非对称加密加密和解密的效率会低一些</p></blockquote><p><a href="http://img-blog.csdnimg.cn/20190808101638191.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDMxMTU4,size_16,color_FFFFFF,t_70"><img alt="在这里插入图片描述" data-src="http://img-blog.csdnimg.cn/20190808101638191.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDMxMTU4,size_16,color_FFFFFF,t_70" class="lazyload"></a><br>下面就来学习属于<strong>非对称加密</strong>中的<strong>RSA算法</strong></p><h3 id="RSA算法涉及的数学知识"><a href="#RSA算法涉及的数学知识" class="headerlink" title="RSA算法涉及的数学知识"></a>RSA算法涉及的数学知识</h3><h4 id="一、互质关系"><a href="#一、互质关系" class="headerlink" title="一、互质关系"></a><strong>一、互质关系</strong></h4><blockquote><p>两个正整数，除1以外，没有其他公因子，那么这两个数就是<strong>互质关系</strong>。</p></blockquote><p><strong>例如</strong>：30与7就是互质关系，但是30不是质数，这就是说明不是质数也能构成互质关系</p><p><strong>由互质关系能得出以下结论：</strong></p><blockquote><ol><li>任意两个质数构成互质关系，比如7和61。</li><li>一个数是质数，另一个数只要不是前者的倍数，两者就构成互质关系，比如3和10。</li><li>如果两个数之中，较大的那个数是质数，则两者构成互质关系，比如97和57。</li><li>1和任意一个自然数是都是互质关系，比如1和99。</li><li>p是大于1的整数，则p和p-1构成互质关系，比如57和56。</li><li>p是大于1的奇数，则p和p-2构成互质关系，比如17和15。</li></ol></blockquote><h4 id="二、欧拉函数"><a href="#二、欧拉函数" class="headerlink" title="二、欧拉函数"></a><strong>二、欧拉函数</strong></h4><blockquote><p>在数论，对正整数n，欧拉函数是小于n的正整数中与n互质的数的数目，以φ(n)表示</p></blockquote><p>其实欧拉函数就是用来计算这样一个问题</p><blockquote><p>任意给定正整数n，在小于等于n的正整数之中，有多少个与n构成互质关系？</p></blockquote><p>举个列子：</p><p>在<code>1—10</code>中，与10互质的有<code>1、3、7、9</code>，即<code>φ(n)=4</code></p><p>通过欧拉函数又衍生出几种情况：</p><blockquote><p>第一种情况： 如果n=1，则 <code>φ(1) = 1</code> 。因为1与任何数（包括自身）都构成互质关系。<br>第二种情况： 如果n是质数，则<code>φ(n)=n-1</code> 。因为质数与小于它的每一个数，都构成互质关系。比如7与1、2、3、4、5、6都构成互质关系。</p></blockquote><p>其中对RSA最重要的一种情况就是：</p><p><strong>如果n可以分解成两个互质的整数之积</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n = p1 × p2</span><br></pre></td></tr></table></figure><p>则</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">φ(n) = φ(p1p2) = φ(p1)φ(p2)</span><br></pre></td></tr></table></figure><p>通过这个公式可以看出<strong>积的欧拉函数等于各个因子的欧拉函数之积</strong></p><p>举个列子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n=21</span><br><span class="line">n=3*7</span><br><span class="line">φ(n) = φ(p1p2) = φ(3)φ(7)=2*6=12</span><br></pre></td></tr></table></figure><h4 id="三、欧拉定理"><a href="#三、欧拉定理" class="headerlink" title="三、欧拉定理"></a><strong>三、欧拉定理</strong></h4><blockquote><p>欧拉定理表明，若<code>n</code>,<code>a</code>为正整数，且<code>n,a互质</code>，则以下公式成立：</p></blockquote><p><a href="http://img-blog.csdnimg.cn/2019080811125141.png"><img alt="在这里插入图片描述" data-src="http://img-blog.csdnimg.cn/2019080811125141.png" class="lazyload"></a><br>换句话就是<strong>a的φ(n)次方被n除的余数为1</strong>或者是<strong>a的φ(n)次方减去1，可以被n整除。</strong></p><p>举个列子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如：2和5互质，φ(5)=4，则2的4次方(16)减1,15恰好被n(5)整除</span><br></pre></td></tr></table></figure><p><strong>欧拉定理还有一个特殊情况：</strong></p><blockquote><p>如果<code>正整数a</code>与<code>质数p</code>互质，因为质数p的φ(p)等于p-1，则欧拉定理可以写成：</p></blockquote><p><a href="http://img-blog.csdnimg.cn/20190808112224128.png"><img alt="在这里插入图片描述" data-src="http://img-blog.csdnimg.cn/20190808112224128.png" class="lazyload"></a></p><h4 id="四、模反元素"><a href="#四、模反元素" class="headerlink" title="四、模反元素"></a><strong>四、模反元素</strong></h4><blockquote><p>如果两个正整数a和n互质，那么一定可以找到整数b，使得 ab-1 被n整除，或者说ab被n除的余数是1。这时，b就叫做a的“模反元素”。</p></blockquote><p><a href="http://img-blog.csdnimg.cn/2019080811273180.png"><img alt="在这里插入图片描述" data-src="http://img-blog.csdnimg.cn/2019080811273180.png" class="lazyload"></a><br>举个列子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=3,n=4</span><br><span class="line">(3*b-1)%4=0</span><br><span class="line">故b=7或b=3</span><br><span class="line">显然模反元素不止一个，即如果b是a的模反元素，则 b+kn 都是a的模反元素（k为正整数）</span><br></pre></td></tr></table></figure><p>可以看出，a的 φ(n)-1 次方，就是a对模数n的模反元素<br><a href="http://img-blog.csdnimg.cn/20190808113332978.png"><img alt="在这里插入图片描述" data-src="http://img-blog.csdnimg.cn/20190808113332978.png" class="lazyload"></a></p><h4 id="五、模运算"><a href="#五、模运算" class="headerlink" title="五、模运算"></a><strong>五、模运算</strong></h4><blockquote><p>让m去被n整除，只取所得的余数作为结果，就叫做模运算。</p></blockquote><p>举个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 mod 4=2、8 mod 3=2</span><br></pre></td></tr></table></figure><h4 id="六、同余"><a href="#六、同余" class="headerlink" title="六、同余"></a><strong>六、同余</strong></h4><blockquote><p>给定一个正整数m，如果两个整数a和b满足a-b能被m整除，即(a-b) mod m=0，<br>那么就称整数a与b对模m同余，记作a≡b (mod m)，同时可成立a mod m=b</p></blockquote><p>而且同余与模运算是不同的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a≡b (mod m)仅可推出b=a mod m</span><br></pre></td></tr></table></figure><h4 id="七、欧几里德算法"><a href="#七、欧几里德算法" class="headerlink" title="七、欧几里德算法"></a><strong>七、欧几里德算法</strong></h4><blockquote><p>欧几里德算法是用来求两个正整数最大公约数的算法<br>计算公式gcd(a,b) = gcd(b,a mod b)</p></blockquote><p>计算方法：</p><p><strong>用较大数除以较小数，再用出现的余数（第一余数）去除除数，再用出现的余数（第二余数）去除第一余数，如此反复，直到最后余数是0为止</strong>  （辗转相除法）</p><h4 id="八、扩展欧几里德算法"><a href="#八、扩展欧几里德算法" class="headerlink" title="八、扩展欧几里德算法"></a><strong>八、扩展欧几里德算法</strong></h4><p><strong>扩展欧几里得算法</strong>是<a href="https://zh.wikipedia.org/wiki/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95">欧几里得算法</a>（又叫辗转相除法）的扩展。已知整数a、b，扩展欧几里得算法可以在求得a、b的<a href="https://zh.wikipedia.org/wiki/%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0">最大公约数</a>的同时，能找到整数x、y（其中一个很可能是负数），使它们满足<a href="https://zh.wikipedia.org/wiki/%E8%B2%9D%E7%A5%96%E7%AD%89%E5%BC%8F">贝祖等式</a>  <code>ax + by = gcd(a,b)</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> d=exgcd(b,a%b,x,y);</span><br><span class="line">    <span class="keyword">int</span> k=x;</span><br><span class="line">    x=y;</span><br><span class="line">    y=k-a/b*y;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要的数学知识已经了解完了，接下来就来学习RSA</p><h3 id="RSA算法"><a href="#RSA算法" class="headerlink" title="RSA算法"></a><strong>RSA算法</strong></h3><p><a href="http://img-blog.csdnimg.cn/20190808174116484.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDMxMTU4,size_16,color_FFFFFF,t_70"><img alt="在这里插入图片描述" data-src="http://img-blog.csdnimg.cn/20190808174116484.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDMxMTU4,size_16,color_FFFFFF,t_70" class="lazyload"></a></p><h4 id="（一）、生成密钥过程："><a href="#（一）、生成密钥过程：" class="headerlink" title="（一）、生成密钥过程："></a><strong>（一）、生成密钥过程：</strong></h4><p><strong>一、随机选择两个不相等的质数p和q</strong></p><p><strong>二、计算p和q的乘积n</strong></p><p><strong>三、计算n的欧拉函数φ(n)</strong></p><p><strong>四、随机选择一个整数e，条件是1&lt; e &lt; φ(n)，且e与φ(n) 互质</strong></p><p><strong>五、计算e对于φ(n)的模反元素d</strong></p><p><strong>六、将n和e封装成公钥，n和d封装成私钥</strong></p><p>下面就通过一个列子来执行一遍</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">一、选取两个不相等的质数p=11 q=13</span><br><span class="line">二、n=p*q=143</span><br><span class="line">三、φ(n)=(p-1)(q-1)=10*12=120</span><br><span class="line">四、从1&lt;e&lt;60, 随机选取一个e,这里选取7</span><br><span class="line">五、根据欧拉定理e*d ≡ 1 (mod φ(n))，该公式又可转化为e*d - 1 = kφ(n)</span><br><span class="line">所以7*d+120*k=1,这个方程可以由扩展欧几里得算法（辗转相除法）来得出结果：</span><br><span class="line">六、120 = 7 * 17 + 1</span><br><span class="line">17 = 17 * 1</span><br><span class="line">//余数放前面</span><br><span class="line">1 = 120 * 1 + 7 * (-17)</span><br><span class="line">1 = 120 * 1 + 7 *(-17)</span><br><span class="line">故d = -17 k = 1</span><br><span class="line">在RSA中d必须是正整数，所以将它翻转</span><br><span class="line">d=120 + （-17）=103</span><br><span class="line">故公钥为（n,e）=(143,7)</span><br><span class="line">    私钥为（n,d）=(143,103)</span><br></pre></td></tr></table></figure><h4 id="（二）、加密解密过程"><a href="#（二）、加密解密过程" class="headerlink" title="（二）、加密解密过程"></a><strong>（二）、加密解密过程</strong></h4><p>求出公钥和私钥，就可以对信息进行加密和解密</p><p><strong>一、通过公钥进行加密（n,e）</strong></p><p>设明文为M，密文为C，则加密公式为：<br><a href="http://img-blog.csdnimg.cn/2019080910083686.gif"><img alt="在这里插入图片描述" data-src="http://img-blog.csdnimg.cn/2019080910083686.gif" class="lazyload"></a><br>假设明文为13，则</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">M^e mod n ≡ c </span><br><span class="line">13^7 mod 143 = 117</span><br></pre></td></tr></table></figure><p><strong>二、通过私钥进行解密（n,d）</strong></p><p>密文为C，明文为M，则解密公式为：<br><a href="http://img-blog.csdnimg.cn/20190809101409529.gif"><img alt="在这里插入图片描述" data-src="http://img-blog.csdnimg.cn/20190809101409529.gif" class="lazyload"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C^d mod n ≡ M</span><br><span class="line">117^103 mod 143 = 13 </span><br></pre></td></tr></table></figure><p>换句通俗的话说<code>C的d次方除以n的余数为M</code></p><p>同理可以  <strong>公钥加密、私钥解密、私钥签名、公钥验签。</strong></p><h4 id="三-、RSA安全性"><a href="#三-、RSA安全性" class="headerlink" title="(三)、RSA安全性"></a><strong>(三)、RSA安全性</strong></h4><p>在已知n和e的情况下即（公钥），能否推导出d？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">（1）ed≡1 (mod φ(n))。只有知道e和φ(n)，才能算出d。</span><br><span class="line"></span><br><span class="line">（2）φ(n)=(p-1)(q-1)。只有知道p和q，才能算出φ(n)。</span><br><span class="line"></span><br><span class="line">（3）n=pq。只有将n因数分解，才能算出p和q。</span><br></pre></td></tr></table></figure><p>但现实生活中，不可能跟我们举例子一样那么小，而且大整数的因数分解，是一件非常困难的事情，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">12301866845301177551304949</span><br><span class="line">58384962720772853569595334</span><br><span class="line">79219732245215172640050726</span><br><span class="line">36575187452021997864693899</span><br><span class="line">56474942774063845925192557</span><br><span class="line">32630345373154826850791702</span><br><span class="line">61221429134616704292143116</span><br><span class="line">02221240479274737794080665</span><br><span class="line">351419597459856902143413</span><br></pre></td></tr></table></figure><p>没法对这个整数进行因数分解，过于大了，而且目前破解的只有暴力破解。</p><p><strong>总结</strong>：RSA中涉及数学的知识点比较多，本文只做了初略的介绍，如:加密解密中 <code>C = M^e % n</code> 和 <code>M = C^d % n</code> 未做详细的证明。</p><p>参考：</p><p><a href="https://bealright.github.io/2019/08/07/%E5%AF%86%E7%A0%81%E5%AD%A6%E2%80%94%E2%80%94RSA%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/">密码学——RSA加密算法原理</a></p><p><a href="http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html">阮一峰的RSA算法原理</a></p><p><a href="https://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95">wiki</a></p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数字签名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fabric网络搭建流程</title>
      <link href="/2021/07/03/Fabric%E7%BD%91%E7%BB%9C%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/"/>
      <url>/2021/07/03/Fabric%E7%BD%91%E7%BB%9C%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="Fabric网络搭建流程"><a href="#Fabric网络搭建流程" class="headerlink" title="Fabric网络搭建流程"></a>Fabric网络搭建流程</h2><blockquote><p>本项目基于Fabric2.2进行搭建，暂时不使用CA二用crytogen生成证书文件。</p><p>假设我们项目的home是<code>/data/twonodes</code>。</p></blockquote><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li>配置网络</li><li>通道配置</li><li>部署节点</li><li>节点与通道</li><li>链码的安装与执行</li></ul><h3 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h3><blockquote><p>配置网络主要是由CA负责，基于crypto-config.yaml文件生成orderer和peer节点的证书文件</p><p>由于本项目暂时还不采用CA搭建，所以使用官方给定的<a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/commands/cryptogen.html">crytogen命令</a>生成证书文件。</p></blockquote><p>预备条件，参考<a href="https://kid1999.github.io/2021/06/23/Fabric%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C%E6%90%AD%E5%BB%BA/">Fabric测试网络的搭建</a>。</p><ol><li><p>使用<code>cryptogen showtemplate &gt; crypt_config.yaml</code>生成生成密钥材料模板</p><p>其内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># &quot;OrdererOrgs&quot; - 管理orderer节点的组织的定义</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">OrdererOrgs:</span></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># Orderer</span></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">Orderer</span>   </span><br><span class="line">    <span class="attr">Domain:</span> <span class="string">example.com</span>    <span class="comment"># 域</span></span><br><span class="line">    <span class="attr">EnableNodeOUs:</span> <span class="literal">true</span>   <span class="comment"># 是否开启部门结构，如：组织-部门-节点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment"># &quot;Specs&quot; - See PeerOrgs below for complete description</span></span><br><span class="line">    <span class="comment"># ---------------------------------------------------------------------------</span></span><br><span class="line">    <span class="attr">Specs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">Hostname:</span> <span class="string">orderer</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># &quot;PeerOrgs&quot; - 管理peer节点的组织的定义</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">PeerOrgs:</span></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># Org1</span></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">Org1</span></span><br><span class="line">    <span class="attr">Domain:</span> <span class="string">org1.example.com</span></span><br><span class="line">    <span class="attr">EnableNodeOUs:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment"># &quot;CA&quot;</span></span><br><span class="line">    <span class="comment"># ---------------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment"># Uncomment this section to enable the explicit definition of the CA for this</span></span><br><span class="line">    <span class="comment"># organization.  This entry is a Spec.  See &quot;Specs&quot; section below for details.</span></span><br><span class="line">    <span class="comment"># ---------------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment"># CA:</span></span><br><span class="line">    <span class="comment">#    Hostname: ca # implicitly ca.org1.example.com</span></span><br><span class="line">    <span class="comment">#    Country: US</span></span><br><span class="line">    <span class="comment">#    Province: California</span></span><br><span class="line">    <span class="comment">#    Locality: San Francisco</span></span><br><span class="line">    <span class="comment">#    OrganizationalUnit: Hyperledger Fabric</span></span><br><span class="line">    <span class="comment">#    StreetAddress: address for org # default nil</span></span><br><span class="line">    <span class="comment">#    PostalCode: postalCode for org # default nil</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment"># &quot;Specs&quot;</span></span><br><span class="line">    <span class="comment"># ---------------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment"># Uncomment this section to enable the explicit definition of hosts in your</span></span><br><span class="line">    <span class="comment"># configuration.  Most users will want to use Template, below</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Specs is an array of Spec entries.  Each Spec entry consists of two fields:</span></span><br><span class="line">    <span class="comment">#   - Hostname:   (Required) The desired hostname, sans the domain.</span></span><br><span class="line">    <span class="comment">#   - CommonName: (Optional) Specifies the template or explicit override for</span></span><br><span class="line">    <span class="comment">#                 the CN.  By default, this is the template:</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#                              &quot;&#123;&#123;.Hostname&#125;&#125;.&#123;&#123;.Domain&#125;&#125;&quot;</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#                 which obtains its values from the Spec.Hostname and</span></span><br><span class="line">    <span class="comment">#                 Org.Domain, respectively.</span></span><br><span class="line">    <span class="comment">#   - SANS:       (Optional) Specifies one or more Subject Alternative Names</span></span><br><span class="line">    <span class="comment">#                 to be set in the resulting x509. Accepts template</span></span><br><span class="line">    <span class="comment">#                 variables &#123;&#123;.Hostname&#125;&#125;, &#123;&#123;.Domain&#125;&#125;, &#123;&#123;.CommonName&#125;&#125;. IP</span></span><br><span class="line">    <span class="comment">#                 addresses provided here will be properly recognized. Other</span></span><br><span class="line">    <span class="comment">#                 values will be taken as DNS names.</span></span><br><span class="line">    <span class="comment">#                 <span class="doctag">NOTE:</span> Two implicit entries are created for you:</span></span><br><span class="line">    <span class="comment">#                     - &#123;&#123; .CommonName &#125;&#125;</span></span><br><span class="line">    <span class="comment">#                     - &#123;&#123; .Hostname &#125;&#125;</span></span><br><span class="line">    <span class="comment"># ---------------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment"># Specs:</span></span><br><span class="line">    <span class="comment">#   - Hostname: foo # implicitly &quot;foo.org1.example.com&quot;</span></span><br><span class="line">    <span class="comment">#     CommonName: foo27.org5.example.com # overrides Hostname-based FQDN set above</span></span><br><span class="line">    <span class="comment">#     SANS:</span></span><br><span class="line">    <span class="comment">#       - &quot;bar.&#123;&#123;.Domain&#125;&#125;&quot;</span></span><br><span class="line">    <span class="comment">#       - &quot;altfoo.&#123;&#123;.Domain&#125;&#125;&quot;</span></span><br><span class="line">    <span class="comment">#       - &quot;&#123;&#123;.Hostname&#125;&#125;.org6.net&quot;</span></span><br><span class="line">    <span class="comment">#       - 172.16.10.31</span></span><br><span class="line">    <span class="comment">#   - Hostname: bar</span></span><br><span class="line">    <span class="comment">#   - Hostname: baz</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># -------------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment"># &quot;Template&quot;</span></span><br><span class="line">    <span class="comment"># -------------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment"># 允许定义一个或多个按顺序创建的主机 （组织节点的生成模板）</span></span><br><span class="line">    <span class="comment"># 默认情况下，这看起来像“peer%d”，从0到Count-1。</span></span><br><span class="line">    <span class="comment"># 您可以覆盖节点数（Count）、起始索引（Start）</span></span><br><span class="line">    <span class="comment"># 或用于构造名称（主机名）的模板。</span></span><br><span class="line">    <span class="comment"># 注：模板和规范不是互斥的。你可以定义两者</span></span><br><span class="line">    <span class="comment"># 将为您创建节和聚合节点。小心名称冲突</span></span><br><span class="line">    <span class="comment"># -------------------------------------------------------------------------</span></span><br><span class="line">    <span class="attr">Template:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">1</span>  <span class="comment">#一个组织生成count个节点</span></span><br><span class="line">      <span class="comment"># Start: 5</span></span><br><span class="line">      <span class="comment"># Hostname: &#123;&#123;.Prefix&#125;&#125;&#123;&#123;.Index&#125;&#125; # default</span></span><br><span class="line">      <span class="comment"># SANS:</span></span><br><span class="line">      <span class="comment">#   - &quot;&#123;&#123;.Hostname&#125;&#125;.alt.&#123;&#123;.Domain&#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment"># &quot;Users&quot;</span></span><br><span class="line">    <span class="comment"># ---------------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment"># Count: 除Admin之外的用户帐户数</span></span><br><span class="line">    <span class="comment"># ---------------------------------------------------------------------------</span></span><br><span class="line">    <span class="attr">Users:</span>  <span class="comment"># 组织中实际操作人员的个数</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------</span></span><br><span class="line">  <span class="comment"># Org2: 参考组织1的配置</span></span><br><span class="line">  <span class="comment"># ---------------------------------------------------------------------------</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">Org2</span></span><br><span class="line">    <span class="attr">Domain:</span> <span class="string">org2.example.com</span></span><br><span class="line">    <span class="attr">EnableNodeOUs:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">Template:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">Users:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>使用<code>cryptogen generate  --config=cryp_config.yaml</code> 指定使用自定义的配置文件在<code>crypto-config</code>文件夹下生成order和peer的证书文件</p><p><img data-src="https://pic.imgdb.cn/item/60e045ed5132923bf8f7b0d1.jpg" class="lazyload"></p></li></ol><h3 id="通道配置"><a href="#通道配置" class="headerlink" title="通道配置"></a>通道配置</h3><blockquote><p>通过构建通道创建交易并将交易提交给排序服务来创建通道。通道创建交易指定通道的初始配置，并由排序服务用于写入通道创世块。使用<a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/commands/configtxgen.html">configtxgen</a>工具读取定义通道配置的<code>configtx.yaml</code>文件，然后将相关信息写入通道创建交易中来工作。</p></blockquote><p>需要注意的是Fabric2.2和2.3的 <a href="https://github.com/hyperledger/fabric-samples/blob/main/test-network/configtx/configtx.yaml">configtx.yaml</a> 的配置不同！！！<a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/create_channel/create_channel_config.html">详情参考</a></p><ol><li><p>copy 官方实例的 <a href="https://github.com/hyperledger/fabric-samples/blob/main/test-network/configtx/configtx.yaml">configtx.yaml</a> </p></li><li><p>修改为2.2版本的样子</p></li><li><p>修改证书路径为刚才生成的路径</p><p><img data-src="https://pic.imgdb.cn/item/60e05ed25132923bf86ecbf0.jpg" class="lazyload"></p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Copyright IBM Corp. All Rights Reserved.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   Section: Organizations</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   - This section defines the different organizational identities which will</span></span><br><span class="line"><span class="comment">#   be referenced later in the configuration.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">Organizations:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># SampleOrg defines an MSP using the sampleconfig.  It should never be used</span></span><br><span class="line">    <span class="comment"># in production but may be used as a template for other definitions</span></span><br><span class="line">    <span class="bullet">-</span> <span class="meta">&amp;OrdererOrg</span></span><br><span class="line">        <span class="comment"># DefaultOrg defines the organization which is used in the sampleconfig</span></span><br><span class="line">        <span class="comment"># of the fabric.git development environment</span></span><br><span class="line">        <span class="attr">Name:</span> <span class="string">OrdererOrg</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># ID to load the MSP definition as</span></span><br><span class="line">        <span class="attr">ID:</span> <span class="string">OrdererMSP</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># MSPDir is the filesystem path which contains the MSP configuration</span></span><br><span class="line">        <span class="attr">MSPDir:</span> <span class="string">crypto-config/ordererOrganizations/example.com/msp</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Policies defines the set of policies at this level of the config tree</span></span><br><span class="line">        <span class="comment"># For organization policies, their canonical path is usually</span></span><br><span class="line">        <span class="comment">#   /Channel/&lt;Application|Orderer&gt;/&lt;OrgName&gt;/&lt;PolicyName&gt;</span></span><br><span class="line">        <span class="attr">Policies:</span></span><br><span class="line">            <span class="attr">Readers:</span></span><br><span class="line">                <span class="attr">Type:</span> <span class="string">Signature</span></span><br><span class="line">                <span class="attr">Rule:</span> <span class="string">&quot;OR(&#x27;OrdererMSP.member&#x27;)&quot;</span></span><br><span class="line">            <span class="attr">Writers:</span></span><br><span class="line">                <span class="attr">Type:</span> <span class="string">Signature</span></span><br><span class="line">                <span class="attr">Rule:</span> <span class="string">&quot;OR(&#x27;OrdererMSP.member&#x27;)&quot;</span></span><br><span class="line">            <span class="attr">Admins:</span></span><br><span class="line">                <span class="attr">Type:</span> <span class="string">Signature</span></span><br><span class="line">                <span class="attr">Rule:</span> <span class="string">&quot;OR(&#x27;OrdererMSP.admin&#x27;)&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">OrdererEndpoints:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">orderer.example.com:7050</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="meta">&amp;Org1</span></span><br><span class="line">        <span class="comment"># DefaultOrg defines the organization which is used in the sampleconfig</span></span><br><span class="line">        <span class="comment"># of the fabric.git development environment</span></span><br><span class="line">        <span class="attr">Name:</span> <span class="string">Org1MSP</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># ID to load the MSP definition as</span></span><br><span class="line">        <span class="attr">ID:</span> <span class="string">Org1MSP</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">MSPDir:</span> <span class="string">crypto-config/peerOrganizations/org1.example.com/msp</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 每个peer节点 配属一个锚节点</span></span><br><span class="line">        <span class="attr">AnchorPeers:</span></span><br><span class="line">            <span class="comment"># AnchorPeers defines the location of peers which can be used</span></span><br><span class="line">            <span class="comment"># for cross org gossip communication.  Note, this value is only</span></span><br><span class="line">            <span class="comment"># encoded in the genesis block in the Application section context</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">Host:</span> <span class="string">peer0.org1.example.com</span></span><br><span class="line">              <span class="attr">Port:</span> <span class="number">7051</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Policies defines the set of policies at this level of the config tree</span></span><br><span class="line">        <span class="comment"># For organization policies, their canonical path is usually</span></span><br><span class="line">        <span class="comment">#   /Channel/&lt;Application|Orderer&gt;/&lt;OrgName&gt;/&lt;PolicyName&gt;</span></span><br><span class="line">        <span class="attr">Policies:</span></span><br><span class="line">            <span class="attr">Readers:</span></span><br><span class="line">                <span class="attr">Type:</span> <span class="string">Signature</span></span><br><span class="line">                <span class="attr">Rule:</span> <span class="string">&quot;OR(&#x27;Org1MSP.admin&#x27;, &#x27;Org1MSP.peer&#x27;, &#x27;Org1MSP.client&#x27;)&quot;</span></span><br><span class="line">            <span class="attr">Writers:</span></span><br><span class="line">                <span class="attr">Type:</span> <span class="string">Signature</span></span><br><span class="line">                <span class="attr">Rule:</span> <span class="string">&quot;OR(&#x27;Org1MSP.admin&#x27;, &#x27;Org1MSP.client&#x27;)&quot;</span></span><br><span class="line">            <span class="attr">Admins:</span></span><br><span class="line">                <span class="attr">Type:</span> <span class="string">Signature</span></span><br><span class="line">                <span class="attr">Rule:</span> <span class="string">&quot;OR(&#x27;Org1MSP.admin&#x27;)&quot;</span></span><br><span class="line">            <span class="attr">Endorsement:</span></span><br><span class="line">                <span class="attr">Type:</span> <span class="string">Signature</span></span><br><span class="line">                <span class="attr">Rule:</span> <span class="string">&quot;OR(&#x27;Org1MSP.peer&#x27;)&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="meta">&amp;Org2</span></span><br><span class="line">        <span class="comment"># DefaultOrg defines the organization which is used in the sampleconfig</span></span><br><span class="line">        <span class="comment"># of the fabric.git development environment</span></span><br><span class="line">        <span class="attr">Name:</span> <span class="string">Org2MSP</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># ID to load the MSP definition as</span></span><br><span class="line">        <span class="attr">ID:</span> <span class="string">Org2MSP</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">MSPDir:</span> <span class="string">crypto-config/peerOrganizations/org2.example.com/msp</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 每个peer节点 配属一个锚节点</span></span><br><span class="line">        <span class="attr">AnchorPeers:</span></span><br><span class="line">            <span class="comment"># AnchorPeers defines the location of peers which can be used</span></span><br><span class="line">            <span class="comment"># for cross org gossip communication.  Note, this value is only</span></span><br><span class="line">            <span class="comment"># encoded in the genesis block in the Application section context</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">Host:</span> <span class="string">peer0.org2.example.com</span></span><br><span class="line">              <span class="attr">Port:</span> <span class="number">9051</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Policies defines the set of policies at this level of the config tree</span></span><br><span class="line">        <span class="comment"># For organization policies, their canonical path is usually</span></span><br><span class="line">        <span class="comment">#   /Channel/&lt;Application|Orderer&gt;/&lt;OrgName&gt;/&lt;PolicyName&gt;</span></span><br><span class="line">        <span class="attr">Policies:</span></span><br><span class="line">            <span class="attr">Readers:</span></span><br><span class="line">                <span class="attr">Type:</span> <span class="string">Signature</span></span><br><span class="line">                <span class="attr">Rule:</span> <span class="string">&quot;OR(&#x27;Org2MSP.admin&#x27;, &#x27;Org2MSP.peer&#x27;, &#x27;Org2MSP.client&#x27;)&quot;</span></span><br><span class="line">            <span class="attr">Writers:</span></span><br><span class="line">                <span class="attr">Type:</span> <span class="string">Signature</span></span><br><span class="line">                <span class="attr">Rule:</span> <span class="string">&quot;OR(&#x27;Org2MSP.admin&#x27;, &#x27;Org2MSP.client&#x27;)&quot;</span></span><br><span class="line">            <span class="attr">Admins:</span></span><br><span class="line">                <span class="attr">Type:</span> <span class="string">Signature</span></span><br><span class="line">                <span class="attr">Rule:</span> <span class="string">&quot;OR(&#x27;Org2MSP.admin&#x27;)&quot;</span></span><br><span class="line">            <span class="attr">Endorsement:</span></span><br><span class="line">                <span class="attr">Type:</span> <span class="string">Signature</span></span><br><span class="line">                <span class="attr">Rule:</span> <span class="string">&quot;OR(&#x27;Org2MSP.peer&#x27;)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   SECTION: Capabilities</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   - This section defines the capabilities of fabric network. This is a new</span></span><br><span class="line"><span class="comment">#   concept as of v1.1.0 and should not be utilized in mixed networks with</span></span><br><span class="line"><span class="comment">#   v1.0.x peers and orderers.  Capabilities define features which must be</span></span><br><span class="line"><span class="comment">#   present in a fabric binary for that binary to safely participate in the</span></span><br><span class="line"><span class="comment">#   fabric network.  For instance, if a new MSP type is added, newer binaries</span></span><br><span class="line"><span class="comment">#   might recognize and validate the signatures from this type, while older</span></span><br><span class="line"><span class="comment">#   binaries without this support would be unable to validate those</span></span><br><span class="line"><span class="comment">#   transactions.  This could lead to different versions of the fabric binaries</span></span><br><span class="line"><span class="comment">#   having different world states.  Instead, defining a capability for a channel</span></span><br><span class="line"><span class="comment">#   informs those binaries without this capability that they must cease</span></span><br><span class="line"><span class="comment">#   processing transactions until they have been upgraded.  For v1.0.x if any</span></span><br><span class="line"><span class="comment">#   capabilities are defined (including a map with all capabilities turned off)</span></span><br><span class="line"><span class="comment">#   then the v1.0.x peer will deliberately crash.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">Capabilities:</span></span><br><span class="line">    <span class="comment"># Channel capabilities apply to both the orderers and the peers and must be</span></span><br><span class="line">    <span class="comment"># supported by both.</span></span><br><span class="line">    <span class="comment"># Set the value of the capability to true to require it.</span></span><br><span class="line">    <span class="attr">Channel:</span> <span class="meta">&amp;ChannelCapabilities</span></span><br><span class="line">        <span class="comment"># V2_0 capability ensures that orderers and peers behave according</span></span><br><span class="line">        <span class="comment"># to v2.0 channel capabilities. Orderers and peers from</span></span><br><span class="line">        <span class="comment"># prior releases would behave in an incompatible way, and are therefore</span></span><br><span class="line">        <span class="comment"># not able to participate in channels at v2.0 capability.</span></span><br><span class="line">        <span class="comment"># Prior to enabling V2.0 channel capabilities, ensure that all</span></span><br><span class="line">        <span class="comment"># orderers and peers on a channel are at v2.0.0 or later.</span></span><br><span class="line">        <span class="attr">V2_0:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Orderer capabilities apply only to the orderers, and may be safely</span></span><br><span class="line">    <span class="comment"># used with prior release peers.</span></span><br><span class="line">    <span class="comment"># Set the value of the capability to true to require it.</span></span><br><span class="line">    <span class="attr">Orderer:</span> <span class="meta">&amp;OrdererCapabilities</span></span><br><span class="line">        <span class="comment"># V2_0 orderer capability ensures that orderers behave according</span></span><br><span class="line">        <span class="comment"># to v2.0 orderer capabilities. Orderers from</span></span><br><span class="line">        <span class="comment"># prior releases would behave in an incompatible way, and are therefore</span></span><br><span class="line">        <span class="comment"># not able to participate in channels at v2.0 orderer capability.</span></span><br><span class="line">        <span class="comment"># Prior to enabling V2.0 orderer capabilities, ensure that all</span></span><br><span class="line">        <span class="comment"># orderers on channel are at v2.0.0 or later.</span></span><br><span class="line">        <span class="attr">V2_0:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Application capabilities apply only to the peer network, and may be safely</span></span><br><span class="line">    <span class="comment"># used with prior release orderers.</span></span><br><span class="line">    <span class="comment"># Set the value of the capability to true to require it.</span></span><br><span class="line">    <span class="attr">Application:</span> <span class="meta">&amp;ApplicationCapabilities</span></span><br><span class="line">        <span class="comment"># V2_0 application capability ensures that peers behave according</span></span><br><span class="line">        <span class="comment"># to v2.0 application capabilities. Peers from</span></span><br><span class="line">        <span class="comment"># prior releases would behave in an incompatible way, and are therefore</span></span><br><span class="line">        <span class="comment"># not able to participate in channels at v2.0 application capability.</span></span><br><span class="line">        <span class="comment"># Prior to enabling V2.0 application capabilities, ensure that all</span></span><br><span class="line">        <span class="comment"># peers on channel are at v2.0.0 or later.</span></span><br><span class="line">        <span class="attr">V2_0:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   SECTION: Application</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   - This section defines the values to encode into a config transaction or</span></span><br><span class="line"><span class="comment">#   genesis block for application related parameters</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">Application:</span> <span class="meta">&amp;ApplicationDefaults</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Organizations is the list of orgs which are defined as participants on</span></span><br><span class="line">    <span class="comment"># the application side of the network</span></span><br><span class="line">    <span class="attr">Organizations:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Policies defines the set of policies at this level of the config tree</span></span><br><span class="line">    <span class="comment"># For Application policies, their canonical path is</span></span><br><span class="line">    <span class="comment">#   /Channel/Application/&lt;PolicyName&gt;</span></span><br><span class="line">    <span class="attr">Policies:</span></span><br><span class="line">        <span class="attr">Readers:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">ImplicitMeta</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;ANY Readers&quot;</span></span><br><span class="line">        <span class="attr">Writers:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">ImplicitMeta</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;ANY Writers&quot;</span></span><br><span class="line">        <span class="attr">Admins:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">ImplicitMeta</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;MAJORITY Admins&quot;</span></span><br><span class="line">        <span class="attr">LifecycleEndorsement:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">ImplicitMeta</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;MAJORITY Endorsement&quot;</span></span><br><span class="line">        <span class="attr">Endorsement:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">ImplicitMeta</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;MAJORITY Endorsement&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">Capabilities:</span></span><br><span class="line">        <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationCapabilities</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   SECTION: Orderer</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   - This section defines the values to encode into a config transaction or</span></span><br><span class="line"><span class="comment">#   genesis block for orderer related parameters</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">Orderer:</span> <span class="meta">&amp;OrdererDefaults</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Orderer Type: The orderer implementation to start</span></span><br><span class="line">    <span class="attr">OrdererType:</span> <span class="string">etcdraft</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Addresses used to be the list of orderer addresses that clients and peers</span></span><br><span class="line">    <span class="comment"># could connect to.  However, this does not allow clients to associate orderer</span></span><br><span class="line">    <span class="comment"># addresses and orderer organizations which can be useful for things such</span></span><br><span class="line">    <span class="comment"># as TLS validation.  The preferred way to specify orderer addresses is now</span></span><br><span class="line">    <span class="comment"># to include the OrdererEndpoints item in your org definition</span></span><br><span class="line">    <span class="attr">Addresses:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">orderer.example.com:7050</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">EtcdRaft:</span></span><br><span class="line">        <span class="attr">Consenters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">Host:</span> <span class="string">orderer.example.com</span></span><br><span class="line">          <span class="attr">Port:</span> <span class="number">7050</span></span><br><span class="line">          <span class="attr">ClientTLSCert:</span> <span class="string">crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.crt</span></span><br><span class="line">          <span class="attr">ServerTLSCert:</span> <span class="string">crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.crt</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Batch Timeout: The amount of time to wait before creating a batch</span></span><br><span class="line">    <span class="attr">BatchTimeout:</span> <span class="string">2s</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Batch Size: Controls the number of messages batched into a block</span></span><br><span class="line">    <span class="attr">BatchSize:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Max Message Count: The maximum number of messages to permit in a batch</span></span><br><span class="line">        <span class="attr">MaxMessageCount:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Absolute Max Bytes: The absolute maximum number of bytes allowed for</span></span><br><span class="line">        <span class="comment"># the serialized messages in a batch.</span></span><br><span class="line">        <span class="attr">AbsoluteMaxBytes:</span> <span class="number">99</span> <span class="string">MB</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Preferred Max Bytes: The preferred maximum number of bytes allowed for</span></span><br><span class="line">        <span class="comment"># the serialized messages in a batch. A message larger than the preferred</span></span><br><span class="line">        <span class="comment"># max bytes will result in a batch larger than preferred max bytes.</span></span><br><span class="line">        <span class="attr">PreferredMaxBytes:</span> <span class="number">512</span> <span class="string">KB</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Organizations is the list of orgs which are defined as participants on</span></span><br><span class="line">    <span class="comment"># the orderer side of the network</span></span><br><span class="line">    <span class="attr">Organizations:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Policies defines the set of policies at this level of the config tree</span></span><br><span class="line">    <span class="comment"># For Orderer policies, their canonical path is</span></span><br><span class="line">    <span class="comment">#   /Channel/Orderer/&lt;PolicyName&gt;</span></span><br><span class="line">    <span class="attr">Policies:</span></span><br><span class="line">        <span class="attr">Readers:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">ImplicitMeta</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;ANY Readers&quot;</span></span><br><span class="line">        <span class="attr">Writers:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">ImplicitMeta</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;ANY Writers&quot;</span></span><br><span class="line">        <span class="attr">Admins:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">ImplicitMeta</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;MAJORITY Admins&quot;</span></span><br><span class="line">        <span class="comment"># BlockValidation specifies what signatures must be included in the block</span></span><br><span class="line">        <span class="comment"># from the orderer for the peer to validate it.</span></span><br><span class="line">        <span class="attr">BlockValidation:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">ImplicitMeta</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;ANY Writers&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   CHANNEL</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   本节定义要编码到配置事务或通道相关参数的genesis区块。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">Channel:</span> <span class="meta">&amp;ChannelDefaults</span></span><br><span class="line">    <span class="comment"># Policies defines the set of policies at this level of the config tree</span></span><br><span class="line">    <span class="comment"># For Channel policies, their canonical path is</span></span><br><span class="line">    <span class="comment">#   /Channel/&lt;PolicyName&gt;</span></span><br><span class="line">    <span class="attr">Policies:</span></span><br><span class="line">        <span class="comment"># Who may invoke the &#x27;Deliver&#x27; API</span></span><br><span class="line">        <span class="attr">Readers:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">ImplicitMeta</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;ANY Readers&quot;</span></span><br><span class="line">        <span class="comment"># Who may invoke the &#x27;Broadcast&#x27; API</span></span><br><span class="line">        <span class="attr">Writers:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">ImplicitMeta</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;ANY Writers&quot;</span></span><br><span class="line">        <span class="comment"># By default, who may modify elements at this config level</span></span><br><span class="line">        <span class="attr">Admins:</span></span><br><span class="line">            <span class="attr">Type:</span> <span class="string">ImplicitMeta</span></span><br><span class="line">            <span class="attr">Rule:</span> <span class="string">&quot;MAJORITY Admins&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Capabilities describes the channel level capabilities, see the</span></span><br><span class="line">    <span class="comment"># dedicated Capabilities section elsewhere in this file for a full</span></span><br><span class="line">    <span class="comment"># description</span></span><br><span class="line">    <span class="attr">Capabilities:</span></span><br><span class="line">        <span class="string">&lt;&lt;:</span> <span class="meta">*ChannelCapabilities</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   Profile</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   - 这里可以对不同的配置概要文件进行编码以进行指定,作为configtxgen工具的参数</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">Profiles:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">TwoOrgsOrdererGenesis:</span></span><br><span class="line">        <span class="string">&lt;&lt;:</span> <span class="meta">*ChannelDefaults</span></span><br><span class="line">        <span class="attr">Orderer:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*OrdererDefaults</span></span><br><span class="line">            <span class="attr">Organizations:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="meta">*OrdererOrg</span></span><br><span class="line">            <span class="attr">Capabilities:</span></span><br><span class="line">                <span class="string">&lt;&lt;:</span> <span class="meta">*OrdererCapabilities</span></span><br><span class="line">        <span class="attr">Consortiums:</span></span><br><span class="line">            <span class="attr">SampleConsortium:</span></span><br><span class="line">                <span class="attr">Organizations:</span></span><br><span class="line">                    <span class="bullet">-</span> <span class="meta">*Org1</span></span><br><span class="line">                    <span class="bullet">-</span> <span class="meta">*Org2</span></span><br><span class="line">    <span class="attr">TwoOrgsChannel:</span></span><br><span class="line">        <span class="attr">Consortium:</span> <span class="string">SampleConsortium</span></span><br><span class="line">        <span class="string">&lt;&lt;:</span> <span class="meta">*ChannelDefaults</span></span><br><span class="line">        <span class="attr">Application:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationDefaults</span></span><br><span class="line">            <span class="attr">Organizations:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="meta">*Org1</span></span><br><span class="line">                <span class="bullet">-</span> <span class="meta">*Org2</span></span><br><span class="line">            <span class="attr">Capabilities:</span></span><br><span class="line">                <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationCapabilities</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p>使用<code>configtxgen</code> 命令，基于 <code>configtx.yaml</code> 创建和查看通道配置相关构件。</p><ul><li><p><strong>输出初始区块</strong>: 将通道 <code>orderer-system-channel</code> 和轮廓（Profile） <code>TwoOrgsOrdererGenesis</code> 的创世区块写入 <code>genesis.block</code> 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configtxgen -outputBlock ./channel-artifacts/genesis.block -profile TwoOrgsOrdererGenesis -channelID orderer-system-channel</span><br></pre></td></tr></table></figure></li><li><p><strong>输出创建通道的交易</strong> 将轮廓 <code>TwoOrgsChannel</code> 的通道创建交易写入 <code>channel.tx</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configtxgen -outputCreateChannelTx ./channel-artifacts/channel.tx -profile TwoOrgsChannel -channelID mychannel</span><br></pre></td></tr></table></figure></li><li><p><strong>输出组织1和2的锚节点</strong> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">configtxgen -outputAnchorPeersUpdate ./channel-artifacts/org1_anchor_peer.tx -profile TwoOrgsChannel -asOrg Org1MSP -channelID mychannel</span><br><span class="line"></span><br><span class="line">configtxgen -outputAnchorPeersUpdate ./channel-artifacts/org2_anchor_peer.tx -profile TwoOrgsChannel -asOrg Org2MSP -channelID mychannel</span><br><span class="line"></span><br><span class="line">若出错，Org1，即peer节点的配置少了下面的属性：</span><br><span class="line">         # 每个peer节点 配属一个锚节点</span><br><span class="line">        AnchorPeers:</span><br><span class="line">            # AnchorPeers defines the location of peers which can be used</span><br><span class="line">            # for cross org gossip communication.  Note, this value is only</span><br><span class="line">         # encoded in the genesis block in the Application section context</span><br><span class="line">            - Host: peer0.org1.example.com</span><br><span class="line">           Port: 7051</span><br></pre></td></tr></table></figure></li><li><p><strong>查看创世区块</strong>  将通道创建交易 <code>create_chan_tx.pb</code> 以 JSON 的格式打印到屏幕上。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configtxgen -inspectBlock ./channel-artifacts/genesis.block</span><br></pre></td></tr></table></figure></li><li><p><strong>查看创建通道的交易</strong>  将创世区块 <code>channel.tx</code> 以 JSON 格式打印到屏幕上。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configtxgen -inspectChannelCreateTx ./channel-artifacts/channel.tx</span><br></pre></td></tr></table></figure></li><li><p><strong>打印组织定义</strong>  基于 <code>configtx.yaml</code> 的配置项（比如 MSPdir）来构建组织并以 JSON 格式打印到屏幕。（常用于创建通道时的重新配置，例如添加成员）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configtxgen -printOrg Org1MSP</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="部署节点"><a href="#部署节点" class="headerlink" title="部署节点"></a>部署节点</h3><h5 id="创建一个-peer-节点"><a href="#创建一个-peer-节点" class="headerlink" title="创建一个 peer 节点"></a>创建一个 peer 节点</h5><blockquote><p>在创建 peer 节点之前，你需要为 peer 节点定制配置文件<a href="https://github.com/hyperledger/fabric/blob/main/sampleconfig/core.yaml">core.yaml</a>。</p></blockquote><p>方法一：直接启动</p><p>方法二：启动<a href="https://hub.docker.com/r/hyperledger/fabric-peer">docker容器</a>（推荐）</p><h5 id="创建一个orderer-节点"><a href="#创建一个orderer-节点" class="headerlink" title="创建一个orderer 节点"></a>创建一个orderer 节点</h5><blockquote><p>在创建 orderer 节点之前，你需要为 orderer 节点定制配置文件<a href="https://github.com/hyperledger/fabric/blob/main/sampleconfig/orderer.yaml">orderer.yaml</a>。</p></blockquote><p>启动<a href="https://hub.docker.com/r/hyperledger/fabric-orderer">docker容器</a>（推荐）</p><h5 id="基于docker-compose创建节点容器"><a href="#基于docker-compose创建节点容器" class="headerlink" title="基于docker-compose创建节点容器"></a>基于docker-compose创建节点容器</h5><blockquote><p>参考Fabric-sample的<a href="https://github.com/hyperledger/fabric-samples/blob/main/test-network/docker/docker-compose-test-net.yaml">官方配置</a></p></blockquote><p>docker-compose.yaml文件如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Copyright IBM Corp. All Rights Reserved.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2.2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">orderer.example.com:</span></span><br><span class="line">  <span class="attr">peer0.org1.example.com:</span></span><br><span class="line">  <span class="attr">peer0.org2.example.com:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">twonodes_test</span>  <span class="comment"># 自定义网络名</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">orderer.example.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">orderer.example.com</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-orderer:latest</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_LOGGING_SPEC=INFO</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LISTENADDRESS=0.0.0.0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LISTENPORT=7050</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_GENESISMETHOD=file</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LOCALMSPID=OrdererMSP</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp</span></span><br><span class="line">      <span class="comment"># enabled TLS</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_KAFKA_TOPIC_REPLICATIONFACTOR=1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_KAFKA_VERBOSE=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/var/hyperledger/orderer/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/var/hyperledger/orderer/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_CLUSTER_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/opt/gopath/src/github.com/hyperledger/fabric</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">orderer</span></span><br><span class="line">    <span class="attr">volumes:</span>            <span class="comment"># 修改为自定义文件路径</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/msp:/var/hyperledger/orderer/msp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tls/:/var/hyperledger/orderer/tls</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">orderer.example.com:/var/hyperledger/production/orderer</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">7050</span><span class="string">:7050</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer0.org1.example.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer0.org1.example.com</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-peer:latest</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment">#Generic peer variables</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span></span><br><span class="line">      <span class="comment"># the following setting starts chaincode containers on the same</span></span><br><span class="line">      <span class="comment"># bridge network as the peers</span></span><br><span class="line">      <span class="comment"># https://docs.docker.com/compose/networking/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=twonodes_test</span>     <span class="comment">#项目名_xxx</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_LOGGING_SPEC=INFO</span></span><br><span class="line">      <span class="comment">#- FABRIC_LOGGING_SPEC=DEBUG</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_PROFILE_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt</span></span><br><span class="line">      <span class="comment"># Peer specific variabes</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ID=peer0.org1.example.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ADDRESS=peer0.org1.example.com:7051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LISTENADDRESS=0.0.0.0:7051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODEADDRESS=peer0.org1.example.com:7052</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.example.com:7051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.example.com:7051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LOCALMSPID=Org1MSP</span></span><br><span class="line">    <span class="attr">volumes:</span>        <span class="comment"># 修改为自定义文件路径</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/host/var/run/docker.sock</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp:/etc/hyperledger/fabric/msp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls:/etc/hyperledger/fabric/tls</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">peer0.org1.example.com:/var/hyperledger/production</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/opt/gopath/src/github.com/hyperledger/fabric/peer</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">peer</span> <span class="string">node</span> <span class="string">start</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">7051</span><span class="string">:7051</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer0.org2.example.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer0.org2.example.com</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-peer:latest</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment">#Generic peer variables</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span></span><br><span class="line">      <span class="comment"># the following setting starts chaincode containers on the same</span></span><br><span class="line">      <span class="comment"># bridge network as the peers</span></span><br><span class="line">      <span class="comment"># https://docs.docker.com/compose/networking/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=twonodes_test</span>     <span class="comment">#项目名_xxx</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_LOGGING_SPEC=INFO</span></span><br><span class="line">      <span class="comment">#- FABRIC_LOGGING_SPEC=DEBUG</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_PROFILE_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt</span></span><br><span class="line">      <span class="comment"># Peer specific variabes</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ID=peer0.org2.example.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ADDRESS=peer0.org2.example.com:9051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LISTENADDRESS=0.0.0.0:9051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODEADDRESS=peer0.org2.example.com:9052</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:9052</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org2.example.com:9051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org2.example.com:9051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LOCALMSPID=Org2MSP</span></span><br><span class="line">    <span class="attr">volumes:</span>             <span class="comment"># 修改为自定义文件路径</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/host/var/run/docker.sock</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/msp:/etc/hyperledger/fabric/msp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls:/etc/hyperledger/fabric/tls</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">peer0.org2.example.com:/var/hyperledger/production</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/opt/gopath/src/github.com/hyperledger/fabric/peer</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">peer</span> <span class="string">node</span> <span class="string">start</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9051</span><span class="string">:9051</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将原有的cli分peer创建</span></span><br><span class="line">  <span class="attr">cli1:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">cli1</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-tools:latest</span></span><br><span class="line">    <span class="attr">tty:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">stdin_open:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#- FABRIC_LOGGING_SPEC=DEBUG</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/opt/gopath/src/github.com/hyperledger/fabric/peer</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GOPATH=/opt/gopath</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">FABRIC_LOGGING_SPEC=INFO</span></span><br><span class="line">        <span class="comment"># 参考Fabric 测试网络的command命令</span></span><br><span class="line">        <span class="comment"># Environment variables for Org1</span></span><br><span class="line">        <span class="comment"># export CORE_PEER_TLS_ENABLED=true</span></span><br><span class="line">        <span class="comment"># export CORE_PEER_LOCALMSPID=&quot;Org1MSP&quot;</span></span><br><span class="line">        <span class="comment"># export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span></span><br><span class="line">        <span class="comment"># export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span></span><br><span class="line">        <span class="comment"># export CORE_PEER_ADDRESS=localhost:7051</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ENABLED=true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">CORE_PEER_LOCALMSPID=Org1MSP</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">CORE_PEER_ADDRESS=peer0.org1.example.com:7051</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">/bin/bash</span></span><br><span class="line">    <span class="attr">volumes:</span>        <span class="comment"># 修改为映射路径</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/var/run/:/host/var/run/</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./chaincode/go:/opt/gopath/src/github.com/hyperledger/fabric/fabric-cluster/chaincode/go</span>      <span class="comment">#预留链码路径</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto-config/</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">cli2:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">cli2</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-tools:latest</span></span><br><span class="line">    <span class="attr">tty:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">stdin_open:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#- FABRIC_LOGGING_SPEC=DEBUG</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/opt/gopath/src/github.com/hyperledger/fabric/peer</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">GOPATH=/opt/gopath</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">FABRIC_LOGGING_SPEC=INFO</span></span><br><span class="line">        <span class="comment"># 参考Fabric 测试网络的command命令</span></span><br><span class="line">        <span class="comment"># Environment variables for Org1</span></span><br><span class="line">        <span class="comment"># export CORE_PEER_TLS_ENABLED=true</span></span><br><span class="line">        <span class="comment"># export CORE_PEER_LOCALMSPID=&quot;Org1MSP&quot;</span></span><br><span class="line">        <span class="comment"># export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span></span><br><span class="line">        <span class="comment"># export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span></span><br><span class="line">        <span class="comment"># export CORE_PEER_ADDRESS=localhost:7051</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ENABLED=true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">CORE_PEER_LOCALMSPID=Org2MSP</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto-config/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">CORE_PEER_ADDRESS=peer0.org2.example.com:9051</span>     <span class="comment"># 注意上面的配置和端口与实际路径对应</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="attr">command:</span> <span class="string">/bin/bash</span></span><br><span class="line">    <span class="attr">volumes:</span>        <span class="comment"># 修改为映射路径</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/var/run/:/host/var/run/</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./chaincode/go:/opt/gopath/src/github.com/hyperledger/fabric/fabric-cluster/chaincode/go</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto-config/</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><p>运行docker-compose生成容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h4 id="节点与通道"><a href="#节点与通道" class="headerlink" title="节点与通道"></a>节点与通道</h4><blockquote><p>peer节点需要创建、加入、更新channel</p></blockquote><p>参考命令：<a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/commands/peerchannel.html">peer channel</a></p><ul><li><strong>在cli1中创建新通道</strong></li></ul><p>使用 <code>orderer.example.com:7050</code> 创建新的通道 <code>mychannel</code>，配置交易同样定义在 <code>./channel-artifacts/channel.tx</code> 文件中，CA证书文件路径，注意尽量不要使用相对路径！注意此处的CA证书地址是order的msp证书地址！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel create -c mychannel --orderer orderer.example.com:7050 -f ./channel-artifacts/channel.tx --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto-config/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br></pre></td></tr></table></figure><ul><li><p><strong>将cli1创建的mychannel.block 分发给需要加入此通道的容器</strong></p><p>在其他需要加入的容器中运行，如从cli1将block 复制到 cli2：</p></li></ul><p><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/deployment_guide_overview.html">Fabric2.2官方文档</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker cp cli1:/opt/gopath/src/github.com/hyperledger/fabric/peer/mychannel.block ./</span><br><span class="line"></span><br><span class="line">docker cp  ./mychannel.block  cli2:/opt/gopath/src/github.com/hyperledger/fabric/peer/mychannel.block</span><br></pre></td></tr></table></figure><ul><li><p><strong>节点加入channel</strong></p><p>在每个需要加入的容器中运行：</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel join -b mychannel.block</span><br></pre></td></tr></table></figure><h4 id="链码的安装与运行"><a href="#链码的安装与运行" class="headerlink" title="链码的安装与运行"></a>链码的安装与运行</h4><blockquote><p>本次以Fabric sample中的 <a href="https://github.com/hyperledger/fabric-samples/blob/main/chaincode/fabcar/go/fabcar.go">fabcar</a> 为例</p></blockquote><ol><li><p>将fabcar的代码文件放到docker的映射文件夹中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp fabcar.go /chaincode/go</span><br></pre></td></tr></table></figure></li><li><p>进入peer节点容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it cli1 bash</span><br></pre></td></tr></table></figure></li><li><p>为链码文件安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/gopath/src/github.com/hyperledger/fabric/fabric-cluster/chaincode/go</span><br><span class="line"></span><br><span class="line">go env -w  GOPROXY=https://goproxy.cn,direct</span><br><span class="line"></span><br><span class="line">go mod init</span><br><span class="line"></span><br><span class="line">go mod vendor</span><br></pre></td></tr></table></figure></li><li><p>打包链码，参考 <a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/commands/peerlifecycle.html">peer lifecycle chaincode</a> 命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode package fabcar.tar.gz --path /opt/gopath/src/github.com/hyperledger/fabric/fabric-cluster/chaincode/go --label fabcar</span><br></pre></td></tr></table></figure></li><li><p>同理，在需要安装的peer节点上打包此链码。</p></li><li><p>在每一个需要安装的节点上安装链码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install fabcar.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>每一个需要安装的节点都<strong>批准</strong>该链码，只有每一个组织都批准过后，该链码才能被安装在通道上。注意此处的CA证书地址是order的msp证书地址！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg --channelId mychannel --name fabcar --version 1.0 --init-required --package-id xxx由安装时系统产生 --sequence 1 --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br><span class="line"></span><br><span class="line">如：</span><br><span class="line">peer lifecycle chaincode approveformyorg --channelID mychannel --name fabcar --version 1.0 --init-required --package-id fabcar:3c3ee1baf40bcc1dc01148a53b7ff5192daed0de4514729020668f826864a119 --sequence 1 --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br></pre></td></tr></table></figure><p>其中package-id是安装链码时产生的，相同的链码产生的id是相同的。如：<code>fabcar:5af17c1dfebb54dfd8f7a58f1a3a12283b39132ce4273c6ae3b6fbfb994eb9b6</code></p></li><li><p>查询是否已经批准</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode checkcommitreadiness --channelID mychannel --name fabcar --version 1.0 --init-required  --sequence 1 --tls <span class="literal">true</span> --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --output json</span><br></pre></td></tr></table></figure></li><li><p>选择一个Peer节点提交链码即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o orderer.example.com:7050 --channelID mychannel --name fabcar --version 1.0 --init-required  --sequence 1 --tls <span class="literal">true</span> --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem \</span><br><span class="line">--peerAddresses peer0.org1.example.com:7051 \</span><br><span class="line">--tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt \</span><br><span class="line">--peerAddresses peer0.org2.example.com:9051 \</span><br><span class="line">--tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br></pre></td></tr></table></figure><p>注意此处的参数包括：order证书、各peer的地址和ca证书</p></li><li><p>测试链码</p><ul><li><p>invoke 执行，会对区块数据产生影响，需要审核验证</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o orderer.example.com:7050 -C mychannel -n fabcar --isInit --ordererTLSHostnameOverride orderer.example.com --tls <span class="literal">true</span> --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem \</span><br><span class="line">--peerAddresses peer0.org1.example.com:7051 \</span><br><span class="line">--tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt \</span><br><span class="line">--peerAddresses peer0.org2.example.com:9051 \</span><br><span class="line">--tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt \</span><br><span class="line">-c <span class="string">&#x27;&#123;&quot;Args&quot;:[&quot;InitLedger&quot;]&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>query 查询，单纯查询，不对数据产生影响</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C mychannel -n fabcar -c <span class="string">&#x27;&#123;&quot;Args&quot;:[&quot;QueryAllCars&quot;]&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">peer chaincode query -C mychannel -n fabcar -c <span class="string">&#x27;&#123;&quot;Args&quot;:[&quot;QueryCar&quot;,&quot;CAR4&quot;]&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><p><strong>总结：</strong></p><ol><li>Fabric基于配置文件<code>crypt_config.yaml</code>生成ca、orderer、peer等节点的公私钥和CA颁发的证书。</li><li>Fabric基于配置文件<code>configtx.yaml</code>生成包含系统channel配置信息的区块和组织节点的交易记录。</li><li>Docker基于环境变量生成相应容器</li><li>CLI节点创建通道并加入通道中</li><li>CLI节点打包、安装、批准、提交、运行链码</li></ol><p><strong>参考：</strong></p><p><a href="https://tinywell.com/2019/12/04/chaincode-lifecycle/">https://tinywell.com/2019/12/04/chaincode-lifecycle/</a></p><p><a href="https://www.bilibili.com/video/BV1EK4y1o73U/?spm_id_from=trigger_reload">https://www.bilibili.com/video/BV1EK4y1o73U/?spm_id_from=trigger_reload</a></p><p><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/commands/peerlifecycle.html">https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/commands/peerlifecycle.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fabirc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FabricCA机制详解</title>
      <link href="/2021/07/02/FabricCA%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3/"/>
      <url>/2021/07/02/FabricCA%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="Fabric-CA机制详解"><a href="#Fabric-CA机制详解" class="headerlink" title="Fabric CA机制详解"></a>Fabric CA机制详解</h2><blockquote><p>Fabric CA项目是超级账本Fabric内的MemberService组件, 对网络内各个实体的身份证书的管理。</p></blockquote><h3 id="Fabric-CA概述"><a href="#Fabric-CA概述" class="headerlink" title="Fabric CA概述"></a>Fabric CA概述</h3><p>Fabric 基于PKI 认证体系实现了：</p><ul><li>身份认证，或者从 LDAP（轻量目录访问协议） 中获取注册信息；</li><li>发行担保证书 ECerts (Enrollment Certificates)；</li><li>发行交易证书 TCerts (Transaction Certificates)，保障 Hyperledger Fabric 区域链交易平台上的信息匿名性和不可追踪性；</li><li>证书更新和撤销。</li></ul><p><img data-src="https://upload-images.jianshu.io/upload_images/6889115-f92a3b18fd41e8f3.png" class="lazyload"></p><p>有两种方式可以与Fabric CA服务器交互：使用Fabric CA客户端 或者 使用某种特定开发语言的Farbic SDK。</p><p>所有与Fabric CA服务器的通信都是 使用REST API。详情参考：<a href="https://github.com/hyperledger/fabric-ca/blob/main/swagger/swagger-fabric-ca.json">fabric-ca/swagger/swagger-fabric-ca.json文件</a></p><p>Fabric CA客户端或SDK可能连接到Fabric CA服务器集群 中的一个服务器，这一点可以查看上图的右上部分。客户端将请求提交给HA代理访问 端结点，HA代理进行负载均衡，并将客户端的请求路由给fabric-ca-server集群中的 某一成员服务器。</p><p>集群中的所有Fabric CA服务器共用同一个数据库，以跟踪身份和证书。 如果配置了LDAP，那么身份信息将保存在LDAP中而不是数据库里。</p><p>一个服务器可能包含多个CA，每个CA可能是根CA或者中间CA。</p><h3 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h3><ul><li><p>前置条件</p><ul><li><p>Go环境</p></li><li><p>安装好libtool 和 libtdhl-dev 包</p></li><li><p>克隆Fabric CA项目到本地,选择版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/hyperledger/fabric-ca.git</span><br><span class="line">git checkout v1.5.0</span><br></pre></td></tr></table></figure><p>此处需要注意，网上大部分教程为1.4版本。1.5版本fabric-ca项目目录已发生变化。</p></li><li><p>在<code>fabric-ca/bin</code>目录下有<code>fabric-ca-server</code>和<code>fabric-ca-client</code>工具类</p></li></ul></li><li><p>对CA服务端进行初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fabric-ca-server init -b admin:adminpw    </span><br></pre></td></tr></table></figure></li><li><p>初始化后在目录下生成</p><ul><li><strong>msp</strong>：包含keystore，CA服务器的私钥</li><li><strong>ca-cert.pem</strong>：CA服务器的证书</li><li><strong>fabric-ca-server.db</strong>：CA默认使用的嵌入型数据库 SQLite</li><li><strong>fabric-ca-server-config.yaml</strong>：CA服务端的配置文件</li></ul></li></ul><p>用户的注册过程分为<strong>登记（register）</strong>和<strong>注册（enroll）</strong>两步，注册操作需要拿到登记密码才能完成，且用户的登记需要有一个登记员用户。所以首先需要注册我们在启动时设置的管理员用户（admin的登记密码在启动时已设置），然后用这个admin用户来完成其他用户的登记操作。</p><h3 id="Fabric-CA-CLI"><a href="#Fabric-CA-CLI" class="headerlink" title="Fabric CA CLI"></a>Fabric CA CLI</h3><ul><li>Fabric CA server 命令，具体使用请参考：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">Hyperledger Fabric Certificate Authority Server</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  fabric-ca-server [command]</span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  help        Help about any command</span><br><span class="line">  init        Initialize the fabric-ca server</span><br><span class="line">  start       Start the fabric-ca server</span><br><span class="line">  version     Prints Fabric CA Server version</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">      --address string                            Listening address of fabric-ca-server (default &quot;0.0.0.0&quot;)</span><br><span class="line">  -b, --boot string                               The user:pass for bootstrap admin which is required to build default config file</span><br><span class="line">      --ca.certfile string                        PEM-encoded CA certificate file (default &quot;ca-cert.pem&quot;)</span><br><span class="line">      --ca.chainfile string                       PEM-encoded CA chain file (default &quot;ca-chain.pem&quot;)</span><br><span class="line">      --ca.keyfile string                         PEM-encoded CA key file</span><br><span class="line">  -n, --ca.name string                            Certificate Authority name</span><br><span class="line">      --cacount int                               Number of non-default CA instances</span><br><span class="line">      --cafiles strings                           A list of comma-separated CA configuration files</span><br><span class="line">      --cfg.affiliations.allowremove              Enables removal of affiliations dynamically</span><br><span class="line">      --cfg.identities.allowremove                Enables removal of identities dynamically</span><br><span class="line">      --cfg.identities.passwordattempts int       Number of incorrect password attempts allowed (default 10)</span><br><span class="line">      --cors.enabled                              Enable CORS for the fabric-ca-server</span><br><span class="line">      --cors.origins strings                      Comma-separated list of Access-Control-Allow-Origin domains</span><br><span class="line">      --crl.expiry duration                       Expiration for the CRL generated by the gencrl request (default 24h0m0s)</span><br><span class="line">      --crlsizelimit int                          Size limit of an acceptable CRL in bytes (default 512000)</span><br><span class="line">      --csr.cn string                             The common name field of the certificate signing request to a parent fabric-ca-server</span><br><span class="line">      --csr.hosts strings                         A list of comma-separated host names in a certificate signing request to a parent fabric-ca-server</span><br><span class="line">      --csr.keyrequest.algo string                Specify key algorithm</span><br><span class="line">      --csr.keyrequest.reusekey                   Reuse existing key during reenrollment</span><br><span class="line">      --csr.keyrequest.size int                   Specify key size</span><br><span class="line">      --csr.serialnumber string                   The serial number in a certificate signing request to a parent fabric-ca-server</span><br><span class="line">      --db.datasource string                      Data source which is database specific (default &quot;fabric-ca-server.db&quot;)</span><br><span class="line">      --db.tls.certfiles strings                  A list of comma-separated PEM-encoded trusted certificate files (e.g. root1.pem,root2.pem)</span><br><span class="line">      --db.tls.client.certfile string             PEM-encoded certificate file when mutual authenticate is enabled</span><br><span class="line">      --db.tls.client.keyfile string              PEM-encoded key file when mutual authentication is enabled</span><br><span class="line">      --db.type string                            Type of database; one of: sqlite3, postgres, mysql (default &quot;sqlite3&quot;)</span><br><span class="line">  -h, --help                                      help for fabric-ca-server</span><br><span class="line">  -H, --home string                               Server&#x27;s home directory (default &quot;/etc/hyperledger/fabric-ca&quot;)</span><br><span class="line">      --idemix.nonceexpiration string             Duration after which a nonce expires (default &quot;15s&quot;)</span><br><span class="line">      --idemix.noncesweepinterval string          Interval at which expired nonces are deleted (default &quot;15m&quot;)</span><br><span class="line">      --idemix.rhpoolsize int                     Specifies revocation handle pool size (default 100)</span><br><span class="line">      --intermediate.enrollment.label string      Label to use in HSM operations</span><br><span class="line">      --intermediate.enrollment.profile string    Name of the signing profile to use in issuing the certificate</span><br><span class="line">      --intermediate.enrollment.type string       The type of enrollment request: &#x27;x509&#x27; or &#x27;idemix&#x27; (default &quot;x509&quot;)</span><br><span class="line">      --intermediate.parentserver.caname string   Name of the CA to connect to on fabric-ca-server</span><br><span class="line">  -u, --intermediate.parentserver.url string      URL of the parent fabric-ca-server (e.g. http://&lt;username&gt;:&lt;password&gt;@&lt;address&gt;:&lt;port)</span><br><span class="line">      --intermediate.tls.certfiles strings        A list of comma-separated PEM-encoded trusted certificate files (e.g. root1.pem,root2.pem)</span><br><span class="line">      --intermediate.tls.client.certfile string   PEM-encoded certificate file when mutual authenticate is enabled</span><br><span class="line">      --intermediate.tls.client.keyfile string    PEM-encoded key file when mutual authentication is enabled</span><br><span class="line">      --ldap.attribute.names strings              The names of LDAP attributes to request on an LDAP search</span><br><span class="line">      --ldap.enabled                              Enable the LDAP client for authentication and attributes</span><br><span class="line">      --ldap.groupfilter string                   The LDAP group filter for a single affiliation group (default &quot;(memberUid=%s)&quot;)</span><br><span class="line">      --ldap.tls.certfiles strings                A list of comma-separated PEM-encoded trusted certificate files (e.g. root1.pem,root2.pem)</span><br><span class="line">      --ldap.tls.client.certfile string           PEM-encoded certificate file when mutual authenticate is enabled</span><br><span class="line">      --ldap.tls.client.keyfile string            PEM-encoded key file when mutual authentication is enabled</span><br><span class="line">      --ldap.url string                           LDAP client URL of form ldap://adminDN:adminPassword@host[:port]/base</span><br><span class="line">      --ldap.userfilter string                    The LDAP user filter to use when searching for users (default &quot;(uid=%s)&quot;)</span><br><span class="line">      --loglevel string                           Set logging level (info, warning, debug, error, fatal, critical)</span><br><span class="line">  -p, --port int                                  Listening port of fabric-ca-server (default 7054)</span><br><span class="line">      --registry.maxenrollments int               Maximum number of enrollments; valid if LDAP not enabled (default -1)</span><br><span class="line">      --tls.certfile string                       PEM-encoded TLS certificate file for server&#x27;s listening port (default &quot;tls-cert.pem&quot;)</span><br><span class="line">      --tls.clientauth.certfiles strings          A list of comma-separated PEM-encoded trusted certificate files (e.g. root1.pem,root2.pem)</span><br><span class="line">      --tls.clientauth.type string                Policy the server will follow for TLS Client Authentication. (default &quot;noclientcert&quot;)</span><br><span class="line">      --tls.enabled                               Enable TLS on the listening port</span><br><span class="line">      --tls.keyfile string                        PEM-encoded TLS key for server&#x27;s listening port</span><br><span class="line"></span><br><span class="line">Use &quot;fabric-ca-server [command] --help&quot; for more information about a command.</span><br></pre></td></tr></table></figure><ul><li>Fabric CA client 命令，具体使用请参考：<a href="https://links.jianshu.com/go?to=https://hyperledger-fabric-ca.readthedocs.io/en/latest/clientcli.html">https://hyperledger-fabric-ca.readthedocs.io/en/latest/clientcli.html</a></li></ul><h3 id="Fabric-CA-配置"><a href="#Fabric-CA-配置" class="headerlink" title="Fabric CA 配置"></a>Fabric CA 配置</h3><p>Fabric CA 有三种设置配置的方法（优先级由高到低）： </p><ol><li><p>CLI 参数</p></li><li><p>环境变量</p></li><li><p>配置文件</p></li></ol><p>以下内容中，将演示如何改配置文件，但是配置文件的设置会被环境变量及CLI参数覆盖。</p><p>如下是client的配置文件:</p><p><img data-src="https://upload-images.jianshu.io/upload_images/6889115-ea0112ff3fd5a0e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/641/format/webp" class="lazyload"></p><h3 id="Fabric-CA-Server-命令分析"><a href="#Fabric-CA-Server-命令分析" class="headerlink" title="Fabric CA Server 命令分析"></a>Fabric CA Server 命令分析</h3><p>在启动服务器前要先初始化它。这个过程会产生一份默认的配置文件，然后你可以检查并修改。</p><p>Fabric CA服务器的home目录是这样决定的:</p><ol><li><p> 如果设置了 FABRIC_CA_SERVER_HOME 环境变量, 则就取它的值</p></li><li><p> 否则就取 FABRIC_CA_HOME 的值</p></li><li><p> 否则就取 CA_CFG_PATH 的值</p></li><li><p>否则就用当前的工作目录</p></li></ol><p>在本章节中, 我们假设已经设置了环境变量 FABRIC_CA_HOME 为 $HOME/fabric-ca/server。</p><p>下面的指令假设你已经将配置文件放在了服务器的home目录下。</p><blockquote><p>fabric-ca-server命令主要负责启动一个CA服务, 包括init和start两个子命令</p></blockquote><p><strong>初始化CA服务器</strong></p><p>用以下语句初始化CA服务器:</p><blockquote><p>fabric-ca-server init -b admin:adminpw</p></blockquote><p>当LDAP被禁用时，就必须要有这个 -b (代表“启动身份”bootstrap identity) 选项。 启动服务器必须要有启动身份; 这个身份就是管理员身份。</p><p>生成的配置文件fabric-ca-server-config.yaml类似下图：</p><p><img alt="img" data-src="https://upload-images.jianshu.io/upload_images/6889115-132cf8b3da77a55d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/798/format/webp" class="lazyload"></p><p>配置文件里可以配置证书签名请求域 (Certificate Signing Request简称CSR)，以下就是一个CSR域的示例。</p><p><img alt="img" data-src="https://upload-images.jianshu.io/upload_images/6889115-e49e5a53bf39741b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/833/format/webp" class="lazyload"></p><p>以上所有字段都对应了X.509证书的字段，即调用 <code>fabric-ca-server init</code> 生成的证书字段。 这个CSR的域设置效果等同于配置中的 ca.certfile （证书） 和 ca.keyfile  （密钥）两个配置域的组合。 配置了CSR域就是用这些信息自己给自己签名，ca.certfile和ca.keyfile是用这两个文件自签名。</p><p>字段解释如下:</p><p><strong>cn</strong> 证书名Common Name</p><p><strong>O</strong> 组织名organization name</p><p><strong>OU</strong> 组织单元organizational unit</p><p><strong>L</strong> 位置location or city</p><p><strong>ST</strong> 州state</p><p><strong>C</strong> 国家country</p><p>如果要配置CSR，就要把 ca.certfile 和 ca-keyfile 对应的文件删了。（官方默认是ca-cert.pem和ca-key.pem） 然后重新运行一下 <code>fabric-ca-server init -b admin:adminpw</code></p><p><code>fabric-ca-server init</code> 命令会生成一个自签名证书。</p><p>如果你要指定 CA 签名证书 和 key 文件， 你就得把文件放到 ca.certfile 和 ca.keyfile 的指定路径下。 </p><p>文件必须是PEM格式且不可加密。此处摘抄一句英文原文：</p><blockquote><p>Both files must be PEM-encoded and must not be encrypted.</p></blockquote><p>CA签名证书必须以 —–BEGIN CERTIFICATE—– 开头。 key 文件必须以 —–BEGIN PRIVATE KEY—– 开头，而不是—–BEGIN ENCRYPTED PRIVATE KEY—–。</p><p><strong>启动CA服务器</strong></p><p>用以下命令启动CA服务器：</p><blockquote><p>fabric-ca-server start -b <admin>:<adminpw></adminpw></admin></p></blockquote><p>第一次启动时，如果服务器未初始化，则会先进行初始化。</p><p>在初始化期间，如果发现 ca-cert.pem 和 ca-key.pem 不存在，则会先生成，如果配置文件不存在也会生成默认的配置文件。 </p><p>除非你用的是LDAP，否则你必须要先有一个预先注册好的bootstrap身份信息用来注册和登记其他身份信息。 用 -b 选项来指定bootstrap身份。</p><p>如果要让服务器监听 https 而不是 http，则需要设置 tls.enabled 为 true。</p><p>要限制同一个 secret (或 password) 的登记使用次数，需要给 registry.maxenrollments 配置项设置一个值。 如果设置为1, 则每个 enrollment ID只能被登记一次，如果设置为 -1, 则secret的登记使用次数不做限制。 默认值是-1。 如果设置为0, 则所有的身份或者是注册进来的身份都不能被登记了。</p><p>启动后，CA服务器监听端口是 7054。</p><p>总结： 先初始化，再读取配置文件，如果是Root CA就自己给自己创建证书和秘钥，如果不是就读取证书文件和秘钥文件的信息。最后启动网络服务监听端口信息。</p><h3 id="Fabric-CA-Client"><a href="#Fabric-CA-Client" class="headerlink" title="Fabric CA Client"></a>Fabric CA Client</h3><blockquote><p>使用Fabric CA Client 的命令连接 server。</p></blockquote><p><strong>准备工作</strong></p><p>请将配置文件放home目录下后，完成以下过程。</p><blockquote><p>enroll the bootstrap identity</p></blockquote><p>CA的账号概念是：先注册identity，它带有一个enrollment id，然后可以enroll具体的账号，可以在csr里指定属性。</p><p>一个账号的生命周期如下图所示：</p><p><img data-src="https://pic.imgdb.cn/item/60e024595132923bf8578772.jpg" class="lazyload"></p><p>（注：register字面的意思是注册，注册就是主体向 CA 自我介绍的过程；enroll字面的意思是登记，就是最终实体进行证书申请并从 CA 接收证书的过程）</p><p>从创建超级管理员到注册用户过程如下：</p><ul><li><p>bootstrap identity即超级管理员identity，注册是在ca-server初始化时完成的（用-b 选项指定enrollment ID和密码）。</p></li><li><p>client端配置好CSR，并enroll了超级管理员identity到home目录下的msp</p></li><li><p>client去向CA <strong>register</strong> user的identity，CA认可client的msp，client去向CA <strong>enroll</strong> 刚才user的msp。</p></li><li><p>根据需要自定义client home目录下配置文件中的CSR部分，其中<code>csr.cn</code>必须设置为bootstrap identity的enrollment ID。</p></li><li><p>然后运行 fabric-ca-client enroll 命令去enroll一个identity。例如, 以下命令会enroll一个ID是 <strong>admin</strong> 密码是 <strong>adminpw</strong> 的identity， 其调用的是运行在本地的监听7054端口的Fabric CA 服务器。</p></li></ul><blockquote><p>export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/admin</p><p>fabric-ca-client enroll -u <a href="http://admin:adminpw@localhost:7054/">http://admin:adminpw@localhost:7054</a></p></blockquote><p>enroll命令会存储一个登录证书（ECert），相对应的私钥，还有CA证书链PEM文件。这些存储在Fabric CA客户端的msp目录的子目录下，你会看到信息提示PEM存储在哪里。</p><p><strong>注册一个新身份</strong></p><p>只有已经enroll了的身份才能发起register的请求，而且必须有相应的权限来注册想要注册的身份类型。</p><p>特别地，注册时Fabric CA服务端做两项权限检查：</p><ol><li>注册发起者的“hf.Registrar.Roles”属性中必须有请求注册的类型。举个例子，如果发起者的“hf.Registrar.Roles”属性的值为“peer,app,user”，那么他能注册的类型为peer，app和user，不能注册orderer。</li><li>发起者的affiliation（联盟）必须与他请求注册的身份的affiliation相同，或者是所请求注affiliation的前缀。举个例子，一个affiliation为“a.b”的发起者，可以注册一个affiliation为“a.b.c”的身份，但是不能注册一个affiliation为“a.c”的身份。</li></ol><p>下面的命令使用admin身份的凭证来注册一个新的身份，登录ID是“admin2”，类型为“user”，affiliation为“org1.department1”，还有“hf.Revoker”属性为“true”。</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/admin</span><br><span class="line"></span><br><span class="line">fabric-ca-client register --id.name admin2 --id.type user --id.affiliation org1.department1 --id.attr hf.Revoker=true</span><br></pre></td></tr></table></figure></blockquote><p>密码会被打印出来，登录这个新注册的身份的时候，需要用到这个密码。这允许一个管理员注册身份，然后把这个身份的ID和密码给别人来登陆。</p><p>举个例子，假设配置文件包含下面的内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">id:</span></span><br><span class="line">    <span class="attr">name:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">user</span></span><br><span class="line">    <span class="attr">affiliation:</span> <span class="string">org1.department1</span></span><br><span class="line">    <span class="attr">attributes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">hf.Revoker</span></span><br><span class="line">        <span class="attr">value:</span> <span class="literal">true</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">anotherAttrName</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">anotherAttrValue</span></span><br></pre></td></tr></table></figure><p>下面的命令会注册一个新的身份，id为admin3，其他的内容会从配置文件中读取出来。包括：类型“user”，affiliation “org1.department1”，还有两个属性，“hf.Revoker”和“anotherAttrName”。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/admin</span><br><span class="line"></span><br><span class="line">fabric-ca-client register --id.name admin3</span><br></pre></td></tr></table></figure><p>接下来，让我们注册一个节点身份，下面内容会在登陆节点的时候用到。下面的命令注册了一个peer1身份，在这里我们选择指明自己的密码，而不是由服务器生成。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/admin</span><br><span class="line"></span><br><span class="line">fabric-ca-client register --id.name peer1 --id.type peer --id.affiliation org1.department1 --id.secret peer1p</span><br></pre></td></tr></table></figure><p><strong>登录一个节点</strong></p><p>现在你成功地注册了一个节点身份，你可以用ID和密码登陆。下面的命令登陆peer1。记得在“-M”选项下更改为你自己的MSP目录，MSP目录是由节点的core.yaml里的“mspConfigPath”指定的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/peer1</span><br><span class="line"></span><br><span class="line">fabric-ca-client enroll -u http://peer1:peer1pw@localhost:7054 -M $FABRIC_CA_CLIENT_HOME/msp</span><br></pre></td></tr></table></figure><p><strong>从另一个Fabric CA服务器获得CA证书链</strong></p><p>通常，MSP目录的ca证书目录必须包含证书链，代表这个节点所有信任的信任中心。</p><p><code>fabric-ca-client getcacerts</code>命令用于从其他Fabric CA服务器实例获取这些证书链。</p><p>举个例子，下面的命令会在本地启动第二个Fabric CA服务器，监听7055端口，命名为“CA2“。这代表两个由不同成员管理的分开的信任中心。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export FABRIC_CA_SERVER_HOME=$HOME/ca2</span><br><span class="line"></span><br><span class="line">fabric-ca-server start -b admin:ca2pw -p 7055 -n CA2</span><br></pre></td></tr></table></figure><p>下面的命令会把CA2的证书链安装进peer1的MSP目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/peer1</span><br><span class="line"></span><br><span class="line">fabric-ca-client getcacert -u http://localhost:7055 -M $FABRIC_CA_CLIENT_HOME/msp</span><br></pre></td></tr></table></figure><p><strong>重新登陆一个身份</strong></p><p>假设你的登陆证书快过期了，你可以重新登陆来替换你的登陆证书（ECert）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export FABRIC_CA_CLIENT_HOME=$HOME/fabric-ca/clients/peer1</span><br><span class="line"></span><br><span class="line">fabric-ca-client reenroll</span><br></pre></td></tr></table></figure><p><strong>撤销一个证书或身份</strong></p><p>身份和证书都能被撤销。撤销一个身份会撤销该身份拥有的所有证书，该身份也不能再获得新的证书。撤销一个证书会使该证书失效。</p><p>为了撤销一个证书或身份，发起者必须有hf.Revoker属性。发起者只能撤销与自己的affiliation相同的证书或身份，或者发起者的affiliation是被撤销者的affiliation的前缀。</p><p>举个例子，一个“orgs.org1”的发起者只能撤销orgs.org1或者orgs.org1.department1的身份，而不能撤销orgs.org2的身份。</p><p>下面的命令撤销一个身份。将来所有发自该身份的请求都会被Fabric CA服务器拒收。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fabric-ca-client revoke -e &lt;enrollment_id&gt; -r &lt;reason&gt;</span><br></pre></td></tr></table></figure><p>除此之外，还有很多理由可以撤销一个身份或证书。</p><p><strong>启用TLS</strong></p><p>首先修改CA客户端配置在<code>fabric-ca-client-config.yaml</code>中。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tls:</span></span><br><span class="line">    <span class="comment"># Enable TLS (default: false)</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">certfiles:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">root.pem</span></span><br><span class="line">    <span class="attr">client:</span></span><br><span class="line">        <span class="attr">certfile:</span> <span class="string">tls_client-cert.pem</span></span><br><span class="line">        <span class="attr">keyfile:</span> <span class="string">tls_client-key.pem</span></span><br></pre></td></tr></table></figure><p><em>certfiles</em>是该客户端信任的根证书集合。一般这都会是Fabric CA服务端根目录下的ca-cert.pem。</p><p>只有在服务器配置了双向TLS的情况下，<em>client</em>选项才需要。</p><h3 id="Fabric-SDK"><a href="#Fabric-SDK" class="headerlink" title="Fabric SDK"></a>Fabric SDK</h3><blockquote><p>使用Fabric SDK 连接 server。</p></blockquote><p>参考<a href="https://hyperledgercn.github.io/hyperledgerDocs/sdk_java_zh/">https://hyperledgercn.github.io/hyperledgerDocs/sdk_java_zh/</a></p><p>参考资料：</p><p><a href="http://cw.hubwiz.com/card/c/fabric-ca-guide/1/2/6/">Fabric CA 1.4 官方文档 </a></p><p><a href="https://hyperledgercn.github.io/hyperledgerDocs/ca-setup_zh/">https://hyperledgercn.github.io/hyperledgerDocs/ca-setup_zh/</a></p><p><a href="https://www.jianshu.com/p/2f9af036a0af">Fabric CA指南 - 简书 (jianshu.com)</a></p><p><a href="https://zhayujie.com/fabric-ca.html">Fabric CA的部署与使用 - zyj的博客 (zhayujie.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fabirc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PKI的简单理解和实现</title>
      <link href="/2021/07/02/PKI%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3%E5%92%8C%E5%AE%9E%E7%8E%B0/"/>
      <url>/2021/07/02/PKI%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3%E5%92%8C%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="PKI的简单理解和实现"><a href="#PKI的简单理解和实现" class="headerlink" title="PKI的简单理解和实现"></a>PKI的简单理解和实现</h1><blockquote><p>Public Key Infrastructure（PKI)，中文叫做公开密钥基础设施，也就是利用公开密钥机制建立起来的基础设施。</p></blockquote><h2 id="PKI的简单理解"><a href="#PKI的简单理解" class="headerlink" title="PKI的简单理解"></a>PKI的简单理解</h2><h3 id="PKI的核心是身份证明书的发行"><a href="#PKI的核心是身份证明书的发行" class="headerlink" title="PKI的核心是身份证明书的发行"></a>PKI的核心是身份证明书的发行</h3><p>PKI的主要目的是用来发行“身份证明书”，在互联网相互通信的时候，如果能相互确认身份证明书，那么我们就知道自己是在跟对的人通信。</p><p>网络世界中，我们需要一个信得过的发证机关来发行身份证明书，同时自己要好好保管自己的身份证明书，就像派出所给你发了公民身份证，自己要好好保管一样。</p><p>PKI的世界里，这个身份证明书，被叫做“证明书”。发行“证明书”的机关叫做“认证机关”。还有一个就是统一管理证明书的证书“档案库”。这三个东西加起来，就是PKI的主要构成要素。</p><h3 id="构成PKI的要素只有三个"><a href="#构成PKI的要素只有三个" class="headerlink" title="构成PKI的要素只有三个"></a>构成PKI的要素只有三个</h3><p>构成PKI的主要要素就是下面三个概念</p><ol><li>证明书 Cert</li><li>认证机关 CA</li><li>证书库</li></ol><p>说到底，PKI指的是证明书的制作和分发的一种机制。在这个机制的保障前提下，进行可信赖的网络通信。即安全的网路通信保障机制。</p><ul><li><p>证明书被存放在硬盘里。证明书的文件构造是一种叫做 X.509 的协议规定的。</p></li><li><p>认证机关也其实就是一个网络应用程序。</p></li><li><p>证书库只是一个数字证书（公钥签名）的集合，保存用户和数字证书的内容和对应关系。</p></li></ul><p>比如说，你要和一个自称比尔的男人通信。这个自称比尔的男人，会在通信的最开始，通过网络将证明书发给你，那么通过这个证明书，就证实了他就是比尔。</p><p>然后，你用这个“证明书中的公钥”，将你要发送给比尔的内容进行加密，然后发送给比尔。</p><p>用“证明书中的公钥”加密过的内容，只能用比尔自己才有的另一个“私钥”才能解密。这样的话，如果你发送给比尔的内容被他人窃取的话，他人也无法解密。</p><h3 id="但如何保证比尔的证明书是正确的呢？"><a href="#但如何保证比尔的证明书是正确的呢？" class="headerlink" title="但如何保证比尔的证明书是正确的呢？"></a>但如何保证比尔的证明书是正确的呢？</h3><p>这个认证机关就至关重要了，认证机关的可信度，直接与证书的可信度挂钩，也就是与整个PKI机制的可信度息息相关。</p><p>认证机关对比尔的公钥进行了数字签名，并生成了证书。比尔拿着认证机关给的证书，在一开始发送身份证明书给我时，就夹带了这个认证证书，而我拿到比尔的身份证明书后，再得到认证机构的公钥。用认证机构的公钥的验证比尔的认证证书是否是CA颁发的。只要我相信CA不会认错人，那我就相信CA的结果，即这个信息确实是比尔发给我的。</p><p>假如我想和比尔通讯，流程如下：</p><ul><li>比尔找CA验明正身，请求获得一个证书</li><li>CA验明以后，CA使用自己的私钥对比尔的公钥进行签名，生成比尔的证书</li><li>比尔拿着证书向我证明，自己就是比尔</li><li>我选择向CA询问他的公钥，用来对证书进行验证，得到比尔的公钥，所以这是比尔的证书</li><li>我在用比尔的公钥对消息进行加密后发给比尔</li><li>比尔拿到后用自己的私钥解密即可</li></ul><p><img data-src="https://pic.imgdb.cn/item/60d8333e5132923bf83af9e7.jpg" class="lazyload"></p><h2 id="PKI的简单实现"><a href="#PKI的简单实现" class="headerlink" title="PKI的简单实现"></a>PKI的简单实现</h2><blockquote><p>有了以上的理论基础后，我选择使用GO语言对以上的流程做简单的实现。</p></blockquote><p>使用GO的RSA算法实现简单加密、解密、签名、验证签名。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;crypto&quot;</span></span><br><span class="line"><span class="string">&quot;crypto/rand&quot;</span></span><br><span class="line"><span class="string">&quot;crypto/rsa&quot;</span></span><br><span class="line"><span class="string">&quot;crypto/sha256&quot;</span></span><br><span class="line"><span class="string">&quot;crypto/x509&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/pem&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bits = <span class="number">2048</span></span><br><span class="line"><span class="keyword">const</span> FilePath = <span class="string">&quot;./pki/certs/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// GenerateRSAKey generate a pair of public key and private key</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GenerateRSAKey</span><span class="params">(username <span class="keyword">string</span>)</span></span>  &#123;</span><br><span class="line"><span class="comment">// 保存私钥</span></span><br><span class="line"><span class="comment">//GenerateKey函数使用随机数据生成器random生成一对具有指定字位数的RSA密钥</span></span><br><span class="line"><span class="comment">//Reader是一个全局、共享的密码用强随机数生成器</span></span><br><span class="line">privateKey,_ := rsa.GenerateKey(rand.Reader,bits)</span><br><span class="line"><span class="comment">//通过x509标准将得到的ras私钥序列化为ASN.1 的 DER编码字符串</span></span><br><span class="line">X509PrivateKey := x509.MarshalPKCS1PrivateKey(privateKey)</span><br><span class="line"><span class="comment">//使用pem格式对x509输出的内容进行编码 并创建文件保存私钥</span></span><br><span class="line">privateKeyFile,_ := os.Create(FilePath + username + <span class="string">&quot;_privateKey.pem&quot;</span>)</span><br><span class="line"><span class="keyword">defer</span> privateKeyFile.Close()</span><br><span class="line"><span class="comment">//构建一个pem.Block结构体对象</span></span><br><span class="line">privateBlock := pem.Block&#123;Type: <span class="string">&quot;RSA Private Key&quot;</span>,Bytes: X509PrivateKey&#125;</span><br><span class="line"><span class="comment">//将数据保存到文件</span></span><br><span class="line">pem.Encode(privateKeyFile,&amp;privateBlock)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存公钥,基本同上</span></span><br><span class="line">publicKey := privateKey.PublicKey</span><br><span class="line"><span class="comment">//X509对公钥编码</span></span><br><span class="line">X509PublicKey, _ := x509.MarshalPKIXPublicKey(&amp;publicKey)</span><br><span class="line"><span class="comment">//pem格式编码, 创建用于保存公钥的文件</span></span><br><span class="line">publicKeyFile, _ := os.Create(FilePath + username + <span class="string">&quot;_publicKey.pem&quot;</span>)</span><br><span class="line"><span class="keyword">defer</span> publicKeyFile.Close()</span><br><span class="line"><span class="comment">//创建一个pem.Block结构体对象</span></span><br><span class="line">publicBlock := pem.Block&#123;Type: <span class="string">&quot;RSA Public Key&quot;</span>, Bytes: X509PublicKey&#125;</span><br><span class="line"><span class="comment">//保存到文件</span></span><br><span class="line">pem.Encode(publicKeyFile, &amp;publicBlock)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Get_Sign sign by private key</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Get_Sign</span><span class="params">(msg []<span class="keyword">byte</span>,path <span class="keyword">string</span>)</span>[]<span class="title">byte</span></span>&#123;</span><br><span class="line"><span class="comment">//取得私钥</span></span><br><span class="line">privateKey:=GetRSAPrivateKey(path)</span><br><span class="line"><span class="comment">//计算散列值</span></span><br><span class="line">hash := sha256.New()</span><br><span class="line">hash.Write(msg)</span><br><span class="line">bytes := hash.Sum(<span class="literal">nil</span>)</span><br><span class="line"><span class="comment">//SignPKCS1v15使用RSA PKCS#1 v1.5规定的RSASSA-PKCS1-V1_5-SIGN签名方案计算签名</span></span><br><span class="line">sign, err := rsa.SignPKCS1v15(rand.Reader, privateKey, crypto.SHA256, bytes)</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line"><span class="built_in">panic</span>(sign)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sign</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Verify_Sign verify by public key</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Verify_Sign</span><span class="params">(msg []<span class="keyword">byte</span>,sign []<span class="keyword">byte</span>,path <span class="keyword">string</span>)</span> <span class="title">bool</span></span>&#123;</span><br><span class="line"><span class="comment">//取得公钥</span></span><br><span class="line">publicKey := GetRSAPublicKey(path)</span><br><span class="line"><span class="comment">//计算消息散列值</span></span><br><span class="line">hash := sha256.New()</span><br><span class="line">hash.Write(msg)</span><br><span class="line">bytes := hash.Sum(<span class="literal">nil</span>)</span><br><span class="line"><span class="comment">//验证数字签名</span></span><br><span class="line">err := rsa.VerifyPKCS1v15(publicKey, crypto.SHA256, bytes, sign)</span><br><span class="line"><span class="keyword">return</span> err==<span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// RSA_Encrypt encryption by public key</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RSA_Encrypt</span><span class="params">(plainText []<span class="keyword">byte</span>, path <span class="keyword">string</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line"><span class="comment">// 获取公钥</span></span><br><span class="line">publicKey := GetRSAPublicKey(path)</span><br><span class="line"><span class="comment">//对明文进行加密</span></span><br><span class="line">cipherText, _ := rsa.EncryptPKCS1v15(rand.Reader, publicKey, plainText)</span><br><span class="line"><span class="comment">//返回密文</span></span><br><span class="line"><span class="keyword">return</span> cipherText</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RSA_Decrypt decryption by private key</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RSA_Decrypt</span><span class="params">(cipherText []<span class="keyword">byte</span>,path <span class="keyword">string</span>)</span> []<span class="title">byte</span></span>&#123;</span><br><span class="line"><span class="comment">// 获取私钥</span></span><br><span class="line">privateKey := GetRSAPrivateKey(path)</span><br><span class="line"><span class="comment">//对密文进行解密</span></span><br><span class="line">plainText,_ := rsa.DecryptPKCS1v15(rand.Reader,privateKey,cipherText)</span><br><span class="line"><span class="comment">//返回明文</span></span><br><span class="line"><span class="keyword">return</span> plainText</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//读取RSA私钥</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetRSAPrivateKey</span><span class="params">(path <span class="keyword">string</span>)</span>*<span class="title">rsa</span>.<span class="title">PrivateKey</span></span>&#123;</span><br><span class="line"><span class="comment">//读取文件内容</span></span><br><span class="line">file, err := os.Open(path)</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line">info, _ := file.Stat()</span><br><span class="line">buf:=<span class="built_in">make</span>([]<span class="keyword">byte</span>,info.Size())</span><br><span class="line">file.Read(buf)</span><br><span class="line"><span class="comment">//pem解码</span></span><br><span class="line">block, _ := pem.Decode(buf)</span><br><span class="line"><span class="comment">//X509解码</span></span><br><span class="line">privateKey, err := x509.ParsePKCS1PrivateKey(block.Bytes)</span><br><span class="line"><span class="keyword">return</span> privateKey</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//读取RSA公钥</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetRSAPublicKey</span><span class="params">(path <span class="keyword">string</span>)</span> *<span class="title">rsa</span>.<span class="title">PublicKey</span></span>&#123;</span><br><span class="line"><span class="comment">//读取公钥内容</span></span><br><span class="line">file, err := os.Open(path)</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line">info, _ := file.Stat()</span><br><span class="line">buf:=<span class="built_in">make</span>([]<span class="keyword">byte</span>,info.Size())</span><br><span class="line">file.Read(buf)</span><br><span class="line"><span class="comment">//pem解码</span></span><br><span class="line">block, _ := pem.Decode(buf)</span><br><span class="line"><span class="comment">//x509解码</span></span><br><span class="line">publicKeyInterface, err := x509.ParsePKIXPublicKey(block.Bytes)</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">publicKey := publicKeyInterface.(*rsa.PublicKey)</span><br><span class="line"><span class="keyword">return</span> publicKey</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模拟B向A发送消息的流程，中间省略一些消息传递的流程，重点关注身份验证和信息安全的部分。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建A,B,CA</span></span><br><span class="line">GenerateRSAKey(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">GenerateRSAKey(<span class="string">&quot;B&quot;</span>)</span><br><span class="line">GenerateRSAKey(<span class="string">&quot;CA&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// A 申请证书</span></span><br><span class="line">A_pub_file, _ := os.Open(FilePath + <span class="string">&quot;A_publicKey.pem&quot;</span>)</span><br><span class="line"><span class="keyword">defer</span> A_pub_file.Close()</span><br><span class="line">info, _ := A_pub_file.Stat()</span><br><span class="line">A_pub := <span class="built_in">make</span>([]<span class="keyword">byte</span>,info.Size())</span><br><span class="line">A_pub_file.Read(A_pub)</span><br><span class="line"></span><br><span class="line"><span class="comment">// CA 对 A 的公钥进行签名 ，得到A的证书</span></span><br><span class="line">A_sign := Get_Sign(A_pub,FilePath + <span class="string">&quot;CA_privateKey.pem&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// A 发送证书和publicKey给 B 此过程省略</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// B 校验 A 的证书合法性 ，省略找CA 拿public Key 的过程</span></span><br><span class="line">f := Verify_Sign(A_pub,A_sign,FilePath + <span class="string">&quot;CA_publicKey.pem&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> f&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;verify is success!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 验证通过以后 B用A的pub Key把消息加密发送给 A , 发送过程省略</span></span><br><span class="line">de_msg := RSA_Encrypt([]<span class="keyword">byte</span>(<span class="string">&quot;hello world.&quot;</span>),FilePath + <span class="string">&quot;A_publicKey.pem&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// A 拿到消息以后 用自己的私钥解密</span></span><br><span class="line">msg := RSA_Decrypt(de_msg,FilePath + <span class="string">&quot;A_privateKey.pem&quot;</span>)</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(msg))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">verify is success!</span><br><span class="line">hello world.</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="https://zhuanlan.zhihu.com/p/30136885">5分钟让你知道什么是PKI - 知乎 (zhihu.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PKI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fabric智能合约Go开发包简单理解</title>
      <link href="/2021/06/26/Fabric%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6Go%E5%BC%80%E5%8F%91%E5%8C%85%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/"/>
      <url>/2021/06/26/Fabric%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6Go%E5%BC%80%E5%8F%91%E5%8C%85%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Fabric-智能合约API简单理解"><a href="#Fabric-智能合约API简单理解" class="headerlink" title="Fabric 智能合约API简单理解"></a>Fabric 智能合约API简单理解</h1><blockquote><p>在基于<code>github.com/hyperledger/fabric/core/chaincode</code> 或者 <code>hyperledger/fabric-contract-api-go</code>库进行简单的开发后，进一步分析一下Fabric chaincode 的 处理流程和一些常用API解释。</p></blockquote><h2 id="Fabric-原生构建流程"><a href="#Fabric-原生构建流程" class="headerlink" title="Fabric 原生构建流程"></a>Fabric 原生构建流程</h2><p>首先我们可以看到，<code>github.com/hyperledger/fabric/core/chaincode</code>是源于Fabric本身的代码，因为Fabric基于Go开发，所以方便调用自身的代码构建。</p><p>以一个案例分析：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;github.com/hyperledger/fabric/core/chaincode/shim&quot;</span></span><br><span class="line">   pb <span class="string">&quot;github.com/hyperledger/fabric/protos/peer&quot;</span></span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个合约结构</span></span><br><span class="line"><span class="keyword">type</span> SimpleChaincode <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   err := shim.Start(<span class="built_in">new</span>(SimpleChaincode))</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Printf(<span class="string">&quot;Error starting Simple chaincode: %s&quot;</span>, err)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *SimpleChaincode)</span> <span class="title">Init</span><span class="params">(stub shim.ChaincodeStubInterface)</span> <span class="title">pb</span>.<span class="title">Response</span></span> &#123;</span><br><span class="line">   <span class="keyword">return</span> shim.Success(<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反射执行chain code的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *SimpleChaincode)</span> <span class="title">Invoke</span><span class="params">(stub shim.ChaincodeStubInterface)</span> <span class="title">pb</span>.<span class="title">Response</span></span> &#123;</span><br><span class="line">   function, args := stub.GetFunctionAndParameters()</span><br><span class="line">   fmt.Println(<span class="string">&quot;invoke is running &quot;</span> + function)</span><br><span class="line">   <span class="keyword">if</span> function == <span class="string">&quot;test1&quot;</span> &#123;<span class="comment">//自定义函数名称</span></span><br><span class="line">      <span class="keyword">return</span> t.test1(stub, args)<span class="comment">//定义调用的函数</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> shim.Error(<span class="string">&quot;Received unknown function invocation&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个自定义chain code 合约方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *SimpleChaincode)</span> <span class="title">test1</span><span class="params">(stub shim.ChaincodeStubInterface, args []<span class="keyword">string</span>)</span> <span class="title">pb</span>.<span class="title">Response</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> shim.Success([]<span class="keyword">byte</span>(<span class="string">&quot;Called test1&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们可以看到，在<code>Init</code>和<code>Invoke</code>的时候，都会传入参数<code>stub shim.ChaincodeStubInterface</code>，这个参数提供的接口为我们编写ChainCode的业务逻辑提供了大量实用的方法</p><p>下面仔细介绍一下这个<code>shim.ChaincodeStubInterface</code>接口</p><ul><li><p>获得调用的参数</p><blockquote><p>在<code>Invoke</code>的时候，由传入的参数来决定我们具体调用了哪个方法，所以需要先使用<code>GetFunctionAndParameters</code>解析调用的时候传入的方法名和参数</p></blockquote><ul><li><code>GetArgs() [][]byte </code>以byte数组的数组的形式获得传入的参数列表</li><li><code>GetStringArgs() []string</code> 以字符串数组的形式获得传入的参数列表</li><li><code>GetFunctionAndParameters() (string, []string)</code> 将字符串数组的参数分为两部分，数组第一个字是Function，剩下的都是Parameter</li><li><code>GetArgsSlice() ([]byte, error)</code> 以byte切片的形式获得参数列表</li></ul></li></ul><h3 id="操作区块链数据"><a href="#操作区块链数据" class="headerlink" title="操作区块链数据"></a>操作区块链数据</h3><blockquote><p>对于ChainCode来说，核心的操作就是对State Database的增删改查，对此Fabric接口提供了3个对State DB的操作方法。</p></blockquote><ul><li><p><strong>增改数据<code>PutState(key string, value []byte) error</code></strong></p><p>这个也很好理解，根据Key删除State DB的数据。如果根据Key找不到对于的数据，删除失败。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">err= stub.DelState(key)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> shim.Error(<span class="string">&quot;Failed to delete Student from DB, key is: &quot;</span>+key)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>删除数据<code>DelState(key string) error</code></strong></p><p>这个也很好理解，根据Key删除State DB的数据。如果根据Key找不到对于的数据，删除失败。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">err= stub.DelState(key)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> shim.Error(<span class="string">&quot;Failed to delete Student from DB, key is: &quot;</span>+key)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>查询数据<code>GetState(key string) ([]byte, error)</code></strong></p><p>因为我们是Key Value数据库，所以根据Key来对数据库进行查询，是一件很常见，很高效的操作。返回的数据是byte数组，我们需要转换为string，然后再Json反序列化，可以得到我们想要的对象。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dbStudentBytes,err:= stub.GetState(key)</span><br><span class="line"><span class="keyword">var</span> dbStudent Student;</span><br><span class="line">err=json.Unmarshal(dbStudentBytes,&amp;dbStudent)<span class="comment">//反序列化</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> shim.Error(<span class="string">&quot;&#123;\&quot;Error\&quot;:\&quot;Failed to decode JSON of: &quot;</span> + <span class="keyword">string</span>(dbStudentBytes)+ <span class="string">&quot;\&quot; to Student&#125;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;Read Student from DB, name:&quot;</span>+dbStudent.Name)</span><br></pre></td></tr></table></figure></li><li><p><strong>符合键操作</strong></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">前面在进行数据库的增删改查的时候，都需要用到Key，而我们使用的是我们自己定义的Key格式：&#123;StructName&#125;:&#123;Id&#125;，这是有单主键Id还比较简单，如果我们有多个列做联合主键怎么办？实际上，ChainCode也为我们提供了生成Key的方法CreateCompositeKey，通过这个方法，我们可以将联合主键涉及到的属性都传进去，并声明了对象的类型即可。</span><br><span class="line"></span><br><span class="line">以选课表为例，里面包含了以下属性：</span><br><span class="line"></span><br><span class="line">type ChooseCourse struct &#123;</span><br><span class="line">CourseNumber string //开课编号</span><br><span class="line">StudentId int //学生ID</span><br><span class="line">Confirm bool //是否确认</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><ul><li><p>生成复合键<code>CreateCompositeKey(objectType string, attributes []string) (string, error)</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 其中CourseNumber+StudentId构成了这个对象的联合主键，我们要获得生成的复核主键，那么可写为：</span><br><span class="line"></span><br><span class="line">cc:=ChooseCourse&#123;<span class="string">&quot;CS101&quot;</span>,<span class="number">123</span>,<span class="literal">true</span>&#125;  </span><br><span class="line"><span class="keyword">var</span> key1,_= stub.CreateCompositeKey(<span class="string">&quot;ChooseCourse&quot;</span>,[]<span class="keyword">string</span>&#123;cc.CourseNumber,strconv.Itoa(cc.StudentId)&#125;)</span><br><span class="line">fmt.Println(key1)</span><br></pre></td></tr></table></figure><p>【注：其实Fabric就是用U+0000来把各个字段分割开的，因为这个字符太特殊，所以很适合做分割】</p></li><li><p>拆分复合键<code>SplitCompositeKey(compositeKey string) (string, []string, error)</code></p><blockquote><p> 既然有组合那么就有拆分，当我们从数据库中获得了一个复合键的Key之后，怎么知道其具体是由哪些字段组成的呢。其实就是用U+0000把这个复合键再Split开，得到结果中第一个是<code>objectType</code>，剩下的就是复合键用到的列的值。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">objType,attrArray,_:= stub.SplitCompositeKey(key1)</span><br><span class="line">fmt.Println(&quot;Object:&quot;+objType+&quot; ,Attributes:&quot;+strings.Join(attrArray,&quot;|&quot;))</span><br></pre></td></tr></table></figure></li><li><p>部分复合键的查询<code>GetStateByPartialCompositeKey(objectType string, keys []string) (StateQueryIteratorInterface, error)</code></p><p>这里其实是一种对Key进行前缀匹配的查询，也就是说，我们虽然是部分复合键的查询，但是不允许拿后面部分的复合键进行匹配，必须是前面部分。</p></li><li><p><strong>获得当前用户<code>GetCreator() ([]byte, error)</code></strong></p><p>这个方法可以获得调用这个ChainCode的客户端的<strong>用户的证书</strong>，这里虽然返回的是byte数组，但是其实是一个字符串，内容格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIICGjCCAcCgAwIBAgIRAMVe0+QZL+67Q+R2RmqsD90wCgYIKoZIzj0EAwIwczEL</span><br><span class="line">MAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG</span><br><span class="line">cmFuY2lzY28xGTAXBgNVBAoTEG9yZzEuZXhhbXBsZS5jb20xHDAaBgNVBAMTE2Nh</span><br><span class="line">Lm9yZzEuZXhhbXBsZS5jb20wHhcNMTcwODEyMTYyNTU1WhcNMjcwODEwMTYyNTU1</span><br><span class="line">WjBbMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMN</span><br><span class="line">U2FuIEZyYW5jaXNjbzEfMB0GA1UEAwwWVXNlcjFAb3JnMS5leGFtcGxlLmNvbTBZ</span><br><span class="line">MBMGByqGSM49AgEGCCqGSM49AwEHA0IABN7WqfFwWWKynl9SI87byp0SZO6QU1hT</span><br><span class="line">JRatYysXX5MJJRzvvVsSTsUzQh5jmgwkPbFcvk/x4W8lj5d2Tohff+WjTTBLMA4G</span><br><span class="line">A1UdDwEB/wQEAwIHgDAMBgNVHRMBAf8EAjAAMCsGA1UdIwQkMCKAIO2os1zK9BKe</span><br><span class="line">Lb4P8lZOFU+3c0S5+jHnEILFWx2gNoLkMAoGCCqGSM49BAMCA0gAMEUCIQDAIDHK</span><br><span class="line">gPZsgZjzNTkJgglZ7VgJLVFOuHgKWT9GbzhwBgIgE2YWoDpG0HuhB66UzlA+6QzJ</span><br><span class="line">+jvM0tOVZuWyUIVmwBM=</span><br><span class="line">-----END CERTIFICATE-----</span><br></pre></td></tr></table></figure><p>我们常见的需求是在ChainCode中获得当前用户的信息，方便进行权限管理。那么我们怎么获得当前用户呢？</p><p>我们可以把这个证书的字符串转换为Certificate对象。一旦转换成这个对象，我们就可以通过Subject获得当前用户的名字。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *SimpleChaincode)</span> <span class="title">testCertificate</span><span class="params">(stub shim.ChaincodeStubInterface, args []<span class="keyword">string</span>)</span> <span class="title">pb</span>.<span class="title">Response</span></span>&#123;</span><br><span class="line">   creatorByte,_:= stub.GetCreator()</span><br><span class="line">   certStart := bytes.IndexAny(creatorByte, <span class="string">&quot;-----BEGIN&quot;</span>)</span><br><span class="line">   <span class="keyword">if</span> certStart == <span class="number">-1</span> &#123;</span><br><span class="line">      fmt.Errorf(<span class="string">&quot;No certificate found&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   certText := creatorByte[certStart:]</span><br><span class="line">   bl, _ := pem.Decode(certText)</span><br><span class="line">   <span class="keyword">if</span> bl == <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Errorf(<span class="string">&quot;Could not decode the PEM structure&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   cert, err := x509.ParseCertificate(bl.Bytes)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Errorf(<span class="string">&quot;ParseCertificate failed&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   uname:=cert.Subject.CommonName</span><br><span class="line">   fmt.Println(<span class="string">&quot;Name:&quot;</span>+uname)</span><br><span class="line">   <span class="keyword">return</span> shim.Success([]<span class="keyword">byte</span>(<span class="string">&quot;Called testCertificate &quot;</span>+uname))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Key区间查询<code>GetStateByRange(startKey, endKey string) (StateQueryIteratorInterface, error)</code></p><p>提供了对某个区间的Key进行查询的接口，适用于任何State DB。由于返回的是一个<code>StateQueryIteratorInterface</code>接口，我们需要通过这个接口再做一个for循环，才能读取返回的信息，所有我们可以独立出一个方法，专门将该接口返回的数据以string的byte数组形式返回。这是我们的转换方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getListResult</span><span class="params">(resultsIterator shim.StateQueryIteratorInterface)</span> <span class="params">([]<span class="keyword">byte</span>,error)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">defer</span> resultsIterator.Close()</span><br><span class="line">   <span class="comment">// buffer is a JSON array containing QueryRecords</span></span><br><span class="line">   <span class="keyword">var</span> buffer bytes.Buffer</span><br><span class="line">   buffer.WriteString(<span class="string">&quot;[&quot;</span>)</span><br><span class="line"></span><br><span class="line">   bArrayMemberAlreadyWritten := <span class="literal">false</span></span><br><span class="line">   <span class="keyword">for</span> resultsIterator.HasNext() &#123;</span><br><span class="line">      queryResponse, err := resultsIterator.Next()</span><br><span class="line">      <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Add a comma before array members, suppress it for the first array member</span></span><br><span class="line">      <span class="keyword">if</span> bArrayMemberAlreadyWritten == <span class="literal">true</span> &#123;</span><br><span class="line">         buffer.WriteString(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      buffer.WriteString(<span class="string">&quot;&#123;\&quot;Key\&quot;:&quot;</span>)</span><br><span class="line">      buffer.WriteString(<span class="string">&quot;\&quot;&quot;</span>)</span><br><span class="line">      buffer.WriteString(queryResponse.Key)</span><br><span class="line">      buffer.WriteString(<span class="string">&quot;\&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">      buffer.WriteString(<span class="string">&quot;, \&quot;Record\&quot;:&quot;</span>)</span><br><span class="line">      <span class="comment">// Record is a JSON object, so we write as-is</span></span><br><span class="line">      buffer.WriteString(<span class="keyword">string</span>(queryResponse.Value))</span><br><span class="line">      buffer.WriteString(<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">      bArrayMemberAlreadyWritten = <span class="literal">true</span></span><br><span class="line">   &#125;</span><br><span class="line">   buffer.WriteString(<span class="string">&quot;]&quot;</span>)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;queryResult:\n%s\n&quot;</span>, buffer.String())</span><br><span class="line">   <span class="keyword">return</span> buffer.Bytes(), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>其他需要CouchDB时才能用这个方法 此处不多介绍了。</p></li></ul><ul><li><p><strong>调用其他的智能合约</strong></p><p>这个比较好理解，就是在我们的链上代码中调用别人已经部署好的链上代码。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *SimpleChaincode)</span> <span class="title">testInvokeChainCode</span><span class="params">(stub shim.ChaincodeStubInterface, args []<span class="keyword">string</span>)</span> <span class="title">pb</span>.<span class="title">Response</span></span>&#123;</span><br><span class="line">   trans:=[][]<span class="keyword">byte</span>&#123;[]<span class="keyword">byte</span>(<span class="string">&quot;invoke&quot;</span>),[]<span class="keyword">byte</span>(<span class="string">&quot;a&quot;</span>),[]<span class="keyword">byte</span>(<span class="string">&quot;b&quot;</span>),[]<span class="keyword">byte</span>(<span class="string">&quot;11&quot;</span>)&#125;</span><br><span class="line">   response:= stub.InvokeChaincode(<span class="string">&quot;mycc&quot;</span>,trans,<span class="string">&quot;mychannel&quot;</span>)</span><br><span class="line">   fmt.Println(response.Message)</span><br><span class="line">   <span class="keyword">return</span> shim.Success([]<span class="keyword">byte</span>( response.Message))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>获得提案对象Proposal属性</strong></p><ul><li><p>获得签名的提案<code>GetSignedProposal() (*pb.SignedProposal, error)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">从客户端发现背书节点的Transaction或者Query都是一个提案，GetSignedProposal获得当前的提案对象包括客户端对这个提案的签名。提案的内容如果直接打印出来感觉就像是乱码，其内包含了提案Header，Payload和Extension，里面更包含了复杂的结构，这里不讲，以后可以写一篇博客专门研究提案对象。</span><br></pre></td></tr></table></figure></li><li><p>获得Transient对象 <code>GetTransient() (map[string][]byte, error)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Transient是在提案中Payload对象中的一个属性，也就是ChaincodeProposalPayload.TransientMap</span><br></pre></td></tr></table></figure></li><li><p>获得交易时间戳<code>GetTxTimestamp() (*timestamp.Timestamp, error)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">交易时间戳也是在提案对象中获取的，提案对象的Header部分，也就是proposal.Header.ChannelHeader.Timestamp</span><br></pre></td></tr></table></figure></li><li><p>获得Binding对象 <code>GetBinding() ([]byte, error)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个Binding对象也是从提案对象中提取并组合出来的，其中包含proposal.Header中的SignatureHeader.Nonce,SignatureHeader.Creator和ChannelHeader.Epoch。关于Proposal对象确实很8复杂，我目前了解的并不对，接下来得详细研究。</span><br></pre></td></tr></table></figure></li></ul></li><li><p>事件设置<code>SetEvent(name string, payload []byte) error</code></p><p>当ChainCode提交完毕，会通过Event的方式通知Client。而通知的内容可以通过<code>SetEvent</code>设置。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *SimpleChaincode)</span> <span class="title">testEvent</span><span class="params">(stub shim.ChaincodeStubInterface, args []<span class="keyword">string</span>)</span> <span class="title">pb</span>.<span class="title">Response</span></span>&#123;</span><br><span class="line">   tosend := <span class="string">&quot;Event send data is here!&quot;</span></span><br><span class="line">   err := stub.SetEvent(<span class="string">&quot;evtsender&quot;</span>, []<span class="keyword">byte</span>(tosend))</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> shim.Error(err.Error())</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> shim.Success(<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事件设置完毕后，需要在客户端也做相应的修改。</p></li></ul><h2 id="fabric-contract-api-go-对-原生代码的封装"><a href="#fabric-contract-api-go-对-原生代码的封装" class="headerlink" title="fabric-contract-api-go 对 原生代码的封装"></a>fabric-contract-api-go 对 原生代码的封装</h2><p>大同小异与原生代码库的使用方法，也是通过 <code>ctx.GetStub()</code>获得 <code>shim.ChaincodeStubInterface</code>来实现对区块链数据的操作。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric-contract-api-go/contractapi&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个合约结构</span></span><br><span class="line"><span class="keyword">type</span> SimpleChaincode <span class="keyword">struct</span> &#123;</span><br><span class="line">contractapi.Contract</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册链码</span></span><br><span class="line">chaincode, err := contractapi.NewChaincode(<span class="built_in">new</span>(SmartContract))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Error create fabcar chaincode: %s&quot;</span>, err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := chaincode.Start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Error starting fabcar chaincode: %s&quot;</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个自定义chain code 合约方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SimpleChaincode)</span> <span class="title">test1</span><span class="params">(ctx contractapi.TransactionContextInterface,key <span class="keyword">string</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span>&#123;</span><br><span class="line">res, err := ctx.GetStub().GetState(key)</span><br><span class="line"><span class="keyword">return</span> res,err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过使用API接口实现了一些方法的封装，如：<code>invoke</code>和 <code>init</code>等方法。开发者可以更加专注于应用逻辑的书写，使用<code>ctx.GetStub()</code>实现对数据的操作（类似对数据库的操作）。</p><p><img data-src="https://pic.imgdb.cn/item/60d735e0844ef46bb2ae31b5.jpg" class="lazyload"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>Fabric网络默认使用了GRPC调用智能合约，使用了类似反射的机制实现在SDK端调用如：</p><p><code>contract.SubmitTransaction(&quot;test1&quot;, &quot;args&quot;)</code>方法时就会向Peer节点发送一个交易请求，请求内容是调用<code>test1</code>方法，参数是args。</p><p>由于智能合约代码实现了Contract的方法，且被发布到Peer节点上，所以最后合约代码会由Fabric来进行调用执行。</p><p><strong>参考：</strong></p><p><a href="https://www.cnblogs.com/studyzy/p/7360733.html">HyperLedger Fabric ChainCode开发——shim.ChaincodeStubInterface用法 - 深蓝 - 博客园 (cnblogs.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fabirc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fabric开发实践</title>
      <link href="/2021/06/24/Fabric%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/"/>
      <url>/2021/06/24/Fabric%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>基于Fabric 2.2.3 测试网络的Go语言开发实践。</p></blockquote><h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><ul><li><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/test_network.html">搭建使用Fabric的测试网络</a></li><li>创建一个Channel</li></ul><h3 id="功能简述"><a href="#功能简述" class="headerlink" title="功能简述"></a>功能简述</h3><p>本案例基于Fabric-Sample中的<a href="https://github.com/hyperledger/fabric-samples/tree/main/fabcar">fabcar</a>做修改，简单来说就是在区块链中发布一个车产证，标识车的属性和所有者。</p><p>其数据结构如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Car <span class="keyword">struct</span> &#123;</span><br><span class="line">Make   <span class="keyword">string</span> <span class="string">`json:&quot;make&quot;`</span></span><br><span class="line">Model  <span class="keyword">string</span> <span class="string">`json:&quot;model&quot;`</span></span><br><span class="line">Colour <span class="keyword">string</span> <span class="string">`json:&quot;colour&quot;`</span></span><br><span class="line">Owner  <span class="keyword">string</span> <span class="string">`json:&quot;owner&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其功能如下：</p><ul><li>创建车产证</li><li>查询车产证</li><li>查询所有车产证</li><li>修改车辆所有者</li></ul><h3 id="智能合约开发"><a href="#智能合约开发" class="headerlink" title="智能合约开发"></a>智能合约开发</h3><blockquote><p>本代码基于Go，注意Go的Fabric智能合约需要引入<code>github.com/hyperledger/fabric-contract-api-go</code>项目</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric-contract-api-go/contractapi&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合约对象 继承 contractapi的Contract</span></span><br><span class="line"><span class="keyword">type</span> SmartContract <span class="keyword">struct</span> &#123;</span><br><span class="line">contractapi.Contract</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 车产证的模型</span></span><br><span class="line"><span class="keyword">type</span> Car <span class="keyword">struct</span> &#123;</span><br><span class="line">Make   <span class="keyword">string</span> <span class="string">`json:&quot;make&quot;`</span></span><br><span class="line">Model  <span class="keyword">string</span> <span class="string">`json:&quot;model&quot;`</span></span><br><span class="line">Colour <span class="keyword">string</span> <span class="string">`json:&quot;colour&quot;`</span></span><br><span class="line">Owner  <span class="keyword">string</span> <span class="string">`json:&quot;owner&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询结果</span></span><br><span class="line"><span class="keyword">type</span> QueryResult <span class="keyword">struct</span> &#123;</span><br><span class="line">Key    <span class="keyword">string</span> <span class="string">`json:&quot;Key&quot;`</span></span><br><span class="line">Record *Car</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化创建10个证</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">InitLedger</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">cars := []Car&#123;</span><br><span class="line">Car&#123;Make: <span class="string">&quot;Toyota&quot;</span>, Model: <span class="string">&quot;Prius&quot;</span>, Colour: <span class="string">&quot;blue&quot;</span>, Owner: <span class="string">&quot;Tomoko&quot;</span>&#125;,</span><br><span class="line">Car&#123;Make: <span class="string">&quot;Ford&quot;</span>, Model: <span class="string">&quot;Mustang&quot;</span>, Colour: <span class="string">&quot;red&quot;</span>, Owner: <span class="string">&quot;Brad&quot;</span>&#125;,</span><br><span class="line">Car&#123;Make: <span class="string">&quot;Hyundai&quot;</span>, Model: <span class="string">&quot;Tucson&quot;</span>, Colour: <span class="string">&quot;green&quot;</span>, Owner: <span class="string">&quot;Jin Soo&quot;</span>&#125;,</span><br><span class="line">Car&#123;Make: <span class="string">&quot;Volkswagen&quot;</span>, Model: <span class="string">&quot;Passat&quot;</span>, Colour: <span class="string">&quot;yellow&quot;</span>, Owner: <span class="string">&quot;Max&quot;</span>&#125;,</span><br><span class="line">Car&#123;Make: <span class="string">&quot;Tesla&quot;</span>, Model: <span class="string">&quot;S&quot;</span>, Colour: <span class="string">&quot;black&quot;</span>, Owner: <span class="string">&quot;Adriana&quot;</span>&#125;,</span><br><span class="line">Car&#123;Make: <span class="string">&quot;Peugeot&quot;</span>, Model: <span class="string">&quot;205&quot;</span>, Colour: <span class="string">&quot;purple&quot;</span>, Owner: <span class="string">&quot;Michel&quot;</span>&#125;,</span><br><span class="line">Car&#123;Make: <span class="string">&quot;Chery&quot;</span>, Model: <span class="string">&quot;S22L&quot;</span>, Colour: <span class="string">&quot;white&quot;</span>, Owner: <span class="string">&quot;Aarav&quot;</span>&#125;,</span><br><span class="line">Car&#123;Make: <span class="string">&quot;Fiat&quot;</span>, Model: <span class="string">&quot;Punto&quot;</span>, Colour: <span class="string">&quot;violet&quot;</span>, Owner: <span class="string">&quot;Pari&quot;</span>&#125;,</span><br><span class="line">Car&#123;Make: <span class="string">&quot;Tata&quot;</span>, Model: <span class="string">&quot;Nano&quot;</span>, Colour: <span class="string">&quot;indigo&quot;</span>, Owner: <span class="string">&quot;Valeria&quot;</span>&#125;,</span><br><span class="line">Car&#123;Make: <span class="string">&quot;Holden&quot;</span>, Model: <span class="string">&quot;Barina&quot;</span>, Colour: <span class="string">&quot;brown&quot;</span>, Owner: <span class="string">&quot;Shotaro&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, car := <span class="keyword">range</span> cars &#123;</span><br><span class="line">carAsBytes, _ := json.Marshal(car)</span><br><span class="line"><span class="comment">// 注意此处使用Car + index 做 Key</span></span><br><span class="line">err := ctx.GetStub().PutState(<span class="string">&quot;CAR&quot;</span>+strconv.Itoa(i), carAsBytes)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;Failed to put to world state. %s&quot;</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateCar adds a new car to the world state with given details</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">CreateCar</span><span class="params">(ctx contractapi.TransactionContextInterface, carNumber <span class="keyword">string</span>, <span class="built_in">make</span> <span class="keyword">string</span>, model <span class="keyword">string</span>, colour <span class="keyword">string</span>, owner <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">car := Car&#123;</span><br><span class="line">Make:   <span class="built_in">make</span>,</span><br><span class="line">Model:  model,</span><br><span class="line">Colour: colour,</span><br><span class="line">Owner:  owner,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">carAsBytes, _ := json.Marshal(car)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ctx.GetStub().PutState(carNumber, carAsBytes)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// QueryCar returns the car stored in the world state with given id</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">QueryCar</span><span class="params">(ctx contractapi.TransactionContextInterface, carNumber <span class="keyword">string</span>)</span> <span class="params">(*Car, error)</span></span> &#123;</span><br><span class="line">carAsBytes, err := ctx.GetStub().GetState(carNumber)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;Failed to read from world state. %s&quot;</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> carAsBytes == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;%s does not exist&quot;</span>, carNumber)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">car := <span class="built_in">new</span>(Car)</span><br><span class="line">_ = json.Unmarshal(carAsBytes, car)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> car, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// QueryAllCars returns all cars found in world state</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">QueryAllCars</span><span class="params">(ctx contractapi.TransactionContextInterface)</span> <span class="params">([]QueryResult, error)</span></span> &#123;</span><br><span class="line">startKey := <span class="string">&quot;&quot;</span></span><br><span class="line">endKey := <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">resultsIterator, err := ctx.GetStub().GetStateByRange(startKey, endKey)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resultsIterator.Close()</span><br><span class="line"></span><br><span class="line">results := []QueryResult&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> resultsIterator.HasNext() &#123;</span><br><span class="line">queryResponse, err := resultsIterator.Next()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">car := <span class="built_in">new</span>(Car)</span><br><span class="line">_ = json.Unmarshal(queryResponse.Value, car)</span><br><span class="line"></span><br><span class="line">queryResult := QueryResult&#123;Key: queryResponse.Key, Record: car&#125;</span><br><span class="line">results = <span class="built_in">append</span>(results, queryResult)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> results, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ChangeCarOwner updates the owner field of car with given id in world state</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span> <span class="title">ChangeCarOwner</span><span class="params">(ctx contractapi.TransactionContextInterface, carNumber <span class="keyword">string</span>, newOwner <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">car, err := s.QueryCar(ctx, carNumber)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">car.Owner = newOwner</span><br><span class="line"></span><br><span class="line">carAsBytes, _ := json.Marshal(car)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ctx.GetStub().PutState(carNumber, carAsBytes)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册链码</span></span><br><span class="line">chaincode, err := contractapi.NewChaincode(<span class="built_in">new</span>(SmartContract))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Error create fabcar chaincode: %s&quot;</span>, err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := chaincode.Start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Error starting fabcar chaincode: %s&quot;</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客户端应用程序开发"><a href="#客户端应用程序开发" class="headerlink" title="客户端应用程序开发"></a>客户端应用程序开发</h3><blockquote><p>本代码基于Go，注意Go的Fabric客户端开发需要引入<code>github.com/hyperledger/fabric-sdk-go</code>项目</p><p>在SDK的基础上封装 GIN进行API通讯</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric-sdk-go/pkg/core/config&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/hyperledger/fabric-sdk-go/pkg/gateway&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;path/filepath&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;message&quot;</span>: <span class="string">&quot;pong&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// find the car by id</span></span><br><span class="line">r.GET(<span class="string">&quot;/car/:id&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">id := c.Param(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">contract := GetContract()</span><br><span class="line">res,_ := contract.EvaluateTransaction(<span class="string">&quot;queryCar&quot;</span>,<span class="string">&quot;CAR&quot;</span> + id)</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(res))</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;result&quot;</span>: <span class="keyword">string</span>(res),</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// find the all car</span></span><br><span class="line">r.GET(<span class="string">&quot;/cars&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">contract := GetContract()</span><br><span class="line">res,_ := contract.EvaluateTransaction(<span class="string">&quot;queryAllCars&quot;</span>)</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(res))</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;result&quot;</span>: <span class="keyword">string</span>(res),</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// create the car</span></span><br><span class="line">r.POST(<span class="string">&quot;/car&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">id := <span class="string">&quot;CAR&quot;</span> + c.DefaultPostForm(<span class="string">&quot;id&quot;</span>, <span class="keyword">string</span>(<span class="number">20</span>))</span><br><span class="line"><span class="built_in">make</span> := c.DefaultPostForm(<span class="string">&quot;make&quot;</span>, <span class="string">&quot;BWM&quot;</span>)</span><br><span class="line">model := c.DefaultPostForm(<span class="string">&quot;model&quot;</span>, <span class="string">&quot;big&quot;</span>)</span><br><span class="line">Colour := c.DefaultPostForm(<span class="string">&quot;Colour&quot;</span>, <span class="string">&quot;blue&quot;</span>)</span><br><span class="line">Owner := c.DefaultPostForm(<span class="string">&quot;Owner&quot;</span>, <span class="string">&quot;me&quot;</span>)</span><br><span class="line"></span><br><span class="line">contract := GetContract()</span><br><span class="line">contract.SubmitTransaction(<span class="string">&quot;createCar&quot;</span>, id, <span class="built_in">make</span>, model, Colour, Owner)</span><br><span class="line">res, _ := contract.SubmitTransaction(<span class="string">&quot;queryAllCars&quot;</span>)</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(res))</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;result&quot;</span>: <span class="keyword">string</span>(res),</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;/change&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">name := c.DefaultQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;kid1999&quot;</span>)</span><br><span class="line">id := c.DefaultQuery(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;22&quot;</span>)</span><br><span class="line"></span><br><span class="line">contract := GetContract()</span><br><span class="line">contract.SubmitTransaction(<span class="string">&quot;changeCarOwner&quot;</span>, <span class="string">&quot;CAR&quot;</span> + id, name)</span><br><span class="line">res,_ := contract.EvaluateTransaction(<span class="string">&quot;queryCar&quot;</span>,<span class="string">&quot;CAR&quot;</span> + id)</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(res))</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;result&quot;</span>: <span class="keyword">string</span>(res),</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r.Run(<span class="string">&quot;:8000&quot;</span>) <span class="comment">// 监听并在 0.0.0.0:8080 上启动服务</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// get the contract from mychannel and the fabcar smart contract</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetContract</span><span class="params">()</span>  *<span class="title">gateway</span>.<span class="title">Contract</span></span>&#123;</span><br><span class="line">os.Setenv(<span class="string">&quot;DISCOVERY_AS_LOCALHOST&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">wallet, err := gateway.NewFileSystemWallet(<span class="string">&quot;wallet&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Failed to create wallet: %s\n&quot;</span>, err)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !wallet.Exists(<span class="string">&quot;appUser&quot;</span>) &#123;</span><br><span class="line">err = createWallet(wallet)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Failed to populate wallet contents: %s\n&quot;</span>, err)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ccpPath := filepath.Join(</span><br><span class="line"><span class="string">&quot;..&quot;</span>,</span><br><span class="line"><span class="string">&quot;..&quot;</span>,</span><br><span class="line"><span class="string">&quot;test-network&quot;</span>,</span><br><span class="line"><span class="string">&quot;organizations&quot;</span>,</span><br><span class="line"><span class="string">&quot;peerOrganizations&quot;</span>,</span><br><span class="line"><span class="string">&quot;org1.example.com&quot;</span>,</span><br><span class="line"><span class="string">&quot;connection-org1.yaml&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">gw, err := gateway.Connect(</span><br><span class="line">gateway.WithConfig(config.FromFile(filepath.Clean(ccpPath))),</span><br><span class="line">gateway.WithIdentity(wallet, <span class="string">&quot;appUser&quot;</span>),</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Failed to connect to gateway: %s\n&quot;</span>, err)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">network, err := gw.GetNetwork(<span class="string">&quot;mychannel&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Failed to get network: %s\n&quot;</span>, err)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract := network.GetContract(<span class="string">&quot;fabcar&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> contract</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createWallet</span><span class="params">(wallet *gateway.Wallet)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">credPath := filepath.Join(</span><br><span class="line"><span class="string">&quot;..&quot;</span>,</span><br><span class="line"><span class="string">&quot;..&quot;</span>,</span><br><span class="line"><span class="string">&quot;test-network&quot;</span>,</span><br><span class="line"><span class="string">&quot;organizations&quot;</span>,</span><br><span class="line"><span class="string">&quot;peerOrganizations&quot;</span>,</span><br><span class="line"><span class="string">&quot;org1.example.com&quot;</span>,</span><br><span class="line"><span class="string">&quot;users&quot;</span>,</span><br><span class="line"><span class="string">&quot;User1@org1.example.com&quot;</span>,</span><br><span class="line"><span class="string">&quot;msp&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">certPath := filepath.Join(credPath, <span class="string">&quot;signcerts&quot;</span>, <span class="string">&quot;cert.pem&quot;</span>)</span><br><span class="line"><span class="comment">// read the certificate pem</span></span><br><span class="line">cert, err := ioutil.ReadFile(filepath.Clean(certPath))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">keyDir := filepath.Join(credPath, <span class="string">&quot;keystore&quot;</span>)</span><br><span class="line"><span class="comment">// there&#x27;s a single file in this dir containing the private key</span></span><br><span class="line">files, err := ioutil.ReadDir(keyDir)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(files) != <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;keystore folder should have contain one file&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">keyPath := filepath.Join(keyDir, files[<span class="number">0</span>].Name())</span><br><span class="line">key, err := ioutil.ReadFile(filepath.Clean(keyPath))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">identity := gateway.NewX509Identity(<span class="string">&quot;Org1MSP&quot;</span>, <span class="keyword">string</span>(cert), <span class="keyword">string</span>(key))</span><br><span class="line"></span><br><span class="line">err = wallet.Put(<span class="string">&quot;appUser&quot;</span>, identity)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在Fabric网络上部署智能合约"><a href="#在Fabric网络上部署智能合约" class="headerlink" title="在Fabric网络上部署智能合约"></a>在Fabric网络上部署智能合约</h3><blockquote><p>需要注意的是 我们在智能合约中有几个写死的地址信息，如：credPath地址和ccpPath需要注意以自己的配置信息位置为准。</p></blockquote><p>本案例使用的是Fabric 测试网络</p><ol><li><p>所以我们 <code>cd fabric-samples/test-network</code></p></li><li><p><code>./network.sh up createChannel</code> 启动网络并创建默认<code>mychannel</code></p></li><li><p>部署启动智能合约</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./network.sh deployCC -ccn fabcar -ccp ../../chaincode/fabcar/go -ccl go</span><br></pre></td></tr></table></figure><p>更多配置信息 参考 <a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/test_network.html">Fabric测试网络部署一文</a>，fabcar/go文件夹下存放上述的智能合约。</p></li></ol><h3 id="在Fabric网络上测试应用程序"><a href="#在Fabric网络上测试应用程序" class="headerlink" title="在Fabric网络上测试应用程序"></a>在Fabric网络上测试应用程序</h3><blockquote><p>同智能合约一样，应用程序中也有写死的地址credPath需要我们留意，以自己的存储地址为准，此地址由网络初开时Peer设置。</p></blockquote><ol><li><p>保证Go语言环境正常</p></li><li><p><code>go mod download</code> 下载依赖</p></li><li><p><code>go run fabcar_with_gin.go </code> 运行程序</p></li><li><p>最终效果</p><ul><li>查询所有记录（第一条忽略….输错了）</li></ul><p><img data-src="https://pic.imgdb.cn/item/60d49cef844ef46bb2fac6e9.jpg" class="lazyload"></p><ul><li><p>查询id为1的记录</p><p><img data-src="https://pic.imgdb.cn/item/60d49d40844ef46bb2fe1a48.jpg" class="lazyload"></p></li><li><p>修改id为1的记录，拥有者为super man</p><p><img data-src="https://pic.imgdb.cn/item/60d49db6844ef46bb202fbff.jpg" class="lazyload"></p></li></ul></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上是参考官方文档和fabric-sample结合Gin做出的一个小案例，基于区块链做汽车信息的记录。</p><p>但是问题也有不少其中关于fabric智能合约的编写，官方给出了两个Go的SDK，分别是上面使用的简化的API版本：<code>fabric-contract-api-go</code>和 完整的 <code>fabric-chaincode-go</code> 其中差别还需要进一步深入思考和学习。长路漫漫….</p><p><strong>参考：</strong></p><p><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/test_network.html">Fabric官方文档</a></p><p><a href="https://github.com/hyperledger/fabric-samples/tree/main/fabcar">Fabric sample fabcar</a></p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fabirc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fabric应用程序开发基础</title>
      <link href="/2021/06/23/Fabric%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/06/23/Fabric%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="Fabric应用开发基础"><a href="#Fabric应用开发基础" class="headerlink" title="Fabric应用开发基础"></a>Fabric应用开发基础</h2><blockquote><p>应用程序可以通过将交易提交到帐本或查询帐本内容来与区块链网络进行交互。</p><p>需要注意的是：Fabric的应用是类似客户端的存在，而更核心的是智能合约的开发。</p></blockquote><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/application.html#%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B">从应用程序到调用智能合约</a></li><li><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/application.html#%E9%92%B1%E5%8C%85">应用程序如何使用钱包和身份</a></li><li><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/application.html#%E7%BD%91%E5%85%B3">应用程序如何使用网关连接</a></li><li><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/application.html#%E7%BD%91%E7%BB%9C%E9%80%9A%E9%81%93">如何访问特定网络</a></li><li><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/application.html#%E6%9E%84%E9%80%A0%E8%AF%B7%E6%B1%82">如何构造交易请求</a></li><li><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/application.html#%E6%8F%90%E4%BA%A4%E4%BA%A4%E6%98%93">如何提交交易</a></li><li><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/application.html#%E5%A4%84%E7%90%86%E5%93%8D%E5%BA%94">如何处理交易响应</a></li></ul><h3 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h3><p>应用程序必须遵循六个基本步骤来提交交易：</p><ul><li>从钱包中选择一个身份</li><li>连接到网关</li><li>访问所需的网络</li><li>构建智能合约的交易请求</li><li>将交易提交到网络</li><li>处理响应</li></ul><p>例如：<a href="https://github.com/hyperledger/fabric-samples/blob/master/commercial-paper/organization/magnetocorp/application/issue.js">issue.js</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bring key classes into scope, most importantly Fabric SDK network class</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> yaml = <span class="built_in">require</span>(<span class="string">&#x27;js-yaml&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; Wallets, Gateway &#125; = <span class="built_in">require</span>(<span class="string">&#x27;fabric-network&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> CommercialPaper = <span class="built_in">require</span>(<span class="string">&#x27;../contract/lib/paper.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Main program function</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// A wallet stores a collection of identities for use</span></span><br><span class="line">    <span class="keyword">const</span> wallet = <span class="keyword">await</span> Wallets.newFileSystemWallet(<span class="string">&#x27;../identity/user/isabella/wallet&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// A gateway defines the peers used to access Fabric networks</span></span><br><span class="line">    <span class="keyword">const</span> gateway = <span class="keyword">new</span> Gateway();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Main try/catch block</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Specify userName for network access</span></span><br><span class="line">        <span class="comment">// const userName = &#x27;isabella.issuer@magnetocorp.com&#x27;;</span></span><br><span class="line">        <span class="keyword">const</span> userName = <span class="string">&#x27;isabella&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Load connection profile; will be used to locate a gateway</span></span><br><span class="line">        <span class="keyword">let</span> connectionProfile = yaml.safeLoad(fs.readFileSync(<span class="string">&#x27;../gateway/connection-org2.yaml&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set connection options; identity and wallet</span></span><br><span class="line">        <span class="keyword">let</span> connectionOptions = &#123;</span><br><span class="line">            <span class="attr">identity</span>: userName,</span><br><span class="line">            <span class="attr">wallet</span>: wallet,</span><br><span class="line">            <span class="attr">discovery</span>: &#123; <span class="attr">enabled</span>:<span class="literal">true</span>, <span class="attr">asLocalhost</span>: <span class="literal">true</span> &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Connect to gateway using application specified parameters</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Connect to Fabric gateway.&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> gateway.connect(connectionProfile, connectionOptions);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Access PaperNet network</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Use network channel: mychannel.&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> network = <span class="keyword">await</span> gateway.getNetwork(<span class="string">&#x27;mychannel&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get addressability to commercial paper contract</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Use org.papernet.commercialpaper smart contract.&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> contract = <span class="keyword">await</span> network.getContract(<span class="string">&#x27;papercontract&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// issue commercial paper</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Submit commercial paper issue transaction.&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> issueResponse = <span class="keyword">await</span> contract.submitTransaction(<span class="string">&#x27;issue&#x27;</span>, <span class="string">&#x27;MagnetoCorp&#x27;</span>, <span class="string">&#x27;00001&#x27;</span>, <span class="string">&#x27;2020-05-31&#x27;</span>, <span class="string">&#x27;2020-11-30&#x27;</span>, <span class="string">&#x27;5000000&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// process response</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Process issue transaction response.&#x27;</span>+issueResponse);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> paper = CommercialPaper.fromBuffer(issueResponse);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;paper.issuer&#125;</span> commercial paper : <span class="subst">$&#123;paper.paperNumber&#125;</span> successfully issued for value <span class="subst">$&#123;paper.faceValue&#125;</span>`</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Transaction complete.&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Error processing transaction. <span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(error.stack);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Disconnect from the gateway</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Disconnect from Fabric gateway.&#x27;</span>);</span><br><span class="line">        gateway.disconnect();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">main().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Issue program complete.&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Issue program exception.&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">    <span class="built_in">console</span>.log(e.stack);</span><br><span class="line">    process.exit(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><ul><li><p><strong>钱包Wallet</strong></p><blockquote><p>钱包拥有一组身份——X.509 数字证书——可用于访问 PaperNet Channel或任何其他 Fabric 网络。钱包中的 X.509 数字证书将持有者与组织相关联，从而使他们有权在Channel中获得权利。另请注意，钱包不持有任何形式的现金或代币——它们持有身份。</p></blockquote></li><li><p><strong>网关Gateway</strong></p><blockquote><p><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/gateway.html">网关</a>识别一个或多个提供网络访问的 Peer 节点——在我们的例子中是 PaperNet。</p></blockquote><p><code>gateway.connect()</code> 有两个重要参数：</p><ul><li><strong>connectionProfile</strong>：<a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/connectionprofile.html">连接配置文件</a>的文件系统位置，用于将一组 Peer 节点标识为 PaperNet 的网关</li><li><strong>connectionOptions</strong>：一组用于控制 <code>issue.js</code> 与 PaperNet 交互的选项</li></ul><p>其中connection-org2.yaml的部分配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">channels:</span></span><br><span class="line">  <span class="attr">papernet:</span></span><br><span class="line">    <span class="attr">peers:</span></span><br><span class="line">      <span class="attr">peer1.magnetocorp.com:</span></span><br><span class="line">        <span class="attr">endorsingPeer:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">eventSource:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">peer2.digibank.com:</span></span><br><span class="line">        <span class="attr">endorsingPeer:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">eventSource:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">peers:</span></span><br><span class="line">  <span class="attr">peer1.magnetocorp.com:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">grpcs://localhost:7051</span></span><br><span class="line">    <span class="attr">grpcOptions:</span></span><br><span class="line">      <span class="attr">ssl-target-name-override:</span> <span class="string">peer1.magnetocorp.com</span></span><br><span class="line">      <span class="attr">request-timeout:</span> <span class="number">120</span></span><br><span class="line">    <span class="attr">tlsCACerts:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">certificates/magnetocorp/magnetocorp.com-cert.pem</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer2.digibank.com:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">grpcs://localhost:8051</span></span><br><span class="line">    <span class="attr">grpcOptions:</span></span><br><span class="line">      <span class="attr">ssl-target-name-override:</span> <span class="string">peer1.digibank.com</span></span><br><span class="line">    <span class="attr">tlsCACerts:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">certificates/digibank/digibank.com-cert.pem</span></span><br></pre></td></tr></table></figure><p>MagnetoCorp 拥有 <code>peer1.magenetocorp.com</code>，DigiBank 拥有 <code>peer2.digibank.com</code>，两者都有背书节点的角色。通过 <code>peers:</code> 键链接到这些 Peer 节点，其中包含有关如何连接它们的详细信息，包括它们各自的网络地址。</p></li><li><p><strong>Channel</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> network = <span class="keyword">await</span> gateway.getNetwork(<span class="string">&#x27;PaperNet&#x27;</span>);</span><br></pre></td></tr></table></figure><p>Fabric SDK提供选择特定的Channel以保证应用程序在不同的网络中获取不同的权限。</p></li><li><p><strong>获取Channel中已经部署的智能合约链码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> contract = <span class="keyword">await</span> network.getContract(<span class="string">&#x27;papercontract&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>提交交易</strong></p><p>交易原型为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Txn = issue</span><br><span class="line">Issuer = MagnetoCorp</span><br><span class="line">Paper = 00001</span><br><span class="line">Issue time = 31 May 2020 09:00:00 EST</span><br><span class="line">Maturity date = 30 November 2020</span><br><span class="line">Face value = 5M USD</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> issueResponse = <span class="keyword">await</span> contract.submitTransaction(<span class="string">&#x27;issue&#x27;</span>, <span class="string">&#x27;MagnetoCorp&#x27;</span>, <span class="string">&#x27;00001&#x27;</span>, <span class="string">&#x27;2020-05-31&#x27;</span>, <span class="string">&#x27;2020-11-30&#x27;</span>, <span class="string">&#x27;5000000&#x27;</span>);</span><br></pre></td></tr></table></figure><p><code>submitTransaction()</code> 参数的值将传递给智能合约中的 <code>issue()</code> 方法，并用于创建新的商业票据。后续在P2P网络的广播，背书，验证等流程不需要我们操作。</p></li><li><p><strong>处理响应</strong></p><blockquote><p>获取转码,并获取响应信息。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> paper = CommercialPaper.fromBuffer(issueResponse);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;paper.issuer&#125;</span> commercial paper : <span class="subst">$&#123;paper.paperNumber&#125;</span> successfully issued for value <span class="subst">$&#123;paper.faceValue&#125;</span>`</span>);</span><br></pre></td></tr></table></figure></li></ul><p><strong>总结：</strong></p><p>应用程序只负责用户到区块链网络的过程（UI），其中SDK封装了对身份调用、网络连接、交易…对智能合约的调用和部分对区块链状态信息的查看。开发者可以与智能合约一起设计，共同实现一个完整的功能。</p><p>参考：</p><p><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/application.html">Fabric官方文档2.2.0</a></p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fabirc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fabric智能合约开发基础</title>
      <link href="/2021/06/23/Fabric%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/06/23/Fabric%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="Fabric智能合约开发基础"><a href="#Fabric智能合约开发基础" class="headerlink" title="Fabric智能合约开发基础"></a>Fabric智能合约开发基础</h2><blockquote><p>区块链网络的核心是智能合约。</p><p>智能合约定义业务对象的不同状态，并管理对象在不同状态之间变化的过程。</p><p>在 PaperNet 案例中，商业票据智能合约中的代码定义了商业票据的有效状态，以及将票据从一种状态状态转变为另一种状态的交易逻辑。</p></blockquote><p>本案例实现了商业票据中最简单的三个功能：<strong>发行、购买、兑换</strong>。</p><blockquote><p>PaperNet 是一个商业票据网络，允许适当授权的参与者发行，交易，兑换和估价商业票据。<img alt="develop.systemscontext" data-src="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/_images/develop.diagram.1.png" class="lazyload"><em>PaperNet 商业票据网络。六个组织目前使用 PaperNet 网络发行，购买，出售，兑换和估价商业票据。MagentoCorp 发行和兑换商业票据。 DigiBank, BigFund，BrokerHouse 和 HedgeMatic 互相交易商业票据。RateM 为商业票据提供各种风险衡量标准。</em></p></blockquote><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/smartcontract.html#%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6">什么是智能合约以及智能合约为什么重要</a></li><li><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/smartcontract.html#%E5%90%88%E7%BA%A6%E7%B1%BB">如何定义智能合约</a></li><li><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/smartcontract.html#%E4%BA%A4%E6%98%93%E5%AE%9A%E4%B9%89">如何定义交易</a></li><li><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/smartcontract.html#%E4%BA%A4%E6%98%93%E9%80%BB%E8%BE%91">如何实现一笔交易</a></li><li><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/smartcontract.html#%E8%A1%A8%E7%A4%BA%E5%AF%B9%E8%B1%A1">如何在智能合约中表示业务对象</a></li><li><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/smartcontract.html#%E8%AE%BF%E9%97%AE%E8%B4%A6%E6%9C%AC">如何在账本中存储和检索对象</a></li></ul><h3 id="合约类"><a href="#合约类" class="headerlink" title="合约类"></a>合约类</h3><blockquote><p>扩展自 Hyperledger Fabric <code>Contract</code> <a href="https://hyperledger.github.io/fabric-chaincode-node/master/api/fabric-contract-api.Contract.html">类</a>，使用Contract类的内置功能，例如自动方法调用，<a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/transactioncontext.html">每个交易上下文</a>，<a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/transactionhandler.html">交易处理器</a>，和类共享状态等。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Contract(...)</span></span><br><span class="line"><span class="meta">@Default</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommercialPaperContract</span> <span class="keyword">implements</span> <span class="title">ContractInterface</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><h3 id="交易定义"><a href="#交易定义" class="headerlink" title="交易定义"></a>交易定义</h3><blockquote><p>参考<a href="https://github.com/hyperledger/fabric-samples/blob/master/commercial-paper/organization/magnetocorp//contract-java/src/main/java/org/example/CommercialPaperContract.java">基于Java的合约代码例子</a></p></blockquote><blockquote><p>Java 标注 <code>@Transaction</code> 用于标记该方法为交易定义；无论何时调用此合约来<code>发行</code>商业票据，都会调用该方法</p></blockquote><p><strong>发行</strong>交易：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transaction</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommercialPaper <span class="title">issue</span><span class="params">(CommercialPaperContext ctx,</span></span></span><br><span class="line"><span class="params"><span class="function">                             String issuer,</span></span></span><br><span class="line"><span class="params"><span class="function">                             String paperNumber,</span></span></span><br><span class="line"><span class="params"><span class="function">                             String issueDateTime,</span></span></span><br><span class="line"><span class="params"><span class="function">                             String maturityDateTime,</span></span></span><br><span class="line"><span class="params"><span class="function">                             <span class="keyword">int</span> faceValue)</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><p><code>CommercialPaperContext ctx </code> 称为<a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/transactioncontext.html"><strong>交易上下文</strong></a>，默认情况下，它维护与<a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/smartcontract.html#%E4%BA%A4%E6%98%93%E9%80%BB%E8%BE%91">交易逻辑</a>相关的每个合约和每个交易的信息。</p><p><strong>购买</strong>交易：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Txn = buy</span><br><span class="line">Issuer = MagnetoCorp</span><br><span class="line">Paper = 00001</span><br><span class="line">Current owner = MagnetoCorp</span><br><span class="line">New owner = DigiBank</span><br><span class="line">Purchase time = 31 May 2020 10:00:00 EST</span><br><span class="line">Price = 4.94M USD</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transaction</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommercialPaper <span class="title">buy</span><span class="params">(CommercialPaperContext ctx,</span></span></span><br><span class="line"><span class="params"><span class="function">                           String issuer,</span></span></span><br><span class="line"><span class="params"><span class="function">                           String paperNumber,</span></span></span><br><span class="line"><span class="params"><span class="function">                           String currentOwner,</span></span></span><br><span class="line"><span class="params"><span class="function">                           String newOwner,</span></span></span><br><span class="line"><span class="params"><span class="function">                           <span class="keyword">int</span> price,</span></span></span><br><span class="line"><span class="params"><span class="function">                           String purchaseDateTime)</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><p><strong>兑换</strong>交易：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Txn = redeem</span><br><span class="line">Issuer = MagnetoCorp</span><br><span class="line">Paper = 00001</span><br><span class="line">Redeemer = DigiBank</span><br><span class="line">Redeem time = 31 Dec 2020 12:00:00 EST</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transaction</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommercialPaper <span class="title">redeem</span><span class="params">(CommercialPaperContext ctx,</span></span></span><br><span class="line"><span class="params"><span class="function">                              String issuer,</span></span></span><br><span class="line"><span class="params"><span class="function">                              String paperNumber,</span></span></span><br><span class="line"><span class="params"><span class="function">                              String redeemingOwner,</span></span></span><br></pre></td></tr></table></figure><h3 id="交易逻辑"><a href="#交易逻辑" class="headerlink" title="交易逻辑"></a>交易逻辑</h3><ul><li><p>**发行交易 **导致<code>issue</code>方法被传递调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transaction</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommercialPaper <span class="title">issue</span><span class="params">(CommercialPaperContext ctx,</span></span></span><br><span class="line"><span class="params"><span class="function">                            String issuer,</span></span></span><br><span class="line"><span class="params"><span class="function">                            String paperNumber,</span></span></span><br><span class="line"><span class="params"><span class="function">                            String issueDateTime,</span></span></span><br><span class="line"><span class="params"><span class="function">                            String maturityDateTime,</span></span></span><br><span class="line"><span class="params"><span class="function">                            <span class="keyword">int</span> faceValue)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  System.out.println(ctx);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// create an instance of the paper</span></span><br><span class="line">  CommercialPaper paper = CommercialPaper.createInstance(issuer, paperNumber, issueDateTime, maturityDateTime,</span><br><span class="line">          faceValue,issuer,<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Smart contract, rather than paper, moves paper into ISSUED state</span></span><br><span class="line">  paper.setIssued();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Newly issued paper is owned by the issuer</span></span><br><span class="line">  paper.setOwner(issuer);</span><br><span class="line"></span><br><span class="line">  System.out.println(paper);</span><br><span class="line">  <span class="comment">// Add the paper to the list of all similar commercial papers in the ledger</span></span><br><span class="line">  <span class="comment">// world state</span></span><br><span class="line">  ctx.paperList.addPaper(paper);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Must return a serialized paper to caller of smart contract</span></span><br><span class="line">  <span class="keyword">return</span> paper;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑如下：</p><ul><li>获取交易输入变量</li><li>创建新的商业票据 <code>paper</code></li><li>使用 <code>paperList</code> 将其添加到所有商业票据的列表中</li><li>将新的商业票据作为交易响应返回</li></ul></li><li><p><strong>购买交易</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transaction</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommercialPaper <span class="title">buy</span><span class="params">(CommercialPaperContext ctx,</span></span></span><br><span class="line"><span class="params"><span class="function">                           String issuer,</span></span></span><br><span class="line"><span class="params"><span class="function">                           String paperNumber,</span></span></span><br><span class="line"><span class="params"><span class="function">                           String currentOwner,</span></span></span><br><span class="line"><span class="params"><span class="function">                           String newOwner,</span></span></span><br><span class="line"><span class="params"><span class="function">                           <span class="keyword">int</span> price,</span></span></span><br><span class="line"><span class="params"><span class="function">                           String purchaseDateTime)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Retrieve the current paper using key fields provided</span></span><br><span class="line">    String paperKey = State.makeKey(<span class="keyword">new</span> String[] &#123; paperNumber &#125;);</span><br><span class="line">    CommercialPaper paper = ctx.paperList.getPaper(paperKey);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Validate current owner</span></span><br><span class="line">    <span class="keyword">if</span> (!paper.getOwner().equals(currentOwner)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Paper &quot;</span> + issuer + paperNumber + <span class="string">&quot; is not owned by &quot;</span> + currentOwner);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// First buy moves state from ISSUED to TRADING</span></span><br><span class="line">    <span class="keyword">if</span> (paper.isIssued()) &#123;</span><br><span class="line">        paper.setTrading();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check paper is not already REDEEMED</span></span><br><span class="line">    <span class="keyword">if</span> (paper.isTrading()) &#123;</span><br><span class="line">        paper.setOwner(newOwner);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                <span class="string">&quot;Paper &quot;</span> + issuer + paperNumber + <span class="string">&quot; is not trading. Current state = &quot;</span> + paper.getState());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update the paper</span></span><br><span class="line">    ctx.paperList.updatePaper(paper);</span><br><span class="line">    <span class="keyword">return</span> paper;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑如下：</p><ul><li>检查一些前提条件</li><li>设置新拥有者</li><li>更新账本上的商业票据</li><li>并将更新的商业票据作为交易响应返回</li></ul></li><li><p><strong>兑换交易类似</strong></p></li></ul><h3 id="对象的表示"><a href="#对象的表示" class="headerlink" title="对象的表示"></a>对象的表示</h3><blockquote><p>上面的合约、运行逻辑已经有了，但是这些代码怎么工作？</p></blockquote><blockquote><p>参考 <a href="https://github.com/hyperledger/fabric-samples/blob/master/commercial-paper/organization/magnetocorp/contract-java/src/main/java/org/example/CommercialPaper.java">CommercialPaper  类</a> , 该类包含商业票据状态的内存表示。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DataType()</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommercialPaper</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><ul><li><code>createInstance</code> 方法使用提供的参数初始化一个新的商业票据。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CommercialPaper <span class="title">createInstance</span><span class="params">(String issuer, String paperNumber, String issueDateTime,</span></span></span><br><span class="line"><span class="params"><span class="function">        String maturityDateTime, <span class="keyword">int</span> faceValue, String owner, String state)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CommercialPaper().setIssuer(issuer).setPaperNumber(paperNumber).setMaturityDateTime(maturityDateTime)</span><br><span class="line">            .setFaceValue(faceValue).setKey().setIssueDateTime(issueDateTime).setOwner(owner).setState(state);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的几个要点：</p><ul><li><p>这是一个内存中的表示; 我们<a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/smartcontract.html#%E8%AE%BF%E9%97%AE%E8%B4%A6%E6%9C%AC">稍后</a>会看到它如何在帐本上显示。</p></li><li><p><code>CommercialPaper</code> 类扩展了 <code>State</code> 类。 <code>State</code> 是一个应用程序定义的类，它为状态创建一个公共抽象。所有状态都有一个它们代表的业务对象类、一个复合键，可以被序列化和反序列化，等等。当我们在帐本上存储多个业务对象类型时， <code>State</code> 可以帮助我们的代码更清晰。检查 <code>state.js</code> <a href="https://github.com/hyperledger/fabric-samples/blob/master/commercial-paper/organization/magnetocorp/contract/ledger-api/state.js">文件</a>中的 <code>State</code> 类。</p></li><li><p>票据在创建时会计算自己的密钥，在访问帐本时将使用此密钥。密钥由 <code>issuer</code> 和 <code>paperNumber</code> 的组合形成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">constructor(obj) &#123;</span><br><span class="line">  <span class="keyword">super</span>(CommercialPaper.getClass(), [obj.issuer, obj.paperNumber]);</span><br><span class="line">  Object.assign(<span class="keyword">this</span>, obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>票据通过交易而不是票据类变更到 <code>ISSUED</code> 状态。</p></li></ul><h3 id="访问账本"><a href="#访问账本" class="headerlink" title="访问账本"></a>访问账本</h3><blockquote><p>参考 <a href="https://github.com/hyperledger/fabric-samples/blob/master/commercial-paper/organization/magnetocorp/contract-java/src/main/java/org/example/PaperList.java">PaperList 类</a> , 此工具类用于管理 Hyperledger Fabric 状态数据库中的所有 PaperNet 商业票据。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.example.ledgerapi.StateList;</span><br><span class="line"><span class="keyword">import</span> org.hyperledger.fabric.contract.Context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaperList</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StateList stateList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PaperList</span><span class="params">(Context ctx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stateList = StateList.getStateList(ctx, PaperList.class.getSimpleName(), CommercialPaper::deserialize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaperList <span class="title">addPaper</span><span class="params">(CommercialPaper paper)</span> </span>&#123;</span><br><span class="line">        stateList.addState(paper);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommercialPaper <span class="title">getPaper</span><span class="params">(String paperKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (CommercialPaper) <span class="keyword">this</span>.stateList.getState(paperKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaperList <span class="title">updatePaper</span><span class="params">(CommercialPaper paper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stateList.updateState(paper);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与 <code>CommercialPaper</code> 类一样，此类扩展了应用程序定义的 <code>StateList</code> 类，该类为一系列状态创建了一个通用抽象——在本例中是 PaperNet 中的所有商业票据。</p><p><code>StateList</code> 类使用 Fabric API <code>addState()</code> 将商业票据作为状态数据写在帐本中。</p><p>帐本中的每个状态数据都需要以下两个基本要素：</p><ul><li><strong>键（Key）</strong>:  由 <code>createCompositeKey()</code> 使用固定名称和 <code>state</code> 密钥形成。在构造 <code>PaperList</code> 对象时分配了名称，<code>state.getSplitKey()</code> 确定每个状态的唯一键。</li><li><strong>数据（Data）</strong>:  只是商业票据状态的序列化形式，使用 <code>State.serialize()</code> 方法创建。<code>State</code> 类使用 JSON 对数据进行序列化和反序列化，并根据需要使用 State 的业务对象类，在我们的例子中为 <code>CommercialPaper</code>，在构造 <code>PaperList</code> 对象时再次设置。</li></ul><p><strong>注意</strong> <code>StateList</code> 不存储有关单个状态或状态总列表的任何内容——它将所有这些状态委托给 Fabric 状态数据库。StateList <code>getState()</code> 和 <code>updateState()</code> 方法以类似的方式工作。</p><p>参考：</p><p><a href="https://github.com/hyperledger/fabric-samples/tree/master/commercial-paper">Fabric-Samples commercial-paper案例</a></p><p><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/smartcontract.html">Fabric 文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fabirc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fabric测试网络搭建</title>
      <link href="/2021/06/23/Fabric%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C%E6%90%AD%E5%BB%BA/"/>
      <url>/2021/06/23/Fabric%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="Fabric测试网络搭建"><a href="#Fabric测试网络搭建" class="headerlink" title="Fabric测试网络搭建"></a>Fabric测试网络搭建</h2><blockquote><p>aliyun centos7 学生机一台 </p></blockquote><h3 id="前置条件："><a href="#前置条件：" class="headerlink" title="前置条件："></a>前置条件：</h3><ul><li><p>Go语言安装</p></li><li><p>Docker、Docker-Compose安装</p></li><li><p>Git安装</p></li><li><p>node.js、npm安装（使用node.js开发application可装）</p></li></ul><h3 id="Fabric环境搭建："><a href="#Fabric环境搭建：" class="headerlink" title="Fabric环境搭建："></a>Fabric环境搭建：</h3><blockquote><p>我当前的空目录地址为：/root/go/src/github.com/kid1999</p></blockquote><p>官方给定的安装流程：</p><ul><li>如果需要，请克隆 <a href="https://github.com/hyperledger/fabric-samples">hyperledger/fabric-samples</a> 仓库</li><li>选择合适的版本</li><li>将指定版本的 Hyperledger Fabric 平台特定<a href="https://github.com/hyperledger/fabric/releases/download/v2.2.3/hyperledger-fabric-linux-amd64-2.2.3.tar.gz">二进制文件和配置文件</a>安装到 fabric-samples 下的 /bin 和 /config 目录中</li><li>下载指定版本的 Hyperledger Fabric docker 镜像</li></ul><p>直接运行脚本即可，默认拉取最新的版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://bit.ly/2ysbOFE | bash -s -- &lt;fabric_version&gt; &lt;fabric-ca_version&gt;</span><br><span class="line">curl -sSL https://bit.ly/2ysbOFE | bash -s -- 2.2.3 1.5.0</span><br></pre></td></tr></table></figure><p>细节参照 脚本<a href="https://raw.githubusercontent.com/hyperledger/fabric/master/scripts/bootstrap.sh">boostrap.sh</a></p><p>将命令加入PATH环境变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/root/go/src/github.com/kid1999/fabric-samples/bin:$PATH</span><br></pre></td></tr></table></figure><h3 id="启动测试网络"><a href="#启动测试网络" class="headerlink" title="启动测试网络"></a>启动测试网络</h3><ul><li>找到网络管理脚本：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd fabric-samples/test-network</span><br></pre></td></tr></table></figure><ul><li><p>附上network.sh的帮助文档（已翻译）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">用法：</span><br><span class="line">    network.sh&lt;Mode&gt;[标志]</span><br><span class="line">    模式：</span><br><span class="line">        up - 启动结构订购程序和对等节点。未创建频道</span><br><span class="line">        up createChannel — 启动具有一个通道的结构网络</span><br><span class="line">        createChannel - 在创建网络后创建并加入频道</span><br><span class="line">        deployCC - 在通道上部署资产转移或指定基本链码</span><br><span class="line">        down - 关闭docker compose，清除网络</span><br><span class="line">        restart - 重新启动网络</span><br><span class="line"></span><br><span class="line">    参数：</span><br><span class="line">        -ca&lt;使用CAs&gt;-创建证书颁发机构以生成加密材料</span><br><span class="line">        -c&lt;channel name&gt;-要使用的频道名称（默认为“mychannel”）</span><br><span class="line">        -s &lt;dbtype&gt; 要使用的数据库后端：goleveldb（默认）或couchdb</span><br><span class="line">        -r&lt;max retry&gt;-CLI在一定次数的尝试后超时（默认为5）</span><br><span class="line">        -d&lt;delay&gt;-延迟持续时间（秒）（默认为3）</span><br><span class="line">        -ccn&lt;name&gt;-要部署的链码的短名称：basic（默认）、ledger、private、secured</span><br><span class="line">        -ccl&lt;language&gt;-要部署的链码的编程语言：go（默认）、java、javascript、typescript</span><br><span class="line">        -ccv&lt;版本&gt;-链码版本。1.0（默认）</span><br><span class="line">        -ccs&lt;序列&gt;——链码定义序列。必须是整数、1（默认）、2、3等</span><br><span class="line">        -ccp&lt;path&gt;-可选，链码路径。链码的路径。提供时，-ccn将用作已部署名称，而不是已知链码的短名称。</span><br><span class="line">        -cci&lt;fcn name&gt;-可选，chaincode init需要调用的函数。如果提供此函数，则在部署链码后将调用此函数，并将链码定义为所需的初始化。</span><br><span class="line">        -i&lt;imagetag&gt;-用于启动网络的标签（默认为“latest”）</span><br><span class="line">        -cai&lt;ca\u imagetag&gt;-用于ca的图像标签（默认为“latest”）</span><br><span class="line">        -verbose -详细模式</span><br><span class="line">        -h -打印此信息</span><br><span class="line">    </span><br><span class="line">可能的模式和标志组合</span><br><span class="line">         up -ca -c -r -d -s -i -verbose</span><br><span class="line">         up createChannel -ca -c -r -d -s -i -verbose</span><br><span class="line">         createChannel -c -r -d -verbose</span><br><span class="line">         deployCC -ccn -ccl -ccv -ccs -ccp -cci -r -d -verbose</span><br><span class="line"></span><br><span class="line">    采用所有默认值：</span><br><span class="line">    network.sh up</span><br><span class="line">    示例：</span><br><span class="line">       network.sh up createChannel -ca -c mychannel -s couchdb -i 2.0.0</span><br><span class="line">       network.sh createChannel -c channelName</span><br><span class="line">       network.sh deployCC -ccn basic -ccl javascript</span><br></pre></td></tr></table></figure></li><li><p>删除关闭之前的工程、容器</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./network.sh down</span><br></pre></td></tr></table></figure><ul><li>启动网络</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./network.sh up</span><br></pre></td></tr></table></figure><p><img data-src="https://pic.imgdb.cn/item/60d1ee1e844ef46bb2201f54.jpg" class="lazyload"></p><p><img data-src="https://pic.imgdb.cn/item/60d1ea6a844ef46bb2006086.jpg" class="lazyload"></p><p>此命令创建一个由两个Peer节点和一个Orderer节点组成的Fabric网络。 运行<code>./network.sh up</code>时没有创建任何channel。</p><blockquote><p><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/peers/peers.html">Peer 节点</a> 是任何Fabric网络的基本组件。 Peer节点存储区块链账本并在进行交易之前对其进行验证。 同行运行包含业务用于管理区块链账本的智能合约上的业务逻辑。</p></blockquote><blockquote><p>Orderer节点 负责从客户那里收到认可的交易后，他们就交易顺序达成共识，然后打包区块发送给Peer节点验证。Orderer节点还可以操作定义Fabric网络的功能的系统通道，例如如何制作块以及节点可以使用的Fabric版本。</p></blockquote><blockquote><p>系统通道定义了哪个组织是该联盟的成员。</p></blockquote><ul><li><p>创建一个Channel</p><p>在Org1和Org2之间创建名为mychannel的通道并加入他们的Peer节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./network.sh createChannel -c mychannel</span><br></pre></td></tr></table></figure></li><li><p>在Channel里启动一个chainCode</p><blockquote><p>智能合约包含管理区块链账本上资产的业务逻辑。 由成员运行的应用程序网络可以在账本上调用智能合约创建，更改和转让这些资产。 应用程序还通过智能合约查询，以在分类帐上读取数据。</p></blockquote><blockquote><p><code>deployCC</code>子命令将在<code>peer0.org1.example.com</code>和<code>peer0.org2.example.com</code>上安装 <strong>asset-transfer (basic)</strong> 链码。 然后在使用<code>-c</code>标志（或<code>mychannel</code>如果未指定通道）的通道上部署指定的通道的链码。 如果您第一次部署 链码，脚本将安装链码的依赖项。默认情况下，脚本安装Go版本的 asset-transfer (basic) 链码。 但是您可以使用语言便签 <code>-l</code>，用于安装 Java 或 javascript 版本的链码。 您可以在 <code>fabric-samples</code> 目录的 <code>asset-transfer-basic</code> 文件夹中找到 asset-transfer (basic) 链码。 此目录包含作为案例和用来突显 Fabric 特征的样本链码。</p></blockquote><blockquote><p>如何指定特定组织加入channel还值得深入探讨。</p></blockquote></li></ul><ul><li><p>与网络交互</p><blockquote><p>启用测试网络后，可以使用<code>Peer</code> CLI与您的网络进行交互。 <code>Peer</code> CLI允许您调用已部署的智能合约，更新通道，或安装和部署新的智能合约。</p></blockquote><p>详情参见Peer文档。</p></li></ul><p>参考：</p><p><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/install.html">Fabric2.2.0官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fabirc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fabric基础理论</title>
      <link href="/2021/06/21/Fabric%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA/"/>
      <url>/2021/06/21/Fabric%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="Fabric基础"><a href="#Fabric基础" class="headerlink" title="Fabric基础"></a>Fabric基础</h2><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li>总体概述</li><li>Peer解析</li><li>Order解析</li><li>MSP与CA</li><li>开发指南</li><li>部署实践</li></ul><h3 id="总体概览"><a href="#总体概览" class="headerlink" title="总体概览"></a>总体概览</h3><ol><li><strong>联盟链与公链</strong></li></ol><p><img data-src="https://pic.imgdb.cn/item/60d0081a844ef46bb28ef68c.jpg" class="lazyload"></p><p>​        Fabric是基于联盟链（参与需要联盟许可）模型设计的，抛去公链的挖矿和无准入门槛。采用外部激励和较小的网络规模提高并发量。</p><ol start="2"><li><p><strong>Fabric的模型</strong></p><p><img data-src="https://pic.imgdb.cn/item/60d00931844ef46bb295be93.jpg" class="lazyload"></p></li><li><p><strong>Fabric网络模型</strong></p></li></ol><p><img data-src="https://pic.imgdb.cn/item/60d02d97844ef46bb2b9b210.jpg" class="lazyload"></p><p>​    Fabric的网络分为channel和联盟，其中一个channel包含几个信息共享的组织，每个组织又有自己的其他小圈子，所以各个圈子错综复杂构成了整个联盟链。</p><ol start="4"><li><p><strong>Fabric交易流程</strong></p><ul><li>proposal - 建议</li></ul><p><img data-src="https://pic.imgdb.cn/item/60d030bb844ef46bb2d3945d.jpg" class="lazyload"></p><p>用户向各组织的Peer节点发送交易请求</p><ul><li>Peer节点根据背书策略运行智能合约。</li><li>运行成功后，签名回传给用户。</li><li>用户整合签名，打包广播发送给orderer节点</li><li>Orderer节点对接收到的所以交易进行全排序</li><li>Orderer节点将排序好的区块发送给Peer节点</li><li>Peer验证区块交易，通过的区块被提交到账本</li><li>最后Peer向用户发送消息，告知交易已提交</li></ul><p><img data-src="https://pic.imgdb.cn/item/60d0426b844ef46bb25e7cc7.jpg" class="lazyload"></p></li><li><p><strong>应用开发</strong></p><p><img data-src="https://pic.imgdb.cn/item/60d03e83844ef46bb23ffb89.jpg" class="lazyload"></p><p>开发者只需关注application的UI逻辑设计和核心chainCode也就是背书策略和智能合约的执行代码。</p><ul><li>寻找应用场景</li><li>细化生命周期 （状态、数据转移）</li><li>数据结构</li><li>智能合约设计</li><li>前端与SDK交互</li></ul></li></ol><h3 id="Peer解析"><a href="#Peer解析" class="headerlink" title="Peer解析"></a>Peer解析</h3><blockquote><p>Peer 节点按照作用的不同可分为两种：Endorser背书节点和Committer记账节点。</p></blockquote><p>Endorser节点模拟执行交易，不管失败成功，然后签名（ESCC）返回客户端。</p><p>commentter节点根据（VSCC）验证签名，再根据设置的背书策略判断交易是否合理。</p><ul><li><p><strong>背书策略</strong>在chaincode实例化时指定</p><p>其语法包括：AND、OR、OutOf、E  （ 可嵌套）</p><p>智能合约的权限包括：member、admin、client、peer</p><p>如<code>OR(org1.member,org2.member)</code> 意为：只要组织1的member或者组织2的member同意即可满足要求。</p></li></ul><ul><li><p>Fabric的<strong>账本</strong> （有序不可修改的交易记录）</p><ol><li>blockchain： channel的配置信息、历史交易记录</li><li>world state：维护账本当前状态，方便app进行快速查询</li></ol><p><img data-src="https://pic.imgdb.cn/item/60d046a6844ef46bb280516a.jpg" class="lazyload"></p></li><li><p><strong>chaincode 智能合约</strong></p><blockquote><p>不同组织之间执行的同一个规则代码，是Fabric的核心，由chaincode的将交易打包到区块。</p></blockquote><p><img data-src="https://pic.imgdb.cn/item/60d04b13844ef46bb2a2c9ff.jpg" class="lazyload"></p><ul><li>开发者开发智能合约和配套的Application</li><li>智能合约通过API调用操作world state，其中get直接返回数据不会生成交易记录。put、del会修改world state的同时在block chain上增加新的交易记录。</li></ul><p>智能合约的开发流程：打包、安装、实例化、运行、更新、运行….</p><pre><code>1. 编写合约 2. 打包合约</code></pre><p><img alt="image-20210621163824022" data-src="https://i.loli.net/2021/06/21/zESQvitZGVsulpB.png" class="lazyload"></p><p>​    打包时可以指定源码、name、版本、背书策略、签名</p><ol start="3"><li><p>安装合约</p><p>一个channel可以安装多个不同的合约、合约必须安装在整个channel所有的背书peer上</p></li></ol><ul><li><p>system chainCode</p><blockquote><p>系统合约代码运行在peer节点上</p></blockquote><ol><li>LSCC（lifecycle system chaincode） 处理chainCode包括：打包、安装….</li><li>CSCC（configuration system chaincode）处理channel 在peer上的系统配置</li><li>QSCC（query system chaincode）提供查询API，包括区块和交易记录</li></ol></li></ul></li><li><p><strong>Gossip 信息传输协议</strong> : 最终一致性</p><blockquote><p>像流行病和绯闻一样在网络中传播，非法数据会在第一时间被停止传播</p></blockquote><ul><li>负责Peer的发现管理和channel成员的状态</li><li>Peer节点对账本的传播</li><li>对数据落后的peer采取点对点更新</li></ul></li><li><p><strong>Leader Peer 和 Anchor Peer</strong></p><blockquote><p>leader peer 可以联系Ordering service 获取新区块，然后传播给其他committing peer，其他committing peer再继续散播</p><p>leader peer可以静态指定 也可以基于选举</p></blockquote><blockquote><p>Anchor Peer 基于Gossip协议使channel上各节点相互认识：A –&gt; B 只需要 A –&gt; A’Anchor Peer –&gt; B’Anchor Peer –&gt;B</p></blockquote></li></ul><ul><li><p><strong>private data 私有数据</strong></p><blockquote><p>将需要自己或极个别组织知道的数据单独存到一个private data数据库，根据private data数据库的策略来进行访问限制，即使是Ordering service也不能访问该数据，该数据也用Gossip协议传输。</p></blockquote><p><img data-src="https://pic.imgdb.cn/item/60d0591f844ef46bb20bcfb5.jpg" class="lazyload"></p></li></ul><ul><li><p><strong>Fabric网络</strong></p><ul><li>配置、启动Ordering service</li><li>配置、启动Peer 节点</li><li>在Peer节点上安装chaincode</li><li>创建channel</li><li>Peer节点加入channel</li><li>实例化chaincode、指定背书策略</li></ul><p><img alt="image-20210621172743741" data-src="https://i.loli.net/2021/06/21/cmdYsaiCwBkV58T.png" class="lazyload"></p></li></ul><h3 id="Orderer解析"><a href="#Orderer解析" class="headerlink" title="Orderer解析"></a>Orderer解析</h3><ul><li><p><strong>全排序 total order</strong></p><blockquote><p>各Orderer出的区块必须保证一致，且允许Orderer的容错（挂掉）</p><p>具有强一致性，不同于公链的概率一致性</p><p>Orderer不是拜占庭容错而是CFT容错，但整个Chain是拜占庭容错</p></blockquote></li><li><p><strong>channels</strong></p><p><img data-src="https://pic.imgdb.cn/item/60d08f36844ef46bb25588ef.jpg" class="lazyload"></p><ul><li><p>系统初始创建一个Genesis block 其中包括System channel的配置</p></li><li><p>所有的Order都需要同样的配置启动。</p></li><li><p>启动之后，系统会自动创建一个system channel运行在每一个Orderer上</p></li><li><p>当创建一个新的channel A时相当于向system channel 发送一个新交易</p></li><li><p>并且将新channel 的配置信息 作为新channel的Genesis block启动，运行在每一个Peer上。</p></li></ul></li><li><p><strong>Orderer的排序策略</strong></p><ul><li>Solo 仅供试验 ： 使用一个节点排序序列化完成出块。</li></ul><p><img data-src="https://pic.imgdb.cn/item/60d092de844ef46bb2741081.jpg" class="lazyload"></p><ul><li>Kafka ：基于Kafka集群的排序（消息队列 –&gt; 先来先得）<br><img data-src="https://pic.imgdb.cn/item/60d094fa844ef46bb2879727.jpg" class="lazyload"><br>​    因为Kafka已经对交易做了时间排序，但是为了保证每个区块出块相同，需要Orderer向Kafka发送一个TTC消息。</li></ul><p>​        1. Orderer 向 Kafka 发送一个TTC消息</p><p>​        2. Orderer接收到Kafka的消息</p><p>​        3. Orderer 将TTC 之前的交易打包成区块</p><p>​    由于每个Orderer得到的消息相同，所以出的块也是相同的。</p><p>​    为了解决更新配置时导致Kafka消息鉴定失败的问题，为消息添加了Version，Orderer得到版本不对的消息时重新鉴定并发送回Kafka共识。</p><ul><li><p>Raft </p><blockquote><p>基于 Etcd/raft library</p><p>Raft与Kafka一样实现了CFT的共识算法，简单易部署去除了Kafka和zookeeper的依赖。</p></blockquote><p><img data-src="https://pic.imgdb.cn/item/60d09b7d844ef46bb2c6e8ee.jpg" class="lazyload"></p><p>基于Block做共识而不同于Kafka使用交易进行共识。Raft中只有Leader节点产生区块，Follower同步区块。</p></li></ul></li><li><p><strong>Orderer中的Permission</strong></p><p><img data-src="https://pic.imgdb.cn/item/60d09d5b844ef46bb2d85379.jpg" class="lazyload"></p><p>对签名进行许可验证，先是signature policy验证 and or NOutOf 是否满足，再对signature policy结果进行验证 any all..是否满足。</p></li></ul><h3 id="MSP与CA"><a href="#MSP与CA" class="headerlink" title="MSP与CA"></a>MSP与CA</h3><blockquote><p>….暂时听不懂。</p></blockquote><h3 id="应用开发指南"><a href="#应用开发指南" class="headerlink" title="应用开发指南"></a>应用开发指南</h3><ul><li><p>节点部分</p><ul><li>生成 CA 认证节点</li><li>生成Genesis block file</li><li>启动Orderer 和 Peer节点</li></ul></li><li><p>通道部分</p><ul><li>生成channel boostrap file</li><li>创建 channel</li><li>Peer节点加入channel</li></ul></li><li><p>业务开发</p><ul><li>chain code 开发周期</li><li>（最小知识）黑盒开发</li></ul></li></ul><ul><li><p>技术体系</p><ul><li>依赖管理： dep、govendor</li><li>异常处理：defer、await</li><li>测试流水线：mock、smoke</li></ul></li><li><p>密码PKI体系：</p><ul><li>ECDSA椭圆圆锥曲线加密</li><li>X509</li><li>HSM和pkcs11</li></ul></li><li><p>Dev OPs</p><ul><li>Hyperledger Fabric</li><li>Golang / Java…</li><li>Docker</li><li>GRPC</li></ul></li><li><p>关于Go的最小chainCode实例</p><p><img data-src="https://pic.imgdb.cn/item/60d19b50844ef46bb21ad0a4.jpg" class="lazyload"></p><p>更多编程技巧参见官网文档SDK API介绍。</p></li></ul><h3 id="部署实践"><a href="#部署实践" class="headerlink" title="部署实践"></a>部署实践</h3><blockquote><p>环境：Docker、K8S</p></blockquote><p>详情参见下一篇文章Fabric测试网络的搭建</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Fabric不同于传统区块链（公链），基于联盟链放弃POW的过程增加吞吐量和性能。适用于各商业场景，根据不同的channel将业务隔绝，又将不同的channel统一为一个联盟链。开发者只需关注Application和chainCode的开发即可。</p><p><strong>参考：</strong></p><p><a href="https://www.bilibili.com/video/BV1L7411d7gs">IBM 开放技术*微讲堂 超级账本Fabric v2.0 系列课程</a></p><p><a href="https://www.bilibili.com/video/BV1Sb41147hH">IBM 开放技术*微讲堂 超级账本Fabric v1.4 系列课程</a></p><p><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/">Fabric官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fabirc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solidity基础</title>
      <link href="/2021/06/20/Solidity%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/06/20/Solidity%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="一个Solidity智能合约的定义："><a href="#一个Solidity智能合约的定义：" class="headerlink" title="一个Solidity智能合约的定义："></a>一个Solidity智能合约的定义：</h3><blockquote><p>运行在区块链上的一个服务，代码可见，大家都可以调用执行其中的方法，完成信息读写，转账等功能。</p></blockquote><h3 id="一个简单的Solidity智能合约的构成："><a href="#一个简单的Solidity智能合约的构成：" class="headerlink" title="一个简单的Solidity智能合约的构成："></a>一个简单的Solidity智能合约的构成：</h3><blockquote><p>其语法类似 JS，也是运行在虚拟机上的。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.5</span><span class="number">.1</span>;<span class="comment">// EVM编译器版本</span></span><br><span class="line"></span><br><span class="line">contract MyContract&#123;<span class="comment">// 一个合约 类比Java中的一个类</span></span><br><span class="line">    string value;   <span class="comment">// 定义一个变量，默认保存在区块链上</span></span><br><span class="line">    </span><br><span class="line">    <span class="title">constructor</span>(<span class="params"></span>) <span class="title">public</span>&#123;<span class="comment">// 初始化函数</span></span><br><span class="line">        value = <span class="string">&quot;MyContract&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">// 一个get方法</span></span><br><span class="line">    <span class="comment">// public说明这个一个公开可调用的方法</span></span><br><span class="line">    <span class="comment">// view说明这个方法只读不可写</span></span><br><span class="line">    <span class="comment">// returns说明这个函数的回传值类型</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span>(<span class="params">string memory</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 重点在memory关键字 说明这个变量只存在于内存中，不保存于区块链中</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params">string memory _value</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        value = _value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是智能合约中各个变量的生命周期由关键字把握，由于每一步操作都是会消耗gas的，所以尽量要求操作简单直接，不要出现多余的浪费。</p><h3 id="简单代码的编写调试运行："><a href="#简单代码的编写调试运行：" class="headerlink" title="简单代码的编写调试运行："></a>简单代码的编写调试运行：</h3><blockquote><p> 本文使用的<a href="http://remix.app.hubwiz.com/#optimize=false&runs=200&evmVersion=null&version=soljson-v0.5.17+commit.d19bba13.js">Remix</a>直接编写运行，Remix提供各个版本的编译环境和模拟区块链环境提供账户以供测试。</p></blockquote><ol><li><strong>编写代码</strong></li></ol><p><img data-src="https://pic.imgdb.cn/item/60ceb37d844ef46bb2a5bb77.jpg" class="lazyload"></p><ol start="2"><li><strong>编译</strong></li></ol><p><img data-src="https://pic.imgdb.cn/item/60ceb40d844ef46bb2a9ebdd.jpg" class="lazyload"></p><ol start="3"><li><strong>部署</strong></li></ol><p><img alt="image-20210620112330856" data-src="https://i.loli.net/2021/06/20/Yl1RnFqAUP67oI3.png" class="lazyload"></p><p>当用户调用set方法时：</p><p><img data-src="https://pic.imgdb.cn/item/60ced128844ef46bb28855d7.jpg" class="lazyload"></p><p>调用get方法时：</p><p><img data-src="https://pic.imgdb.cn/item/60ced1fa844ef46bb28f41c9.jpg" class="lazyload"></p><h3 id="智能合约的生命周期："><a href="#智能合约的生命周期：" class="headerlink" title="智能合约的生命周期："></a>智能合约的生命周期：</h3><p>Solidity 的代码生命周期离不开编译、部署、执行、销毁这四个阶段。</p><p><img alt="img" data-src="https://static001.infoq.cn/resource/image/5f/8e/5f35e9b2fdf59b8668acc1af1ae8b58e.jpg" class="lazyload"></p><p>经编译后，Solidity 文件会生成字节码。这是一种类似 jvm 字节码的代码。部署时，字节码与构造参数会被构建成交易，这笔交易会被打包到区块中，经由网络共识过程，最后在各区块链节点上构建合约，并将合约地址返还用户。</p><p>当用户准备调用该合约上的函数时，调用请求同样也会经历交易、区块、共识的过程，最终在各节点上由 EVM 虚拟机来执行。</p><h4 id="比如下述代码的运行流程："><a href="#比如下述代码的运行流程：" class="headerlink" title="比如下述代码的运行流程："></a>比如下述代码的运行流程：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.25</span>;</span><br><span class="line"></span><br><span class="line">contract Demo&#123;</span><br><span class="line">    uint private _state;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">uint state</span>)</span>&#123;</span><br><span class="line">        _state = state;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params">uint state</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        _state = state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p><strong>编译</strong> </p><p>源代码编译完后，可以通过 ByteCode 按钮得到它的二进制：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">608060405234801561001057600080fd5b506040516020806100ed83398101806040528101908080519060200190929190505050806000819055505060a4806100496000396000f300608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806360fe47b1146044575b600080fd5b348015604f57600080fd5b50606c60048036038101908080359060200190929190505050606e565b005b80600081905550505600a165627a7a723058204ed906444cc4c9aabd183c52b2d486dfc5dea9801260c337185dad20e11f811b0029</span><br></pre></td></tr></table></figure><p>还可以得到对应的字节码（OpCode）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP1 PUSH2 0xED DUP4 CODECOPY DUP2 ADD DUP1 PUSH1 0x40 MSTORE DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP DUP1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP POP PUSH1 0xA4 DUP1 PUSH2 0x49 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x3F JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP1 PUSH4 0x60FE47B1 EQ PUSH1 0x44 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH1 0x4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x6C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH1 0x6E JUMP JUMPDEST STOP JUMPDEST DUP1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP POP JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 0x4e 0xd9 MOD DIFFICULTY 0x4c 0xc4 0xc9 0xaa 0xbd XOR EXTCODECOPY MSTORE 0xb2 0xd4 DUP7 0xdf 0xc5 0xde 0xa9 DUP1 SLT PUSH1 0xC3 CALLDATACOPY XOR 0x5d 0xad KECCAK256 0xe1 0x1f DUP2 SHL STOP 0x29 </span><br></pre></td></tr></table></figure><p>其中下述指令集为 set 函数对应的代码，后面会解释 set 函数如何运行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JUMPDEST DUP1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP POP JUMP STOP</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><strong>部署</strong></li></ol><p>编译完后，即可在 remix 上对代码进行部署，构造参数传入 0x123:</p><p><img alt="img" data-src="https://static001.infoq.cn/resource/image/67/70/672172b94043bf4cc5b975f203a95270.jpg" class="lazyload"></p><p>部署成功后，可得到一条交易回执：</p><p><img alt="img" data-src="https://static001.infoq.cn/resource/image/87/ab/87213b8164635daa2680020428afa6ab.jpg" class="lazyload"></p><p>点开 input，可以看到具体的交易输入数据：</p><p><img alt="img" data-src="https://static001.infoq.cn/resource/image/5a/ce/5a1dc0efd4bb9897a5854993074e85ce.jpg" class="lazyload"></p><p>上面这段数据中，标黄的部分正好是前文中的合约二进制；而标紫的部分，则对应了传入的构造参数 0x123。</p><p>​    <strong>总结部署全过程：</strong></p><ul><li>客户端将部署请求( <em>合约二进制，构造参数</em> )作为交易的输入数据，以此构造出一笔交易</li></ul><ul><li>交易经过 RIP 编码，然后由发送者进行私钥签名</li><li>已签名的交易被推送到区块链上的节点</li><li>区块链节点验证交易后，存入交易池</li><li>轮到该节点出块时，打包交易构建区块，广播给其他节点</li><li>其他节点验证区块并取得共识。不同区块链可能采用不同共识算法，FISCO BCOS 中采用 PBFT 取得共识，这要求经历三阶段提交（pre-prepare，prepare, commit）</li><li>节点执行交易，结果就是智能合约 Demo 被创建，状态字段_state 的存储空间被分配，并被初始化为 0x123</li></ul><ol start="3"><li><strong>执行</strong></li></ol><blockquote><p> 根据是否带有修饰符 view，我们可将函数分为两类：调用与交易。</p><p>由于在编译期就确定了view调用不会引起合约状态的变更，故对于这类函数调用，节点直接提供查询即可，无需与其他区块链节点确认。而由于交易可能引起状态变更，故会在网络间确认。</p></blockquote><p>下面将以用户调用了 set(0x10)为假设，看看具体的运行过程。</p><p>首先，函数 set 没有配置 view/pure 修饰符，这意味着其可能更改合约状态。所以这个调用信息会被放入一笔交易，经由交易编码、交易签名、交易推送、交易池缓存、打包出块、网络共识等过程，最终被交由各节点的 EVM 执行。</p><p>在 EVM 中，由 SSTORE 字节码将参数 0xa 存储到合约字段_state 中。该字节码先从栈上拿到状态字段_state 的地址与新值 0xa，随后完成实际存储。</p><p><img alt="img" data-src="https://static001.infoq.cn/resource/image/48/c7/48ca86e78873d4d3fd87d3ea43b5a1c7.jpg" class="lazyload"></p><ol start="4"><li><strong>销毁</strong></li></ol><p>由于合约上链后就无法篡改，所以合约生命可持续到底层区块链被彻底关停。若要手动销毁合约，可通过字节码 selfdestruct。销毁合约也需要进行交易确认，在此不多作赘述。</p><h3 id="EVM原理"><a href="#EVM原理" class="headerlink" title="EVM原理"></a>EVM原理</h3><blockquote><p>EVM 是栈式虚拟机，其核心特征就是所有操作数都会被存储在栈上。</p></blockquote><p>如代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uint a = 1;</span><br><span class="line">uint b = 2;</span><br><span class="line">uint c = a + b;</span><br></pre></td></tr></table></figure><p>这段代码经过编译后，得到的字节码如下：（此为精简代码）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PUSH1 0x1</span><br><span class="line">PUSH1 0x2</span><br><span class="line">ADD</span><br></pre></td></tr></table></figure><p>我们可以看到，在上述代码中，包含两个指令：PUSH1 和 ADD，它们的含义如下：</p><ul><li>PUSH1：将数据压入栈顶。</li><li>ADD：POP 两个栈顶元素，将它们相加，并压回栈顶。</li></ul><p>后面的内容就参照微机原理和编译系统理解了。</p><h3 id="存储深究"><a href="#存储深究" class="headerlink" title="存储深究"></a>存储深究</h3><p>这些变量的存储方式存在差别，下面代码表明了变量与存储方式之间的关系。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">contract Demo&#123;</span><br><span class="line">    //状态存储</span><br><span class="line">    uint private _state;</span><br><span class="line">    </span><br><span class="line">    function set(uint state) public &#123;</span><br><span class="line">        //栈存储</span><br><span class="line">        uint i = 0;</span><br><span class="line">        //内存存储</span><br><span class="line">        string memory str = &quot;aaa&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>栈</strong></li></ol><p>栈用于存储字节码指令的操作数。在 Solidity 中，局部变量若是整型、定长字节数组等类型，就会随着指令的运行入栈、出栈。</p><p>例如： <code>uint i = 1;</code>  中的变量1会被push到栈顶</p><ol start="2"><li><strong>内存</strong></li></ol><p>内存类似 java 中的堆，它用于储存”对象”。在 Solidity 编程中，如果一个局部变量属于变长字节数组、字符串、结构体等类型，其通常会被 memory 修饰符修饰，以表明存储在内存中。EVM是顺序分配存储空间。</p><ol start="3"><li><strong>状态存储</strong></li></ol><p>状态存储用于存储合约的状态字段。</p><p>从模型而言，存储由多个 32 字节的存储槽构成。在前文中，我们介绍了 Demo 合约的 set 函数，里面 0x0 表示的是状态变量_state 的存储槽。所有固定长度变量会依序放到这组存储槽中。</p><p>对于 mapping 和数组，存储会更复杂，其自身会占据 1 槽，所包含数据则会按相应规则占据其他槽，比如 mapping 中，数据项的存储槽位由键值 k、mapping 自身槽位 p 经 keccak 计算得来。</p><p>从实现而言，不同的链可能采用不同实现，比较经典的是以太坊所采用的 MPT 树。由于 MPT 树性能、扩展性等问题，FISCO BCOS 放弃了这一结构，而采用了分布式存储，通过 rocksdb 或 mysql 来存储状态数据，使存储的性能、可扩展性得到提高。</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ol><li>Solidity 源码会被编译为字节码</li><li>部署时，字节码会以交易为载体在网络间确认，并在节点上形成合约；</li><li>合约函数调用，如果是交易类型，会经过网络确认，最终由 EVM 执行。</li></ol><p>其中，EVM 是栈式虚拟机，它会读取合约的字节码并执行。</p><p>在执行过程中，会与栈、内存、合约存储进行交互。其中，栈用于存储普通的局部变量，这些局部变量就是字节码的操作数；内存用于存储对象，采用 length+body 进行存储，顺序分配方式进行内存分配；状态存储用于存储状态变量。</p><p><strong>参考资料：</strong></p><p><a href="https://www.infoq.cn/article/szhx9ujd6bqq3uhko4hk">智能合约编写之 Solidity 运行原理</a></p><p><a href="https://solidity-cn.readthedocs.io/zh/develop/introduction-to-smart-contracts.html">solidity官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区块链基础</title>
      <link href="/2021/06/18/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/06/18/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文的区块链相关知识，主要基于北京大学肖臻老师的《区块链技术与应用》总结。</p></blockquote><h1 id="区块链基础"><a href="#区块链基础" class="headerlink" title="区块链基础"></a>区块链基础</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h4 id="比特币部分"><a href="#比特币部分" class="headerlink" title="比特币部分"></a>比特币部分</h4><ul><li>密码学基础</li><li>比特币的数据结构</li><li>共识协议和系统实现</li><li>挖矿算法及难度调节</li><li>比特币脚本</li><li>软分叉和硬分叉</li><li>匿名与隐私保护</li></ul><h4 id="以太坊部分"><a href="#以太坊部分" class="headerlink" title="以太坊部分"></a>以太坊部分</h4><ul><li>概述：基于账户的分布式账本</li><li>数据结构（MPT）：状态树、交易树、收据树</li><li>GHOST协议：对非主链区块的补偿</li><li>挖矿：memory hard mining puzzle </li><li>权益证明：由POW向POS转变</li><li>智能合约</li></ul><p>总结与展望</p><h2 id="比特币部分-1"><a href="#比特币部分-1" class="headerlink" title="比特币部分"></a>比特币部分</h2><h3 id="1-密码学基础"><a href="#1-密码学基础" class="headerlink" title="1.密码学基础"></a>1.密码学基础</h3><p><strong>哈希碰撞：</strong> 简述就是给定hash函数 目前不存在一个方法可以找到满足hash(A) == hash(B) 的 A和B ，即我们无法人为制造hash碰撞。该特性叫做 collision resistance</p><p><strong>collision resistance用处：</strong> 给出A，但是由于本性质的缘故，无法反推出A的具体值。</p><p>**hiding： ** 即在给定A和hash函数的条件下，也无法反推出A的取值。</p><p><strong>collision resistance和hiding结合实现digital commitment(数据保证)</strong>  如：预测结果为A，提前公布hash(A) , 验证时对A取hash与之对比即可保证发布内容为A，且未提前给出A的信息。</p><p><strong>Puzzle friendly：</strong>  想得到某个哈希值，没有什么捷径，只能遍历⼀个个尝试。</p><p><strong>对称加密：</strong> 发送前与接收后，使⽤商量好的同⼀个密钥进⾏加密解密。</p><p><strong>非对称加密：</strong> A对B传输信息。A使⽤B的公钥加密，B收到后使⽤⾃⼰的私钥解密。公钥相当于银⾏账号，私钥相当于密码。</p><p><strong>签名：</strong> A发出交易时⽤A⾃⼰的私钥对信息进⾏签名，然后⽤B的公钥进⾏加密，B收到后⽤B⾃⼰的<br>私钥解密看到信息，⼜可以⽤A的公钥验证签名。</p><h3 id="2-BTC的数据结构"><a href="#2-BTC的数据结构" class="headerlink" title="2.BTC的数据结构"></a>2.BTC的数据结构</h3><h5 id="区块链："><a href="#区块链：" class="headerlink" title="区块链："></a>区块链：</h5><blockquote><p>区块链结构本身为一条链表，节点为区块。而传统链表实现，便是通过指针将各个节点串联起来而称为最终的链。如下便是我们最常见的一个链表：<br><img alt="&gt;[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-G7SWgK0Y-1581672569233)(https://uploadfiles.nowcoder.com/images/20200214/3388381_1581652081601_D7DD1D3DCF48BD4E3FA1E03C1D254097 &quot;图片标题&quot;)]" data-src="https://img-blog.csdnimg.cn/20200214173054674.png" class="lazyload"><br>但在区块链系统中，并未采用指针，而是使用了<strong>哈希指针</strong></p><p>每个区块根据自己的区块内容生成自己的哈希值，此外，每个区块（除创世纪块）都保存有<strong>前一个区块的哈希值</strong>。需要注意的是，本区块哈希生成依赖于本区块内容，而本区块内容中又包含有前一个区块的哈希值。从而保证了区块内容不被篡改。</p></blockquote><h5 id="merkle-tree-默克尔树"><a href="#merkle-tree-默克尔树" class="headerlink" title="merkle tree (默克尔树):"></a>merkle tree (默克尔树):</h5><p><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200214173821396.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L011X1hpYW95ZQ==,size_16,color_FFFFFF,t_70" class="lazyload"></p><p>该数据结构的优点在于：只需要记住Root Hash（根哈希值），便可以检测出对树中任何部位的修改。</p><p>当需要向轻节点证明某条交易是否被写入区块链，便需要用到Markle proof。我们将交易到根节点这一条路径称为Markle proof，全节点将整个Markle proof发送给轻节点（如下图所示），轻节点即可根据其算出根哈希值，和自己保存的对比，从而验证该交易是否被写入区块链。只要沿着该路径，所有哈希值都正确，说明内容没有被修改过。</p><p><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200214173621967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L011X1hpYW95ZQ==,size_16,color_FFFFFF,t_70" class="lazyload"></p><h3 id="3-共识机制"><a href="#3-共识机制" class="headerlink" title="3.共识机制"></a>3.共识机制</h3><p><strong>出现的问题：</strong></p><p><strong>双花攻击：</strong> 数字货币本身为带有签名的数据文件，可以进行复制。即：对用户来说，可以将同一货币花费两次。</p><p>中心化解决办法：对货币添加唯一编号（不可篡改），每次支付向货币发行单位查询真伪。</p><p>去中心化解决办法：</p><ul><li>在比特币系统中由挖矿来决定货币发行权和发行量。</li><li>系统维护的一个数据结构，记录货币的使用情况（是否被花过？被谁花过？），即区块链。</li></ul><p><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200215204645338.png" class="lazyload"></p><p>对每一笔交易都可以进行溯源，直到创世纪块的铸币交易。</p><p><strong>比特币区块信息</strong></p><p><img alt="image-20210618215600492" data-src="https://i.loli.net/2021/06/18/3P5isfXWA8onDqM.png" class="lazyload"></p><blockquote><p>挖矿求解问题：Hash（block header）&lt;= target<br>Hash of previous block header只计算区块块头部分的哈希（ Merkle root hash保证了block body内容不被篡改，所以只需要计算block header即可保证整个区块内容不会被篡改）<br>区块链系统中，轻节点（只存储区块block header信息）只利用区块链，但并不参与区块链系统维护和构造。</p></blockquote><p><strong>分布式共识：</strong> 由于各节点独立完成区块链构建，所以对于账本需要取得一个共识，谁写的帐才是对的？</p><p><strong>比特币共识机制：</strong> 谁在组装好区块后对Nonce进行尝试，第一个找到满足Hash(block header) &lt;= target的Nonce的用户便拥有记账权。</p><p>为了激励大家参与竞争记账权 避免恶意节点轻易获得记账权，比特币系统设计规定，起初挖掘每个区块可以获得50个比特币，但之后每隔21万个区块，奖励减半。</p><p>区块中保存交易记录，那么，会不会存在节点只想发布区块而不想打包交易？中本聪在设计该系统时，引入了交易费。鼓励拥有记账权的区块将交易包含打包发布到区块链中。</p><h3 id="4-BTC系统实现"><a href="#4-BTC系统实现" class="headerlink" title="4.BTC系统实现"></a>4.BTC系统实现</h3><blockquote><p> 区块链是一个去中心化的账本，比特币采用了 <strong>基于交易的账本模式</strong> 。</p><p>系统中并无显示记录账户包含比特币数，实际上其需要通过交易记录进行推算。在比特币系统中，全节点需要维护一个名为 <strong>UTXO(Unspent Transaction Output尚未被花掉的交易输出)</strong> 的数据结构。</p></blockquote><blockquote><p>如图，A转给B五个BTC，转给C3个BTC，B将5个BTC花掉，则该交易记录不保存在UTXO中，C没有花掉，则该交易记录保存在UTXO中<br><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200216144427758.png" class="lazyload"></p></blockquote><p>该结构可以预防双花攻击，判断一个交易是否合法，查询所花的BTC是否在该集合中。该结构由全节点在内存中维护。</p><p><strong>区块信息：</strong></p><p><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200216144715757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L011X1hpYW95ZQ==,size_16,color_FFFFFF,t_70" class="lazyload"></p><p><strong>比特币网络：</strong></p><p>⼯作在应⽤层application layer：BitCoin Block chain<br>底层network layer：P2P Overlay Network，⽆超级节点⽆主节点，所有节点都平等。<br>设计原则：simple，鲁棒性robust，but not efficient<br>消息传播：泛洪flooding，且不考虑拓扑结构<br>区块⼤⼩字节：1M</p><h3 id="5-挖矿算法及难度调节"><a href="#5-挖矿算法及难度调节" class="headerlink" title="5.挖矿算法及难度调节"></a>5.挖矿算法及难度调节</h3><blockquote><p>矿工每次组装完一个区块后，尝试Nonce，使Hash(block header)   &lt;= target的过程 叫做挖矿。区块链使用挖矿来争夺记账权，获取出块奖励。</p></blockquote><p>出块奖励每21w个区块 (4年) 减半。</p><p>为防范恶意节点的最长链攻击，最好使用 N confirmation，即在交易后多等几个区块，再确认交易。</p><p><img alt="image-20210618235408336" data-src="https://pic.imgdb.cn/item/60ccc1c4844ef46bb2fc8396.jpg" class="lazyload"></p><p><strong>难度调整</strong><br>挖矿难度和⽬标阈值成反⽐，难度最⼩是1，target很⼤。<br><strong>为何调整挖矿难度</strong><br>出块时间太短造成的问题：分叉成为常态，系统安全性⽆法保证。<br><strong>怎么调整挖矿难度</strong><br>每隔2016个区块(两周)，要调整挖矿难度(target)。<br>target = target X (actual time/expect time)<br>四倍限制(1/4～4)<br>如果有恶意节点到了规定时间不调整，其他诚实结点验证其nBits域不会通过。<br>由于现在挖矿难度加⼤，可能光调整nonce是不够的，还需要调整CoinBase域。<br><strong>挖矿</strong><br>在本地组装⼀个候选区块，⼀边监听⼀边挖(nonce)。如果监听到已经有新的区块产⽣，验证后，停⽌挖<br>矿，在本地重新组装候选区块。<br>memoryless / progress free：由于⽆记忆性，重新挖并不可惜。</p><p><strong>⽐特币是如何保证安全性的？</strong><br>共识机制(⼤多数矿⼯是好的) + 密码学(私钥签名)<br><strong>挖矿⼯具(通⽤到专⽤)</strong><br>家⽤电脑cpu：⼤部分内存浪费，cpu⼤部分部件闲置，硬盘闲置<br>GPU(主要⽤于⼤规模并⾏计算)：某些部件也浪费。其他货币有些还在⽤。<br>ASIC芯⽚：Application Specific Integrated Ciral，专⻔设计于挖矿计算hash值</p><h3 id="6-比特币脚本"><a href="#6-比特币脚本" class="headerlink" title="6.比特币脚本"></a>6.比特币脚本</h3><blockquote><p>比特币系统中使用的脚本语言非常简单，唯一可以访问的内存空间只有栈，所以也被称为“基于栈的语言。</p></blockquote><ul><li>交易的宏观信息：<br><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200218194054878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L011X1hpYW95ZQ==,size_16,color_FFFFFF,t_70" class="lazyload"></li><li>Vin的内容：<br><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200218194121126.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L011X1hpYW95ZQ==,size_16,color_FFFFFF,t_70" class="lazyload"></li></ul><p>如果存在 一个交易有多个输入，那么每个输入都要说明币的来源并给出签名（BTC中一个交易可能需要多个签名）</p><ul><li>Vout的内容：<br><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200218194136796.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L011X1hpYW95ZQ==,size_16,color_FFFFFF,t_70" class="lazyload"></li></ul><ul><li>脚本执行：</li></ul><p><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200218194341541.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L011X1hpYW95ZQ==,size_16,color_FFFFFF,t_70" class="lazyload"></p><p>在早期，直接将两个脚本按照如图顺序(input script在前，output script在后) 拼接后执行，后来考虑到安全性问题，两个脚本改为分别执行：先执行input script，若无出错，再执行output script。</p><ul><li><p><strong>输入输出的几种形式：</strong></p><ol><li>P2PK形式(Pay to public key)</li></ol><blockquote><p>特点：输出脚本直接给出收款人公钥。(CHECKSIG为检查签名操作)</p></blockquote><p><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/2020021819451364.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L011X1hpYW95ZQ==,size_16,color_FFFFFF,t_70" class="lazyload"></p><p>执行过程：</p><p><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/2020021819454353.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L011X1hpYW95ZQ==,size_16,color_FFFFFF,t_70" class="lazyload"></p><ol start="2"><li>P2PKH形式(Pay to public key hash)——最常用</li></ol><blockquote><p>特点：输出脚本不直接给出收款人公钥，而是公钥的哈希。</p></blockquote><p><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200218194613163.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L011X1hpYW95ZQ==,size_16,color_FFFFFF,t_70" class="lazyload"></p><p>执行过程：</p><p><img alt="img" data-src="https://img-blog.csdnimg.cn/20200218194626894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L011X1hpYW95ZQ==,size_16,color_FFFFFF,t_70" class="lazyload"></p><p><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200218194643254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L011X1hpYW95ZQ==,size_16,color_FFFFFF,t_70" class="lazyload"></p><ol start="3"><li>P2SH形式(Pay to script hash)</li></ol></li></ul><blockquote><p>特点：输出脚本给出的不是收款人公钥的哈希，而是收款人提供的一个脚本的哈希。该脚本称为redeemScript,即赎回脚本。等未来花钱的时候，输入脚本要给出redeemScript的具体内容以及可以使之正确运行需要的签名。</p></blockquote><p><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200218194710795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L011X1hpYW95ZQ==,size_16,color_FFFFFF,t_70" class="lazyload"></p><p>验证过程：<br>1.验证序列化的redeemScript是否与output script中哈希值匹配。<br>2.反序列化并执行redeemScript，验证iutput script中给出签名是否正确。（将赎回脚本内容当作操作指令执行一遍）<br>redeemScript的形式：<br>1.P2PK形式<br>2.P2PKH形式<br>3.多重签名形式</p><h3 id="7-区块链分叉"><a href="#7-区块链分叉" class="headerlink" title="7.区块链分叉"></a>7.区块链分叉</h3><blockquote><p>分叉指的是，原来的系统中为一条链，但分成了两条链。分叉形成的原因可能有多种，例如：挖矿时两个节点差不多同时挖出矿，都会发布区块(对比特币系统当前状态产生分歧导致的分叉——state fork)；分叉攻击，同样也会导致分叉(forking attack，人为故意造成)；比特币协议改变，在分布式系统中不能保证所有节点同时升级软件，假设存在少数节点未升级，导致出现分叉(protocal fork)</p></blockquote><p>根据对比特币协议修改的不同，可以将分叉分为硬分叉和软分叉。</p><ul><li><p>硬分叉(hard fork)<br>对比特币协议增加新协议，扩展新功能，未升级软件的旧节点会不认可这些修改，会认为这些特性是非法的。这也就是对比特币协议内容产生分歧，从而导致分叉。硬分叉的一个典型例子，就是对比特币区块大小的修改（之前有提到过，BTC区块大小限制1MB，但是否合适存在争议）。</p></li><li><p>软分叉（soft fork）</p><p>对BTC协议添加限制，使得原本合法交易在新交易中不合法，便会形成软分叉。</p></li></ul><p>总结：</p><ul><li>soft fork<br>特点：只要系统中拥有半数以上算力节点更新软件，系统就不会产生永久性分叉</li><li>hard fork<br>特点：必须系统中所有节点更新软件，系统才不会产生永久性分叉</li></ul><h2 id="以太坊部分-1"><a href="#以太坊部分-1" class="headerlink" title="以太坊部分"></a>以太坊部分</h2><h3 id="1-以太坊概述"><a href="#1-以太坊概述" class="headerlink" title="1.以太坊概述"></a>1.以太坊概述</h3><blockquote><p>以太坊便对BTC进行了改进。例如：出块时间、共识协议、mining puzzle（对内存要求高，反ASIC芯片使用）</p><p>未来，以太坊还将会用权益证明(POS)替代工作量证明(POW)<br>此外，以太坊增加了对<strong>智能合约（smart contract）</strong>的支持。</p></blockquote><p>BTC系统是基于交易的账本，系统中并未显示记录账户有多少钱，只能通过UTXO进行推算。</p><p>以太坊系统则采用了基于账户的模型，与现实中银行账户相似。系统中显示记录每个账户以太币的数量，转账是否合法只需要查看转账者账户中以太币是否足够即可，同时也不需要每次全部转账。同时，这也也天然地防范了双花攻击。但是存在<strong>重放攻击</strong>的缺陷。</p><blockquote><p>以太坊系统中存在两类账户：外部账户和合约账户。</p></blockquote><p><strong>外部账户：</strong>类似于BTC系统中公私钥对。存在账户余额balance和计数器nonce<br><strong>合约账户：</strong>并非通过公私钥对控制。(不能主动发起交易，只能接收到外部账户调用后才能发起交易或调用其他合约账户)其除了balance和nonce之外还有code(代码)、storage(相关状态-存储)<br>创建合约时候会返回一个地址，就可以对其调用。调用过程中，代码不变但状态会发生改变。</p><h3 id="2-以太坊数据结构"><a href="#2-以太坊数据结构" class="headerlink" title="2.以太坊数据结构"></a>2.以太坊数据结构</h3><blockquote><p>在以太坊中，有<strong>三棵树</strong>的说法，分别是状态树、收据树和交易树。了解了这三棵树，就弄清楚了以太坊的基础数据结构设计。</p></blockquote><p>merkle tree + 字典树 + 路径压缩 =  MPT(Modified Patricia tree)</p><ul><li><strong>状态树</strong></li></ul><p>右上角表示四个账户(为直观，显示较少)和其状态(只显示账户余额)。（需要注意这里的指针都是哈希指针）</p><p><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200225193700264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L011X1hpYW95ZQ==,size_16,color_FFFFFF,t_70" class="lazyload"></p><p>每次发布新区块，状态树中部分节点状态会改变。但改变并非在原地修改，而是新建一些分支，保留原本状态。如下图中，仅仅有新发生改变的节点才需要修改，其他未修改节点直接指向前一个区块中的对应节点。</p><p><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200225193719146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L011X1hpYW95ZQ==,size_16,color_FFFFFF,t_70" class="lazyload"></p><p>所以，系统中全节点并非维护一棵MPT，而是每次发布新区块都要新建MPT。只不过大部分节点共享。</p><blockquote><p><strong>最后说明</strong><br>状态树中保存Key-value对，key就是地址，而value状态通过RLP(Recursive Length Prefix，一种进行序列化的方法)编码序列号之后再进行存储。</p></blockquote><ul><li><strong>交易树和收据树</strong></li></ul><blockquote><p> 每次发布一个区块时，区块中的交易会形成一颗Merkle Tree，即交易树。</p><p>每个交易执行完之后形成一个收据，记录交易相关信息。也就是说，交易树和收据树上的节点是一一对应的。</p></blockquote><p>交易树和收据树只将当前区块中的交易组织起来，而状态树将所有账户的状态都包含进去，无论这些账户是否与当前区块中交易有关系。<br>多个区块状态树共享节点，而交易树和收据树依照区块独立。</p><p>交易树和收据树的用途：</p><ol><li>向轻节点提供Merkle Proof。</li><li>更加复杂的查找操作(例如：查找过去十天的交易；过去十天的众筹事件等)</li></ol><ul><li><strong>bloom filter 布隆过滤器</strong></li></ul><p>支持较为高效查找某个元素是否在某个集合中<br>方法：给一个大的集合，计算出一个紧凑的“摘要”，可以迅速过滤区块链中不包含xxx的区块</p><h3 id="3-以太坊的GHOST协议"><a href="#3-以太坊的GHOST协议" class="headerlink" title="3.以太坊的GHOST协议"></a>3.以太坊的GHOST协议</h3><blockquote><p>前景提要：BTC系统中出块时间为10min，而以太坊中出块时间被降低到15s左右，虽然有效提高了系统反应时间和吞吐率，却也导致系统临时性分叉变成常态，且分叉数目更多。由于系统中经常性会出现分叉，则矿工挖到矿很大可能会被废弃，这会大大降低矿工挖矿积极性。</p><p>所以，以太坊设计了新的公式协议——<code>GHOST协议</code>(该协议并非原创，而是对原本就有的Ghost协议进行了改进)。</p></blockquote><p>对于出块成功，且未成为最长合法链的区块，被后续最长合法链区块称为<strong>叔父区块</strong>。</p><p><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200228133558197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L011X1hpYW95ZQ==,size_16,color_FFFFFF,t_70" class="lazyload"></p><p>规定E区块在发布时可以将A、C、D叔父区块包含进来，A、C、D叔父区块可以得到出块奖励的7/8，而为了激励E包含叔父区块，规定E每包含一个叔父区块可以额外得到1/32的出块奖励。为了防止E大量包含叔父区块，规定一个区块只能最多包含两个叔父区块，因此E在A、C、D中最多只能包含两个区块作为自己的出块奖励</p><p><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/2020022813374149.png" class="lazyload"></p><p>叔父区块的定义是和当前区块在七代之内有共同祖先才可，对于M来说，无论包含哪个辈分的“叔父”，得到的出块奖励都是1/32出块奖励。这样，就方便了全节点进行记录，此外，也从协议上鼓励一旦出现分叉马上进行合并。</p><p>需要注意的是，ETH的区块奖励并不会递减，uncle block中的交易也并不会被执行。</p><h3 id="4-以太坊的挖矿算法"><a href="#4-以太坊的挖矿算法" class="headerlink" title="4.以太坊的挖矿算法"></a>4.以太坊的挖矿算法</h3><blockquote><p>挖矿这一过程，虽然并没有创造什么实际价值，但挖矿本身维持了比特币系统的稳定。总体来说，比特币系统中的挖矿算法较为成功，并未发现大的漏洞。</p></blockquote><p>前景提要：BTC的挖矿算法导致了挖矿设备的专业化，普通计算机用户难以参与进去，导致了挖矿中心化的局面产生，而这与“去中心化”这一理念相违背。</p><p>所以，后续的加密货币希望针对ASIC矿机，推出增加对内存访问的需求的挖矿算法。</p><ul><li><p>莱特币挖矿算法概述</p><ol><li><p>设置一个很大的数组，按照顺序填充伪随机数。Seed为种子节点，通过Seed进行一些运算获得第一个数，之后每个数字都是通过前一个位置的值取哈希得到的。这样的数组中取值存在前后依赖关系。<br><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200228171425644.png" class="lazyload"></p></li><li><p>在需要求解Puzzle的时候，按照伪随机顺序，从数组中读取一些数，每次读取位置与前一个数相关。例如：第一次，从A位置读取其中数据，根据A中数据计算获得下一次读取位置B；第二次,从B位置读取其中数据，根据B中数据计算获得下一次读取位置C；</p></li></ol></li></ul><p><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200228171439422.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L011X1hpYW95ZQ==,size_16,color_FFFFFF,t_70" class="lazyload"></p><p>总结：如果数组足够大，对于挖矿矿工来说，必须保存该数组以便查询，否则每次不仅计算位置，还要根据Seed计算整个数组数据，才能查询到对应位置的数据。这对于矿工来说，计算复杂度大幅度上升。</p><ul><li>以太坊挖矿算法概述</li></ul><blockquote><p>以太坊中，设计了两个数据集，一大一小。小的为16MB的cache，大的数据集为1G的dataset(DAG)。其关系为，1G的数据集是通过16MB数据集生成而来的。</p><p>为了便于进行验证，轻节点保存16MB的Cache进行验证即可。</p><p>而矿工为了挖矿更快，减少重复计算则需要存储1GB大小的大数据集。</p></blockquote><p>以太坊挖矿过程：</p><p><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200228171549400.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L011X1hpYW95ZQ==,size_16,color_FFFFFF,t_70" class="lazyload"></p><blockquote><p>根据区块block header和其中的Nonce值计算一个初始哈希，根据其映射到某个初始位置A，读取A位置的数及其相邻的后一个位置A’上的数,根据该两个数进行运算，算得下一个位置B，读取B和B’位置上的数，依次类推，迭代读取64次，共读取128个数。</p><p>最后，计算出一个哈希值与挖矿难度目标阈值比较，若不符合就重新更换Nonce，重复以上操作直到最终计算哈希值符合难度要求或当前区块已经被挖出。</p></blockquote><p>具体部分有兴趣者，自行了解。</p><h3 id="5-权益证明"><a href="#5-权益证明" class="headerlink" title="5.权益证明"></a>5.权益证明</h3><blockquote><p>按照所占权益投票进行共识达成，类似于股份制有限共识按照股份多少投票，权益证明不需要挖矿。</p><p>还有吓唬矿机厂商，减少ASIC矿机研发的功能。</p></blockquote><p>在设计之初，以太坊开发者就设想要从POW转向POS，并为了防止有矿工不愿意转埋下了一颗“难度炸弹”。即ETH的挖矿难度在呈指数级增加。</p><p>预挖矿(pre mining) ： 开发以太坊时，给开发者预留了一部分货币。</p><p>Pre-Sale： 将预留的货币出售掉用于后续开发，类似于拉风投或众筹。</p><h3 id="6-智能合约"><a href="#6-智能合约" class="headerlink" title="6.智能合约"></a>6.智能合约</h3><p><strong>智能合约</strong>：运行在区块链系统上的一段代码，代码逻辑定义了合约内容。<br>智能合约的账户保存了合约当前的运行状态：</p><ul><li>balance：当前余额</li><li>nonce：交易次数</li><li>code：合约代码</li><li>storage：存储，数据结构为一棵MPT</li></ul><p>智能合约编写代码为<code>Solidity</code>，其语法与JavaScript很接近。<br>下图显示了智能合约的代码结构。<br><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200304162806439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L011X1hpYW95ZQ==,size_16,color_FFFFFF,t_70" class="lazyload"></p><ul><li><strong>外部账户调用合约账户</strong></li></ul><p><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200304191834619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L011X1hpYW95ZQ==,size_16,color_FFFFFF,t_70" class="lazyload"></p><ul><li><p><strong>合约账户调用合约账户</strong></p><ol><li><strong>直接调用</strong></li></ol><p><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200304192100140.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L011X1hpYW95ZQ==,size_16,color_FFFFFF,t_70" class="lazyload"></p><p>错误处理：直接调用的方式，一方产生异常会导致另一方也进行回滚操作。</p><ol start="2"><li><strong>address调用</strong></li></ol><p><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200304192237645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L011X1hpYW95ZQ==,size_16,color_FFFFFF,t_70" class="lazyload"><br>错误处理：address.call()的方法，如果调用过程中被调用合约产生异常，会导致call()返回false，但发起调用的函数不会抛出异常，而是继续执行。</p><ol start="3"><li><strong>代理调用</strong></li></ol><p><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/2020030419262145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L011X1hpYW95ZQ==,size_16,color_FFFFFF,t_70" class="lazyload"><br>和call()调用基本一致，区别在于其并不会切入被调用合约的上下文中。</p></li></ul><ul><li><p><strong>Payable</strong> ：如果一个函数可以接收外部转账，则必须标记为payable</p></li><li><p><strong>fallback 函数：</strong> </p></li></ul><p><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200305112942373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L011X1hpYW95ZQ==,size_16,color_FFFFFF,t_70" class="lazyload"></p><p>​        该函数主要是防止A向B转账，但没有在data域中说明要调用哪个函数或说明的要调用函数不存在，此时调用fallback()函数。</p><ul><li><p><strong>智能合约创建与运行：</strong></p><blockquote><p>实际上并不是想转账，而是想要创建智能合约。EVM设计思想类似 于JAVA中的JVM，便于跨平台增强可移植性。EVM中寻址空间256位，而目前个人机主流位32位和64位，与之存在较大差距。</p><p><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200306151126702.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L011X1hpYW95ZQ==,size_16,color_FFFFFF,t_70" class="lazyload"></p></blockquote><p>以太坊规定，执行合约中指令需要收取汽油费，并且由发起交易的人进行支付。</p></li><li><p><strong>错误处理</strong></p><p>以太坊中交易具有原子性，要么全执行，要么全不执行，不会只执行一部分(包含智能合约)。<br>需要注意的是，在执行过程中产生错误导致回滚，已经消耗掉的汽油费是不会退回的。从而有效防止了恶意节点对全节点进行恶意调用。</p><p><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200309145241517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L011X1hpYW95ZQ==,size_16,color_FFFFFF,t_70" class="lazyload"></p><p><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200306153636245.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L011X1hpYW95ZQ==,size_16,color_FFFFFF,t_70" class="lazyload"></p><p>嵌套调用是否发生回滚，取决于调用方式。一个合约向一个合约账户直接转账，因为fallback函数的存在，仍有可能会引发嵌套调用。</p></li></ul><p>后续完整智能合约内容参见Solidity教程。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>由中本聪的BTC引发了去中心化的开端，后面应运而生各种为了解决BTC的问题的各种币，但是直到ETH之前都还是未脱俗。ETH的诞生宣告区块链除了虚拟货币外的其他应用场景。抛去去中心化这个帽子，我们要时常与世界所接触，技术不只是浮于名词表面更要实际的与社会实践所接触，发挥他应有的价值。</p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BTC </tag>
            
            <tag> ETH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Electron-Vue联动开发</title>
      <link href="/2021/04/01/Electron-Vue%E8%81%94%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
      <url>/2021/04/01/Electron-Vue%E8%81%94%E5%8A%A8%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="Electron基于Vue-js开发"><a href="#Electron基于Vue-js开发" class="headerlink" title="Electron基于Vue.js开发"></a>Electron基于Vue.js开发</h1><blockquote><p>本文一步一步教你如何使用Electron11和vue-cli4，在完全保留vue开发web应用的习惯下，搭建桌面应用。</p></blockquote><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>安装环境</li><li>创建项目</li><li>编译运行</li><li>增加依赖库</li></ul><h3 id="1-安装环境"><a href="#1-安装环境" class="headerlink" title="1.安装环境"></a>1.安装环境</h3><ul><li>使用cnpm</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><ul><li>安装/升级vue-cli4</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vue -V</span><br><span class="line">cnpm install @vue/cli -g</span><br></pre></td></tr></table></figure><h3 id="2-创建项目"><a href="#2-创建项目" class="headerlink" title="2. 创建项目"></a>2. 创建项目</h3><ol><li><p>创建vue项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create electron-vue-demo</span><br></pre></td></tr></table></figure></li><li><p>安装Electron</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue add electron-builder</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-编译运行"><a href="#3-编译运行" class="headerlink" title="3.编译运行"></a>3.编译运行</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run electron:serve</span><br></pre></td></tr></table></figure><h3 id><a href="#" class="headerlink" title></a><img alt="image-20210401154510200" data-src="https://i.loli.net/2021/04/01/mzL2rBRdlMXYNnW.png" class="lazyload"></h3><h3 id="4-增加依赖"><a href="#4-增加依赖" class="headerlink" title="4.增加依赖"></a>4.增加依赖</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vue add element</span><br><span class="line">vue add axios</span><br></pre></td></tr></table></figure><p>注：不建议再使用SimulatedGREG/electron-vue，太久没更新了。</p><p>参考：</p><p><a href="https://juejin.cn/post/6844903878429769742">掘金</a></p>]]></content>
      
      
      <categories>
          
          <category> Electron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Electron </tag>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Electron基础入门</title>
      <link href="/2021/04/01/Electron%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
      <url>/2021/04/01/Electron%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Electron"><a href="#Electron" class="headerlink" title="Electron"></a>Electron</h1><blockquote><p>使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序。</p></blockquote><p><img alt="image-20210401105938660" data-src="https://i.loli.net/2021/04/01/AI6cB1TWtFdE9zy.png" class="lazyload"></p><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li>安装依赖</li><li>基础开发</li><li>编译打包</li></ul><h3 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1.安装依赖"></a>1.安装依赖</h3><ol><li><p><a href="http://nodejs.cn/download/">下载安装node.js</a></p></li><li><p>全局安装electron：  <code>npm i -g electron</code></p></li><li><p>初始化项目:   <code>npm init -y </code>  生成 <code>package.json</code></p></li><li><p>创建一个基础的Electron项目如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my-electron-app/</span><br><span class="line">├── package.json // 依赖关系</span><br><span class="line">├── main.js// 主进程函数</span><br><span class="line">└── index.html// 主页面</span><br></pre></td></tr></table></figure></li><li><p>具体代码如下：</p></li></ol><p>main.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> electron = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = electron.app  <span class="comment">// 引用 app</span></span><br><span class="line"><span class="keyword">var</span> BrowserWindow = electron.BrowserWindow <span class="comment">// 窗口</span></span><br><span class="line"><span class="keyword">var</span> mainWindow = <span class="literal">null</span> <span class="comment">// 主窗口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建应用</span></span><br><span class="line">app.on(<span class="string">&#x27;ready&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">        <span class="attr">width</span>:<span class="number">800</span>,<span class="comment">// 窗口大小</span></span><br><span class="line">        <span class="attr">height</span>:<span class="number">500</span>,</span><br><span class="line">        <span class="attr">webPreferences</span>: &#123;<span class="comment">// 配置</span></span><br><span class="line">            <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">contextIsolation</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">enableRemoteModule</span>: <span class="literal">true</span></span><br><span class="line">          &#125;      </span><br><span class="line">    &#125;)</span><br><span class="line">    mainWindow.loadFile(<span class="string">&#x27;index.html&#x27;</span>) <span class="comment">// 加载页面</span></span><br><span class="line">    mainWindow.on(<span class="string">&#x27;closed&#x27;</span>,<span class="function">()=&gt;</span>&#123;      <span class="comment">// 关闭窗口</span></span><br><span class="line">        mainWindow = <span class="literal">null</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>index.js</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    Hello World.</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>运行项目： <code>electron .</code></li></ol><p><img alt="image-20210401111749978" data-src="https://i.loli.net/2021/04/01/Rn76qLOyC1aUwfA.png" class="lazyload"></p><h3 id="2-基础开发"><a href="#2-基础开发" class="headerlink" title="2.基础开发"></a>2.基础开发</h3><ol><li><p>读取文件信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取文件信息</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> btn = <span class="built_in">this</span>.document.querySelector(<span class="string">&#x27;#btn&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> body = <span class="built_in">this</span>.document.querySelector(<span class="string">&#x27;#text&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        fs.readFile(<span class="string">&#x27;data.txt&#x27;</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">            body.innerHTML = data</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新开窗口</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn2 = <span class="built_in">this</span>.document.querySelector(<span class="string">&#x27;#open1&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> BrowserWindow = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>).remote.BrowserWindow</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    btn2.onclick = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        newWin = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">            <span class="attr">width</span>:<span class="number">500</span>,</span><br><span class="line">            <span class="attr">height</span>:<span class="number">500</span></span><br><span class="line">        &#125;)</span><br><span class="line">        newWin.loadFile(<span class="string">&#x27;blue.html&#x27;</span>)</span><br><span class="line">        newWin.on(<span class="string">&#x27;closed&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            newWin = <span class="literal">null</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>浏览器打开链接</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123;shell&#125; =  <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aHref = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#aHref&#x27;</span>)</span><br><span class="line">aHref.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e.preventDefault()</span><br><span class="line">    <span class="keyword">var</span> href = <span class="built_in">this</span>.getAttribute(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">    shell.openExternal(href)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>离线 \ 上线事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;online&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;来网了！！！&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;offline&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;断网了啊！！！&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>消息通知</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> notify_btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;notify_btn&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> option = &#123;</span><br><span class="line">    <span class="attr">title</span>:<span class="string">&#x27;来订单了！&#x27;</span>,</span><br><span class="line">    <span class="attr">body</span>:<span class="string">&#x27;你的消息到了&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">notify_btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">window</span>.Notification(option.title,option)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打开子窗口</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#btn2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.open(<span class="string">&#x27;./mini_window.html&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>子窗口向父窗口传递信息 -  通过message事件监听</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//父窗口 获取子窗口信息</span><br><span class="line">window.addEventListener(&#x27;message&#x27;,(msg)=&gt;&#123;</span><br><span class="line">    let myMessage = document.querySelector(&#x27;#myMsg&#x27;)</span><br><span class="line">    myMessage.innerHTML = JSON.stringify(msg.data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 子窗口 发送信息</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>wo shi zi chuang kou<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;popup&quot;</span>&gt;</span>发送信息给父窗口<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> popup = <span class="built_in">this</span>.document.querySelector(<span class="string">&#x27;#popup&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    popup.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.opener.postMessage(<span class="string">&#x27;我是子窗口的信息&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>文件选择对话框</p></li><li><p>保存文件对话框</p></li><li><p>消息对话框</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;dialog&#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>).remote</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件选择框</span></span><br><span class="line"><span class="keyword">var</span> open_img = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;open_img&#x27;</span>)</span><br><span class="line">open_img.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    dialog.showOpenDialog(&#123;</span><br><span class="line">        <span class="attr">title</span>:<span class="string">&#x27;选择你选择的照片&#x27;</span>,</span><br><span class="line">        <span class="attr">defaultPath</span>:<span class="string">&#x27;photo.jpg&#x27;</span>,    <span class="comment">// 默认路径</span></span><br><span class="line">        <span class="attr">filters</span>:[       <span class="comment">// 过滤文件类型</span></span><br><span class="line">            &#123;<span class="attr">name</span>:<span class="string">&#x27;img&#x27;</span>,<span class="attr">extensions</span>:[<span class="string">&#x27;jpg&#x27;</span>]&#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">buttonLabel</span>: <span class="string">&#x27;打开图片&#x27;</span> <span class="comment">// 自定义按钮</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> img = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">        img.setAttribute(<span class="string">&#x27;src&#x27;</span>,res.filePaths[<span class="number">0</span>])</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.error(err)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存文件对话框</span></span><br><span class="line"><span class="keyword">var</span> save_file = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;save_file&#x27;</span>)</span><br><span class="line">save_file.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    dialog.showSaveDialog(&#123;</span><br><span class="line">        <span class="attr">title</span>:<span class="string">&#x27;保存文件&#x27;</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res)</span><br><span class="line">        fs.writeFileSync(res.filePath,<span class="string">&#x27;save file to txt.&#x27;</span>)</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">e</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.error(e)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 消息对话框</span></span><br><span class="line"><span class="keyword">var</span> dialog1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;dialog&#x27;</span>)</span><br><span class="line">dialog1.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    dialog.showMessageBox(&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">        <span class="attr">title</span>:<span class="string">&#x27;标题栏&#x27;</span>,</span><br><span class="line">        <span class="attr">message</span>:<span class="string">&#x27;是不是要去吃饭？&#x27;</span>,</span><br><span class="line">        <span class="attr">buttons</span>:[</span><br><span class="line">            <span class="string">&#x27;我要去&#x27;</span>,<span class="string">&#x27;我不去&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res)</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">e</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.error(e)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>设置目录菜单</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// menu.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; Menu,BrowserWindow &#125;= <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> template = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">label</span>: <span class="string">&#x27;设置&#x27;</span>,</span><br><span class="line">        <span class="attr">submenu</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">label</span>: <span class="string">&#x27;字体&#x27;</span>,</span><br><span class="line">                <span class="attr">accelerator</span>:<span class="string">&#x27;ctrl+n&#x27;</span>,</span><br><span class="line">                <span class="attr">click</span>:<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">                        <span class="attr">width</span>:<span class="number">500</span>,</span><br><span class="line">                        <span class="attr">height</span>:<span class="number">500</span>,</span><br><span class="line">                        <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">                            <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,</span><br><span class="line">                            <span class="attr">enableRemoteModule</span>: <span class="literal">true</span></span><br><span class="line">                          &#125;   </span><br><span class="line">                    &#125;)</span><br><span class="line">                    win.loadFile(<span class="string">&#x27;blue.html&#x27;</span>)</span><br><span class="line">                    win.on(<span class="string">&#x27;closed&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                        win = <span class="literal">null</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;<span class="attr">label</span>: <span class="string">&#x27;颜色&#x27;</span>&#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">label</span>: <span class="string">&#x27;信息&#x27;</span>,</span><br><span class="line">        <span class="attr">submenu</span>:[</span><br><span class="line">            &#123;<span class="attr">label</span>: <span class="string">&#x27;修改&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">label</span>: <span class="string">&#x27;查看&#x27;</span>&#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = Menu.buildFromTemplate(template)</span><br><span class="line">Menu.setApplicationMenu(m)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在main.js 应用menu</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./main/menu.js&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>设置右键菜单</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;remote&#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rightTemplate = [</span><br><span class="line">    &#123;<span class="attr">label</span>:<span class="string">&#x27;复制&#x27;</span>,<span class="attr">accelerator</span>:<span class="string">&#x27;ctrl+c&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">label</span>:<span class="string">&#x27;粘贴&#x27;</span>,<span class="attr">accelerator</span>:<span class="string">&#x27;ctrl+v&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> m = remote.Menu.buildFromTemplate(rightTemplate)</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;contextmenu&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e.preventDefault()</span><br><span class="line">    m.popup(&#123;</span><br><span class="line">        <span class="attr">window</span>:remote.getCurrentWindow()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>粘贴板</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;clipboard&#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> code = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> copy = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;copy&#x27;</span>)</span><br><span class="line"></span><br><span class="line">copy.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    clipboard.writeText(code.innerHTML)</span><br><span class="line">    alert(<span class="string">&#x27;复制成功&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>……后续再说吧</p><h3 id="3-编译打包"><a href="#3-编译打包" class="headerlink" title="3.编译打包"></a>3.编译打包</h3><blockquote><p>Electron 支持跨平台打包，官方推荐使用electron-builder 拥有更丰富的功能且支持更多平台。</p></blockquote><ol><li>安装依赖</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add electron-builder --save-dev</span><br></pre></td></tr></table></figure><ol start="2"><li><p>在<code>package.json</code>中做如下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&quot;build&quot;: &#123;</span><br><span class="line">    &quot;appId&quot;: &quot;com.xxx.app&quot;,</span><br><span class="line">    &quot;mac&quot;: &#123;</span><br><span class="line">      &quot;target&quot;: [&quot;dmg&quot;,&quot;zip&quot;]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;win&quot;: &#123;</span><br><span class="line">      &quot;target&quot;: [&quot;nsis&quot;,&quot;zip&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;dist&quot;: &quot;electron-builder --win --x64&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>在命令行中执行<code>npm run dist</code> ，打包后在dist目录生成如下文件：</p><p><img data-src="https://segmentfault.com/img/bV6Ah7?w=569&h=238" class="lazyload"></p></li><li><p>总结</p><blockquote><p>1、electron-builder 可以打包成msi、exe、dmg文件，macOS系统，只能打包dmg文件，window系统才能打包exe，msi文件；<br>2、几乎支持了所有平台的所有格式；<br>3、支持Auto Update；<br>4、支持CLI和JS API两种使用方式；</p></blockquote></li></ol><p>后续更新electron-vue的开发流程，希望可以将electron与flask、pytorch结合。开发一个cv处理工具。</p><p>代码参见：<a href="https://github.com/kid1999/electron-study">https://github.com/kid1999/electron-study</a></p><p><strong>参考：</strong></p><p><a href="https://www.electronjs.org/docs">官方文档</a></p><p><a href="https://jspang.com/detailed?id=62">技术胖blog</a></p>]]></content>
      
      
      <categories>
          
          <category> Electron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Kafka</title>
      <link href="/2021/02/08/SpringBoot%E6%95%B4%E5%90%88Kafka/"/>
      <url>/2021/02/08/SpringBoot%E6%95%B4%E5%90%88Kafka/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringBoot整合Kafka"><a href="#SpringBoot整合Kafka" class="headerlink" title="SpringBoot整合Kafka"></a>SpringBoot整合Kafka</h2><blockquote><p>SpringBoot整合Kafka, 实现消息解耦传输。</p></blockquote><h3 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h3><blockquote><p>win10, zookeeper3.5.5 , kafka2.6.0 , java1.8</p></blockquote><ol><li><p>zookeeper 资源调度，使用kafka的前提</p></li><li><p>kafka 消息队列</p><p>docker安装详情参见 –&gt;  <a href="https://kid1999.github.io/2020/09/07/%E5%B8%B8%E7%94%A8%E7%8E%AF%E5%A2%83Docker%E8%BF%90%E7%BB%B4/">常用环境Docker运维</a></p></li></ol><h3 id="2-pom依赖"><a href="#2-pom依赖" class="headerlink" title="2. pom依赖"></a>2. pom依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka-streams<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3. 配置文件"></a>3. 配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">kafka:</span></span><br><span class="line">    <span class="attr">bootstrap-servers:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span><span class="string">:9092</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">concurrency:</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">ack-mode:</span> <span class="string">MANUAL_IMMEDIATE</span></span><br><span class="line">      <span class="attr">poll-timeout:</span> <span class="number">1500</span></span><br><span class="line">    <span class="attr">consumer:</span></span><br><span class="line">      <span class="attr">group-id:</span> <span class="string">kafka_cluster1</span></span><br><span class="line">      <span class="attr">enable-auto-commit:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">key-deserializer:</span> <span class="string">org.apache.kafka.common.serialization.StringDeserializer</span></span><br><span class="line">      <span class="attr">value-deserializer:</span> <span class="string">org.apache.kafka.common.serialization.StringDeserializer</span></span><br><span class="line">      <span class="attr">properties:</span> &#123;<span class="attr">session.timeout.ms:</span> <span class="number">6000</span>, <span class="attr">auto.offset.reset:</span> <span class="string">earliest</span>&#125;</span><br><span class="line">    <span class="attr">producer:</span></span><br><span class="line">      <span class="attr">key-serializer:</span> <span class="string">org.apache.kafka.common.serialization.StringSerializer</span></span><br><span class="line">      <span class="attr">value-serializer:</span> <span class="string">org.apache.kafka.common.serialization.StringSerializer</span></span><br><span class="line">      <span class="attr">batch-size:</span> <span class="number">65536</span></span><br><span class="line">      <span class="attr">buffer-memory:</span> <span class="number">524288</span></span><br></pre></td></tr></table></figure><h3 id="4-SpringBoot中接发kafka消息"><a href="#4-SpringBoot中接发kafka消息" class="headerlink" title="4.SpringBoot中接发kafka消息"></a>4.SpringBoot中接发kafka消息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.kid1999.kafkatest.api;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.annotation.KafkaListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.core.KafkaTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.support.KafkaHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.MessageHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.support.GenericMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kid1999</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-02-07 15:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> TODO</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// kafka模板 </span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate&lt;String,Object&gt; kafkaTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送消息 给 Topic 为 Test 的消息队列</span></span><br><span class="line">    <span class="meta">@PostMapping(value=&quot;message/send&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">(<span class="meta">@RequestParam</span> String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(message);</span><br><span class="line">        kafkaTemplate.send(<span class="string">&quot;Test&quot;</span>, message);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听来自 Topic 为 Test 的消息</span></span><br><span class="line">    <span class="meta">@KafkaListener(topics = &quot;Test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span> <span class="params">(ConsumerRecord&lt;?, ?&gt; record)</span></span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;topic is %s, offset is %d, value is %s \n&quot;</span>, record.topic(), record.offset(), record.value());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 花式发送消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTemplateSend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1 发送带有时间戳的消息</span></span><br><span class="line">        kafkaTemplate.send(<span class="string">&quot;Test&quot;</span>, <span class="number">0</span>, System.currentTimeMillis(), String.valueOf(<span class="number">0</span>), <span class="string">&quot;send message with timestamp&quot;</span>);</span><br><span class="line">        <span class="comment">//2 使用ProducerRecord发送消息</span></span><br><span class="line">        ProducerRecord record = <span class="keyword">new</span> ProducerRecord(<span class="string">&quot;Test&quot;</span>, <span class="string">&quot;use ProducerRecord to send message&quot;</span>);</span><br><span class="line">        kafkaTemplate.send(record);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3 使用Spring框架Message类发送消息</span></span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(KafkaHeaders.TOPIC, <span class="string">&quot;Test&quot;</span>);</span><br><span class="line">        map.put(KafkaHeaders.PARTITION_ID, <span class="number">0</span>);</span><br><span class="line">        map.put(KafkaHeaders.MESSAGE_KEY, String.valueOf(<span class="number">0</span>));</span><br><span class="line">        GenericMessage message = <span class="keyword">new</span> GenericMessage(<span class="string">&quot;use Message to send message&quot;</span>,<span class="keyword">new</span> MessageHeaders(map));</span><br><span class="line">        kafkaTemplate.send(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spark-streaming整合kafka</title>
      <link href="/2021/02/08/spark-streaming%E6%95%B4%E5%90%88kafka/"/>
      <url>/2021/02/08/spark-streaming%E6%95%B4%E5%90%88kafka/</url>
      
        <content type="html"><![CDATA[<h2 id="spark-streaming整合kafka"><a href="#spark-streaming整合kafka" class="headerlink" title="spark-streaming整合kafka"></a>spark-streaming整合kafka</h2><blockquote><p>spark-streaming整合kafka 基于java实现消息流批处理。</p><p>本次计划用在 搜索商品 –&gt; 发送 (用户ID，商品ID) –&gt; Kafka –&gt;  spark-streaming –&gt; 商品推荐算法 –&gt; Kafka –&gt; 更改推荐商品队列</p></blockquote><h3 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h3><blockquote><p>win10, zookeeper3.5.5 , kafka2.6.0 , spark 2.4.7 , java1.8</p></blockquote><ol><li><p>zookeeper 资源调度，使用kafka的前提</p></li><li><p>kafka 消息队列</p><p>docker安装详情参见 –&gt;  <a href="https://kid1999.github.io/2020/09/07/%E5%B8%B8%E7%94%A8%E7%8E%AF%E5%A2%83Docker%E8%BF%90%E7%BB%B4/">常用环境Docker运维</a></p></li><li><p>spark 计算引擎</p><p>此次先使用win10<a href="https://yxnchen.github.io/technique/Windows%E5%B9%B3%E5%8F%B0%E4%B8%8B%E5%8D%95%E6%9C%BASpark%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/">本地安装调试</a>，Linux安装参照docker安装或直接解压安装</p></li></ol><h3 id="2-设置kafka消息发送"><a href="#2-设置kafka消息发送" class="headerlink" title="2. 设置kafka消息发送"></a>2. 设置kafka消息发送</h3><ul><li>参见<a href="http://localhost:4000/2021/02/08/SpringBoot%E6%95%B4%E5%90%88Kafka/#1-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA">springBoot整合Kafka</a>，可略过使用<a href="https://blog.csdn.net/isea533/article/details/73720066">kafka-console 发送消息</a></li></ul><h3 id="3-pom依赖"><a href="#3-pom依赖" class="headerlink" title="3. pom依赖"></a>3. pom依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-core_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-sql_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-streaming_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-streaming-kafka-0-10_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-java代码实现spark本地执行，并接收kafka消息"><a href="#4-java代码实现spark本地执行，并接收kafka消息" class="headerlink" title="4. java代码实现spark本地执行，并接收kafka消息"></a>4. java代码实现spark本地执行，并接收kafka消息</h3><ol><li>单纯本地启动spark，前提是完成上述的spark本地安装调试环境</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.sql.Dataset;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.SparkSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kid1999</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-02-07 10:11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> TODO</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SparkSession spark = SparkSession</span><br><span class="line">                .builder()</span><br><span class="line">                .appName(<span class="string">&quot;Java Spark SQL basic example&quot;</span>)</span><br><span class="line">                .config(<span class="string">&quot;spark.some.config.option&quot;</span>, <span class="string">&quot;some-value&quot;</span>)<span class="comment">// 各种配置</span></span><br><span class="line">                .master(<span class="string">&quot;local&quot;</span>)</span><br><span class="line">                .getOrCreate();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取test.txt文件内容并显示</span></span><br><span class="line">        Dataset&lt;String&gt; file = spark.read().textFile(<span class="string">&quot;src/main/resources/test.txt&quot;</span>);</span><br><span class="line">        file.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>spark-streaming 接收 kafka消息流</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.common.serialization.StringDeserializer;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.SparkConf;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.api.java.function.PairFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.Durations;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.api.java.JavaInputDStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.api.java.JavaPairDStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.api.java.JavaStreamingContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.kafka010.ConsumerStrategies;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.kafka010.KafkaUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.kafka010.LocationStrategies;</span><br><span class="line"><span class="keyword">import</span> scala.Tuple2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kid1999</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-02-08 21:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> TODO</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String brokers = <span class="string">&quot;192.168.1.1:9092&quot;</span>;</span><br><span class="line">        String topic = <span class="string">&quot;Test&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        SparkConf sparkConf = <span class="keyword">new</span> SparkConf().setAppName(<span class="string">&quot;KafkaWordCount&quot;</span>).setMaster(<span class="string">&quot;local[2]&quot;</span>);</span><br><span class="line">        <span class="comment">// 每隔5秒钟，咱们的spark streaming作业就会收集最近5秒内的数据源接收过来的数据</span></span><br><span class="line">        JavaStreamingContext jssc = <span class="keyword">new</span> JavaStreamingContext(</span><br><span class="line">                sparkConf, Durations.seconds(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 基于kafka direct api模式，构建出了针对kafka集群中指定topic的输入DStream</span></span><br><span class="line">        <span class="comment">// 两个值，val1，val2；val1没有什么特殊的意义；val2中包含了kafka topic中的一条一条的实时日志数据</span></span><br><span class="line">        Map&lt;String, Object&gt; kafkaParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//Kafka服务监听端口</span></span><br><span class="line">        kafkaParams.put(<span class="string">&quot;bootstrap.servers&quot;</span>, brokers);</span><br><span class="line">        <span class="comment">//指定kafka输出key的数据类型及编码格式（默认为字符串类型编码格式为uft-8）</span></span><br><span class="line">        kafkaParams.put(<span class="string">&quot;key.deserializer&quot;</span>, StringDeserializer.class);</span><br><span class="line">        <span class="comment">//指定kafka输出value的数据类型及编码格式（默认为字符串类型编码格式为uft-8）</span></span><br><span class="line">        kafkaParams.put(<span class="string">&quot;value.deserializer&quot;</span>, StringDeserializer.class);</span><br><span class="line">        <span class="comment">//消费者ID，随意指定</span></span><br><span class="line">        kafkaParams.put(<span class="string">&quot;group.id&quot;</span>, <span class="string">&quot;jis&quot;</span>);</span><br><span class="line">        <span class="comment">//指定从latest(最新,其他版本的是largest这里不行)还是smallest(最早)处开始读取数据</span></span><br><span class="line">        kafkaParams.put(<span class="string">&quot;auto.offset.reset&quot;</span>, <span class="string">&quot;latest&quot;</span>);</span><br><span class="line">        <span class="comment">//如果true,consumer定期地往zookeeper写入每个分区的offset</span></span><br><span class="line">        kafkaParams.put(<span class="string">&quot;enable.auto.commit&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建topic set</span></span><br><span class="line">        Collection&lt;String&gt; topics = Arrays.asList(topic);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> JavaInputDStream&lt;ConsumerRecord&lt;String, String&gt;&gt; stream =</span><br><span class="line">                KafkaUtils.createDirectStream(</span><br><span class="line">                        jssc,</span><br><span class="line">                        LocationStrategies.PreferConsistent(),</span><br><span class="line">                        ConsumerStrategies.Subscribe(topics,kafkaParams)</span><br><span class="line">                );</span><br><span class="line"></span><br><span class="line">        JavaPairDStream&lt;String, String&gt; pairDS = stream.mapToPair(</span><br><span class="line">                <span class="keyword">new</span> PairFunction&lt;ConsumerRecord&lt;String, String&gt;, String, String&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Tuple2&lt;String, String&gt; <span class="title">call</span><span class="params">(ConsumerRecord&lt;String, String&gt; record)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;&gt;(record.key(), record.value());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="comment">// 打印 消息的key 和value</span></span><br><span class="line">        pairDS.print();</span><br><span class="line">        jssc.start();</span><br><span class="line">        jssc.awaitTermination();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功显示：localhost:4040</p><p><img alt="image-20210208231052331" data-src="https://i.loli.net/2021/02/08/QvRMdFwc1uASOiy.png" class="lazyload"></p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前缀和</title>
      <link href="/2021/01/30/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
      <url>/2021/01/30/%E5%89%8D%E7%BC%80%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h2><blockquote><p>通常，涉及连续子数组问题的时候，我们使用前缀和来解决。</p></blockquote><ul><li>我们令 P[i] = A[0] + A[1] + … + A[i]</li><li>那么每个连续子数组的和 <strong>sum(i, j)</strong> = **P[j] - P[i-1]**（其中 0 &lt; i &lt; j）。</li></ul><p>例如：</p><p><a href="https://leetcode-cn.com/problems/subarray-sum-equals-k/">560. 和为K的子数组</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public int subarraySum(int[] nums, int k) &#123;</span><br><span class="line">    int res = 0,sum = 0;</span><br><span class="line">    HashMap&lt;Integer,Integer&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">    map.put(0,1);</span><br><span class="line">    for (int n:nums) &#123;</span><br><span class="line">        sum += n;</span><br><span class="line">        // sum1 - k = sum2</span><br><span class="line">        if(map.containsKey(sum-k)) res += map.get(sum-k);</span><br><span class="line">        map.put(sum,map.getOrDefault(sum,0)+1);</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode-cn.com/problems/subarray-sums-divisible-by-k/">974. 和可被 K 整除的子数组</a></p><p>前缀和+同余定理 p[j]- p[i] % K = 0 等价于 p[j] % k == p[i] % K</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public int subarraysDivByK(int[] A, int K) &#123;</span><br><span class="line">int sum = 0, res = 0;</span><br><span class="line">Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">map.put(0, 1);</span><br><span class="line">for (int n : A) &#123;</span><br><span class="line">sum += n;</span><br><span class="line">int curMod = (sum%K+K)%K;   // 变负为正</span><br><span class="line">int preCount = map.getOrDefault(curMod, 0);</span><br><span class="line">res += preCount;</span><br><span class="line">map.put(curMod, preCount + 1);</span><br><span class="line">&#125;</span><br><span class="line">return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若K的数量级不高可以用数组代替map</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public int subarraysDivByK(int[] A, int k) &#123;</span><br><span class="line">int[] dp = new int[k];</span><br><span class="line">dp[0] = 1;</span><br><span class="line">int res=0,sum=0;</span><br><span class="line">for(int n:A)&#123;</span><br><span class="line">sum = ((sum+n)%k+k)%k;</span><br><span class="line">res += dp[sum];</span><br><span class="line">dp[sum]++;</span><br><span class="line">&#125;</span><br><span class="line">return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类似前缀和的前缀积"><a href="#类似前缀和的前缀积" class="headerlink" title="类似前缀和的前缀积"></a>类似前缀和的前缀积</h2><ul><li>由于是前缀积，所以一般不像前缀和是正负波动的，而是递增的，且数量大</li><li>所以不能用存储记录，而是用（<strong>滑动窗口</strong>）</li></ul><p>例如：</p><p><a href="https://leetcode-cn.com/problems/subarray-product-less-than-k/">713. 乘积小于K的子数组</a></p><p>前缀积 + 滑动窗口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public int numSubarrayProductLessThanK(int[] nums, int k) &#123;</span><br><span class="line">if(k&lt;=1) return 0;</span><br><span class="line">int res = 0,sum = 1,l = 0;</span><br><span class="line">for (int r = 0; r &lt;nums.length ; r++) &#123;</span><br><span class="line">sum *= nums[r];</span><br><span class="line">while (sum &gt;= k)&#123;</span><br><span class="line">sum /= nums[l];</span><br><span class="line">l++;</span><br><span class="line">&#125;</span><br><span class="line">res += (r-l+1);</span><br><span class="line">&#125;</span><br><span class="line">return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前缀树</title>
      <link href="/2021/01/30/%E5%89%8D%E7%BC%80%E6%A0%91/"/>
      <url>/2021/01/30/%E5%89%8D%E7%BC%80%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="前缀树"><a href="#前缀树" class="headerlink" title="前缀树"></a>前缀树</h2><blockquote><p>Trie (发音为 “try”) 或前缀树是一种树数据结构，用于检索字符串数据集中的键。这一高效的数据结构有多种应用</p></blockquote><ul><li>自动补全</li><li>拼写检查</li><li>IP 路由 (最长前缀匹配)</li><li>T9 (九宫格) 打字预测</li><li>单词游戏</li></ul><hr><p>还有其他的数据结构，如平衡树和哈希表，使我们能够在字符串数据集中搜索单词。为什么我们还需要 Trie 树呢？尽管哈希表可以在 O(1) 时间内寻找键值，却无法高效的完成以下操作：</p><ul><li>找到具有同一前缀的全部键值。</li><li>按词典序枚举字符串的数据集。</li></ul><p>Trie 树优于哈希表的另一个理由是，随着哈希表大小增加，会出现大量的冲突，时间复杂度可能增加到 O(n)，其中 n 是插入的键的数量。与哈希表相比，Trie 树在存储多个具有相同前缀的键时可以使用较少的空间。此时 Trie 树只需要 O(m) 的时间复杂度，其中 m 为键长。而在平衡树中查找键值需要 O(mlogn) 时间复杂度。</p><h4 id="Trie-树的结点结构"><a href="#Trie-树的结点结构" class="headerlink" title="Trie 树的结点结构"></a>Trie 树的结点结构</h4><p>Trie 树是一个有根的树，其结点具有以下字段：。</p><ul><li>最多 R 个指向子结点的链接，其中每个链接对应字母表数据集中的一个字母。本文中假定 R 为26，小写拉丁字母的数量。</li><li>布尔字段，以指定节点是对应键的结尾还是只是键前缀。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public class Trie &#123;</span><br><span class="line">private boolean is_string = false;</span><br><span class="line">private Trie[] next = new Trie[26];</span><br><span class="line"></span><br><span class="line">public Trie()&#123;&#125;</span><br><span class="line"></span><br><span class="line">public void insert(String word)&#123;//插入单词</span><br><span class="line">Trie root = this;</span><br><span class="line">for (char c : word.toCharArray()) &#123;</span><br><span class="line">if (root.next[c - &#x27;a&#x27;] == null) root.next[c - &#x27;a&#x27;] = new Trie();</span><br><span class="line">root = root.next[c - &#x27;a&#x27;];</span><br><span class="line">&#125;</span><br><span class="line">root.is_string = true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public boolean search(String word)&#123;//查找单词</span><br><span class="line">Trie root = this;</span><br><span class="line">for (char c : word.toCharArray()) &#123;</span><br><span class="line">if (root.next[c - &#x27;a&#x27;] == null) return false;</span><br><span class="line">root = root.next[c - &#x27;a&#x27;];</span><br><span class="line">&#125;</span><br><span class="line">return root.is_string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public boolean startsWith(String prefix)&#123;//查找前缀</span><br><span class="line">Trie root = this;</span><br><span class="line">for (char c : prefix.toCharArray()) &#123;</span><br><span class="line">if (root.next[c - &#x27;a&#x27;] == null) return false;</span><br><span class="line">root = root.next[c - &#x27;a&#x27;];</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虚假的前缀树</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Trie &#123;</span><br><span class="line">private HashSet&lt;String&gt; words;</span><br><span class="line">private HashSet&lt;String&gt; pres;</span><br><span class="line"></span><br><span class="line">public Trie() &#123;</span><br><span class="line">words = new HashSet&lt;&gt;();</span><br><span class="line">pres = new HashSet&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void insert(String word) &#123;</span><br><span class="line">words.add(word);</span><br><span class="line">for (int i = 1; i &lt;=word.length() ; i++) &#123;</span><br><span class="line">pres.add(word.substring(0,i));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public boolean search(String word) &#123;</span><br><span class="line">return words.contains(word);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public boolean startsWith(String prefix) &#123;</span><br><span class="line">return pres.contains(prefix);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><p><a href="https://leetcode-cn.com/problems/add-and-search-word-data-structure-design/">211. 添加与搜索单词 - 数据结构设计</a><br>使用前缀树进行单词搜索</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">class WordDictionary &#123;</span><br><span class="line">private static class Node&#123;</span><br><span class="line">public boolean isWord;</span><br><span class="line">public Node[] next = new Node[26];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private Node node;</span><br><span class="line"></span><br><span class="line">public WordDictionary() &#123;</span><br><span class="line">node = new Node();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void addWord(String word) &#123;</span><br><span class="line">Node root = node;</span><br><span class="line">for(char c : word.toCharArray())&#123;</span><br><span class="line">if(root.next[c-&#x27;a&#x27;] == null)</span><br><span class="line">root.next[c-&#x27;a&#x27;] = new Node();</span><br><span class="line">root = root.next[c-&#x27;a&#x27;];</span><br><span class="line">&#125;</span><br><span class="line">root.isWord = true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** Returns if the word is in the data structure. A word could contain the dot character &#x27;.&#x27; to represent any one letter. */</span><br><span class="line">public boolean search(String word) &#123;</span><br><span class="line">Node root = node;</span><br><span class="line">return dfs(root,word,0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private boolean dfs(Node cur,String word,int index)&#123;</span><br><span class="line">if(index == word.length()) return cur.isWord;</span><br><span class="line">if(word.charAt(index) != &#x27;.&#x27;)&#123;</span><br><span class="line">if(cur.next[word.charAt(index)-&#x27;a&#x27;] == null)</span><br><span class="line">return false;</span><br><span class="line">return dfs(cur.next[word.charAt(index)-&#x27;a&#x27;],word,index+1);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">for(Node n:cur.next)&#123;</span><br><span class="line">if(n != null &amp;&amp; dfs(n,word,index+1))</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前缀树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小生成树</title>
      <link href="/2021/01/30/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
      <url>/2021/01/30/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h2><blockquote><p>我们定义无向连通图的 最小生成树 （Minimum Spanning Tree，MST）为边权和最小的生成树。</p></blockquote><p>以下实现皆是基于LeetCode <a href="https://leetcode-cn.com/problems/min-cost-to-connect-all-points">5513题：连接所有点的最小费用</a>的实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">连接所有点的最小费用</span><br><span class="line"> </span><br><span class="line">给你一个points 数组，表示 2D 平面上的一些点，其中 points[i] = [xi, yi] 。</span><br><span class="line"></span><br><span class="line">连接点 [xi, yi] 和点 [xj, yj] 的费用为它们之间的 曼哈顿距离 ：|xi - xj| + |yi - yj| ，其中 |val| 表示 val 的绝对值。</span><br><span class="line"></span><br><span class="line">请你返回将所有点连接的最小总费用。只有任意两点之间 有且仅有 一条简单路径时，才认为所有点都已连接。</span><br></pre></td></tr></table></figure><h4 id="Kruskal-算法"><a href="#Kruskal-算法" class="headerlink" title="Kruskal 算法"></a>Kruskal 算法</h4><blockquote><p>Kruskal 算法是一种常见并且好写的最小生成树算法，由 Kruskal 发明。该算法的基本思想是从小到大加入边，是个贪心算法。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">public class Kruskal &#123;</span><br><span class="line"></span><br><span class="line">static class Edge implements Comparable&lt;Edge&gt;&#123;</span><br><span class="line">int x,y,len;</span><br><span class="line"></span><br><span class="line">public Edge(int x, int y, int len) &#123;</span><br><span class="line">this.x = x;</span><br><span class="line">this.y = y;</span><br><span class="line">this.len = len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public int compareTo(Edge o) &#123;</span><br><span class="line">return Integer.compare(this.len,o.len);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int[] f ; //并查集find数组</span><br><span class="line"></span><br><span class="line">public int find(int x) &#123;    //find函数，判断是否同一个root节点</span><br><span class="line">return f[x] == x ? x : find(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int minCostConnectPoints(int[][] points) &#123;</span><br><span class="line">int h = points.length;</span><br><span class="line">f=new int[h+1];</span><br><span class="line">for (int i = 0; i &lt; f.length; i++) &#123;//初始化find数组，让初始每个节点都自成一个集合，互相不联通</span><br><span class="line">f[i]=i;</span><br><span class="line">&#125;</span><br><span class="line">ArrayList&lt;Edge&gt; edges = new ArrayList&lt;&gt;();</span><br><span class="line">//求边长</span><br><span class="line">for (int i = 0; i &lt; h; i++) &#123;</span><br><span class="line">for (int j = i + 1; j &lt; h; j++) &#123;</span><br><span class="line">int len = Math.abs(points[i][0] - points[j][0]) + Math.abs(points[i][1] - points[j][1]);</span><br><span class="line">if (len != 0) &#123;</span><br><span class="line">edges.add(new Edge(i, j, len));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int ans =0;</span><br><span class="line">Collections.sort(edges);</span><br><span class="line">for(Edge e:edges)&#123;</span><br><span class="line">int x=e.x;</span><br><span class="line">int y =e.y;</span><br><span class="line">int len = e.len;</span><br><span class="line">if(find(x)==find(y)) &#123; //如果两个节点是同一个集合中，说明之前已经有其他路径连过了</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">ans+=len;</span><br><span class="line">f[find(x)] = find(y);//把两集合合并</span><br><span class="line">&#125;</span><br><span class="line">return ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h4><blockquote><p>Prim 算法是另一种常见并且好写的最小生成树算法。该算法的基本思想是从一个结点开始，不断加点（而不是 Kruskal 算法的加边）。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class Prim &#123;</span><br><span class="line"></span><br><span class="line">public int minCostConnectPoints(int[][] ps) &#123;</span><br><span class="line">int len = ps.length;</span><br><span class="line">int res = 0;</span><br><span class="line">boolean[] vis = new boolean[len];</span><br><span class="line">int[] min_dist = new int[len];</span><br><span class="line">Arrays.fill(min_dist,Integer.MAX_VALUE);</span><br><span class="line">min_dist[0] = 0;</span><br><span class="line">for (int i = 0; i &lt;len ; i++) &#123;         // 每次选取最小距离的点访问</span><br><span class="line">int u = -1;</span><br><span class="line">int gmin = Integer.MAX_VALUE;</span><br><span class="line">for (int j = 0; j &lt;len ; j++) &#123;</span><br><span class="line">if(!vis[j] &amp;&amp; min_dist[j] &lt; gmin)&#123;</span><br><span class="line">gmin = min_dist[j];</span><br><span class="line">u  = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">res += gmin;</span><br><span class="line">vis[u] = true;</span><br><span class="line">for (int j = 0; j &lt;len ; j++) &#123;     // 更新当前加入点 与 其他没加入点的最小距离</span><br><span class="line">if(!vis[j])&#123;</span><br><span class="line">int new_dist = Math.abs(ps[j][0] - ps[u][0]) + Math.abs(ps[j][1] - ps[u][1]);</span><br><span class="line">min_dist[j] = Math.min(min_dist[j],new_dist);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最小生成树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集</title>
      <link href="/2021/01/30/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
      <url>/2021/01/30/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="并查集-DisJoint"><a href="#并查集-DisJoint" class="headerlink" title="并查集 DisJoint"></a>并查集 DisJoint</h2><blockquote><p>检查图上是否存在环</p></blockquote><blockquote><p>通过一个数组表示每个点的父节点地址</p></blockquote><blockquote><p>通过查询每个节点的父节点是否相同判断是否是同一个集合</p></blockquote><h3 id="核心两个方法："><a href="#核心两个方法：" class="headerlink" title="核心两个方法："></a>核心两个方法：</h3><h4 id="1-找到根节点"><a href="#1-找到根节点" class="headerlink" title="1.找到根节点"></a>1.找到根节点</h4><h4 id="2-合并两个集合"><a href="#2-合并两个集合" class="headerlink" title="2.合并两个集合"></a>2.合并两个集合</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">public class Disjoint &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int[][] edges = &#123;</span><br><span class="line">&#123;0,1&#125;,&#123;1,2&#125;,&#123;1,3&#125;,</span><br><span class="line">&#123;3,2&#125;,&#123;2,4&#125;</span><br><span class="line">&#125;;</span><br><span class="line">int len = (int) 1e5;</span><br><span class="line">int[] parents = new int[len];</span><br><span class="line">Arrays.fill(parents,-1);    // 初始化</span><br><span class="line"></span><br><span class="line">// xxxx  其他操作</span><br><span class="line"></span><br><span class="line">for (int[] edge:edges) &#123;</span><br><span class="line">int x = edge[0];</span><br><span class="line">int y = edge[1];</span><br><span class="line">if(union(x,y,parents))&#123;</span><br><span class="line">// 如果是相同的的父节点 说明已经是同一个集合</span><br><span class="line">// 再加入就是环了！！！</span><br><span class="line">System.out.println(&quot;find cycle.&quot;);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;not find cycle.&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 查找根节点</span><br><span class="line">public static int find_root(int x, int[] parents)&#123;</span><br><span class="line">int x_root = x;</span><br><span class="line">while (parents[x_root] != -1)&#123;</span><br><span class="line">x_root = parents[x_root];</span><br><span class="line">&#125;</span><br><span class="line">return x_root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 合并两个集合</span><br><span class="line">public static boolean union(int x,int y,int[] parents)&#123;</span><br><span class="line">int x_root = find_root(x,parents);</span><br><span class="line">int y_root = find_root(y,parents);</span><br><span class="line">if(x_root != y_root)&#123;</span><br><span class="line">parents[x_root] = y_root;      // 将x合并到y中</span><br><span class="line">return false;</span><br><span class="line">&#125;else return true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合ElasticSearch</title>
      <link href="/2021/01/28/SpringBoot%E6%95%B4%E5%90%88ElasticSearch/"/>
      <url>/2021/01/28/SpringBoot%E6%95%B4%E5%90%88ElasticSearch/</url>
      
        <content type="html"><![CDATA[<h2 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h2><blockquote><p>Elasticsearch是一个基于<a href="https://baike.baidu.com/item/Lucene/6753302">Lucene</a>的搜索服务器。它提供了一个分布式多用户能力的<a href="https://baike.baidu.com/item/%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/7847410">全文搜索引擎</a>，基于RESTful web接口。</p></blockquote><p>本文基于 Elasticsearch7.8.0。</p><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li>ElasticSearch的安装使用</li><li>相关配套设施的安装使用</li><li>基本概念简介</li><li>SpringBoot整合Elasticsearch的两种方案<pre><code>1. 自定义封装RestHighLevelClient</code></pre><ol start="2"><li>基于JPA规范开发</li></ol></li></ul><h3 id="1-ElasticSearch的安装使用"><a href="#1-ElasticSearch的安装使用" class="headerlink" title="1. ElasticSearch的安装使用"></a>1. ElasticSearch的安装使用</h3><ol><li><p>基于window 解压运行</p></li><li><p>基于docker（参见 <a href="https://kid1999.github.io/2020/09/07/%E5%B8%B8%E7%94%A8%E7%8E%AF%E5%A2%83Docker%E8%BF%90%E7%BB%B4/">常用docker环境运维</a>）</p></li></ol><h3 id="2-相关配套设施的安装使用"><a href="#2-相关配套设施的安装使用" class="headerlink" title="2. 相关配套设施的安装使用"></a>2. 相关配套设施的安装使用</h3><ol><li><p>elasticsearch-head ： 类似Navicat的elasticseach的数据可视化查询工具（<a href="https://chrome.google.com/webstore/detail/elasticsearch-head/ffmkiejjmecolpfloofpjologoblkegm">Chrome商店安装</a>）</p></li><li><p>Kibana：ElasticSearch官方配套可视化组件，可组成ELK日志处理可视化体系</p><p>安装：下载解压</p><p>修改配置文件 config/kibana.yml ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 端口</span></span><br><span class="line"><span class="attr">server.port:</span> <span class="number">5601</span></span><br><span class="line"><span class="comment"># elasticsearch 地址</span></span><br><span class="line"><span class="attr">elasticsearch.hosts:</span> [<span class="string">&quot;http://localhost:9200&quot;</span>]</span><br><span class="line"><span class="comment"># 语言设置</span></span><br><span class="line"><span class="attr">i18n.locale:</span> <span class="string">&quot;zh-CN&quot;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li> ./bin/kibana.bat 运行</li></ol><h3 id="3-基本概念简介"><a href="#3-基本概念简介" class="headerlink" title="3. 基本概念简介"></a>3. 基本概念简介</h3><ol><li> 索引 index（名词）</li></ol><blockquote><p>一个 索引 类似于传统关系数据库中的一个 数据库 ，是一个存储关系型文档的地方，是ES对逻辑数据的逻辑存储，索引的结构是为快速有效的全文检索做准备。 索引 (index) 的复数词为 indices 或 indexes 。</p></blockquote><ol start="2"><li> 索引 index（动词）</li></ol><blockquote><p>索引一个文档 就是存储一个文档到一个 索引 （名词）中以便它可以被检索和查询到。这非常类似于 SQL 语句中的 INSERT 关键词，除了文档已存在时新chaj文档会替换旧文档情况之外。</p></blockquote><ol start="3"><li>倒排索引</li></ol><blockquote><p>倒排索引源于实际应用中需要根据属性的值来查找记录。这种索引表中的每一项都包括一个属性值和具有该属性值的各记录的地址。由于不是由记录来确定属性值，而是由属性值来确定记录的位置，因而称为倒排索引(inverted index)。带有倒排索引的文件我们称为倒排索引文件，简称倒排文件(inverted file)。</p></blockquote><ol start="4"><li>文档 document</li></ol><blockquote><p>存储在ES上的主要实体叫文档</p></blockquote><ol start="5"><li>文档类型 type（废弃）</li></ol><blockquote><p>在ES中，一个索引对象可以存储很多不同用途的对象。</p></blockquote><ol start="6"><li>映射</li></ol><blockquote><p>存储有关字段的信息，每一个文档类型都有自己的映射。</p></blockquote><ol start="7"><li>面向文档</li></ol><blockquote><p>在应用程序中对象很少只是一个简单的键和值的列表。通常，它们拥有更复杂的数据结构，可能包括日期、地理信息、其他对象或者数组等。</p></blockquote><blockquote><p>也许有一天你想把这些对象存储在数据库中。使用关系型数据库的行和列存储，这相当于是把一个表现力丰富的对象挤压到一个非常大的电子表格中：你必须将这个对象扁平化来适应表结构–通常一个字段&gt;对应一列–而且又不得不在每次查询时重新构造对象。</p></blockquote><blockquote><p><strong>Elasticsearch 是 面向文档 的，意味着它存储整个对象或 文档。Elasticsearch 不仅存储文档，而且 _索引 每个文档的内容使之可以被检索。在 Elasticsearch 中，你 对文档进行索引、检索、排序和过滤–而不是对行列数据。这是一种完全不同的思考数据的方式，也是 Elasticsearch 能支持复杂全文检索的原因。</strong></p></blockquote><h5 id="API参考-elasticsearch的常用restful-api"><a href="#API参考-elasticsearch的常用restful-api" class="headerlink" title="API参考 elasticsearch的常用restful api"></a>API参考 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/rest-apis.html">elasticsearch的常用restful api</a></h5><p>主要是index和document的api </p><p>用的最多的是document的复合查询</p><p>如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">插入index : emp</span><br><span class="line">type: it</span><br><span class="line">id: <span class="number">1</span></span><br><span class="line">的元素</span><br><span class="line"></span><br><span class="line">curl -XPOST &#x27;localhost:<span class="number">9200</span>/emp/it/<span class="number">1</span>?pretty&#x27; -H &#x27;Content-Type: application/json&#x27; -d&#x27;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;first_name&quot;</span> : <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;last_name&quot;</span> :  <span class="string">&quot;Smith&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span> :        <span class="number">25</span>,</span><br><span class="line">    <span class="attr">&quot;about&quot;</span> :      <span class="string">&quot;I love to go rock climbing&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;interests&quot;</span>: [ <span class="string">&quot;sports&quot;</span>, <span class="string">&quot;music&quot;</span> ]</span><br><span class="line">&#125;</span><br><span class="line">&#x27;</span><br><span class="line"></span><br><span class="line">修改元素</span><br><span class="line">curl -XPUT &#x27;localhost:<span class="number">9200</span>/emp/it/<span class="number">1</span>?pretty&#x27; -H &#x27;Content-Type: application/json&#x27; -d&#x27;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;first_name&quot;</span> : <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;last_name&quot;</span> :  <span class="string">&quot;Smith&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span> :        <span class="number">25</span>,</span><br><span class="line">    <span class="attr">&quot;about&quot;</span> :      <span class="string">&quot;I love to go rock climbing&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;interests&quot;</span>: [ <span class="string">&quot;sports&quot;</span>, <span class="string">&quot;music&quot;</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-SpringBoot整合Elasticsearch的两种方案"><a href="#4-SpringBoot整合Elasticsearch的两种方案" class="headerlink" title="4. SpringBoot整合Elasticsearch的两种方案"></a>4. SpringBoot整合Elasticsearch的两种方案</h3><ol><li><h5 id="基于官方的-RestHighLevelClient"><a href="#基于官方的-RestHighLevelClient" class="headerlink" title="基于官方的 RestHighLevelClient"></a>基于官方的 RestHighLevelClient</h5><ol><li>配置RestHighLevelClient  此处使用Restful 高级 API</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.kid1999.esystem.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.client.ClientConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.client.RestClients;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kid1999</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-01-27 16:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> ES 客服端配置</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ESRestTemplateConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;es.host&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String ES_HOST;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestHighLevelClient <span class="title">ESClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ClientConfiguration clientConfiguration = ClientConfiguration.builder()</span><br><span class="line">                .connectedTo(ES_HOST)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> RestClients.create(clientConfiguration).rest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>封装工具类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.kid1999.esystem.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.bulk.BulkRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.bulk.BulkResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.delete.DeleteRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.delete.DeleteResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.get.GetRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.get.GetResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.support.master.AcknowledgedResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.update.UpdateRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.update.UpdateResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.indices.CreateIndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.indices.CreateIndexResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.indices.GetIndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.unit.TimeValue;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.fetch.subphase.FetchSourceContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kid1999</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-01-27 18:37</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> elasticsearch 工具类</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ESUtil</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String INDEX = <span class="string">&quot;test&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建索引</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CreateIndexResponse <span class="title">createIndex</span><span class="params">(String index)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        CreateIndexRequest createIndexRequest = <span class="keyword">new</span> CreateIndexRequest(index);</span><br><span class="line">        CreateIndexResponse response = client.indices().create(createIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试索引是否存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">existIndex</span><span class="params">(String index)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        GetIndexRequest request = <span class="keyword">new</span> GetIndexRequest(index);</span><br><span class="line">        <span class="keyword">boolean</span> exists = client.indices().exists(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="keyword">return</span> exists;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除索引</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AcknowledgedResponse <span class="title">deleteIndex</span><span class="params">(String index)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        DeleteIndexRequest deleteIndexRequest = <span class="keyword">new</span> DeleteIndexRequest(index);</span><br><span class="line">        AcknowledgedResponse delete = client.indices().delete(deleteIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="keyword">return</span> delete;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加文档</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IndexResponse <span class="title">createDocument</span><span class="params">(String index,Object object)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        IndexRequest request = <span class="keyword">new</span> IndexRequest(index);</span><br><span class="line">        request.id(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        request.timeout(TimeValue.timeValueSeconds(<span class="number">1</span>));</span><br><span class="line">        request.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line">        request.source(object);</span><br><span class="line">        IndexResponse response = client.index(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *     判断是否存在文档</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">isExist</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        GetRequest getRequest = <span class="keyword">new</span> GetRequest(INDEX, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="comment">//不获取返回的source的上下文</span></span><br><span class="line">        getRequest.fetchSourceContext(<span class="keyword">new</span> FetchSourceContext(<span class="keyword">false</span>));</span><br><span class="line">        getRequest.storedFields(<span class="string">&quot;_none_&quot;</span>);</span><br><span class="line">        <span class="keyword">boolean</span> exists = client.exists(getRequest, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(exists);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取文档信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        GetRequest getRequest = <span class="keyword">new</span> GetRequest(INDEX, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        GetResponse response = client.get(getRequest, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">//打印文档信息</span></span><br><span class="line">        System.out.println(response.getSourceAsString());</span><br><span class="line">        System.out.println(response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新文档信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        UpdateRequest request = <span class="keyword">new</span> UpdateRequest(INDEX, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        request.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line">        HashMap&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;kid&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;asdasd&quot;</span>);</span><br><span class="line">        request.doc(map);</span><br><span class="line">        UpdateResponse update = client.update(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(update);</span><br><span class="line">        System.out.println(update.status());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除文档</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        DeleteRequest request = <span class="keyword">new</span> DeleteRequest(INDEX, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        request.timeout(<span class="string">&quot;10s&quot;</span>);</span><br><span class="line">        DeleteResponse update = client.delete(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(update.status());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//批量插入数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BulkRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BulkRequest bulkRequest = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">        bulkRequest.timeout(<span class="string">&quot;10s&quot;</span>);</span><br><span class="line">        ArrayList&lt;HashMap&lt;String,String&gt;&gt; maps = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        HashMap&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;kid&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;pass&quot;</span>,<span class="string">&quot;dasda&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maps.size(); i++) &#123;</span><br><span class="line">            bulkRequest.add(</span><br><span class="line">                    <span class="keyword">new</span> IndexRequest(INDEX)</span><br><span class="line">                            .id(<span class="string">&quot;&quot;</span> + i + <span class="number">1</span>)</span><br><span class="line">                            .source(maps.get(i))</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        BulkResponse bulk = client.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(bulk);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h5 id="基于JPA规范开发"><a href="#基于JPA规范开发" class="headerlink" title="基于JPA规范开发"></a>基于JPA规范开发</h5><ol><li>application.yml 配置es</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># jpa elasticsearch 配置</span></span><br><span class="line"><span class="comment"># 不同于 spring.data.elasticsearch.cluster-nodes的老式配置，已被废弃，此为restful高级api的配置</span></span><br><span class="line"> <span class="attr">spring:</span></span><br><span class="line">   <span class="attr">elasticsearch:</span></span><br><span class="line">     <span class="attr">rest:</span></span><br><span class="line">       <span class="attr">uris:</span> <span class="string">kid1999.top:9200</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建es的entry实体对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.kid1999.esystem.es;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.annotation.Id;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.Document;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.Field;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.FieldType;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kid1999</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-01-28 11:12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> TODO</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Document(indexName = &quot;my-index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticsearchDto</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text, analyzer = &quot;ik_max_word&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="meta">@Field(type = FieldType.Keyword)</span></span><br><span class="line">    <span class="keyword">private</span> String category;</span><br><span class="line">    <span class="meta">@Field(type = FieldType.Double)</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text, analyzer = &quot;ik_max_word&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@Document</code>加在类上</li></ul><table><thead><tr><th align="center">类型</th><th align="center">属性名</th><th align="center">默认值</th><th>说明</th></tr></thead><tbody><tr><td align="center">String</td><td align="center">indexName</td><td align="center">无</td><td>索引库的名称，建议以项目的名称命名</td></tr><tr><td align="center">String</td><td align="center">type</td><td align="center">“”</td><td>类型，建议以实体的名称命名</td></tr><tr><td align="center">short</td><td align="center">shards</td><td align="center">5</td><td>默认分区数</td></tr><tr><td align="center">short</td><td align="center">replica</td><td align="center">1</td><td>每个分区默认的备份数</td></tr><tr><td align="center">String</td><td align="center">refreshInterval</td><td align="center">“1s”</td><td>刷新间隔</td></tr><tr><td align="center">String</td><td align="center">indexStoreType</td><td align="center">“fs”</td><td>索引文件存储类型</td></tr></tbody></table><ul><li><code>@Field</code>属性上加的，相当于<code>@Column</code>，可以不写，默认全部添加到ES中。主键上是<code>@Id</code>。</li></ul><table><thead><tr><th align="center">类型</th><th align="center">属性名</th><th align="center">默认值</th><th>说明</th></tr></thead><tbody><tr><td align="center">FieldType</td><td align="center">type</td><td align="center">FieldType.Auto</td><td>自动检测属性的类型</td></tr><tr><td align="center">FieldIndex</td><td align="center">index</td><td align="center">FieldIndex.analyzed</td><td>默认情况下分词</td></tr><tr><td align="center">boolean</td><td align="center">store</td><td align="center">false</td><td>默认情况下不存储原文</td></tr><tr><td align="center">String</td><td align="center">searchAnalyzer</td><td align="center">“”</td><td>指定字段搜索时使用的分词器</td></tr><tr><td align="center">String</td><td align="center">indexAnalyzer</td><td align="center">“”</td><td>指定字段建立索引时指定的分词器</td></tr><tr><td align="center">String[]</td><td align="center">ignoreFields</td><td align="center">{}</td><td>如果某个字段需要被忽略</td></tr></tbody></table><ol start="3"><li>创建es的JPA规范的Repository</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.uwith.springbootelasticsearch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.repository.ElasticsearchCrudRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ElasticsearchRepository</span> <span class="keyword">extends</span> <span class="title">ElasticsearchCrudRepository</span>&lt;<span class="title">ElasticsearchDto</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>其他用法雷同  <a href="https://kid1999.github.io/2019/11/27/Jpa%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/">JPA操作</a></li></ol><p>参考：<a href="https://my.oschina.net/uwith/blog/3226665">博客</a>)、<a href="https://docs.spring.io/spring-data/elasticsearch/docs/4.0.6.RELEASE/reference/html/#preface">官方文档</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SprinBoot整合Spring-security安全验证</title>
      <link href="/2021/01/25/SprinBoot%E6%95%B4%E5%90%88Spring-security%E5%AE%89%E5%85%A8%E9%AA%8C%E8%AF%81/"/>
      <url>/2021/01/25/SprinBoot%E6%95%B4%E5%90%88Spring-security%E5%AE%89%E5%85%A8%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring-Security"></a>Spring-Security</h2><blockquote><p>统一提供拦截器，接口实现用户权限验证，放行等安全工作。可整合OAuth2、JWT等验证模式。</p></blockquote><p>此处为SpringBoot整合SpirngCouldOauth2实现JWT验证的实例</p><hr><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ol><li>Maven依赖</li><li>web安全配置<code>WebSecurityConfig</code></li><li>User对象实现<code>UserDetails</code>配置验证</li><li><code>UserService</code>实现<code>UserDetailsService</code>实现验证流程*</li><li><code>AuthorizationServerConfig</code> 授权服务器 配置</li><li><code>JwtTokenStoreConfig</code>   JWT存储配置</li><li><code>JwtTokenEnhancer</code>   JWT内容扩展(可选)</li><li><code>ResourceServerConfig</code> 资源服务器 配置</li><li>测试</li></ol><hr><h3 id="1-Maven依赖"><a href="#1-Maven依赖" class="headerlink" title="1.Maven依赖"></a>1.Maven依赖</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">       &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">       &lt;spring-cloud.version&gt;Hoxton.SR9&lt;/spring-cloud.version&gt;</span><br><span class="line">   &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">   &lt;dependencies&gt;</span><br><span class="line">      &lt;!--oauth2依赖--&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-starter-oauth2&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;!--security依赖--&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-starter-security&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;!--jwt编码解码依赖--&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;jjwt&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;0.9.1&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">   &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!--  spring-cloud 依赖  --&gt;</span><br><span class="line">   &lt;dependencyManagement&gt;</span><br><span class="line">       &lt;dependencies&gt;</span><br><span class="line">           &lt;dependency&gt;</span><br><span class="line">               &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">               &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">               &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;</span><br><span class="line">               &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">               &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">           &lt;/dependency&gt;</span><br><span class="line">       &lt;/dependencies&gt;</span><br><span class="line">   &lt;/dependencyManagement&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-web安全配置WebSecurityConfig"><a href="#2-web安全配置WebSecurityConfig" class="headerlink" title="2.web安全配置WebSecurityConfig"></a>2.web安全配置<code>WebSecurityConfig</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.kid1999.esystem.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kid1999</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-01-19 16:52</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Spring Security配置</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * PasswordEncoder 密码加密规则，</span></span><br><span class="line"><span class="comment">     * 这里使用的是不加密，推荐使用BCryptPasswordEncoder加密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码授权处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationManager <span class="title">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拦截链，</span></span><br><span class="line"><span class="comment">     * 其他接口必须认证后才能访问</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭跨域</span></span><br><span class="line">        http.csrf().disable();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 授权认证  -- 可用注解代替</span></span><br><span class="line">        <span class="comment">// 此处拦截 -&gt; resource server 再拦截 -&gt; 注解拦截</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/**&quot;</span>).permitAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-User对象实现UserDetails配置验证"><a href="#3-User对象实现UserDetails配置验证" class="headerlink" title="3.User对象实现UserDetails配置验证"></a>3.User对象实现<code>UserDetails</code>配置验证</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.kid1999.esystem.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableLogic;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@TableName</span> user</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span>, <span class="title">UserDetails</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现UserDetail的验证方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-UserService实现UserDetailsService实现验证流程"><a href="#4-UserService实现UserDetailsService实现验证流程" class="headerlink" title="4.UserService实现UserDetailsService实现验证流程*"></a>4.UserService实现<code>UserDetailsService</code>实现验证流程*</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.kid1999.esystem.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> io.kid1999.esystem.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> io.kid1999.esystem.entity.User;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kid1999</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-01-19 17:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 比对密码是否匹配</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;login  &quot;</span> + username);</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;username&quot;</span>,username);</span><br><span class="line">        User user = userDao.selectOne(wrapper);</span><br><span class="line">        List&lt;SimpleGrantedAuthority&gt; authorities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 此处全部赋予user角色，可从数据库获取角色信息</span></span><br><span class="line">        authorities.add(<span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">&quot;ROLE_user&quot;</span>));</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">&quot;用户不存在！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            String password = user.getPassword();</span><br><span class="line">            <span class="comment">// 返回用户名，数据库中的密码，角色信息</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> org.springframework.security.core.userdetails.User(username,password,authorities);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-AuthorizationServerConfig-授权服务器-配置"><a href="#5-AuthorizationServerConfig-授权服务器-配置" class="headerlink" title="5.AuthorizationServerConfig 授权服务器 配置"></a>5.AuthorizationServerConfig 授权服务器 配置</h3><blockquote><p>验证模式、数据存储、校验信息、放行规则….</p><p>此处的 client-id 和 client-secret、访问权限scope 都是自己设置的后面会用到！！！</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.kid1999.esystem.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.kid1999.esystem.common.Constants;</span><br><span class="line"><span class="keyword">import</span> io.kid1999.esystem.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.TokenEnhancer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.TokenEnhancerChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.TokenStore;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kid1999</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-01-20 14:26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 授权服务器 配置</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationServerConfig</span> <span class="keyword">extends</span> <span class="title">AuthorizationServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TokenStore jwtTokenStore;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtAccessTokenConverter jwtAccessTokenConverter;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtTokenEnhancer jwtTokenEnhancer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Jwt 和 密码模式需要的配置</span></span><br><span class="line"><span class="comment">     * JWT扩展（可选）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 配置jwt扩展内容</span></span><br><span class="line">        TokenEnhancerChain tokenEnhancerChain = <span class="keyword">new</span> TokenEnhancerChain();</span><br><span class="line">        List&lt;TokenEnhancer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(jwtTokenEnhancer);</span><br><span class="line">        list.add(jwtAccessTokenConverter);</span><br><span class="line">        tokenEnhancerChain.setTokenEnhancers(list);</span><br><span class="line"></span><br><span class="line">        endpoints.authenticationManager(authenticationManager)</span><br><span class="line">                <span class="comment">// 用户校验策略</span></span><br><span class="line">                .userDetailsService(userService)</span><br><span class="line">                <span class="comment">// token 存储策略</span></span><br><span class="line">                .tokenStore(jwtTokenStore)</span><br><span class="line">                <span class="comment">// 配置accessToken与JWT转换</span></span><br><span class="line">                .accessTokenConverter(jwtAccessTokenConverter)</span><br><span class="line">                .tokenEnhancer(tokenEnhancerChain);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 授权验证信息</span></span><br><span class="line"><span class="comment">     * 验证：</span></span><br><span class="line"><span class="comment">     * client-id 和 client-secret</span></span><br><span class="line"><span class="comment">     * 访问权限scope</span></span><br><span class="line"><span class="comment">     * token有效期</span></span><br><span class="line"><span class="comment">     * 授权模式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        clients.inMemory()</span><br><span class="line">        <span class="comment">// 配置client-id</span></span><br><span class="line">        .withClient(Constants.CLIENT_ID)</span><br><span class="line">        <span class="comment">// 配置client 加密</span></span><br><span class="line">        .secret(passwordEncoder.encode(Constants.CLIENT_SECRET))</span><br><span class="line">        <span class="comment">// 配置 Token 有效期</span></span><br><span class="line">        .accessTokenValiditySeconds(Constants.TOKEN_EXPIRE_DATE)</span><br><span class="line">        <span class="comment">// 申请访问的权限范围</span></span><br><span class="line">        .scopes(<span class="string">&quot;all&quot;</span>)</span><br><span class="line">        <span class="comment">// 配置授权类型</span></span><br><span class="line">        .authorizedGrantTypes(<span class="string">&quot;refresh_token&quot;</span>, <span class="string">&quot;authorization_code&quot;</span>,<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 安全放行规则</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerSecurityConfigurer security)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 允许客户端访问 OAuth2 授权接口，否则请求 token 会返回 401</span></span><br><span class="line">        security.allowFormAuthenticationForClients();</span><br><span class="line">        <span class="comment">// 第二行和第三行分别是允许已授权用户访问 checkToken 接口和获取 token 接口</span></span><br><span class="line">        security.checkTokenAccess(<span class="string">&quot;isAuthenticated()&quot;</span>);</span><br><span class="line">        security.tokenKeyAccess(<span class="string">&quot;isAuthenticated()&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-JwtTokenStoreConfig-JWT存储配置"><a href="#6-JwtTokenStoreConfig-JWT存储配置" class="headerlink" title="6.JwtTokenStoreConfig   JWT存储配置"></a>6.JwtTokenStoreConfig   JWT存储配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.kid1999.esystem.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.kid1999.esystem.common.Constants;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.TokenStore;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.store.JwtTokenStore;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kid1999</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-01-20 14:05</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>  JWTToken 配置</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtTokenStoreConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TokenStore <span class="title">jwtTokenStore</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JwtTokenStore(jwtAccessTokenConverter());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JwtAccessTokenConverter <span class="title">jwtAccessTokenConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JwtAccessTokenConverter accessTokenConverter = <span class="keyword">new</span> JwtAccessTokenConverter();</span><br><span class="line">        <span class="comment">// 配置JWT 使用的秘钥</span></span><br><span class="line">        accessTokenConverter.setSigningKey(Constants.TOKEN_SECRET);</span><br><span class="line">        accessTokenConverter.setVerifierKey(Constants.TOKEN_SECRET);</span><br><span class="line">        <span class="keyword">return</span> accessTokenConverter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * jwt 内容扩展 (可选)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JwtTokenEnhancer <span class="title">jwtTokenEnhancer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JwtTokenEnhancer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-JwtTokenEnhancer-JWT内容扩展-可选"><a href="#7-JwtTokenEnhancer-JWT内容扩展-可选" class="headerlink" title="7.JwtTokenEnhancer   JWT内容扩展(可选)"></a>7.JwtTokenEnhancer   JWT内容扩展(可选)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.kid1999.esystem.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.common.DefaultOAuth2AccessToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.common.OAuth2AccessToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.OAuth2Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.TokenEnhancer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kid1999</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-01-21 18:55</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> JWT 内容扩展器</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtTokenEnhancer</span> <span class="keyword">implements</span> <span class="title">TokenEnhancer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OAuth2AccessToken <span class="title">enhance</span><span class="params">(OAuth2AccessToken oAuth2AccessToken, OAuth2Authentication oAuth2Authentication)</span> </span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; info = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        info.put(<span class="string">&quot;test&quot;</span>,<span class="string">&quot;infomation&quot;</span>);</span><br><span class="line">        ((DefaultOAuth2AccessToken) oAuth2AccessToken).setAdditionalInformation(info);</span><br><span class="line">        <span class="keyword">return</span> oAuth2AccessToken;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-ResourceServerConfig-资源服务器-配置"><a href="#8-ResourceServerConfig-资源服务器-配置" class="headerlink" title="8.ResourceServerConfig 资源服务器 配置"></a>8.ResourceServerConfig 资源服务器 配置</h3><blockquote><p>此处的放行地址需自行按序配置、配置访问地址有三次机会：<code>webconfig</code>、此处、注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.kid1999.esystem.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.TokenStore;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kid1999</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-01-20 14:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 资源服务器 配置</span></span><br><span class="line"><span class="comment"> *  资源放行，类似责任链</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableResourceServer</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceServerConfig</span> <span class="keyword">extends</span> <span class="title">ResourceServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TokenStore jwtTokenStore;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ResourceServerSecurityConfigurer resources)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        resources.tokenStore(jwtTokenStore);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Http安全配置，对每个到达系统的http请求链接进行校验</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//所有请求必须认证通过</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                <span class="comment">//下边的路径放行</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/user/login&quot;</span>,<span class="string">&quot;/user/register&quot;</span>,<span class="string">&quot;/user/*&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/oauth/**&quot;</span>).permitAll()</span><br><span class="line">                <span class="comment">// swagger start</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/swagger-ui.html&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/swagger-resources/**&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/images/**&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/webjars/**&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/v2/api-docs&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/configuration/ui&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/configuration/security&quot;</span>).permitAll()</span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-测试"><a href="#9-测试" class="headerlink" title="9.测试"></a>9.测试</h3><h5 id="1-在IDEA中可以看到如下的接口，这是OAuth2模式下自带的验证接口"><a href="#1-在IDEA中可以看到如下的接口，这是OAuth2模式下自带的验证接口" class="headerlink" title="1.在IDEA中可以看到如下的接口，这是OAuth2模式下自带的验证接口"></a>1.在IDEA中可以看到如下的接口，这是OAuth2模式下自带的验证接口</h5><p><img alt="image-20210125173622512" data-src="https://i.loli.net/2021/01/25/8zgL3kJyqjwZxoW.png" class="lazyload"></p><h5 id="2-在postman中验证接口获取access-token-即为JWT"><a href="#2-在postman中验证接口获取access-token-即为JWT" class="headerlink" title="2.在postman中验证接口获取access_token  即为JWT"></a>2.在postman中验证接口获取access_token  即为JWT</h5><p>参数为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 校验模式</span><br><span class="line">grant_type:password</span><br><span class="line"># 用户名</span><br><span class="line">username:1111</span><br><span class="line"># 密码</span><br><span class="line">password:1111</span><br><span class="line"># 适用范围，这个在校验中配置AuthorizationServerConfig</span><br><span class="line">scope:all</span><br></pre></td></tr></table></figure><p>Auth模式为 Basic Auth</p><p>此处的username 就是 JWT的Clint-id</p><p>此处的password就是 JWT的Clint-secret</p><p><img alt="image-20210125173407300" data-src="https://i.loli.net/2021/01/25/BG1icbguSWEXVfj.png" class="lazyload"></p><h6 id="其本质就是POST此接口并携带校验信息，其中Auth就是设置了一个Header"><a href="#其本质就是POST此接口并携带校验信息，其中Auth就是设置了一个Header" class="headerlink" title="其本质就是POST此接口并携带校验信息，其中Auth就是设置了一个Header"></a>其本质就是POST此接口并携带校验信息，其中Auth就是设置了一个Header</h6><h6 id="Authorization-Basic-base64-Clint-id-Clint-secret"><a href="#Authorization-Basic-base64-Clint-id-Clint-secret" class="headerlink" title="{Authorization: Basic base64(Clint-id:Clint-secret)}"></a>{Authorization: Basic base64(Clint-id:Clint-secret)}</h6><p><img alt="image-20210125174815650" data-src="https://i.loli.net/2021/01/25/8zhxewXiGcYHKsl.png" class="lazyload"></p><h5 id="3-在postman中携带JWT获取数据"><a href="#3-在postman中携带JWT获取数据" class="headerlink" title="3.在postman中携带JWT获取数据"></a>3.在postman中携带JWT获取数据</h5><p><img alt="image-20210125175210142" data-src="https://i.loli.net/2021/01/25/I94LeEoVAfcwvzh.png" class="lazyload"></p><h6 id="其本质就是POST此接口并携带校验信息，其中Auth就是设置了一个Header-1"><a href="#其本质就是POST此接口并携带校验信息，其中Auth就是设置了一个Header-1" class="headerlink" title="其本质就是POST此接口并携带校验信息，其中Auth就是设置了一个Header"></a>其本质就是POST此接口并携带校验信息，其中Auth就是设置了一个Header</h6><h6 id="Authorization-bearer-JWT"><a href="#Authorization-bearer-JWT" class="headerlink" title="{Authorization: bearer JWT}"></a>{Authorization: bearer JWT}</h6>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最短路径</title>
      <link href="/2020/10/17/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"/>
      <url>/2020/10/17/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最短路径的两个算法</p></blockquote><ul><li>Dijkstra – 单源最短路 基于dfs</li><li>Floyd算法 – 多源最短路 基于矩阵</li><li>SPFA算法 – 单源最短路</li></ul><h2 id="本文主要介绍-Dijkstra-在Java中的使用"><a href="#本文主要介绍-Dijkstra-在Java中的使用" class="headerlink" title="本文主要介绍 Dijkstra 在Java中的使用"></a>本文主要介绍 Dijkstra 在Java中的使用</h2><h4 id="Dijkstra-迪杰斯特拉算法解决的问题是："><a href="#Dijkstra-迪杰斯特拉算法解决的问题是：" class="headerlink" title="(Dijkstra)迪杰斯特拉算法解决的问题是："></a>(Dijkstra)迪杰斯特拉算法解决的问题是：</h4><blockquote><p>在一个有向图中，求图中一个节点到其他所有节点的最短距离</p></blockquote><h4 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a>算法思路：</h4><p>每次选取一个离出发点最近且未标记的节点，调整出发点到以这个节点为中心的周边节点的最短距离。这个过程持续 n - 1 次，直到所有节点都遍历完毕。</p><p>假设有一个这样的图（图片出处：<a href="https://blog.csdn.net/mayifan_blog/article/details/85684916">Dijkstra算法Java实现</a>）：</p><p><img alt="img" data-src="https://img-blog.csdnimg.cn/20200306203553481.png" class="lazyload"></p><h3 id="1-求节点-1-到其他节点的最短距离"><a href="#1-求节点-1-到其他节点的最短距离" class="headerlink" title="1.求节点 1 到其他节点的最短距离"></a>1.求节点 1 到其他节点的最短距离</h3><p>思路：</p><ol><li>记录 start 点到各点的最短路径长度</li><li>找出一个未标记的离出发点最近的节点(最短边)</li><li>标记该节点为已经访问过</li><li>基于该点更新其他点到start点的距离</li><li>循环往复到遍历完所有节点<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int MAX = Integer.MAX_VALUE;    // 无法到达时距离设为 Integer.MAX_VALUE</span><br><span class="line">        int[][] weight=&#123;</span><br><span class="line">                &#123;0,1,12,MAX,MAX,MAX&#125;,</span><br><span class="line">                &#123;MAX,0,9,3,MAX,MAX&#125;,</span><br><span class="line">                &#123;MAX,MAX,0,MAX,5,MAX&#125;,</span><br><span class="line">                &#123;MAX,MAX,4,0,13,15&#125;,</span><br><span class="line">                &#123;MAX,MAX,MAX,MAX,0,4&#125;,</span><br><span class="line">                &#123;MAX,MAX,MAX,MAX,MAX,0&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        int start = 0;  // 选择出发点</span><br><span class="line">        System.out.println(Arrays.toString(solution(weight,start)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static int[] solution(int[][] weight, int start) &#123;</span><br><span class="line">        boolean[] visit = new boolean[weight.length]; // 标记某节点是否被访问过</span><br><span class="line">        int[] res = new int[weight.length];     // 记录 start 点到各点的最短路径长度</span><br><span class="line">        for (int i = 0; i &lt; res.length; i++) &#123;</span><br><span class="line">            res[i] = weight[start][i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 查找 n - 1 次（n 为节点个数），每次确定一个节点</span><br><span class="line">        for(int i = 1; i &lt; weight.length; i++) &#123;</span><br><span class="line">            int min = Integer.MAX_VALUE;</span><br><span class="line">            int p = 0;</span><br><span class="line">            // 找出一个未标记的离出发点最近的节点</span><br><span class="line">            for(int j = 0; j &lt; weight.length; j++)&#123;</span><br><span class="line">                if(j != start &amp;&amp; !visit[j] &amp;&amp; res[j] &lt; min)&#123;</span><br><span class="line">                    min = res[j];</span><br><span class="line">                    p = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            // 标记该节点为已经访问过</span><br><span class="line">            visit[p] = true;</span><br><span class="line"></span><br><span class="line">            for (int j = 0; j &lt; weight.length; j++)&#123;</span><br><span class="line">                if (j == p || weight[p][j] == Integer.MAX_VALUE) &#123;  // p 点不能到达 j</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                if (res[p] + weight[p][j] &lt; res[j])&#123;</span><br><span class="line">                    res[j] = res[p] + weight[p][j];  //更新最短路径</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-求从矩阵左上角到右下角的最短距离"><a href="#2-求从矩阵左上角到右下角的最短距离" class="headerlink" title="2.求从矩阵左上角到右下角的最短距离"></a>2.求从矩阵左上角到右下角的最短距离</h3><p><a href="https://leetcode-cn.com/problems/swim-in-rising-water/">leetcode 778. 水位上升的泳池中游泳</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public int swimInWater(int[][] grid) &#123;</span><br><span class="line">        int n = grid.length;</span><br><span class="line">        int[][] directions = new int[][]&#123;&#123;1,0&#125;,&#123;-1,0&#125;,&#123;0,1&#125;,&#123;0,-1&#125;&#125;;</span><br><span class="line">        boolean[][] visited = new boolean[n][n];</span><br><span class="line">        //优先队列，最小的先出来</span><br><span class="line">        PriorityQueue&lt;int[]&gt; queue = new PriorityQueue&lt;&gt;(new Comparator&lt;int[]&gt;()&#123;</span><br><span class="line">            public int compare(int[] o1,int[] o2)&#123;</span><br><span class="line">                return o1[2]-o2[2];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        queue.offer(new int[]&#123;0,0,grid[0][0]&#125;);</span><br><span class="line">        int ans = 0;</span><br><span class="line">        while(!queue.isEmpty())&#123;</span><br><span class="line">            int[] temp = queue.poll();</span><br><span class="line">            int x = temp[0];</span><br><span class="line">            int y = temp[1];</span><br><span class="line">            int dp = temp[2];</span><br><span class="line">            ans = Math.max(ans,dp);</span><br><span class="line">            if(x==n-1 &amp;&amp; y==n-1)&#123;</span><br><span class="line">                return ans;</span><br><span class="line">            &#125;</span><br><span class="line">            //弹出来之后再标记，确定此刻为最小</span><br><span class="line">            visited[x][y] = true;</span><br><span class="line">            for(int[] dir:directions)&#123;</span><br><span class="line">                int nx = x+dir[0];</span><br><span class="line">                int ny = y+dir[1];</span><br><span class="line">                if(nx&gt;=0 &amp;&amp; nx&lt;n &amp;&amp; ny&gt;=0 &amp;&amp;ny&lt;n &amp;&amp; !visited[nx][ny])&#123;</span><br><span class="line">                    queue.offer(new int[]&#123;nx,ny,grid[nx][ny]&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用BFS遍历所有路径，但是使用优先队列替换普通队列，实现最短路径查询</p></blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/mayifan_blog/article/details/85684916">Dijkstra算法Java实现</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最短路径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯2020省赛总结</title>
      <link href="/2020/10/17/%E8%93%9D%E6%A1%A5%E6%9D%AF2020%E7%9C%81%E8%B5%9B%E6%80%BB%E7%BB%93/"/>
      <url>/2020/10/17/%E8%93%9D%E6%A1%A5%E6%9D%AF2020%E7%9C%81%E8%B5%9B%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="蓝桥杯2020省赛总结"><a href="#蓝桥杯2020省赛总结" class="headerlink" title="蓝桥杯2020省赛总结"></a>蓝桥杯2020省赛总结</h2><h2 id="A-门牌制作"><a href="#A-门牌制作" class="headerlink" title="A: 门牌制作"></a>A: 门牌制作</h2><p><img alt="image-20201017155819375" data-src="https://i.loli.net/2020/10/17/rMRl7ISOF84NmeB.png" class="lazyload"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">2020</span> ; i++) &#123;</span><br><span class="line">String s = String.valueOf(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">char</span> c:s.toCharArray())&#123;</span><br><span class="line"><span class="keyword">if</span>(c == <span class="string">&#x27;2&#x27;</span>) res++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(res);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-寻找-2020"><a href="#B-寻找-2020" class="headerlink" title="B: 寻找 2020"></a>B: 寻找 2020</h2><p><img alt="image-20201017160112315" data-src="https://i.loli.net/2020/10/17/1PjSvChD8B6umwb.png" class="lazyload"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">&quot;F:\\Git\\Algorithmic-training\\data\\2020.txt&quot;</span>)));</span><br><span class="line"><span class="keyword">char</span>[][] ss = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">301</span>][<span class="number">301</span>];</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(sc.hasNext())&#123;</span><br><span class="line">String s = sc.nextLine();</span><br><span class="line">ss[n] = s.toCharArray();</span><br><span class="line">n++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">300</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">300</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(ss[i][j] == <span class="string">&#x27;2&#x27;</span>) res += dfs(ss,i,j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>[][] ss,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">String s1 = <span class="string">&quot;&quot;</span>;</span><br><span class="line">String s2 = <span class="string">&quot;&quot;</span>;</span><br><span class="line">String s3 = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i+k &gt;= <span class="number">300</span>) <span class="keyword">break</span>;</span><br><span class="line">s1 += ss[i+k][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line"><span class="keyword">if</span>(j+k&gt;=<span class="number">300</span>) <span class="keyword">break</span>;</span><br><span class="line">s2 += ss[i][j+k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i+k &gt;= <span class="number">300</span> || j+k&gt;=<span class="number">300</span>) <span class="keyword">break</span>;</span><br><span class="line">s3 += ss[i+k][j+k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(s1.equals(<span class="string">&quot;2020&quot;</span>)) n++;</span><br><span class="line"><span class="keyword">if</span>(s2.equals(<span class="string">&quot;2020&quot;</span>)) n++;</span><br><span class="line"><span class="keyword">if</span>(s3.equals(<span class="string">&quot;2020&quot;</span>)) n++;</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-蛇形填数"><a href="#C-蛇形填数" class="headerlink" title="C: 蛇形填数"></a>C: 蛇形填数</h2><p><img alt="image-20201017160254289" data-src="https://i.loli.net/2020/10/17/QSUBKn1Ib9q3wg4.png" class="lazyload"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class C &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">/**</span><br><span class="line"> * (1 1)  1</span><br><span class="line"> * (2 2)  5 = 1+2+2</span><br><span class="line"> * (3 3)  13 = 1+2+3+4+3</span><br><span class="line"> * (4 4)  25 = 1+2+3+4+5+6+4</span><br><span class="line"> * ...</span><br><span class="line"> * (20,20) = E[2*(n-1)] + 20</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">int res = 20;</span><br><span class="line">for (int i = 1; i &lt;=38 ; i++) &#123;</span><br><span class="line">res+=i;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(res);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-七段码"><a href="#D-七段码" class="headerlink" title="D: 七段码"></a>D: 七段码</h2><p><img alt="image-20201017160355007" data-src="https://i.loli.net/2020/10/17/lQ2EgUw9oFm5TPt.png" class="lazyload"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举：</span></span><br><span class="line"><span class="comment"> * 1 个 发光： 7</span></span><br><span class="line"><span class="comment"> * 2 个 发光： 10  | ab bc cd de ef fa | g*4</span></span><br><span class="line"><span class="comment"> * 3 个 发光： 10  | abc bcd cde def efa fab  + g*4</span></span><br><span class="line"><span class="comment"> * 4 个 发光： C(7,3) - 6   |  cef ceb ceg 或 fbe fbg fbc</span></span><br><span class="line"><span class="comment"> * 5 个 发光： C(7,2) - 2   |  ec 或 fb</span></span><br><span class="line"><span class="comment"> * 6 个 发光： 7</span></span><br><span class="line"><span class="comment"> * 7 个 发光： 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">res = <span class="number">7</span>+<span class="number">10</span>+<span class="number">10</span>+C(<span class="number">7</span>,<span class="number">3</span>)-<span class="number">6</span>+C(<span class="number">7</span>,<span class="number">2</span>)-<span class="number">2</span>+<span class="number">7</span>+<span class="number">1</span>;</span><br><span class="line">System.out.println(res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(k&gt;n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(k==<span class="number">0</span>||k==n) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> C(n-<span class="number">1</span>, k)+C(n-<span class="number">1</span>, k-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&lt;m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n-m+<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">res *= i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-排序"><a href="#E-排序" class="headerlink" title="E: 排序"></a>E: 排序</h2><p><img alt="image-20201017160508487" data-src="https://i.loli.net/2020/10/17/bu7WnyaF3Sq65L9.png" class="lazyload"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">E</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全部按逆序排列的交换次数为 N! 且此时最短</span></span><br><span class="line"><span class="comment"> * 多余的交换次数 通过 交换首字母与后面的某元素进行减少</span></span><br><span class="line"><span class="comment"> * 如：交换 1 --&gt; 2 1</span></span><br><span class="line"><span class="comment"> *    交换 3 --&gt; 3 2 1</span></span><br><span class="line"><span class="comment"> *    交换 5 --&gt; 4 3 2 1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  .....</span></span><br><span class="line"><span class="comment"> *  交换(105) 16 15 14 ....</span></span><br><span class="line"><span class="comment"> *  交换100 --&gt; 13 15 14 16 12 .......</span></span><br><span class="line"><span class="comment"> *  对应字符即可</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">func();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> lay = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (n &lt; <span class="number">100</span>) &#123;</span><br><span class="line">System.out.println(n);</span><br><span class="line"> n += lay;</span><br><span class="line"> lay++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(n);</span><br><span class="line">System.out.println(lay);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-成绩分析"><a href="#F-成绩分析" class="headerlink" title="F: 成绩分析"></a>F: 成绩分析</h2><p><img alt="image-20201017160743393" data-src="https://i.loli.net/2020/10/17/bAcNRTUen9VCKSv.png" class="lazyload"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">F</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line"><span class="keyword">int</span> min = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">int</span> max = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> num = sc.nextInt();</span><br><span class="line">sum += num;</span><br><span class="line">max = Math.max(max, num);</span><br><span class="line">min = Math.min(min, num);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(max);</span><br><span class="line">System.out.println(min);</span><br><span class="line">System.out.printf(<span class="string">&quot;%.2f&quot;</span>,sum/n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-单词分析"><a href="#G-单词分析" class="headerlink" title="G: 单词分析"></a>G: 单词分析</h2><p><img alt="image-20201017160850978" data-src="https://i.loli.net/2020/10/17/GtyizOh2sMVudpL.png" class="lazyload"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">G</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String s = sc.next();</span><br><span class="line"><span class="keyword">int</span>[] ws = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">128</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">char</span> c:s.toCharArray())&#123;</span><br><span class="line">ws[c]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> w = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ws.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(ws[i] &gt; max)&#123;</span><br><span class="line">max = ws[i];</span><br><span class="line">w = (<span class="keyword">char</span>) i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(w);</span><br><span class="line">System.out.println(max);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-数字三角形"><a href="#H-数字三角形" class="headerlink" title="H: 数字三角形"></a>H: 数字三角形</h2><p><img alt="image-20201017160953070" data-src="https://i.loli.net/2020/10/17/Fk4IicylzsJQf2H.png" class="lazyload"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">5</span><br><span class="line">7</span><br><span class="line">3 8</span><br><span class="line">8 1 0</span><br><span class="line">2 7 4 4</span><br><span class="line">4 5 2 6 5</span><br><span class="line">输出：</span><br><span class="line">27</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">H</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line"><span class="keyword">int</span>[][][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">101</span>][<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="keyword">int</span>[][] nums = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">nums[i][j] = sc.nextInt();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;=i; k++) &#123;</span><br><span class="line">dp[i][j][k] = Math.max(dp[i-<span class="number">1</span>][j-<span class="number">1</span>][k-<span class="number">1</span>], dp[i-<span class="number">1</span>][j][k]) + nums[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> m = n/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=n; i++) &#123;</span><br><span class="line">res = Math.max(res, dp[n][i][m+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=n; i++) &#123;</span><br><span class="line">res = Math.max(res, dp[n][i][m]);</span><br><span class="line">res = Math.max(res, dp[n][i][m+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(res);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结： 基于递推dp的变形，添加左右递推次数限制： </p><p>处理：多加一维，表示左边递推来的次数 + 1、右边递推来的次数 +0</p><p><code>dp[i][j][k] = Math.max(dp[i-1][j-1][k-1], dp[i-1][j][k]) + nums[i][j];</code></p><h2 id="I-子串分值和"><a href="#I-子串分值和" class="headerlink" title="I: 子串分值和"></a>I: 子串分值和</h2><p><img alt="image-20201017161422165" data-src="https://i.loli.net/2020/10/17/47dMaHo5P8OfCQZ.png" class="lazyload"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">样例说明:</span><br><span class="line">子串 f值</span><br><span class="line">a 1</span><br><span class="line">ab 2</span><br><span class="line">aba 2</span><br><span class="line">abab 2</span><br><span class="line">ababc 3</span><br><span class="line">b 1</span><br><span class="line">ba 2</span><br><span class="line">bab 2</span><br><span class="line">babc 3</span><br><span class="line">a 1</span><br><span class="line">ab 2</span><br><span class="line">abc 3</span><br><span class="line">b 1</span><br><span class="line">bc 2</span><br><span class="line">c 1</span><br><span class="line">评测用例规模与约定:</span><br><span class="line">对于 20% 的评测用例，1 ≤ n ≤ 10；</span><br><span class="line">对于 40% 的评测用例，1 ≤ n ≤ 100；</span><br><span class="line">对于 50% 的评测用例，1 ≤ n ≤ 1000；</span><br><span class="line">对于 60% 的评测用例，1 ≤ n ≤ 10000；</span><br><span class="line">对于所有评测用例，1 ≤ n ≤ 100000。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">I</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String s = sc.next();</span><br><span class="line"><span class="keyword">int</span> len = s.length();</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt;= len; j++) &#123;</span><br><span class="line">String tmp = s.substring(i,j);</span><br><span class="line">res += func(tmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">func</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] w = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">char</span> c:s.toCharArray())&#123;</span><br><span class="line">w[c-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> n:w)&#123;</span><br><span class="line"><span class="keyword">if</span>(n &gt; <span class="number">0</span>) res++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>暴力拿分走人….</p><h2 id="J-装饰珠"><a href="#J-装饰珠" class="headerlink" title="J: 装饰珠"></a>J: 装饰珠</h2><p>复杂模拟 give up….</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 模拟 </tag>
            
            <tag> 竞赛 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 排列组合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双指针模板</title>
      <link href="/2020/09/07/%E5%8F%8C%E6%8C%87%E9%92%88%E6%A8%A1%E6%9D%BF/"/>
      <url>/2020/09/07/%E5%8F%8C%E6%8C%87%E9%92%88%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h4 id="双指针技巧可以分为两类"><a href="#双指针技巧可以分为两类" class="headerlink" title="双指针技巧可以分为两类"></a>双指针技巧可以分为两类</h4><ul><li><strong>「快慢指针」</strong> 解决主要解决链表中的问题，比如典型的判定链表中是否包含环</li><li>**「左右指针」 **后者主要解决数组（或者字符串）中的问题，比如二分查找、滑动窗口</li></ul><h2 id="一、快慢指针的常见算法"><a href="#一、快慢指针的常见算法" class="headerlink" title="一、快慢指针的常见算法"></a><strong>一、快慢指针的常见算法</strong></h2><p>快慢指针一般都初始化指向链表的头结点 head，前进时快指针 fast 在前，慢指针 slow 在后，巧妙解决一些链表中的问题。</p><h3 id="1、判定链表中是否含有环"><a href="#1、判定链表中是否含有环" class="headerlink" title="1、判定链表中是否含有环"></a><strong>1、判定链表中是否含有环</strong></h3><p>这应该属于链表最基本的操作了，如果读者已经知道这个技巧，可以跳过。</p><p>单链表的特点是每个节点只知道下一个节点，所以一个指针的话无法判断链表中是否含有环的。</p><p>如果链表中不包含环，那么这个指针最终会遇到空指针 null 表示链表到头了，这还好说，可以判断该链表不含环。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">boolean hasCycle(ListNode head) &#123;</span><br><span class="line">    while (head != null)</span><br><span class="line">        head = head.next;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是如果链表中含有环，那么这个指针就会陷入死循环，因为环形数组中没有 null 指针作为尾部节点。</p><p>经典解法就是用两个指针，一个每次前进两步，一个每次前进一步。如果不含有环，跑得快的那个指针最终会遇到 null，说明链表不含环；如果含有环，快指针最终会超慢指针一圈，和慢指针相遇，说明链表含有环。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">boolean hasCycle(ListNode head) &#123;</span><br><span class="line">    ListNode fast, slow;</span><br><span class="line">    fast = slow = head;</span><br><span class="line">    while(fast != null &amp;&amp; fast.next != null) &#123;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        </span><br><span class="line">        if (fast == slow)</span><br><span class="line">            return true;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、已知链表中含有环，返回这个环的起始位置"><a href="#2、已知链表中含有环，返回这个环的起始位置" class="headerlink" title="2、已知链表中含有环，返回这个环的起始位置"></a><strong>2、已知链表中含有环，返回这个环的起始位置</strong></h3><p><img alt="img" data-src="https://pic1.zhimg.com/80/v2-97406fdff42b59b8f91ebb69522bed20_720w.jpg" class="lazyload"></p><p>这个问题其实不困难，有点类似脑筋急转弯，先直接看代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ListNode detectCycle(ListNode head) &#123;</span><br><span class="line">    ListNode fast, slow;</span><br><span class="line">    fast = slow = head;</span><br><span class="line">    while (fast != null &amp;&amp; fast.next != null) &#123;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        if (fast == slow)</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    slow = head;</span><br><span class="line">    while (slow != fast) &#123;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">    &#125;</span><br><span class="line">    return slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，当快慢指针相遇时，让其中任一个指针重新指向头节点，然后让它俩以相同速度前进，再次相遇时所在的节点位置就是环开始的位置。这是为什么呢？</p><p>第一次相遇时，假设慢指针 slow 走了 k 步，那么快指针 fast 一定走了 2k 步，也就是说比 slow 多走了 k 步（也就是环的长度）。</p><p><img alt="img" data-src="https://pic3.zhimg.com/80/v2-e20cf1fac533671eff6b9a18df652668_720w.jpg" class="lazyload"></p><p>设相遇点距环的起点的距离为 m，那么环的起点距头结点 head 的距离为 k - m，也就是说如果从 head 前进 k - m 步就能到达环起点。</p><p>巧的是，如果从相遇点继续前进 k - m 步，也恰好到达环起点。</p><p><img alt="img" data-src="https://pic2.zhimg.com/80/v2-94f939ddf9d896c585ac6f61080d6a89_720w.jpg" class="lazyload"></p><p>所以，只要我们把快慢指针中的任一个重新指向 head，然后两个指针同速前进，k - m 步后就会相遇，相遇之处就是环的起点了。</p><h3 id="3、寻找链表的中点"><a href="#3、寻找链表的中点" class="headerlink" title="3、寻找链表的中点"></a><strong>3、寻找链表的中点</strong></h3><p>类似上面的思路，我们还可以让快指针一次前进两步，慢指针一次前进一步，当快指针到达链表尽头时，慢指针就处于链表的中间位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ListNode slow, fast;</span><br><span class="line">slow = fast = head;</span><br><span class="line">while (fast != null &amp;&amp; fast.next != null) &#123;</span><br><span class="line">    fast = fast.next.next;</span><br><span class="line">    slow = slow.next;</span><br><span class="line">&#125;</span><br><span class="line">// slow 就在中间位置</span><br><span class="line">return slow;</span><br></pre></td></tr></table></figure><p>当链表的长度是奇数时，slow 恰巧停在中点位置；如果长度是偶数，slow 最终的位置是中间偏右：</p><p><img alt="img" data-src="https://picb.zhimg.com/80/v2-0f6ae47e73eaf517d579d925a2421092_720w.jpg" class="lazyload"></p><p>寻找链表中点的一个重要作用是对链表进行归并排序。</p><p>回想数组的归并排序：求中点索引递归地把数组二分，最后合并两个有序数组。对于链表，合并两个有序链表是很简单的，难点就在于二分。</p><p>但是现在你学会了找到链表的中点，就能实现链表的二分了。关于归并排序的具体内容本文就不具体展开了。</p><h3 id="4、寻找链表的倒数第-k-个元素"><a href="#4、寻找链表的倒数第-k-个元素" class="headerlink" title="4、寻找链表的倒数第 k 个元素"></a><strong>4、寻找链表的倒数第 k 个元素</strong></h3><p>我们的思路还是使用快慢指针，让快指针先走 k 步，然后快慢指针开始同速前进。这样当快指针走到链表末尾 null 时，慢指针所在的位置就是倒数第 k 个链表节点（为了简化，假设 k 不会超过链表长度）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ListNode slow, fast;</span><br><span class="line">slow = fast = head;</span><br><span class="line">while (k-- &gt; 0) </span><br><span class="line">    fast = fast.next;</span><br><span class="line"></span><br><span class="line">while (fast != null) &#123;</span><br><span class="line">    slow = slow.next;</span><br><span class="line">    fast = fast.next;</span><br><span class="line">&#125;</span><br><span class="line">return slow;</span><br></pre></td></tr></table></figure><h2 id="二、左右指针的常用算法"><a href="#二、左右指针的常用算法" class="headerlink" title="二、左右指针的常用算法"></a><strong>二、左右指针的常用算法</strong></h2><p>左右指针在数组中实际是指两个索引值，一般初始化为 left = 0, right = nums.length - 1 。</p><h3 id="1、二分查找"><a href="#1、二分查找" class="headerlink" title="1、二分查找"></a><strong>1、二分查找</strong></h3><p>前文 <a href="https://link.zhihu.com/?target=https://www.cnblogs.com/kyoner/p/11080078.html">二分查找算法详解</a> 有详细讲解，这里只写最简单的二分算法，旨在突出它的双指针特性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int binarySearch(int[] nums, int target) &#123;</span><br><span class="line">    int left = 0;</span><br><span class="line">    int right = nums.length - 1;</span><br><span class="line">    while(left &lt;= right) &#123;</span><br><span class="line">        int mid = (right + left) / 2;</span><br><span class="line">        if (nums[mid] == target)</span><br><span class="line">            return mid;</span><br><span class="line">        else if (nums[mid] &lt; target)</span><br><span class="line">            left = mid + 1;</span><br><span class="line">        else if (nums[mid] &gt; target)</span><br><span class="line">            right = mid - 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、两数之和"><a href="#2、两数之和" class="headerlink" title="2、两数之和"></a><strong>2、两数之和</strong></h3><p>直接看一道 LeetCode 题目吧：</p><p><img alt="img" data-src="https://pic4.zhimg.com/80/v2-7a9d45ef94187fea3c88ace260e79011_720w.jpg" class="lazyload"></p><p>只要数组有序，就应该想到双指针技巧。这道题的解法有点类似二分查找，通过调节 left 和 right 可以调整 sum 的大小：</p><h3 id="3、反转数组"><a href="#3、反转数组" class="headerlink" title="3、反转数组"></a><strong>3、反转数组</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">void reverse(int[] nums) &#123;</span><br><span class="line">    int left = 0;</span><br><span class="line">    int right = nums.length - 1;</span><br><span class="line">    while (left &lt; right) &#123;</span><br><span class="line">        // swap(nums[left], nums[right])</span><br><span class="line">        int temp = nums[left];</span><br><span class="line">        nums[left] = nums[right];</span><br><span class="line">        nums[right] = temp;</span><br><span class="line">        left++;</span><br><span class="line">        right--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、滑动窗口算法"><a href="#4、滑动窗口算法" class="headerlink" title="4、滑动窗口算法"></a><strong>4、滑动窗口算法</strong></h3><p>如果掌握了此算法，可以解决一大类子字符串匹配的问题，详情参考滑动窗口一文。</p><p>参考：</p><p><a href="https://zhuanlan.zhihu.com/p/138273078">https://zhuanlan.zhihu.com/p/138273078</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用环境Docker运维</title>
      <link href="/2020/09/07/%E5%B8%B8%E7%94%A8%E7%8E%AF%E5%A2%83Docker%E8%BF%90%E7%BB%B4/"/>
      <url>/2020/09/07/%E5%B8%B8%E7%94%A8%E7%8E%AF%E5%A2%83Docker%E8%BF%90%E7%BB%B4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下操作基于Centos7</p></blockquote><h2 id="1-目录"><a href="#1-目录" class="headerlink" title="1.目录"></a>1.目录</h2><ol><li>docker安装</li><li>mysql安装</li><li>redis安装</li><li>minio安装</li><li>rabbitMQ安装</li><li>ElasticSearch安装</li><li>hadoop-spark安装</li><li>zookeepker、kafka安装</li></ol><h4 id="1-docker安装"><a href="#1-docker安装" class="headerlink" title="1.docker安装"></a>1.docker安装</h4><p>centos 7 安装:</p><blockquote><p>在新主机上首次安装Docker CE之前，需要设置Docker存储库。之后，您可以从存储库安装和更新Docker。</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 安装所需的包</span><br><span class="line">sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 设置稳定存储库</span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --<span class="keyword">add</span><span class="bash">-repo \</span></span><br><span class="line"><span class="bash">    https://download.docker.com/linux/centos/docker-ce.repo</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. 安装最新版本的Docker CE</span><br><span class="line"> sudo yum install docker-ce -y</span><br><span class="line"><span class="number">4</span>.启动Docker</span><br><span class="line">sudo systemctl start docker</span><br><span class="line"><span class="number">5</span>.通过运行hello-world 映像验证是否已正确安装。</span><br><span class="line">sudo docker <span class="keyword">run</span><span class="bash"> hello-world</span></span><br><span class="line"></span><br><span class="line">补充：安装 Docker-Compose</span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/<span class="number">1.23</span>.<span class="number">2</span>/docker-compose-`uname -s`-`uname -m` -o /usr/bin/docker-compose</span><br><span class="line"></span><br><span class="line">chmod +x /usr/bin/docker-compose</span><br></pre></td></tr></table></figure><h4 id="2-mysql5-7安装"><a href="#2-mysql5-7安装" class="headerlink" title="2.mysql5.7安装"></a>2.mysql5.7安装</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.拉取MySQL镜像</span><br><span class="line">docker pull mysql:<span class="number">5.7</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.创建目录(这两个用于保存配置和数据)</span><br><span class="line">mkdir -p /data/docker/mysql/conf.d</span><br><span class="line">mkdir -p /data/docker/mysql/data</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.创建MySQL容器</span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> -itd -p 3306:3306 --restart=always -v /data/docker/mysql/conf.d:/etc/mysql/conf.d -v /data/docker/mysql/data:/var/lib/mysql -v /data/docker/mysql/my.cnf:/etc/my.cnf -e MYSQL_ROOT_PASSWORD=<span class="string">&#x27;pass=root&#x27;</span> --name mysql mysql:5.7</span></span><br><span class="line"></span><br><span class="line">-v 映射目录，将容器内的配置与数据文件夹，映射到宿主机目录</span><br><span class="line">-p 代表端口映射，格式为 宿主机映射端口:容器运行端口</span><br><span class="line">-e 代表添加环境变量 MYSQL_ROOT_PASSWORD是root用户的登陆密码</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>.进入MySQL容器 </span><br><span class="line">docker exec -it mysql /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>.登陆mysql</span><br><span class="line">mysql -u root -p </span><br><span class="line"></span><br><span class="line">输入密码，即可进入mysql，证明安装成功。</span><br><span class="line"></span><br><span class="line">意外情况处理：mysql设置远程登录</span><br><span class="line">    <span class="number">1</span>. USE mysql; -- 切换到 mysql DB</span><br><span class="line">    <span class="number">2</span>. SELECT <span class="keyword">User</span>, Host <span class="keyword">FROM</span> <span class="keyword">user</span>; -- 查看现有用户及允许连接的主机</span><br><span class="line">    <span class="number">3</span>. GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;Xyq_pass=kid1999&#x27;</span> WITH GRANT OPTION;</span><br><span class="line">    <span class="number">4</span>. flush privileges;</span><br></pre></td></tr></table></figure><h4 id="3-redis安装"><a href="#3-redis安装" class="headerlink" title="3.redis安装"></a>3.redis安装</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 下载</span><br><span class="line">docker pull redis:<span class="number">5.0</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 以配置文件启动redis</span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> -itd --name redis --restart=always -p 6379:6379 -v /data/docker/redis:/data -v /data/docker/redis/redis.conf:/etc/redis/redis.conf  redis:5.0 redis-server /etc/redis/redis.conf</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注：redis.conf 文件信息见 redis章节</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. 連接，查看容器</span><br><span class="line">docker exec -it redis-server redis-cli --raw</span><br></pre></td></tr></table></figure><h4 id="4-Minio安装"><a href="#4-Minio安装" class="headerlink" title="4.Minio安装"></a>4.Minio安装</h4><blockquote><p>使用<a href="https://docs.minio.io/cn/deploy-minio-on-docker-compose.html">https://docs.minio.io/cn/deploy-minio-on-docker-compose.html</a></p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 下载</span><br><span class="line">docker pull minio/minio</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 執行容器</span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> -di -p 9000:9000 \</span></span><br><span class="line"><span class="bash">  --name minio1 \</span></span><br><span class="line"><span class="bash">  -v /mnt/data:/data \</span></span><br><span class="line"><span class="bash">  -e <span class="string">&quot;MINIO_ACCESS_KEY=root&quot;</span> \</span></span><br><span class="line"><span class="bash">  -e <span class="string">&quot;MINIO_SECRET_KEY=&#x27;pass=root&#x27;&quot;</span> \</span></span><br><span class="line"><span class="bash">  --restart=always \</span></span><br><span class="line"><span class="bash">  minio/minio server /data</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-rabbitMQ安装"><a href="#5-rabbitMQ安装" class="headerlink" title="5. rabbitMQ安装"></a>5. rabbitMQ安装</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 下载</span><br><span class="line">docker pull rabbitmq:<span class="number">3</span>-management</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 執行容器</span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> -dit --name rabbitmq --restart=always -e RABBITMQ_DEFAULT_USER=root -e RABBITMQ_DEFAULT_PASS=<span class="string">&#x27;pass=root&#x27;</span> -p 15672:15672 -p 5672:5672 rabbitmq:3-management</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6-ElasticSearch安装"><a href="#6-ElasticSearch安装" class="headerlink" title="6. ElasticSearch安装"></a>6. ElasticSearch安装</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 下载</span><br><span class="line">docker pull elasticsearch:<span class="number">7.8</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 執行容器</span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> -p 9200:9200 -p 9300:9300 --name es7.8 \</span></span><br><span class="line"><span class="bash">--restart=always \</span></span><br><span class="line"><span class="bash">-e <span class="string">&quot;discovery.type=single-node&quot;</span> \</span></span><br><span class="line"><span class="bash">-e ES_JAVA_OPTS=<span class="string">&quot;-Xms256m -Xmx256m&quot;</span> \</span></span><br><span class="line"><span class="bash">-v/data/docker/es/plugins:/usr/share/elasticsearch/plugins \</span></span><br><span class="line"><span class="bash">-v /data/docker/es/data:/usr/share/elasticsearch/data \</span></span><br><span class="line"><span class="bash">-v/data/docker/es/logs:/usr/share/elasticsearch/logs \</span></span><br><span class="line"><span class="bash">-v /data/docker/es/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \</span></span><br><span class="line"><span class="bash">-d elasticsearch:7.8.0</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.修改映射文件夹quanx</span><br><span class="line">chmod -R <span class="number">775</span> /data/es/data</span><br><span class="line">chmod -R <span class="number">775</span> /data/es/logs</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>.安装kibana-------------------------------</span><br><span class="line"><span class="comment"># kibana版本必须和elasticsearch版本保持一致</span></span><br><span class="line">docker pull kibana:<span class="number">7.8</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> -d \</span></span><br><span class="line"><span class="bash">  --name=kibana \</span></span><br><span class="line"><span class="bash">  --restart=always \</span></span><br><span class="line"><span class="bash">  -p 5601:5601 \</span></span><br><span class="line"><span class="bash">  -v /data/docker/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml \</span></span><br><span class="line"><span class="bash">  kibana:7.8.0</span></span><br><span class="line">  ------------------------------------------</span><br></pre></td></tr></table></figure><h4 id="7-hadoop-spark安装"><a href="#7-hadoop-spark安装" class="headerlink" title="7. hadoop-spark安装"></a>7. hadoop-spark安装</h4><blockquote><p>记得修改 -v映射地址 ，方便放置编写的spark程序启动！！！</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 下载 master和worker</span><br><span class="line">docker pull bde2020/spark-master:<span class="number">2.4</span>.<span class="number">5</span>-hadoop2.<span class="number">7</span></span><br><span class="line">docker pull bde2020/spark-worker:<span class="number">2.4</span>.<span class="number">5</span>-hadoop2.<span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 執行容器</span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> --name spark-master -h spark-master -e ENABLE_INIT_DAEMON=<span class="literal">false</span> -d -p 8080:8080 -p7077:7077 -v %<span class="built_in">cd</span>%:/app bde2020/spark-master:2.4.5-hadoop2.7</span></span><br><span class="line"></span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> --name spark-worker-1 --link spark-master:spark-master -e ENABLE_INIT_DAEMON=<span class="literal">false</span> -d bde2020/spark-worker:2.4.5-hadoop2.7</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.localhost:<span class="number">8080</span> 查看端口启动情况</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>.进入spark运行程序</span><br><span class="line">docker exec -it spark-master /bin/bash</span><br><span class="line">/spark/bin/spark-submit --class work.ProductRecommendationByALS --master local /app/spark-work-<span class="number">1.2</span>.jar</span><br></pre></td></tr></table></figure><h4 id="8-kafka安装"><a href="#8-kafka安装" class="headerlink" title="8. kafka安装"></a>8. kafka安装</h4><p>1.docker安装</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载镜像</span></span><br><span class="line">docker pull wurstmeister/zookeeper  </span><br><span class="line">docker pull wurstmeister/kafka  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动zookeeper容器</span></span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> -d --name zookeeper -p 2181:2181 -t wurstmeister/zookeeper</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动kafka容器</span></span><br><span class="line">docker <span class="keyword">run</span><span class="bash">  -d --name kafka -p 9092:9092 \</span></span><br><span class="line"><span class="bash">-e KAFKA_BROKER_ID=0  \</span></span><br><span class="line"><span class="bash">-e KAFKA_ZOOKEEPER_CONNECT=159.75.6.26:2181 \</span></span><br><span class="line"><span class="bash">-e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://159.75.6.26:9092 \</span></span><br><span class="line"><span class="bash">-e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 \</span></span><br><span class="line"><span class="bash">-t wurstmeister/kafka</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">这里面主要设置了<span class="number">4</span>个参数</span><br><span class="line">    KAFKA_BROKER_ID=<span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    KAFKA_ZOOKEEPER_CONNECT=<span class="number">159.75</span>.<span class="number">6.26</span>:<span class="number">2181</span></span><br><span class="line">    </span><br><span class="line">    KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://<span class="number">159.75</span>.<span class="number">6.26</span>:<span class="number">9092</span></span><br><span class="line">    </span><br><span class="line">    KAFKA_LISTENERS=PLAINTEXT://<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">9092</span></span><br><span class="line">    </span><br><span class="line">    中间两个参数的<span class="number">192.168</span>.<span class="number">204.128</span>改为宿主机器的IP地址，如果不这么设置，可能会导致在别的机器上访问不到kafka</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> -itd --rm --link zookeeper:zookeeper \</span></span><br><span class="line"><span class="bash">--link kafka:kafka \</span></span><br><span class="line"><span class="bash">-p 9001:9000 \</span></span><br><span class="line"><span class="bash">-e ZK_HOSTS=zookeeper:2181 \</span></span><br><span class="line"><span class="bash">dockerkafka/kafka-manager</span></span><br></pre></td></tr></table></figure><p>2.docker-compose 安装</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&quot;3.3&quot;</span></span><br><span class="line">services:</span><br><span class="line">  zookeeper:</span><br><span class="line">      image: zookeeper:<span class="number">3.5</span>.<span class="number">5</span></span><br><span class="line">      restart: always</span><br><span class="line">      container_name: zookeeper</span><br><span class="line">      ports:</span><br><span class="line">          - <span class="string">&quot;2181:2181&quot;</span></span><br><span class="line">      <span class="keyword">expose</span>:</span><br><span class="line">          - <span class="string">&quot;2181&quot;</span></span><br><span class="line">      environment:</span><br><span class="line">          - ZOO_MY_ID=<span class="number">1</span></span><br><span class="line">  kafka:</span><br><span class="line">      image: wurstmeister/kafka</span><br><span class="line">      restart: always</span><br><span class="line">      container_name: kafka</span><br><span class="line">      environment:</span><br><span class="line">          - KAFKA_BROKER_ID=<span class="number">1</span></span><br><span class="line">          - KAFKA_LISTENERS=PLAINTEXT://kafka:<span class="number">9090</span></span><br><span class="line">          - KAFKA_ZOOKEEPER_CONNECT=zookeeper:<span class="number">2181</span></span><br><span class="line">          - KAFKA_MESSAGE_MAX_BYTES=<span class="number">2000000</span></span><br><span class="line">      ports:</span><br><span class="line">          - <span class="string">&quot;9090:9090&quot;</span></span><br><span class="line">      depends_on:</span><br><span class="line">          - zookeeper</span><br><span class="line">  kafka-manager:  </span><br><span class="line">    image: sheepkiller/kafka-manager                <span class="comment">## 镜像：开源的web管理kafka集群的界面</span></span><br><span class="line">    environment:</span><br><span class="line">        ZK_HOSTS: zookeeper:<span class="number">2181</span>                <span class="comment">## 修改:宿主机IP</span></span><br><span class="line">    ports:  </span><br><span class="line">      - <span class="string">&quot;9000:9000&quot;</span>                                 <span class="comment">## 暴露端口</span></span><br><span class="line">      </span><br><span class="line">     </span><br><span class="line">     docker-compose up -d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>装饰器模式</title>
      <link href="/2020/09/07/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/09/07/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>适用范围：</p><blockquote><p>我已经有了一个类，但是这个类还不够让我满意，我就拿装饰器给他装饰一下。</p></blockquote><h3 id="代码演示："><a href="#代码演示：" class="headerlink" title="代码演示："></a>代码演示：</h3><ul><li>假如我去喝咖啡，但是咖啡是苦的，我需要加糖装饰一下</li><li>苦咖啡 与 加糖咖啡 都是基于 咖啡接口</li><li>即将刚开始的苦咖啡经过加糖咖啡的装饰返回了一杯新的咖啡</li></ul><ol><li>咖啡接口</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public interface Coffee &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 打印当前咖啡的原材料，即咖啡里有什么</span><br><span class="line">     */</span><br><span class="line">    void printMaterial();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>苦咖啡实现类</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class BitterCoffee implements Coffee &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void printMaterial() &#123;</span><br><span class="line">        System.out.println(&quot;咖啡&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>默认点餐逻辑</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Coffee coffee = new BitterCoffee();</span><br><span class="line">        coffee.printMaterial();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>加糖装饰器</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 糖装饰器，用来给咖啡加糖</span><br><span class="line"> */</span><br><span class="line">public class SugarDecorator implements Coffee &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 持有的咖啡对象</span><br><span class="line">     */</span><br><span class="line">    private final Coffee coffee;</span><br><span class="line"></span><br><span class="line">    public SugarDecorator(Coffee coffee) &#123;</span><br><span class="line">        this.coffee = coffee;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public void printMaterial() &#123;</span><br><span class="line">        System.out.println(&quot;糖&quot;);</span><br><span class="line">        this.coffee.printMaterial();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.加糖成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Coffee coffee = new BitterCoffee();</span><br><span class="line">        coffee = new SugarDecorator(coffee);</span><br><span class="line">        coffee.printMaterial();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="与代理模式的差别："><a href="#与代理模式的差别：" class="headerlink" title="与代理模式的差别："></a>与代理模式的差别：</h4><ul><li><p>两者实现的都是对原对象的包装，持有原对象的实例，差别在于对外的表现。</p></li><li><p>装饰器模式：点了咖啡，发现太苦了，不是自己想要的，然后用装饰器加了点糖。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Coffee coffee = new BitterCoffee();</span><br><span class="line">coffee = new SugarDecorator(coffee);</span><br></pre></td></tr></table></figure></li><li><p>代理模式：直接就点的加糖咖啡。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Coffee coffee = new CoffeeWithSugar();</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 装饰器模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂模式</title>
      <link href="/2020/09/07/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/09/07/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><p><strong>定义</strong>：由一个工厂对象决定创建出哪一种类型实例。客户端只需传入工厂类的参数，无心关心创建过程。</p><p><strong>优点</strong>：具体产品从客户端代码中抽离出来，解耦。</p><p><strong>缺点</strong>：工厂类职责过重，增加新的类型时，得修改工程类得代码，违背开闭原则。</p><p>举例：新建Fruit水果抽象类，包含eat抽象方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public abstract class Fruit &#123;</span><br><span class="line">    public abstract void eat();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实现类Apple：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Apple extends Fruit&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void eat() &#123;</span><br><span class="line">        System.out.println(&quot;吃🍎&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建创建Fruit的工厂类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class FruitFactory &#123;</span><br><span class="line">    public Fruit produce(String name) &#123;</span><br><span class="line">        if (&quot;apple&quot;.equals(name)) &#123;</span><br><span class="line">            return new Apple();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建个客户端测试一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        FruitFactory factory = new FruitFactory();</span><br><span class="line">        Fruit fruit = factory.produce(&quot;apple&quot;);</span><br><span class="line">        fruit.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行main方法，输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">吃🍎</span><br></pre></td></tr></table></figure><p>可以看到，客户端Application并未依赖具体的水果类型，只关心<code>FruitFactory</code>的入参，这就是客户端和具体产品解耦的体现，UML图如下：</p><p><img alt="QQ截图20191216103019.png" data-src="https://mrbird.cc/img/QQ%E6%88%AA%E5%9B%BE20191216103019.png" class="lazyload"></p><h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><p>为了解决简单工厂模式的缺点，诞生了工厂方法模式（Factory method pattern）。</p><p><strong>定义</strong>：定义创建对象的接口，让实现这个接口的类来决定实例化哪个类，工厂方法让类的实例化推迟到了子类进行。</p><p><strong>优点</strong>：</p><ol><li>具体产品从客户端代码中抽离出来，解耦。</li><li>加入新的类型时，只需添加新的工厂方法（无需修改旧的工厂方法代码），符合开闭原则。</li></ol><p><strong>缺点</strong>：类的个数容易过多，增加复杂度。</p><p>举例：新建Fruit抽象类，包含eat抽象方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public abstract class Fruit &#123;</span><br><span class="line">    public abstract void eat();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建<code>FruitFactory</code>抽象工厂，定义<code>produceFruit</code>抽象方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public abstract class FruitFactory &#123;</span><br><span class="line">    public abstract Fruit produceFruit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建Fruit的实现类，Apple：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Apple extends Fruit &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void eat() &#123;</span><br><span class="line">        System.out.println(&quot;吃🍎&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建<code>FruitFactory</code>的实现类<code>AppleFruitFactory</code>，用于生产具体类型的水果 —— 苹果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class AppleFruitFactory extends FruitFactory&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Fruit produceFruit() &#123;</span><br><span class="line">        return new Apple();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建客户端Application测试一波：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        FruitFactory factory = new AppleFruitFactory();</span><br><span class="line">        Fruit fruit = factory.produceFruit();</span><br><span class="line">        fruit.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行main方法，输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">吃🍎</span><br></pre></td></tr></table></figure><p>现在要新增Banana类型的水果，只需要新增Banana类型的工厂类即可，无需修改现有的<code>AppleFruitFactory</code>代码，符合开闭原则。但是这种模式的缺点也显而易见，就是类的个数容易过多，增加复杂度。</p><p>上面例子UML图如下所示：</p><p><img alt="QQ截图20191216105317.png" data-src="https://mrbird.cc/img/QQ%E6%88%AA%E5%9B%BE20191216105317.png" class="lazyload"></p><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><p>抽象工厂模式（Abstract factory pattern）提供了<strong>一系列</strong>相关或者相互依赖的对象的接口，关键字是“一系列”。</p><p><strong>优点</strong>：</p><ol><li>具体产品从客户端代码中抽离出来，解耦。</li><li>将一个系列的产品族统一到一起创建。</li></ol><p><strong>缺点</strong>：拓展新的功能困难，需要修改抽象工厂的接口；</p><p>综上所述，抽象工厂模式适合那些功能相对固定的产品族的创建。</p><p>举例：新建水果抽象类Fruit，包含buy抽象方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public abstract class Fruit &#123;</span><br><span class="line">    public abstract void buy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建价格抽象类Price，包含pay抽象方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public abstract class Price &#123;</span><br><span class="line">    public abstract void pay();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建水果创建工厂接口<code>FruitFactory</code>，包含获取水果和价格抽象方法（产品族的体现是，一组产品包含水果和对应的价格）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface FruitFactory &#123;</span><br><span class="line">    Fruit getFruit();</span><br><span class="line">    Price getPrice();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来开始创建🍎这个“产品族”。新建Fruit实现类AppleFruit：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class AppleFruit extends Fruit&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void buy() &#123;</span><br><span class="line">        System.out.println(&quot;购买🍎&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建对应的苹果价格实现<code>ApplePrice</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class ApplePrice extends Price&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void pay() &#123;</span><br><span class="line">        System.out.println(&quot;🍎单价2元&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建客户端Application，测试一波：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class Application &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        FruitFactory factory = new AppleFruitFactory();</span><br><span class="line">        factory.getFruit().buy();</span><br><span class="line">        factory.getPrice().pay();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">购买🍎</span><br><span class="line">🍎单价2元</span><br></pre></td></tr></table></figure><p>客户端只需要通过创建<code>AppleFruitFactory</code>就可以获得苹果这个产品族的所有内容，包括苹果对象，苹果价格。要新建🍌的产品族，只需要实现<code>FruitFactory</code>、Price和Fruit接口即可。这种模式的缺点和工厂方法差不多，就是类的个数容易过多，增加复杂度。</p><p>上面例子UML图如下所示：</p><p><img alt="QQ截图20191216112922.png" data-src="https://mrbird.cc/img/QQ%E6%88%AA%E5%9B%BE20191216112922.png" class="lazyload"></p><h3 id><a href="#" class="headerlink" title></a></h3><p>参考资料：<br><a href="https://snailclimb.gitee.io/javaguide/#/docs/system-design/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F">https://snailclimb.gitee.io/javaguide/#/docs/system-design/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F</a></p><p><a href="https://mrbird.cc/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html">https://mrbird.cc/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工厂模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滑动窗口</title>
      <link href="/2020/09/05/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
      <url>/2020/09/05/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>滑动窗口主要用来处理连续问题。比如题目求解“连续子串 xxxx”，“连续子数组 xxxx”，就应该可以想到滑动窗口。</p><p>时间复杂度一般是 O(N + K) K是窗口大小</p></blockquote><p>从类型上说主要有：</p><ul><li>固定窗口大小</li><li>窗口大小不固定，求解最大的满足条件的窗口</li><li>窗口大小不固定，求解最小的满足条件的窗口</li></ul><h4 id="固定窗口"><a href="#固定窗口" class="headerlink" title="固定窗口"></a>固定窗口</h4><p>例如：</p><h4 id="可变窗口"><a href="#可变窗口" class="headerlink" title="可变窗口"></a>可变窗口</h4><p>例如：<a href="https://leetcode-cn.com/problems/max-consecutive-ones-iii/">1004. 最大连续1的个数 III</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestOnes</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>,count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(r&lt;A.length)&#123;</span><br><span class="line">            count += A[r] == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(count &gt; K)&#123;</span><br><span class="line">                count -= A[l++] == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res = Math.max(res,r-l+<span class="number">1</span>);</span><br><span class="line">            r++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理模式</title>
      <link href="/2020/08/29/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/29/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>适用范围：</p><blockquote><p>为其他对象提供一个代理以控制对某个对象的访问。代理类主要负责为委托了（真实对象）预处理消息、过滤消息、传递消息给委托类，代理类不现实具体服务，而是利用委托类来完成服务，并将执行结果封装处理。</p></blockquote><p>例如：我们要去买火车票</p><ul><li>抽象接口：都是卖票的</li><li>被代理对象：12306官方售票</li><li>代理对象：各种第三方代理售商</li><li>用户去使用第三方代理买票，本质上就是实现了代理—通过对代理类的访问控制被代理对象</li></ul><h2 id="三种常用动态代理"><a href="#三种常用动态代理" class="headerlink" title="三种常用动态代理"></a>三种常用动态代理</h2><ul><li>静态代理</li><li>jdk动态代理</li><li>cglib动态代理</li></ul><h3 id="1-静态代理"><a href="#1-静态代理" class="headerlink" title="1.静态代理"></a>1.静态代理</h3><blockquote><p>创建一个接口，然后创建被代理的类实现该接口并且实现该接口中的抽象方法。之后再创建一个代理类，同时使其也实现这个接口。在代理类中持有一个被代理对象的引用，而后在代理类方法中调用该对象的方法。</p></blockquote><ol><li>接口：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface SaleTicket &#123;</span><br><span class="line">    void sale(int money);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>被代理类：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class SaleBy12306 implements SaleTicket&#123;</span><br><span class="line">    public void sale(int money) &#123;</span><br><span class="line">        if(money &gt; 100)&#123;</span><br><span class="line">            System.out.println(&quot;购票成功！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            System.out.println(&quot;购票失败！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>代理类：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class SaleByOthers implements SaleTicket &#123;</span><br><span class="line">    private final SaleBy12306 saleTicket;</span><br><span class="line"></span><br><span class="line">    public SaleByOthers(SaleBy12306 saleTicket) &#123;</span><br><span class="line">        this.saleTicket = saleTicket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 代理商 除了正常卖票还能 打折...之类的</span><br><span class="line">    public void sale(int money) &#123;</span><br><span class="line">        System.out.println(&quot;打折&quot;);</span><br><span class="line">        saleTicket.sale(money);    // 最后还是去12306取票</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>代理类调用：<br>被代理类被传递给了代理类SaleByOthers，代理类在执行具体方法时通过所持用的被代理类完成调用。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Client &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SaleBy12306 saleBy12306 = new SaleBy12306();</span><br><span class="line">        SaleByOthers saleByOthers = new SaleByOthers(saleBy12306);</span><br><span class="line">        saleByOthers.sale(200);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">输出：</span><br><span class="line">打折</span><br><span class="line">购票成功！</span><br></pre></td></tr></table></figure><p><strong>总结：</strong> 使用静态代理很容易就完成了对一个类的代理操作。但是静态代理的缺点也暴露了出来：由于代理只能为一个类服务，如果需要代理的类很多，那么就需要编写大量的代理类，比较繁琐。</p><h3 id="2-动态代理"><a href="#2-动态代理" class="headerlink" title="2.动态代理"></a>2.动态代理</h3><blockquote><p>利用反射机制在运行时创建代理类，实现对被代理对象的访问控制。<br>接口、被代理类不变，我们构建一个handler类来实现InvocationHandler接口。</p></blockquote><ol><li>接口：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface SaleTicket &#123;</span><br><span class="line">    void sale(int money);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>被代理类：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class SaleBy12306 implements SaleTicket&#123;</span><br><span class="line">    public void sale(int money) &#123;</span><br><span class="line">        if(money &gt; 100)&#123;</span><br><span class="line">            System.out.println(&quot;购票成功！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            System.out.println(&quot;购票失败！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>代理类：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 售票代理商 处理器</span><br><span class="line">public class SaleTicketHandler implements InvocationHandler &#123;</span><br><span class="line">    private Object object;</span><br><span class="line"></span><br><span class="line">    public SaleTicketHandler(Object object) &#123;</span><br><span class="line">        this.object = object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 动态代理执行方法 类似Thread的run方法</span><br><span class="line">     * @param proxy  被代理对象</span><br><span class="line">     * @param method 被代理对象的方法</span><br><span class="line">     * @param args  被代理方法参数</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Throwable</span><br><span class="line">     */</span><br><span class="line">    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">        // 一样在售票前后可以做操作</span><br><span class="line">        System.out.println(&quot;售票前....&quot; + method.getName());</span><br><span class="line">        // 使用反射执行12306的售票方法</span><br><span class="line">        Object reslut = method.invoke(object,args);</span><br><span class="line">        System.out.println(&quot;售票后....&quot; + method.getName());</span><br><span class="line">        return reslut;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>代理类调用：<br>被代理类被传递给了代理类saleTicketByProxy ，代理类在执行具体方法时通过所持用的被代理类完成调用。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class Client &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SaleBy12306 saleBy12306 = new SaleBy12306();</span><br><span class="line">        InvocationHandler handler = new SaleTicketHandler(saleBy12306);</span><br><span class="line">        /**</span><br><span class="line">         * 此处代理类Proxy的newProxyInstance需要三个参数</span><br><span class="line">         * 1.被代理对象的类加载器</span><br><span class="line">         * 2.被代理对象的接口</span><br><span class="line">         * 3.实际的代理对象处理器 -- ProxyHandler</span><br><span class="line">         */</span><br><span class="line">        SaleTicket saleTicketByProxy = (SaleTicket) Proxy.newProxyInstance(</span><br><span class="line">                saleBy12306.getClass().getClassLoader(),</span><br><span class="line">                saleBy12306.getClass().getInterfaces(),</span><br><span class="line">                handler</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        saleTicketByProxy.sale(200);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过Proxy类的静态方法newProxyInstance返回一个接口的代理实例。针对不同的代理类，传入相应的代理程序控制器InvocationHandler。</p><ol start="5"><li>如果再想加入一个代理对象 也是相同的写法，而且可以使用匿名内部类</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SaleTicket saleTicketByProxy2 = (SaleTicket) Proxy.newProxyInstance(</span><br><span class="line">        saleBy12306.getClass().getClassLoader(),</span><br><span class="line">        saleBy12306.getClass().getInterfaces(),</span><br><span class="line">        new InvocationHandler()&#123;</span><br><span class="line">            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">                return method.invoke(saleBy12306,args);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">);</span><br><span class="line">saleTicketByProxy2.sale(200);</span><br></pre></td></tr></table></figure><p><strong>动态代理底层实现:</strong></p><ol><li>通过实现 InvocationHandler 接口创建自己的调用处理器；</li><li>通过为 Proxy 类指定 ClassLoader 对象和一组 interface 来创建动态代理类；</li><li>通过反射机制获得动态代理类的构造函数，其唯一参数类型是调用处理器接口类型；</li><li>通过构造函数创建动态代理类实例，构造时调用处理器对象作为参数被传入。</li></ol><p><strong>总结：</strong> JDK 动态代理有一个最致命的问题是其只能代理实现了接口的类。<br>为了解决这个问题，我们可以用 CGLIB 动态代理机制来避免。</p><h3 id="3-CGLIB动态代理"><a href="#3-CGLIB动态代理" class="headerlink" title="3.CGLIB动态代理"></a>3.CGLIB动态代理</h3><blockquote><p>CGLIB(Code Generation Library)是一个基于ASM的字节码生成库，它允许我们在运行时对字节码进行修改和动态生成。CGLIB 通过继承方式实现代理。很多知名的开源框架都使用到了CGLIB， 例如 Spring 中的 AOP 模块中：如果目标对象实现了接口，则默认采用 JDK 动态代理，否则采用 CGLIB 动态代理。</p></blockquote><h4 id="1-CGLIB代理机制"><a href="#1-CGLIB代理机制" class="headerlink" title="1.CGLIB代理机制"></a>1.CGLIB代理机制</h4><h5 id="在-CGLIB-动态代理机制中-MethodInterceptor-接口和-Enhancer-类是核心。"><a href="#在-CGLIB-动态代理机制中-MethodInterceptor-接口和-Enhancer-类是核心。" class="headerlink" title="在 CGLIB 动态代理机制中 MethodInterceptor 接口和 Enhancer 类是核心。"></a>在 CGLIB 动态代理机制中 <code>MethodInterceptor</code> 接口和 <code>Enhancer</code> 类是核心。</h5><h5 id="你需要自定义-MethodInterceptor-并重写-intercept-方法，intercept-用于拦截增强被代理类的方法。"><a href="#你需要自定义-MethodInterceptor-并重写-intercept-方法，intercept-用于拦截增强被代理类的方法。" class="headerlink" title="你需要自定义 MethodInterceptor 并重写 intercept 方法，intercept 用于拦截增强被代理类的方法。"></a>你需要自定义 <code>MethodInterceptor</code> 并重写 <code>intercept</code> 方法，<code>intercept</code> 用于拦截增强被代理类的方法。</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public interface MethodInterceptor</span><br><span class="line">extends Callback&#123;</span><br><span class="line">    // 拦截被代理类中的方法</span><br><span class="line">    public Object intercept(</span><br><span class="line">        Object obj,</span><br><span class="line">        java.lang.reflect.Method method,</span><br><span class="line">        Object[] args,</span><br><span class="line">        MethodProxy proxy</span><br><span class="line">        ) throws Throwable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>obj :被代理的对象（需要增强的对象）</li><li>method :被拦截的方法（需要增强的方法）</li><li>args :方法入参</li><li>methodProxy :用于调用原始方法</li></ul><p>你可以通过 <code>Enhancer</code>类来动态获取被代理类，当代理类调用方法的时候，实际调用的是 <code>MethodInterceptor</code> 中的 <code>intercept</code> 方法。</p><h4 id="2-CGLIB代理类使用流程"><a href="#2-CGLIB代理类使用流程" class="headerlink" title="2.CGLIB代理类使用流程"></a>2.CGLIB代理类使用流程</h4><ol><li>定义一个类；</li><li>自定义 <code>MethodInterceptor</code> 并重写 <code>intercept</code> 方法，<code>intercept</code> 用于拦截增强被代理类的方法，和 JDK 动态代理中的 <code>invoke</code> 方法类似</li><li>通过 <code>Enhancer</code> 类的 <code>create()</code>创建代理类；</li></ol><p>Maven依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;cglib&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;cglib&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;3.3.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>1.被代理类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class SaleBy12306 &#123;</span><br><span class="line">    public void sale(int money) &#123;</span><br><span class="line">        if(money &gt; 100)&#123;</span><br><span class="line">            System.out.println(&quot;购票成功！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            System.out.println(&quot;购票失败！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.自定义 <code>MethodInterceptor</code>（方法拦截器）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class SaleTicketMethodIntercepter implements MethodInterceptor &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param o           被代理的对象（需要增强的对象）</span><br><span class="line">     * @param method      被拦截的方法（需要增强的方法）</span><br><span class="line">     * @param args        方法入参</span><br><span class="line">     * @param methodProxy 用于调用原始方法</span><br><span class="line">     */</span><br><span class="line">    public Object intercept(Object o, Method method, Object[] args, MethodProxy methodProxy) throws Throwable &#123;</span><br><span class="line">        //调用方法之前，我们可以添加自己的操作</span><br><span class="line">        System.out.println(&quot;before method &quot; + method.getName());</span><br><span class="line">        Object object = methodProxy.invokeSuper(o, args);</span><br><span class="line">        //调用方法之后，我们同样可以添加自己的操作</span><br><span class="line">        System.out.println(&quot;after method &quot; + method.getName());</span><br><span class="line">        return object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.获取代理类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class CglibProxyFactory &#123;</span><br><span class="line"></span><br><span class="line">    public static Object getProxy(Class&lt;?&gt; clazz) &#123;</span><br><span class="line">        // 创建动态代理增强类</span><br><span class="line">        Enhancer enhancer = new Enhancer();</span><br><span class="line">        // 设置类加载器</span><br><span class="line">        enhancer.setClassLoader(clazz.getClassLoader());</span><br><span class="line">        // 设置被代理类</span><br><span class="line">        enhancer.setSuperclass(clazz);</span><br><span class="line">        // 设置方法拦截器</span><br><span class="line">        enhancer.setCallback(new SaleTicketMethodIntercepter());</span><br><span class="line">        // 创建代理类</span><br><span class="line">        return enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.实际使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Client &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SaleBy12306 saleBy12306 = (SaleBy12306) CglibProxyFactory.getProxy(SaleBy12306.class);</span><br><span class="line">        saleBy12306.sale(200);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><h4 id="1-JDK-动态代理和-CGLIB-动态代理对比"><a href="#1-JDK-动态代理和-CGLIB-动态代理对比" class="headerlink" title="1.JDK 动态代理和 CGLIB 动态代理对比"></a>1.JDK 动态代理和 CGLIB 动态代理对比</h4><ul><li>JDK 动态代理只能只能代理实现了接口的类，而 CGLIB 可以代理未实现任何接口的类。  </li><li>另外， CGLIB 动态代理是通过生成一个被代理类的子类来拦截被代理类的方法调用，因此不能代理声明为 final 类型的类和方法。</li><li>就二者的效率来说，大部分情况都是 JDK 动态代理更优秀，随着 JDK 版本的升级，这个优势更加明显。</li></ul><h4 id="2-静态代理和动态代理的对比"><a href="#2-静态代理和动态代理的对比" class="headerlink" title="2. 静态代理和动态代理的对比"></a>2. 静态代理和动态代理的对比</h4><ul><li>灵活性 ：动态代理更加灵活，不需要必须实现接口，可以直接代理实现类，并且可以不需要针对每个目标类都创建一个代理类。另外，静态代理中，接口一旦新增加方法，目标对象和代理对象都要进行修改，这是非常麻烦的！</li><li>JVM 层面 ：静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件。而动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。</li></ul><p>参考资料：</p><p><a href="https://snailclimb.gitee.io/javaguide/#/docs/java/basic/java-proxy?id=_4-%e9%9d%99%e6%80%81%e4%bb%a3%e7%90%86%e5%92%8c%e5%8a%a8%e6%80%81%e4%bb%a3%e7%90%86%e7%9a%84%e5%af%b9%e6%af%94">JavaGuide</a><br><a href="https://www.jianshu.com/p/9bcac608c714">简书-java动态代理</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代理模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jvm底层原理总结</title>
      <link href="/2020/08/23/Jvm%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/"/>
      <url>/2020/08/23/Jvm%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-虚拟机底层原理知识总结"><a href="#Java-虚拟机底层原理知识总结" class="headerlink" title="Java 虚拟机底层原理知识总结"></a>Java 虚拟机底层原理知识总结</h1><h2 id="清单"><a href="#清单" class="headerlink" title="清单"></a>清单</h2><ul><li><a href="https://github.com/doocs/jvm/blob/master/docs/01-jvm-memory-structure.md">JVM 内存结构</a></li><li><a href="https://github.com/doocs/jvm/blob/master/docs/02-hotspot-jvm-object.md">HotSpot 虚拟机对象探秘</a></li><li><a href="https://github.com/doocs/jvm/blob/master/docs/03-gc-algorithms.md">垃圾收集策略与算法</a></li><li><a href="https://github.com/doocs/jvm/blob/master/docs/04-hotspot-gc.md">HotSpot 垃圾收集器</a></li><li><a href="https://github.com/doocs/jvm/blob/master/docs/05-memory-allocation-gc.md">内存分配与回收策略</a></li><li><a href="https://github.com/doocs/jvm/blob/master/docs/06-jvm-performance-tuning.md">JVM 性能调优</a></li><li><a href="https://github.com/doocs/jvm/blob/master/docs/07-class-structure.md">类文件结构</a></li><li><a href="https://github.com/doocs/jvm/blob/master/docs/08-load-class-time.md">类加载的时机</a></li><li><a href="https://github.com/doocs/jvm/blob/master/docs/09-load-class-process.md">类加载的过程</a></li><li><a href="https://github.com/doocs/jvm/blob/master/docs/10-class-loader.md">类加载器</a></li></ul><hr><p><a href="https://github.com/doocs/jvm">java 虚拟机底层原理知识总结</a></p><p><a href="https://zhuanlan.zhihu.com/p/34426768">纯洁的微笑jvm</a></p>]]></content>
      
      
      <categories>
          
          <category> java基础语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树</title>
      <link href="/2020/08/21/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF/"/>
      <url>/2020/08/21/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><blockquote><p>线段树是算法竞赛中常用的用来维护 <strong>区间信息</strong> 的数据结构。</p></blockquote><blockquote><p>线段树可以在 的时间复杂度内实现<strong>单点修改</strong>、<strong>区间修改</strong>、<strong>区间查询</strong>（区间求和，求区间最大值，求区间最小值）等操作。</p></blockquote><blockquote><p>线段树维护的信息，需要满足可加性，即能以可以接受的速度合并信息和修改信息，包括在使用懒惰标记时，标记也要满足可加性（例如取模就不满足可加性，对 取模然后对 取模，两个操作就不能合并在一起做）。</p></blockquote><h3 id="1-区间求和的线段树"><a href="#1-区间求和的线段树" class="headerlink" title="1.区间求和的线段树"></a>1.区间求和的线段树</h3><blockquote><p>若只需要求区间和，而不需要改变区间值 –&gt; 使用前缀和</p><p>若在求区间和的基础上，还要修改区间数组的值，为了更快的维护一个前缀和数组 —&gt; 线段树</p><p>线段树实际就是在前缀和的基础上使用二分构建二叉搜索树，提高修改区间值的时间</p><p>线段树一般支持三个基本操作：构建树，修改某元素的值，查询区间和</p></blockquote><p>如图：原数组和它对应的线段树</p><img style="zoom:70%" data-src="https://i.loli.net/2020/08/21/Y9XGImNind54BvA.png" class="lazyload"><p>修改下标为4的元素为6后的线段树：</p><img style="zoom:70%" data-src="https://i.loli.net/2020/08/21/wRps6XunvfmyBQP.png" class="lazyload"><p>一个区间求和线段树的Java基本模板：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SegmentTree</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] data;   <span class="comment">// 原始数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] tree;   <span class="comment">// 线段树</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SegmentTree</span><span class="params">(<span class="keyword">int</span>[] data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        tree = <span class="keyword">new</span> <span class="keyword">int</span>[data.length*<span class="number">4</span>];     <span class="comment">// 线段树为原始数据4倍</span></span><br><span class="line">        buildTree(<span class="number">0</span>,<span class="number">0</span>,data.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建树</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span> treeIndex, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">            tree[treeIndex] = data[l];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> leftTreeIndex = <span class="number">2</span> * treeIndex + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> rightTreeIndex = <span class="number">2</span> * treeIndex + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">        buildTree(leftTreeIndex, l, mid); <span class="comment">//先构建两棵子树</span></span><br><span class="line">        buildTree(rightTreeIndex, mid + <span class="number">1</span>, r);</span><br><span class="line">        tree[treeIndex] = tree[leftTreeIndex] + tree[rightTreeIndex];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新下标为index的值为val</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> treeIndex, <span class="keyword">int</span> l, <span class="keyword">int</span> r,<span class="keyword">int</span> index,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">            data[index] = val;</span><br><span class="line">            tree[treeIndex] = val;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> leftTreeIndex = <span class="number">2</span> * treeIndex + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> rightTreeIndex = <span class="number">2</span> * treeIndex + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= l &amp;&amp; index &lt;= mid)&#123;</span><br><span class="line">            update(leftTreeIndex, l, mid,index,val);</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            update(rightTreeIndex, mid+<span class="number">1</span>, r,index,val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 自底往上更新线段树</span></span><br><span class="line">        tree[treeIndex] = tree[leftTreeIndex] + tree[rightTreeIndex];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询 L-R 区域的值的和</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> treeIndex, <span class="keyword">int</span> l, <span class="keyword">int</span> r,<span class="keyword">int</span> queryL,<span class="keyword">int</span> queryR)</span></span>&#123;</span><br><span class="line">        System.out.println(l + <span class="string">&quot; &quot;</span> + r);</span><br><span class="line">        <span class="keyword">if</span>(queryR &lt; l || queryL &gt; r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(queryL &lt;= l &amp;&amp; r &lt;= queryR) <span class="keyword">return</span> tree[treeIndex];</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> leftTreeIndex = <span class="number">2</span> * treeIndex + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> rightTreeIndex = <span class="number">2</span> * treeIndex + <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> sum_left =  query(leftTreeIndex, l, mid, queryL, queryR);</span><br><span class="line">            <span class="keyword">int</span> sum_right = query(rightTreeIndex, mid + <span class="number">1</span>, r, queryL, queryR);</span><br><span class="line">            <span class="keyword">return</span> sum_left + sum_right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>若要使用更复杂的数据结构和运算规则，修改：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] data;   <span class="comment">// 原始数据</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] tree;   <span class="comment">// 线段树</span></span><br><span class="line">和</span><br><span class="line"> tree[treeIndex] = tree[leftTreeIndex] + tree[rightTreeIndex];<span class="comment">// 此处在进行区间求和</span></span><br></pre></td></tr></table></figure><p>参考资料：<br><a href="https://www.bilibili.com/video/BV1cb411t7AM?from=search&seid=6594271608262607100">灯笼大神讲线段树</a></p><p><a href="https://oi-wiki.org/ds/seg/">线段树百科</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反射机制</title>
      <link href="/2020/08/19/java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
      <url>/2020/08/19/java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="java反射机制"><a href="#java反射机制" class="headerlink" title="java反射机制"></a>java反射机制</h1><blockquote><p><strong>反射就是在运行时才知道要操作的类是什么，并且可以在运行时获取类的完整构造，并调用对应的方法。</strong></p></blockquote><p><img alt="jvm" data-src="https://pic2.zhimg.com/80/v2-4face8109e0d52ef5894c41c69e4ec6b_720w.jpg?source=1940ef5c" class="lazyload"></p><h4 id="通俗理解："><a href="#通俗理解：" class="headerlink" title="通俗理解："></a>通俗理解：</h4><p>当我们的程序在运行时，需要动态的加载一些类这些类可能之前用不到所以不用加载到<code>jvm</code>，而是在运行时根据需要才加载。例如：大家如果接触过spring，会发现当你配置各种各样的bean时，是以配置文件的形式配置的，你需要用到哪些bean就配哪些，spring容器就会根据你的需求去动态加载，你的程序就能健壮地运行。</p><h2 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h2><blockquote><p>Reflection 使用 JDK 提供的反射 API 进行反射调用类的信息</p></blockquote><ul><li>反射就是在运行时才知道要操作的类是什么，并且可以在运行时获取类的完整构造，并调用对应的方法。</li></ul><p><img alt="image" data-src="https://pics7.baidu.com/feed/8b13632762d0f703ecd825d4bde727382697c577.jpeg?token=12cc273c0cc8b6d4fbf23e5f99a8e14c&s=8070E532C533C0224E7518DB000080B2" class="lazyload"></p><h4 id="正常使用类"><a href="#正常使用类" class="headerlink" title="正常使用类"></a>正常使用类</h4><ol><li>引入包</li><li>new实例化</li><li>获取实例化对象</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Apple apple = new Apple(); //直接初始化，「正射」</span><br><span class="line">apple.setPrice(4);</span><br></pre></td></tr></table></figure><h4 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h4><ol><li>一开始并不知道初始化的类对象是什么</li><li>无法使用 new 关键字来创建对象</li><li>使用 JDK 提供的反射 API 进行反射调用</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class clz = Class.forName(&quot;com.chenshuyi.reflect.Apple&quot;);</span><br><span class="line">Method method = clz.getMethod(&quot;setPrice&quot;, int.class);</span><br><span class="line">Constructor constructor = clz.getConstructor();</span><br><span class="line">Object object = constructor.newInstance();</span><br><span class="line">method.invoke(object, 4);</span><br></pre></td></tr></table></figure><ul><li>从这个简单的例子可以看出，一般情况下我们使用反射获取一个对象的步骤：</li></ul><ol><li><p>获取类的 Class 对象实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class clz = Class.forName(&quot;com.zhenai.api.Apple&quot;);</span><br></pre></td></tr></table></figure></li><li><p>根据 Class 对象实例获取 Constructor 对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Constructor appleConstructor = clz.getConstructor();</span><br></pre></td></tr></table></figure></li><li><p>使用 Constructor 对象的 newInstance 方法获取反射类对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object appleObj = appleConstructor.newInstance();</span><br></pre></td></tr></table></figure></li><li><p>而如果要调用某一个方法，则需要经过下面的步骤：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">获取方法的 Method 对象</span><br><span class="line">Method setPriceMethod = clz.getMethod(&quot;setPrice&quot;, int.class);</span><br><span class="line"></span><br><span class="line">利用 invoke 方法调用方法</span><br><span class="line">setPriceMethod.invoke(appleObj, 14);</span><br></pre></td></tr></table></figure></li></ol><h4 id="Class对象的获取方法"><a href="#Class对象的获取方法" class="headerlink" title="Class对象的获取方法"></a>Class对象的获取方法</h4><p>第一种，使用 Class.forName 静态方法。当你知道该类的全路径名时，你可以使用该方法获取 Class 类对象。</p><p><code>Class clz = Class.forName(&quot;java.lang.String&quot;);</code></p><p>第二种，使用 .class 方法。<br>这种方法只适合在编译前就知道操作的 Class。</p><p><code>Class clz = String.class;</code></p><p>第三种，使用类对象的 getClass() 方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str = new String(&quot;Hello&quot;);</span><br><span class="line">Class clz = str.getClass();</span><br></pre></td></tr></table></figure><h4 id="反射机制提供的功能："><a href="#反射机制提供的功能：" class="headerlink" title="反射机制提供的功能："></a>反射机制提供的功能：</h4><ol><li>在运行时判断任意一个对象所属的类；</li><li>在运行时构造任意一个类的对象；</li><li>在运行时判断任意一个类所具有的成员变量和方法；</li><li>在运行时调用任意一个对象的成员变量和方法；</li><li>生成动态代理。</li></ol>]]></content>
      
      
      <categories>
          
          <category> java基础语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java并发编程小结</title>
      <link href="/2020/08/18/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%B0%8F%E7%BB%93/"/>
      <url>/2020/08/18/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<hr><p>参考资料：<br><a href="http://concurrent.redspider.group/">深入浅出Java多线程</a><br><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1255943750561472">廖雪峰的官网</a></p><h2 id="一、并发基础"><a href="#一、并发基础" class="headerlink" title="一、并发基础"></a>一、并发基础</h2><h3 id="1-线程与进程"><a href="#1-线程与进程" class="headerlink" title="1.线程与进程"></a>1.线程与进程</h3><p>进程：单独占有一定的内存地址空间，数据隔离，数据共享复杂，同步复杂。稳定但资源开销大。</p><p>线程：共享进程的内存资源，数据共享简单，同步复杂。可靠性低但资源开销小。</p><p>线程并非越多越好，线程越多，上下文切换越多，消耗大量的CPU时间。</p><hr><h3 id="2-多线程入门和接口"><a href="#2-多线程入门和接口" class="headerlink" title="2.多线程入门和接口"></a>2.多线程入门和接口</h3><h4 id="1-Thread类"><a href="#1-Thread类" class="headerlink" title="1.Thread类"></a>1.Thread类</h4><ul><li>继承<code>Thread</code>类，并重写<code>run</code>方法；</li></ul><h4 id="2-Runnable接口"><a href="#2-Runnable接口" class="headerlink" title="2.Runnable接口"></a>2.Runnable接口</h4><ul><li>实现Runnable接口，并重写<code>run</code>方法；</li></ul><h4 id="3-Callable接口"><a href="#3-Callable接口" class="headerlink" title="3.Callable接口"></a>3.Callable接口</h4><ul><li>Callable一般是配合线程池工具<code>ExecutorService</code>来使用的。有返回值</li></ul><h4 id="4-Future接口"><a href="#4-Future接口" class="headerlink" title="4.Future接口"></a>4.Future接口</h4><ul><li>拥有取消，获取线程状态的功能。有返回值</li></ul><h4 id="5-FutureTask类"><a href="#5-FutureTask类" class="headerlink" title="5.FutureTask类"></a>5.FutureTask类</h4><ul><li>同时实现Runnable和Future接口。有返回值</li></ul><hr><h3 id="3-线程组和线程优先级"><a href="#3-线程组和线程优先级" class="headerlink" title="3.线程组和线程优先级"></a>3.线程组和线程优先级</h3><h4 id="1-线程组："><a href="#1-线程组：" class="headerlink" title="1.线程组："></a>1.线程组：</h4><ul><li>使用线程组对线程进行批量控制。线程组是一个标准的<strong>向下引用</strong>的树状结构。</li></ul><h4 id="2-线程优先级："><a href="#2-线程优先级：" class="headerlink" title="2.线程优先级："></a>2.线程优先级：</h4><ul><li>Java中线程优先级可以指定，范围是<code>1~10</code>。</li><li>Java默认的线程优先级为5，线程的执行顺序由调度程序来决定，线程的优先级会在线程被调用之前设定。</li><li>高优先级的线程将会比低优先级的线程有<strong>更高的几率</strong>得到执行。</li><li>使用方法<code>Thread</code>类的<code>setPriority()</code>实例方法来设定线程的优先级。</li><li>总结：优先级你设置了，理不理你就是系统调度的事情了。</li></ul><hr><h3 id="4-线程状态及转换"><a href="#4-线程状态及转换" class="headerlink" title="4.线程状态及转换"></a>4.线程状态及转换</h3><h4 id="1-操作系统线程主要有以下三个状态："><a href="#1-操作系统线程主要有以下三个状态：" class="headerlink" title="1.操作系统线程主要有以下三个状态："></a>1.操作系统线程主要有以下三个状态：</h4><ul><li>就绪状态(ready)：线程正在等待使用CPU，经调度程序调用之后可进入running状态。</li><li>执行状态(running)：线程正在使用CPU。</li><li>等待状态(waiting): 线程经过等待事件的调用或者正在等待其他资源（如I/O）。</li></ul><h4 id="2-Java线程的6个状态"><a href="#2-Java线程的6个状态" class="headerlink" title="2.Java线程的6个状态"></a>2.Java线程的6个状态</h4><ul><li><p>NEW：未启动状态。还没调用Thread实例的start()方法。</p></li><li><p>RUNNABLE：线程正在运行中。（正在Java虚拟机中运行 | 等待CPU分配资源。）</p></li><li><p>BLOCKED：阻塞状态。处于阻塞状态的线程正等待锁的释放以进入同步区。</p></li><li><p>WAITING：等待状态。处于等待状态的线程变成RUNNABLE状态需要其他线程唤醒。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">调用如下<span class="number">3</span>个方法会使线程进入等待状态：</span><br><span class="line">* Object.wait()：使当前线程处于等待状态直到另一个线程唤醒它；</span><br><span class="line">* Thread.join()：等待线程执行完毕，底层调用的是Object实例的wait方法；</span><br><span class="line">* LockSupport.park()：除非获得调用许可，否则禁用当前线程进行线程调度。</span><br><span class="line"></span><br><span class="line">调用如下<span class="number">2</span>个方法唤醒线程：</span><br><span class="line">* notify()：唤醒一个等待的线程</span><br><span class="line">* notifyAll()：唤醒所有等待的线程</span><br></pre></td></tr></table></figure></li><li><p>TIMED_WAITING：超时等待状态。线程等待一个具体的时间，时间到后会被自动唤醒。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">调用如下方法会使线程进入超时等待状态：</span><br><span class="line"></span><br><span class="line">Thread.sleep(<span class="keyword">long</span> millis)：使当前线程睡眠指定时间；</span><br><span class="line">Object.wait(<span class="keyword">long</span> timeout)：线程休眠指定时间，等待期间可以通过notify()/notifyAll()唤醒；</span><br><span class="line">Thread.join(<span class="keyword">long</span> millis)：等待当前线程最多执行millis毫秒，如果millis为<span class="number">0</span>，则会一直执行；</span><br><span class="line">LockSupport.parkNanos(<span class="keyword">long</span> nanos)： 除非获得调用许可，否则禁用当前线程进行线程调度指定时间；</span><br><span class="line">LockSupport.parkUntil(<span class="keyword">long</span> deadline)：同上，也是禁止线程进行调度指定时间；</span><br></pre></td></tr></table></figure></li><li><p>TERMINATED：终止状态。此时线程已执行完毕。</p></li></ul><hr><h3 id="5-线程间通信"><a href="#5-线程间通信" class="headerlink" title="5.线程间通信"></a>5.线程间通信</h3><p>线程同步：线程之间按照<strong>一定的顺序</strong>执行。</p><ol><li>锁与同步（对象锁<code>synchronized </code>）</li><li>等待/通知机制（在<code>synchronized</code>基础上+ wait()和notify() 通知唤醒线程）</li><li>信号量 （<code>Semaphore</code>对象或者<code>volatile</code>关键字）</li><li>管道（管道是基于“管道流”的通信方式。JDK提供了许多）</li><li>其他信道相关<ol><li><code>join()</code>线程礼让，排队等待其他线程完成。</li><li><code>sleep()</code>线程睡眠，不释放锁，（wait释放）</li><li><code>ThreadLocal</code>线程本地变量，内部是一个弱引用的<code>Map</code></li><li><code>InheritableThreadLocal</code>添加子线程继承父线程本地变量</li></ol></li><li>JDK通讯工具类</li></ol><h2 id="二、并发原理"><a href="#二、并发原理" class="headerlink" title="二、并发原理"></a>二、并发原理</h2><h3 id="1-java内存模型基础"><a href="#1-java内存模型基础" class="headerlink" title="1.java内存模型基础"></a>1.java内存模型基础</h3><p><img alt="Java内存模型" data-src="http://concurrent.redspider.group/article/02/imgs/Java%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA.png" class="lazyload"></p><p><img data-src="http://concurrent.redspider.group/article/02/imgs/JMM%E6%8A%BD%E8%B1%A1%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" class="lazyload"></p><h5 id="存在一个问题，各线程之间变量的一致性问题"><a href="#存在一个问题，各线程之间变量的一致性问题" class="headerlink" title="存在一个问题，各线程之间变量的一致性问题"></a>存在一个问题，各线程之间变量的一致性问题</h5><h3 id="2-重排序与happens-before"><a href="#2-重排序与happens-before" class="headerlink" title="2.重排序与happens-before"></a>2.重排序与happens-before</h3><ol><li>指令重排</li></ol><blockquote><p>指令重排对于提高CPU处理性能十分必要。虽然由此带来了乱序的问题，但是这点牺牲是值得的。</p><p><strong>指令重排可以保证串行语义一致，但是没有义务保证多线程间的语义也一致</strong>。</p></blockquote><ol start="2"><li>顺序一致性模型</li></ol><p>Java内存模型（JMM）对于正确同步多线程程序的内存一致性做了以下保证：</p><blockquote><p><strong>如果程序是正确同步的，程序的执行将具有顺序一致性</strong>。 即程序的执行结果和该程序在顺序一致性模型中执行的结果相同。</p></blockquote><p>这里的同步包括了使用<code>volatile</code>、<code>final</code>、<code>synchronized</code>等关键字来实现<strong>多线程下的同步</strong>。</p><ol start="3"><li><p>happens-before规则</p><p>JMM提供了<strong>happens-before规则</strong>（JSR-133规范），满足了程序员的需求——<strong>简单易懂，并且提供了足够强的内存可见性保证。</strong></p><p>总之，如果操作A happens-before操作B，那么操作A在内存上所做的操作对操作B都是可见的，不管它们在不在一个线程。</p></li></ol><h3 id="3-volatile共享变量"><a href="#3-volatile共享变量" class="headerlink" title="3.volatile共享变量"></a>3.volatile共享变量</h3><p>volatile关键字有特殊的内存语义。volatile主要有以下两个功能：</p><ul><li>保证变量的<strong>内存可见性</strong></li><li>禁止volatile变量与普通变量<strong>重排序</strong></li></ul><p><strong>在功能上，锁比volatile更强大；在性能上，volatile更有优势</strong>。</p><h3 id="4-synchronized与锁"><a href="#4-synchronized与锁" class="headerlink" title="4.synchronized与锁"></a>4.synchronized与锁</h3><blockquote><p>Java多线程的锁都是基于对象的。</p><p>CAS: Compare and Swap</p><p>比较并设置。用于在硬件层面上提供原子性操作。在 Intel 处理器中，比较并交换通过指令cmpxchg实现。 比较是否和给定的数值一致，如果一致则修改，不一致则不修改。</p></blockquote><h4 id="1-java对象头：（java锁存放的地方）"><a href="#1-java对象头：（java锁存放的地方）" class="headerlink" title="1.java对象头：（java锁存放的地方）"></a>1.java对象头：（java锁存放的地方）</h4><blockquote><p>每个Java对象都有对象头。如果是非数组类型，则用2个字宽来存储对象头，如果是数组，则会用3个字宽来存储对象头。</p><p>Mark Word :  存储对象的<code>hashCode</code>或锁信息等</p></blockquote><h4 id="2-几种锁"><a href="#2-几种锁" class="headerlink" title="2.几种锁"></a>2.几种锁</h4><p>在Java 6 及其以后，一个对象其实有四种锁状态，它们级别由低到高依次是：</p><ol><li>无锁状态</li><li>偏向锁状态</li><li>轻量级锁状态</li><li>重量级锁状态</li></ol><p>几种锁会随着竞争情况逐渐升级，锁的升级很容易发生，但是锁降级发生的条件会比较苛刻</p><h5 id="1-偏向锁-："><a href="#1-偏向锁-：" class="headerlink" title="1.偏向锁 ："></a>1.偏向锁 ：</h5><p>偏向锁在资源无竞争情况下消除了同步语句，连CAS操作都不做了，提高了程序的运行性能。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">锁记录偏向的线程ID</span><br><span class="line">if(下次进入同步块 == 自己的ID) 无需CAS操作加锁和解锁</span><br><span class="line">else 升级为轻量级锁 竞争</span><br></pre></td></tr></table></figure><p>适用于竞争少的情况。</p><h5 id="2-轻量级锁："><a href="#2-轻量级锁：" class="headerlink" title="2.轻量级锁："></a>2.轻量级锁：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">尝试用CAS将锁的Mark Word替换为指向锁记录的指针</span><br><span class="line">if(成功) 当前线程获得锁</span><br><span class="line">else 当前线程就尝试使用自旋来竞争获取锁。</span><br><span class="line"></span><br><span class="line">自旋到一定程度升级成重量级锁。</span><br></pre></td></tr></table></figure><h5 id="3-重量级锁："><a href="#3-重量级锁：" class="headerlink" title="3.重量级锁："></a>3.重量级锁：</h5><blockquote><p>依赖于操作系统的互斥量（mutex） 实现的，而操作系统中线程间状态的转换需要相对比较长的时间，所以重量级锁效率很低，但被阻塞的线程不会消耗CPU。</p></blockquote><p>当调用一个锁对象的<code>wait</code>或<code>notify</code>方法时，<strong>如当前锁的状态是偏向锁或轻量级锁则会先膨胀成重量级锁</strong>。</p><h5 id="4-各种锁对比："><a href="#4-各种锁对比：" class="headerlink" title="4.各种锁对比："></a>4.各种锁对比：</h5><table><thead><tr><th>锁</th><th>优点</th><th>缺点</th><th>适用场景</th></tr></thead><tbody><tr><td>偏向锁</td><td>加锁和解锁不需要额外的消耗，和执行非同步方法比仅存在纳秒级的差距。</td><td>如果线程间存在锁竞争，会带来额外的锁撤销的消耗。</td><td>适用于只有一个线程访问同步块场景。</td></tr><tr><td>轻量级锁</td><td>竞争的线程不会阻塞，提高了程序的响应速度。</td><td>如果始终得不到锁竞争的线程使用自旋会消耗CPU。</td><td>追求响应时间。同步块执行速度非常快。</td></tr><tr><td>重量级锁</td><td>线程竞争不使用自旋，不会消耗CPU。</td><td>线程阻塞，响应时间缓慢。</td><td>追求吞吐量。同步块执行时间较长。</td></tr></tbody></table><h3 id="5-CAS与原子操作"><a href="#5-CAS与原子操作" class="headerlink" title="5.CAS与原子操作"></a>5.CAS与原子操作</h3><p><strong>悲观锁：</strong></p><p>悲观锁就是我们常说的锁。对于悲观锁来说，它总是认为每次访问共享资源时会发生冲突，所以必须对每次数据操作加上锁，以保证临界区的程序同一时间只能有一个线程在执行。</p><p><strong>乐观锁：</strong></p><p>乐观锁又称为“无锁”，顾名思义，它是乐观派。乐观锁总是假设对共享资源的访问没有冲突，线程可以不停地执行，无需加锁也无需等待。而一旦多个线程发生冲突，乐观锁通常是使用一种称为CAS的技术来保证线程执行的安全性。</p><p>由于无锁操作中没有锁的存在，因此不可能出现死锁的情况，也就是说<strong>乐观锁天生免疫死锁</strong>。</p><p>乐观锁多用于“读多写少“的环境，避免频繁加锁影响性能；而悲观锁多用于”写多读少“的环境，避免频繁失败和重试影响性能。</p><ol><li>CAS概念</li></ol><p>CAS的全称是：比较并交换（Compare And Swap）。在CAS中，有这样三个值：</p><ul><li>V：要更新的变量(var)</li><li>E：预期值(expected)</li><li>N：新值(new)</li></ul><p>比较并交换的过程如下：</p><p>判断V是否等于E，如果等于，将V的值设置为N；如果不等，说明已经有其它线程更新了V，则当前线程放弃更新，什么都不做。</p><ol start="2"><li><p>Java实现CAS的原理 - Unsafe类</p></li><li><p>原子操作-AtomicInteger类</p></li><li><p>CAS实现原子操作的三大问题</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.ABA问题</span><br><span class="line">2.循环时间长开销大</span><br><span class="line">3.只能保证一个共享变量的原子操作</span><br></pre></td></tr></table></figure><h3 id="6-AQS抽象队列同步器"><a href="#6-AQS抽象队列同步器" class="headerlink" title="6.AQS抽象队列同步器"></a>6.AQS抽象队列同步器</h3><p><strong>AQS</strong>是<code>AbstractQueuedSynchronizer</code>的简称，即<code>抽象队列同步器</code>，从字面意思上理解:</p><ul><li>抽象：抽象类，只实现一些主要逻辑，有些方法由子类实现；</li><li>队列：使用先进先出（FIFO）队列存储数据；</li><li>同步：实现了同步的功能。</li></ul><p>那AQS有什么用呢？AQS是一个用来构建锁和同步器的框架，使用AQS能简单且高效地构造出应用广泛的同步器，比如我们提到的<code>ReentrantLock</code>，<code>Semaphore</code>，<code>ReentrantReadWriteLock</code>，<code>SynchronousQueue</code>，<code>FutureTask</code>等等皆是基于AQS的。</p><p>…..</p><p>…..</p><h2 id="三、JDK并发工具"><a href="#三、JDK并发工具" class="headerlink" title="三、JDK并发工具"></a>三、JDK并发工具</h2><h4 id="1-线程池-ThreadPoolExecutor"><a href="#1-线程池-ThreadPoolExecutor" class="headerlink" title="1.线程池 ThreadPoolExecutor"></a>1.线程池 <code>ThreadPoolExecutor</code></h4><p><strong>使用线程池主要有以下三个原因</strong>：</p><ol><li>创建/销毁线程需要消耗系统资源，线程池可以<strong>复用已创建的线程</strong>。</li><li><strong>控制并发的数量</strong>。并发数量过多，可能会导致资源消耗过多，从而造成服务器崩溃。（主要原因）</li><li><strong>可以对线程做统一管理</strong>。</li></ol><p><strong>四种拒绝策略</strong>：（线程数量大于最大线程数就会采用拒绝处理策略）</p><ol><li><strong><code>ThreadPoolExecutor.AbortPolicy</code><strong>：</strong>默认拒绝处理策略</strong>，丢弃任务并抛出<code>RejectedExecutionException</code>异常。</li><li>**<code>ThreadPoolExecutor.DiscardPolicy</code>**：丢弃新来的任务，但是不抛出异常。</li><li>**<code>ThreadPoolExecutor.DiscardOldestPolicy</code>**：丢弃队列头部（最旧的）的任务，然后重新尝试执行程序（如果再次失败，重复此过程）。</li><li>**<code>ThreadPoolExecutor.CallerRunsPolicy</code>**：由调用线程处理该任务。</li></ol><p><strong>四种常见线程池</strong>：</p><ol><li><code>CacheThreadPool</code> 核心线程数=0，全部是临时线程。</li><li><code>newFixedThreadPool </code> 核心线程数=最大线程数</li><li><code>newSingleThreadExecutor</code> 核心线程数=最大线程数=1</li><li><code>newScheduledThreadPool</code> 一个定长线程池</li></ol><h4 id="2-阻塞队列"><a href="#2-阻塞队列" class="headerlink" title="2.阻塞队列"></a>2.阻塞队列</h4><blockquote><p>源自生产者-消费者模式。</p><p>只管往里面存、取就行，而不用担心多线程环境下存、取共享变量的线程安全问题。</p></blockquote><ol><li><p><code>BlockingQueue</code>的操作方法</p><table><thead><tr><th align="center">方法\处理方式</th><th align="center">抛出异常</th><th align="center">返回特殊值</th><th align="center">一直阻塞</th><th align="center">超时退出</th></tr></thead><tbody><tr><td align="center">插入方法</td><td align="center">add(e)</td><td align="center">offer(e)</td><td align="center"><strong>put(e)</strong></td><td align="center">offer(e,time,unit)</td></tr><tr><td align="center">移除方法</td><td align="center">remove()</td><td align="center">poll()</td><td align="center"><strong>take()</strong></td><td align="center">poll(time,unit)</td></tr><tr><td align="center">检查方法</td><td align="center">element()</td><td align="center">peek()</td><td align="center">-</td><td align="center">-</td></tr></tbody></table></li><li><p><code>BlockingQueue</code>的实现类</p><ol><li><code>ArrayBlockingQueue</code>  由<strong>数组</strong>结构组成的<strong>有界</strong>阻塞队列。</li><li><code>LinkedBlockingQueue</code>  由<strong>链表</strong>结构组成的<strong>有界</strong>阻塞队列。</li><li><code>DelayQueue</code>  <strong>没有大小限制</strong>，只有当其指定的<strong>延迟时间</strong>到了，才能够从队列中获取到该元素 。</li><li><code>PriorityBlockingQueue</code>  优先队列，内部采用非公平锁</li><li><code>SynchronousQueue</code>   <strong>没有任何内部容量</strong>，并且每个 put 必须等待一个 take，反之亦然。</li></ol><p>对于无界队列：<strong>生产者生产数据的速度绝对不能快于消费者消费数据的速度，否则时间一长，会最终耗尽所有的可用堆内存空间。</strong></p></li><li><p>阻塞队列的原理</p></li></ol><ul><li>阻塞队列的原理很简单，利用了Lock锁的多条件（Condition）阻塞控制。</li></ul><h4 id="3-锁和接口类"><a href="#3-锁和接口类" class="headerlink" title="3.锁和接口类"></a>3.锁和接口类</h4><blockquote><p>Java原生的锁——基于对象的锁，它一般是配合synchronized关键字来使用的。</p><p>Java在<code>java.util.concurrent.locks</code>包下，还为我们提供了几个关于锁的类和接口。它们有更强大的功能或更高的性能。</p></blockquote><ol><li><h4 id="synchronized的不足："><a href="#synchronized的不足：" class="headerlink" title="synchronized的不足："></a>synchronized的不足：</h4><ul><li>无论读写，<strong>同一时间只能有一个线程执行</strong>。</li><li>无法知道线程有没有成功获取到锁</li><li>如果临界区因为IO或者sleep方法等原因阻塞了，而当前线程又没有释放锁，就会导致<strong>所有线程等待</strong>。</li></ul></li><li><h4 id="锁的几种分类："><a href="#锁的几种分类：" class="headerlink" title="锁的几种分类："></a>锁的几种分类：</h4><ol><li>可重入锁（<code>synchronized</code>、<code>ReentrantLock</code>）和 非可重入锁</li><li>公平锁与非公平锁  (<code>ReentrantLock</code>支持非公平锁和公平锁两种。)</li><li>读写锁和排它锁(<code>synchronized</code>、<code>ReentrantLock</code>）</li></ol></li><li><h4 id="JDK中有关锁的一些接口和类"><a href="#JDK中有关锁的一些接口和类" class="headerlink" title="JDK中有关锁的一些接口和类"></a>JDK中有关锁的一些接口和类</h4></li></ol><blockquote><p>JDK中关于并发的类大多都在<code>java.util.concurrent</code>（以下简称<code>juc</code>）包下。</p></blockquote><ol><li>抽象类AQS/AQLS/AOS</li><li>接口<code>Condition</code>/<code>Lock</code>/<code>ReadWriteLock</code>(读写锁)</li><li><code>ReentrantLock</code>可重入锁</li><li><code>ReentrantReadWriteLock</code>可重入读写锁</li><li><strong><code>StampedLock</code></strong> 基于无锁，性能之王</li></ol><h4 id="4-并发容器集合"><a href="#4-并发容器集合" class="headerlink" title="4.并发容器集合"></a>4.并发容器集合</h4><p>整体架构(列举常用的容器类)</p><p><img alt="整体架构" data-src="http://concurrent.redspider.group/article/03/imgs/%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8.png" class="lazyload"></p><p>大致分为：</p><ol><li>阻塞队列</li><li><code>CopyOnWrite</code>容器</li><li>并发Map、Set</li></ol><h4 id="5-CopyOnWrite"><a href="#5-CopyOnWrite" class="headerlink" title="5.CopyOnWrite"></a>5.CopyOnWrite</h4><blockquote><p><code>CopyOnWrite</code>容器即<strong>写时复制的容器</strong> ,适合读多写少,读不加锁</p></blockquote><p><code>CopyOnWrite</code>容器有<strong>数据一致性</strong>的问题，它只能保证<strong>最终数据一致性</strong>。</p><h4 id="6-通讯工具类"><a href="#6-通讯工具类" class="headerlink" title="6.通讯工具类"></a>6.通讯工具类</h4><blockquote><p>它们都在<code>java.util.concurrent</code>包下。</p></blockquote><table><thead><tr><th>类</th><th>作用</th></tr></thead><tbody><tr><td>Semaphore</td><td>限制线程的数量</td></tr><tr><td>Exchanger</td><td>两个线程交换数据</td></tr><tr><td>CountDownLatch</td><td>线程等待直到计数器减为0时开始工作</td></tr><tr><td>CyclicBarrier</td><td>作用跟CountDownLatch类似，但是可以重复使用</td></tr><tr><td>Phaser</td><td>增强的CyclicBarrier</td></tr></tbody></table><h4 id="7-Fork-Join框架"><a href="#7-Fork-Join框架" class="headerlink" title="7.Fork/Join框架"></a>7.Fork/Join框架</h4><blockquote><p><strong>分而治之</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">solve(任务):</span><br><span class="line">    if(任务已经划分到足够小):</span><br><span class="line">        顺序执行任务</span><br><span class="line">    else:</span><br><span class="line">        for(划分任务得到子任务)</span><br><span class="line">            solve(子任务)</span><br><span class="line">        结合所有子任务的结果到上一层循环</span><br><span class="line">        return 最终结合的结果</span><br></pre></td></tr></table></figure><h4 id="8-Java8-Stream并行计算原理"><a href="#8-Java8-Stream并行计算原理" class="headerlink" title="8.Java8 Stream并行计算原理"></a>8.Java8 Stream并行计算原理</h4><blockquote><p>从Java 8 开始，我们可以使用<code>Stream</code>接口以及<strong>lambda表达式</strong>进行“流式计算”。</p><p>它可以让我们对集合的操作更加简洁、更加可读、更加高效。</p><p>Stream接口有非常多用于集合计算的方法，比如判空操作empty、过滤操作filter、求最max值、查找操作findFirst和findAny等等。</p></blockquote><h4 id="9-计划任务"><a href="#9-计划任务" class="headerlink" title="9.计划任务"></a>9.计划任务</h4><blockquote><p>自JDK 1.5 开始，JDK提供了<code>ScheduledThreadPoolExecutor</code>类用于计划任务（又称定时任务）</p><p>内部使用优化的<code>DelayQueue</code>来实现</p></blockquote><p>这个类有两个用途：</p><ul><li>在给定的延迟之后运行任务</li><li>周期性重复执行任务</li></ul><hr><p>本文只是简要概括，详情查看：</p><p><a href="http://concurrent.redspider.group/">深入浅出Java多线程</a><br><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1255943750561472">廖雪峰的官网</a></p><p>《Java 并发编程的艺术》</p><p>《实战Java高并发程序设计》</p>]]></content>
      
      
      <categories>
          
          <category> java基础语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java注解</title>
      <link href="/2020/05/09/java%E6%B3%A8%E8%A7%A3/"/>
      <url>/2020/05/09/java%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>餐考资料：<br><a href="https://juejin.im/post/5b45bd715188251b3a1db54f">注解解析</a><br><a href="https://juejin.im/post/5d81a92c518825280e3e40dd">注解用途</a></p><h3 id="1-注解的实质"><a href="#1-注解的实质" class="headerlink" title="1.注解的实质"></a>1.注解的实质</h3><blockquote><p>所有的注解类型都继承自这个普通的接口（Annotation）</p></blockquote><p>如， @Override 的定义，其实它本质上就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface Override extends Annotation&#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-元注解"><a href="#2-元注解" class="headerlink" title="2.元注解"></a>2.元注解</h3><blockquote><p>『元注解』是用于修饰注解的注解，通常用在注解的定义上</p></blockquote><ul><li>@Target：注解的作用目标</li><li>@Retention：注解的生命周期</li><li>@Documented：注解是否应当被包含在 JavaDoc 文档中</li><li>@Inherited：是否允许子类继承该注解</li></ul><h5 id="Target-用于指明被修饰的注解最终可以作用的目标是谁，也就是指明，你的注解到底是用来修饰方法的？修饰类的？还是用来修饰字段属性的。"><a href="#Target-用于指明被修饰的注解最终可以作用的目标是谁，也就是指明，你的注解到底是用来修饰方法的？修饰类的？还是用来修饰字段属性的。" class="headerlink" title="@Target 用于指明被修饰的注解最终可以作用的目标是谁，也就是指明，你的注解到底是用来修饰方法的？修饰类的？还是用来修饰字段属性的。"></a>@Target 用于指明被修饰的注解最终可以作用的目标是谁，也就是指明，你的注解到底是用来修饰方法的？修饰类的？还是用来修饰字段属性的。</h5><p><img data-src="https://user-gold-cdn.xitu.io/2018/7/11/164886bda8c37809?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" class="lazyload"></p><p>我们可以通过以下的方式来为这个 value 传值：</p><blockquote><p>@Target(value = {ElementType.FIELD})</p></blockquote><p>被这个 @Target 注解修饰的注解将只能作用在成员字段上，不能用于修饰方法或者类。</p><p>其中，ElementType 是一个枚举类型，有以下一些值：</p><ul><li>ElementType.TYPE：允许被修饰的注解作用在类、接口和枚举上</li><li>ElementType.FIELD：允许作用在属性字段上</li><li>ElementType.METHOD：允许作用在方法上</li><li>ElementType.PARAMETER：允许作用在方法参数上</li><li>ElementType.CONSTRUCTOR：允许作用在构造器上</li><li>ElementType.LOCAL_VARIABLE：允许作用在本地局部变量上</li><li>ElementType.ANNOTATION_TYPE：允许作用在注解上</li><li>ElementType.PACKAGE：允许作用在包上</li></ul><h5 id="Retention-用于指明当前注解的生命周期"><a href="#Retention-用于指明当前注解的生命周期" class="headerlink" title="@Retention 用于指明当前注解的生命周期"></a>@Retention 用于指明当前注解的生命周期</h5><p><img data-src="https://user-gold-cdn.xitu.io/2018/7/11/164886bdb3a58c5f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" class="lazyload"></p><p>同样的，它也有一个 value 属性：</p><blockquote><p>@Retention(value = RetentionPolicy.RUNTIME</p></blockquote><p>RetentionPolicy 依然是一个枚举类型，它有以下几个枚举值可取：</p><ul><li>RetentionPolicy.SOURCE：当前注解编译期可见，不会写入 class 文件</li><li>RetentionPolicy.CLASS：类加载阶段丢弃，会写入 class 文件</li><li>RetentionPolicy.RUNTIME：永久保存，可以反射获取</li></ul><p>@Retention 注解指定了被修饰的注解的生命周期，</p><ol><li>是只能在编译期可见，编译后会被丢弃</li><li>会被编译器编译进 class 文件中，无论是类或是方法，乃至字段，他们都是有属性表的，而 JAVA 虚拟机也定义了几种注解属性表用于存储注解信息，但是这种可见性不能带到方法区，类加载时会予以丢弃</li><li>最后一种则是永久存在的可见性。</li></ol><h5 id="Documented-注解修饰的注解，当我们执行-JavaDoc-文档打包时会被保存进-doc-文档，反之将在打包时丢弃。"><a href="#Documented-注解修饰的注解，当我们执行-JavaDoc-文档打包时会被保存进-doc-文档，反之将在打包时丢弃。" class="headerlink" title="@Documented 注解修饰的注解，当我们执行 JavaDoc 文档打包时会被保存进 doc 文档，反之将在打包时丢弃。"></a>@Documented 注解修饰的注解，当我们执行 JavaDoc 文档打包时会被保存进 doc 文档，反之将在打包时丢弃。</h5><h5 id="Inherited-注解修饰的注解是具有可继承性的，也就说我们的注解修饰了一个类，而该类的子类将自动继承父类的该注解。"><a href="#Inherited-注解修饰的注解是具有可继承性的，也就说我们的注解修饰了一个类，而该类的子类将自动继承父类的该注解。" class="headerlink" title="@Inherited 注解修饰的注解是具有可继承性的，也就说我们的注解修饰了一个类，而该类的子类将自动继承父类的该注解。"></a>@Inherited 注解修饰的注解是具有可继承性的，也就说我们的注解修饰了一个类，而该类的子类将自动继承父类的该注解。</h5><h4 id="3-JAVA-的内置三大注解"><a href="#3-JAVA-的内置三大注解" class="headerlink" title="3.JAVA 的内置三大注解"></a>3.JAVA 的内置三大注解</h4><p>除了上述四种元注解外，JDK 还为我们预定义了另外三种注解，它们是：</p><ul><li>@Override</li><li>@Deprecated</li><li>@SuppressWarnings</li></ul><h5 id="Override-注解：该方法已被替代，它的定义如下："><a href="#Override-注解：该方法已被替代，它的定义如下：" class="headerlink" title="@Override 注解：该方法已被替代，它的定义如下："></a>@Override 注解：该方法已被替代，它的定义如下：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.METHOD)</span><br><span class="line">@Retention(RetentionPolicy.SOURCE)</span><br><span class="line">public @interface Override &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它没有任何的属性，所以并不能存储任何其他信息。它只能作用于方法之上，编译结束后将被丢弃。是一种典型的『标记式注解』，仅被编译器可知。</p><h5 id="Deprecated-：标记当前的类或者方法或者字段等已经不再被推荐使用了，可能下一次的-JDK-版本就会删除"><a href="#Deprecated-：标记当前的类或者方法或者字段等已经不再被推荐使用了，可能下一次的-JDK-版本就会删除" class="headerlink" title="@Deprecated ：标记当前的类或者方法或者字段等已经不再被推荐使用了，可能下一次的 JDK 版本就会删除"></a>@Deprecated ：标记当前的类或者方法或者字段等已经不再被推荐使用了，可能下一次的 JDK 版本就会删除</h5><p><img data-src="https://user-gold-cdn.xitu.io/2018/7/11/164886bdc54f9b3d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" class="lazyload"></p><h5 id="SuppressWarnings-主要用来压制-java-的警告，它的基本定义如下："><a href="#SuppressWarnings-主要用来压制-java-的警告，它的基本定义如下：" class="headerlink" title="@SuppressWarnings 主要用来压制 java 的警告，它的基本定义如下："></a>@SuppressWarnings 主要用来压制 java 的警告，它的基本定义如下：</h5><p><img data-src="https://user-gold-cdn.xitu.io/2018/7/11/164886bdbc0a6ae9?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" class="lazyload"><br>value 属性需要你主动的传值,这个 value 代表的就是需要被压制的警告类型。</p><h4 id="4-注解自定义及其应用"><a href="#4-注解自定义及其应用" class="headerlink" title="4.注解自定义及其应用"></a>4.注解自定义及其应用</h4><blockquote><p>只有@Retention定义为RetentionPolicy.RUNTIME时，我们才能通过注解反射获取到注解。</p></blockquote><h5 id="1-自定义一个注解"><a href="#1-自定义一个注解" class="headerlink" title="1.自定义一个注解"></a>1.自定义一个注解</h5><ol><li>自定义注解</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.FIELD)  //  注解用于字段上</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)  // 保留到运行时，可通过注解获取</span><br><span class="line">public @interface MyField &#123;</span><br><span class="line">    String description();</span><br><span class="line">    int length();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>通过反射获取注解</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class MyFieldTest &#123;</span><br><span class="line"></span><br><span class="line">    //使用我们的自定义注解</span><br><span class="line">    @MyField(description = &quot;用户名&quot;, length = 12)</span><br><span class="line">    private String username;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testMyField()&#123;</span><br><span class="line"></span><br><span class="line">        // 获取类模板</span><br><span class="line">        Class c = MyFieldTest.class;</span><br><span class="line"></span><br><span class="line">        // 获取所有字段</span><br><span class="line">        for(Field f : c.getDeclaredFields())&#123;</span><br><span class="line">            // 判断这个字段是否有MyField注解</span><br><span class="line">            if(f.isAnnotationPresent(MyField.class))&#123;</span><br><span class="line">                MyField annotation = f.getAnnotation(MyField.class);</span><br><span class="line">                System.out.println(&quot;字段:[&quot; + f.getName() + &quot;], 描述:[&quot; + annotation.description() + &quot;], 长度:[&quot; + annotation.length() +&quot;]&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-应用场景一：自定义注解-拦截器-实现登录校验"><a href="#2-应用场景一：自定义注解-拦截器-实现登录校验" class="headerlink" title="2.应用场景一：自定义注解+拦截器 实现登录校验"></a>2.应用场景一：自定义注解+拦截器 实现登录校验</h5><ol><li>我们使用springboot拦截器实现这样一个功能，如果方法上加了@LoginRequired，则提示用户该接口需要登录才能访问，否则不需要登录。 首先定义一个LoginRequired注解</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.METHOD)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">public @interface LoginRequired &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>然后写两个简单的接口，访问sourceA，sourceB资源</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class IndexController &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/sourceA&quot;)</span><br><span class="line">    public String sourceA()&#123;</span><br><span class="line">        return &quot;你正在访问sourceA资源&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/sourceB&quot;)</span><br><span class="line">    public String sourceB()&#123;</span><br><span class="line">        return &quot;你正在访问sourceB资源&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>没添加拦截器之前成功访问</li><li>实现spring的HandlerInterceptor 类先实现拦截器，但不拦截，只是简单打印日志，如下：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class SourceAccessInterceptor implements HandlerInterceptor &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;进入拦截器了&quot;);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>实现spring类WebMvcConfigurer，创建配置类把拦截器添加到拦截器链中</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class InterceptorTrainConfigurer implements WebMvcConfigurer &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void addInterceptors(InterceptorRegistry registry) &#123;</span><br><span class="line">        registry.addInterceptor(new SourceAccessInterceptor()).addPathPatterns(&quot;/**&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时拦截成功！</p><ol start="6"><li>在sourceB方法上添加我们的登录注解@LoginRequired</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class IndexController &#123;</span><br><span class="line">    @GetMapping(&quot;/sourceA&quot;)</span><br><span class="line">    public String sourceA()&#123;</span><br><span class="line">        return &quot;你正在访问sourceA资源&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    @LoginRequired</span><br><span class="line">    @GetMapping(&quot;/sourceB&quot;)</span><br><span class="line">    public String sourceB()&#123;</span><br><span class="line">        return &quot;你正在访问sourceB资源&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>简单实现登录拦截逻辑</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class="line">    System.out.println(&quot;进入拦截器了&quot;);</span><br><span class="line"></span><br><span class="line">    // 反射获取方法上的LoginRequred注解</span><br><span class="line">    HandlerMethod handlerMethod = (HandlerMethod)handler;</span><br><span class="line">    LoginRequired loginRequired = handlerMethod.getMethod().getAnnotation(LoginRequired.class);</span><br><span class="line">    if(loginRequired == null)&#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 有LoginRequired注解说明需要登录，提示用户登录</span><br><span class="line">    response.setContentType(&quot;application/json; charset=utf-8&quot;);</span><br><span class="line">    response.getWriter().print(&quot;你访问的资源需要登录&quot;);</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行成功，访问sourceB时需要登录了，访问sourceA则不用登录</p><h5 id="3-应用场景二：自定义注解-AOP-实现日志打印"><a href="#3-应用场景二：自定义注解-AOP-实现日志打印" class="headerlink" title="3.应用场景二：自定义注解+AOP 实现日志打印"></a>3.应用场景二：自定义注解+AOP 实现日志打印</h5><ol><li>先导入切面需要的依赖包</li><li>定义一个注解@MyLog</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.METHOD)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">public @interface MyLog &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>定义一个切面类，见如下代码注释理解：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">@Aspect // 1.表明这是一个切面类</span><br><span class="line">@Component</span><br><span class="line">public class MyLogAspect &#123;</span><br><span class="line"></span><br><span class="line">    // 2. PointCut表示这是一个切点，@annotation表示这个切点切到一个注解上，后面带该注解的全类名</span><br><span class="line">    // 切面最主要的就是切点，所有的故事都围绕切点发生</span><br><span class="line">    // logPointCut()代表切点名称</span><br><span class="line">    @Pointcut(&quot;@annotation(me.zebin.demo.annotationdemo.aoplog.MyLog)&quot;)</span><br><span class="line">    public void logPointCut()&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    // 3. 环绕通知</span><br><span class="line">    @Around(&quot;logPointCut()&quot;)</span><br><span class="line">    public void logAround(ProceedingJoinPoint joinPoint)&#123;</span><br><span class="line">        // 获取方法名称</span><br><span class="line">        String methodName = joinPoint.getSignature().getName();</span><br><span class="line">        // 获取入参</span><br><span class="line">        Object[] param = joinPoint.getArgs();</span><br><span class="line"></span><br><span class="line">        StringBuilder sb = new StringBuilder();</span><br><span class="line">        for(Object o : param)&#123;</span><br><span class="line">            sb.append(o + &quot;; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;进入[&quot; + methodName + &quot;]方法,参数为:&quot; + sb.toString());</span><br><span class="line"></span><br><span class="line">        // 继续执行方法</span><br><span class="line">        try &#123;</span><br><span class="line">            joinPoint.proceed();</span><br><span class="line">        &#125; catch (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(methodName + &quot;方法执行结束&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>在步骤二中的IndexController写一个sourceC进行测试，加上我们的自定义注解：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@MyLog</span><br><span class="line">@GetMapping(&quot;/sourceC/&#123;source_name&#125;&quot;)</span><br><span class="line">public String sourceC(@PathVariable(&quot;source_name&quot;) String sourceName)&#123;</span><br><span class="line">    return &quot;你正在访问sourceC资源&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>启动springboot web项目，输入访问地址</li></ol>]]></content>
      
      
      <categories>
          
          <category> java基础语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划模板</title>
      <link href="/2020/05/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%A8%A1%E6%9D%BF/"/>
      <url>/2020/05/01/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h3 id="动态规划分类："><a href="#动态规划分类：" class="headerlink" title="动态规划分类："></a>动态规划分类：</h3><ol><li>线性dp</li><li>区间dp</li><li>背包dp</li><li>树形dp</li><li>状态压缩dp</li><li>数位dp</li><li>计数型dp</li><li>递推型dp</li><li>概率型dp</li><li>博弈型dp</li><li>记忆化搜索</li></ol><h4 id="动态规划思考方式："><a href="#动态规划思考方式：" class="headerlink" title="动态规划思考方式："></a>动态规划思考方式：</h4><p><img data-src="https://pic.downk.cc/item/5ea395e3c2a9a83be5423f5e.png" class="lazyload"></p><h4 id="1-线性dp"><a href="#1-线性dp" class="headerlink" title="1.线性dp"></a>1.线性dp</h4><ul><li><p>线性 DP 问题是指递推方程具有明显的线性关系，有一维线性和二维线性。</p></li><li><p>如：</p></li></ul><ol><li><a href="https://leetcode-cn.com/problems/triangle/">三角形最小路径和</a></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public int minimumTotal(List&lt;List&lt;Integer&gt;&gt; triangle) &#123;</span><br><span class="line">    int len = triangle.size();</span><br><span class="line">    int[] dp = new int[len+1];</span><br><span class="line">    for (int i = len-1; i &gt;=0 ; i--) &#123;</span><br><span class="line">        for (int j = 0; j &lt;=i ; j++) &#123;</span><br><span class="line">            int num = triangle.get(i).get(j);</span><br><span class="line">            dp[j] = Math.min(dp[j],dp[j+1]) + num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return dp[0];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/">最长上升子序列</a></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public int lengthOfLIS(int[] nums) &#123;</span><br><span class="line">    int max = 0;</span><br><span class="line">    int[] dp = new int[nums.length];</span><br><span class="line">    for (int i = 0; i &lt; nums.length; i++) &#123;</span><br><span class="line">        int count = 0;</span><br><span class="line">        for (int j = 0; j &lt;i ; j++) &#123;</span><br><span class="line">            if(nums[j] &lt; nums[i] &amp;&amp; dp[j] &gt; count) count = dp[j];</span><br><span class="line">        &#125;</span><br><span class="line">        dp[i] = count + 1;</span><br><span class="line">        if(max &lt; dp[i]) max = dp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><a href="https://leetcode-cn.com/problems/longest-common-subsequence/">最长公共子序列</a></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public int longestCommonSubsequence(String text1, String text2) &#123;</span><br><span class="line">    int n = text1.length();</span><br><span class="line">    int m = text2.length();</span><br><span class="line">    int[][] dp = new int[n+1][m+1];</span><br><span class="line">    for (int i = 1; i &lt;=n ; i++) &#123;</span><br><span class="line">        for (int j = 1; j &lt;=m ; j++) &#123;</span><br><span class="line">            if(text1.charAt(i-1) == text2.charAt(j-1)) dp[i][j] = dp[i-1][j-1] +1;</span><br><span class="line">            else dp[i][j] = Math.max(dp[i-1][j],dp[i][j-1]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return dp[n][m];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-区间dp"><a href="#2-区间dp" class="headerlink" title="2.区间dp"></a>2.区间dp</h4><ul><li>区间DP 问题是指递推方程具有明显的区间关系，有左端点和右端点。</li><li>如：</li></ul><ol><li><a href="https://leetcode-cn.com/problems/longest-palindromic-subsequence/">最长回文子序列</a></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public static int longestPalindromeSubseq(String s) &#123;</span><br><span class="line">    int len = s.length();</span><br><span class="line">    char[] chars = s.toCharArray();</span><br><span class="line">    int[][] dp = new int[len][len];</span><br><span class="line">    for (int i = len-1; i &gt;=0; i--) dp[i][i] = 1;    //base case</span><br><span class="line">    for (int i = len-1; i &gt;=0; i--) &#123;</span><br><span class="line">        for (int j = i+1; j &lt;len ; j++) &#123;</span><br><span class="line">            if(chars[i] == chars[j]) dp[i][j] = dp[i+1][j-1]+2;</span><br><span class="line">            else dp[i][j] = Math.max(dp[i+1][j],dp[i][j-1]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return dp[0][len-1];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-背包dp"><a href="#3-背包dp" class="headerlink" title="3.背包dp"></a>3.背包dp</h4><ul><li>背包DP 问题是指递推方程具有明显的限制条件</li><li>在N中情况中 且满足某条件的 情况下 最优的选择情况</li><li>如在背包重量不超过w的情况下，从N中物品中选择出 最有价值的物品 （01背包）</li><li>详情参考 背包模板</li></ul><h4 id="4-树形dp"><a href="#4-树形dp" class="headerlink" title="4.树形dp"></a>4.树形dp</h4><ul><li>在树的结构上求解问题，大部分可以直接用递归+记忆化解决</li><li>如果有明显的递推关系，可以尝试使用递推+递归 直接消除子问题区间的重复计算 即树形dp</li><li>如：</li></ul><ol><li><a href="https://leetcode-cn.com/problems/house-robber-iii/">打家劫舍 III</a></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public int rob(TreeNode root) &#123;</span><br><span class="line">    int[] res = dfs(root);</span><br><span class="line">    return Math.max(res[0],res[1]);</span><br><span class="line">&#125;</span><br><span class="line">//0 代表不偷，1 代表偷</span><br><span class="line">public int[] dfs(TreeNode root) &#123;</span><br><span class="line">    if(root == null) return new int[]&#123;0,0&#125;;</span><br><span class="line">    int[] res = &#123;0,0&#125;;</span><br><span class="line">    int[] left = dfs(root.left);</span><br><span class="line">    int[] right = dfs(root.right);</span><br><span class="line">    res[0] = Math.max(left[0],left[1]) + Math.max(right[0],right[1]);</span><br><span class="line">    res[1] = left[0] + right[0] + root.val;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-状压dp"><a href="#5-状压dp" class="headerlink" title="5.状压dp"></a>5.状压dp</h4><h5 id="1-对于n个元素选与不选2种状态的问题（位运算）"><a href="#1-对于n个元素选与不选2种状态的问题（位运算）" class="headerlink" title="1. 对于n个元素选与不选2种状态的问题（位运算）"></a>1. 对于n个元素选与不选2种状态的问题（位运算）</h5><ul><li>用2^n表示所有状态，第i位的状态 对应二进制数 第i位是0 还是1</li></ul><p><img data-src="https://pic.downk.cc/item/5eb22c30c2a9a83be5b29bae.png" class="lazyload"></p><h5 id="2-对于n个元素k种状态的问题（幂运算或累乘）"><a href="#2-对于n个元素k种状态的问题（幂运算或累乘）" class="headerlink" title="2. 对于n个元素k种状态的问题（幂运算或累乘）"></a>2. 对于n个元素k种状态的问题（幂运算或累乘）</h5><ul><li>1.如果每种物品选择的数量是相同的 m种状态，可用m^n表示所有状态</li></ul><p><img data-src="https://pic.downk.cc/item/5eb22c30c2a9a83be5b29bae.png" class="lazyload"></p><ul><li>2.如果每种物品的选择数量不同<br>： 无论如何都要让每一种状态与一个数字一一对应</li></ul><ul><li>如：</li></ul><ol><li><a href="https://leetcode-cn.com/problems/beautiful-arrangement/">526. 优美的排列</a></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public int countArrangement(int N) &#123;</span><br><span class="line">    int dp[]=new int[1&lt;&lt;N];</span><br><span class="line">    dp[0]=1;</span><br><span class="line">    for(int i=0;i&lt;dp.length;i++)&#123;</span><br><span class="line">        int len=1;</span><br><span class="line">        for(int j=0;j&lt;N;j++)</span><br><span class="line">            len+=i&gt;&gt;j&amp;1;</span><br><span class="line">        for(int j=1;j&lt;=N;j++)&#123;</span><br><span class="line">            if((i &gt;&gt; (j - 1) &amp; 1)==0&amp;&amp; (j % len == 0 || len % j == 0)) &#123;</span><br><span class="line">                dp[i | (1 &lt;&lt; j - 1)] += dp[i];   // 或运算，进行状态转移</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return dp[(1&lt;&lt;N)-1];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-数位-DP"><a href="#6-数位-DP" class="headerlink" title="6.数位 DP"></a>6.数位 DP</h4><ul><li>给定一个闭区间[l,r]，求这个区间中满足某种条件的数的总量</li></ul><h4 id="7-计数型-DP"><a href="#7-计数型-DP" class="headerlink" title="7.计数型 DP"></a>7.计数型 DP</h4><ul><li><p>计数型DP都可以以组合数学的方法写出组合数，然后dp求组合数</p></li><li><p>如：</p></li></ul><p><a href="https://leetcode-cn.com/problems/unique-paths/">62. 不同路径 I</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static int uniquePaths(int m, int n) &#123;</span><br><span class="line">    int[][] dp = new int[m+1][n+1];</span><br><span class="line">    dp[1][1] = 1;</span><br><span class="line">    for (int i = 1; i &lt;=m ; i++) &#123;</span><br><span class="line">        for (int j = 1; j &lt;=n ; j++) &#123;</span><br><span class="line">            dp[i][j] += dp[i-1][j] + dp[i][j-1];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return dp[m][n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode-cn.com/problems/unique-paths-ii/">63. 不同路径 II</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public int uniquePathsWithObstacles(int[][] grid) &#123;</span><br><span class="line">    int[][] dp = new int[grid.length+1][grid[0].length+1];</span><br><span class="line">    if(grid[0][0] == 1) return 0;</span><br><span class="line">    dp[1][1] = 1;</span><br><span class="line">    for (int i = 1; i &lt;=grid.length ; i++) &#123;</span><br><span class="line">        for (int j = 1; j &lt;=grid[0].length ; j++) &#123;</span><br><span class="line">            if(grid[i-1][j-1] == 0) dp[i][j] += dp[i-1][j] + dp[i][j-1];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return dp[grid.length][grid[0].length];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-递推型-DP"><a href="#8-递推型-DP" class="headerlink" title="8.递推型 DP"></a>8.递推型 DP</h4><ul><li><p>所有线性递推关系都可以用矩阵快速幂做，可以O(logN)，最典型是斐波那契数列</p></li><li><p>如：</p></li></ul><p><a href="https://leetcode-cn.com/problems/climbing-stairs/">70. 爬楼梯</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> public int climbStairs(int n) &#123;</span><br><span class="line">    int tmp = 0;</span><br><span class="line">    int a = 1;</span><br><span class="line">    int b = 2;</span><br><span class="line">    if(n == 1) tmp = 1;</span><br><span class="line">    if(n == 2) tmp = 2;    </span><br><span class="line">    for(int i=3;i&lt;=n;i++)&#123;</span><br><span class="line">        tmp = a+b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = tmp;     </span><br><span class="line">    &#125;</span><br><span class="line">    return tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-概率型-DP"><a href="#9-概率型-DP" class="headerlink" title="9.概率型 DP"></a>9.概率型 DP</h4><ul><li><p>给定一些的事件及其发生的概率问在某个条件下发生的概率 且这些事件之间有递推关系</p></li><li><p>看似可以用dfs也能用dp，但要注意概率型问题都有一个精度边界</p></li></ul><ul><li>如：</li></ul><p><a href="https://leetcode-cn.com/problems/soup-servings/">808. 分汤</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public double soupServings(int N) &#123;</span><br><span class="line">    if(N&gt;=4800) return 1.0;</span><br><span class="line">    int n = (int) Math.ceil(N/25.0);</span><br><span class="line">    double[][] dp = new double[n+1][n+1];</span><br><span class="line">    dp[0][0] = 0.5;</span><br><span class="line">    for (int i = 1; i &lt;= n ; i++) &#123;</span><br><span class="line">        dp[i][0] = 0;</span><br><span class="line">        dp[0][i] = 1;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = 1; i &lt;= n; ++i)&#123;</span><br><span class="line">        int a1 = i - 4 &gt; 0 ? i - 4 : 0;//不足4，按4算（实际上是不足100，按100算，然后分配完了，没有剩余）</span><br><span class="line">        int a2 = i - 3 &gt; 0 ? i - 3 : 0;//不足3，按3算（实际上是不足75，按75算，然后分配完了，没有剩余）</span><br><span class="line">        int a3 = i - 2 &gt; 0 ? i - 2 : 0;//不足2，按2算（实际上是不足50，按75算，然后分配完了，没有剩余）</span><br><span class="line">        int a4 = i - 1 &gt; 0 ? i - 1 : 0;//不足1，按1算（实际上是不足25，按25算，然后分配完了，没有剩余）</span><br><span class="line">        for(int j = 1; j &lt;= n; ++j) &#123;</span><br><span class="line">            int b1 = j;</span><br><span class="line">            int b2 = j - 1 &gt; 0 ? j - 1 : 0;//不足1，按1算（实际上是不足25，按25算，然后分配完了，没有剩余）</span><br><span class="line">            int b3 = j - 2 &gt; 0 ? j - 2 : 0;//不足2，按2算（实际上是不足50，按75算，然后分配完了，没有剩余）</span><br><span class="line">            int b4 = j - 3 &gt; 0 ? j - 3 : 0;//不足3，按3算（实际上是不足75，按75算，然后分配完了，没有剩余）</span><br><span class="line">            //状态转移方程：dp[i][j] = 0.25 * (dp[i-100][j] + dp[i-75][j-25] + dp[i-50][j-50] + dp[i-75][j-25])</span><br><span class="line">            //将N缩小为原来的25分之一的转移方程：dp[i][j] = 0.25 * (dp[i-4][j] + dp[i-3][j-1] + dp[i-2][j-2] + dp[i-3][j-1])</span><br><span class="line">            dp[i][j]= 0.25 * (dp[a1][b1] + dp[a2][b2] + dp[a3][b3] + dp[a4][b4]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return dp[n][n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dfs解法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">static Map&lt;String,Double&gt; map;</span><br><span class="line">public double soupServings(int N) &#123;</span><br><span class="line">    if(N&gt;=4800) return 1;</span><br><span class="line">    map = new HashMap&lt;&gt;();</span><br><span class="line">    int n = (int) Math.ceil(N/25.0);</span><br><span class="line">    return dfs(n,n);</span><br><span class="line">&#125;</span><br><span class="line">public static double dfs(int i,int j)&#123;</span><br><span class="line">    if(i&lt;=0 &amp;&amp; j&lt;=0) return 0.5;</span><br><span class="line">    else if(i&lt;=0 &amp;&amp; j&gt;0) return 1;</span><br><span class="line">    else if(i&gt;0 &amp;&amp; j&lt;=0) return 0;</span><br><span class="line">    else if(map.containsKey(i + &quot; &quot; + j)) return map.get(i + &quot; &quot; + j);</span><br><span class="line">    else&#123;</span><br><span class="line">        double sum = 0.25*(dfs(i-4,j)+dfs(i-3,j-1)+</span><br><span class="line">                dfs(i-2,j-2)+dfs(i-1,j-3));</span><br><span class="line">        map.put(i + &quot; &quot; + j,sum);</span><br><span class="line">        return sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode-cn.com/problems/new-21-game/">837. 新21点</a><br>反向递推</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public double new21Game(int N, int K, int W) &#123;</span><br><span class="line">    double[] dp = new double[N+W+1];</span><br><span class="line">    for (int i = K; i &lt;=N ; i++) dp[i] = 1;</span><br><span class="line">    double sum = 0;</span><br><span class="line">    for (int i = 0; i &lt;W ; i++) sum += dp[K+i];</span><br><span class="line">    for (int i = K-1; i &gt;=0 ; i--) &#123;</span><br><span class="line">        dp[i] = sum/W;</span><br><span class="line">        sum += dp[i] - dp[i+W];</span><br><span class="line">    &#125;</span><br><span class="line">    return dp[0];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面待更新….</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯模板</title>
      <link href="/2020/04/25/%E5%9B%9E%E6%BA%AF%E6%A8%A1%E6%9D%BF/"/>
      <url>/2020/04/25/%E5%9B%9E%E6%BA%AF%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">result = []</span><br><span class="line">def backtrack(路径, 选择列表):</span><br><span class="line">    if 满足结束条件:</span><br><span class="line">        result.add(路径)</span><br><span class="line">        return</span><br><span class="line">    </span><br><span class="line">    for 选择 in 选择列表:</span><br><span class="line">        做选择</span><br><span class="line">        backtrack(路径, 选择列表)</span><br><span class="line">        撤销选择</span><br></pre></td></tr></table></figure><p>如LeetCode第46题，<a href="https://leetcode-cn.com/problems/permutations/comments/">全排列</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">static List&lt;List&lt;Integer&gt;&gt; res;</span><br><span class="line">public List&lt;List&lt;Integer&gt;&gt; permute(int[] nums) &#123;</span><br><span class="line">    res = new ArrayList&lt;&gt;();</span><br><span class="line">    dfs(nums,new ArrayList&lt;&gt;(),new boolean[nums.length]);</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line">public static void dfs(int[] nums,List&lt;Integer&gt; tmp,boolean[] visd)&#123;</span><br><span class="line">    if(tmp.size()== nums.length) &#123;</span><br><span class="line">        res.add(new ArrayList&lt;&gt;(tmp));</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = 0; i &lt;nums.length ; i++) &#123;</span><br><span class="line">        if(visd[i]) continue;</span><br><span class="line">        visd[i] = true;     // 标记 去重</span><br><span class="line">        tmp.add(nums[i]);</span><br><span class="line">        dfs(nums,tmp,visd);</span><br><span class="line">        visd[i] = false;    // 解除标记，恢复现场</span><br><span class="line">        tmp.remove(tmp.size()-1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot定时任务@Scheduled</title>
      <link href="/2019/12/26/Springboot%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-Scheduled/"/>
      <url>/2019/12/26/Springboot%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-Scheduled/</url>
      
        <content type="html"><![CDATA[<h2 id="Springboot定时任务-Scheduled"><a href="#Springboot定时任务-Scheduled" class="headerlink" title="Springboot定时任务@Scheduled"></a>Springboot定时任务@Scheduled</h2><ul><li>项目开发中经常需要执行一些定时任务，比如在每天凌晨，需要汇总分析处理一些数据 后存入到 MySQL 数据库中。</li></ul><h3 id="Java-定时任务的几种实现方式"><a href="#Java-定时任务的几种实现方式" class="headerlink" title="Java 定时任务的几种实现方式"></a>Java 定时任务的几种实现方式</h3><ul><li>基于 java.util.Timer 定时器，实现类似闹钟的定时任务</li><li>使用 Quartz、elastic-job、xxl-job 等开源第三方定时任务框架，适合分布式项目应用</li><li>使用 Spring 提供的一个注解： @Schedule，开发简单，使用比较方便，也是本文介绍的一种方式</li></ul><h3 id="创建定时任务"><a href="#创建定时任务" class="headerlink" title="创建定时任务"></a>创建定时任务</h3><ol><li>首先，在项目启动类上添加 @EnableScheduling 注解，开启对定时任务的支持</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableScheduling</span><br><span class="line">public class ScheduledApplication &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(ScheduledApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>其次，编写定时任务类和方法，定时任务类通过 Spring IOC 加载，使用 @Component 注解，定时方法使用 @Scheduled 注解。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class ScheduledTask &#123;</span><br><span class="line">    @Scheduled(fixedRate = 3000)</span><br><span class="line">    public void scheduledTask() &#123;</span><br><span class="line">        System.out.println(&quot;任务执行时间：&quot; + LocalDateTime.now());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>fixedRate 是 long 类型，表示任务执行的间隔毫秒数，以上代码中的定时任务每 3 秒执行一次。</li></ul><h3 id="Scheduled详解"><a href="#Scheduled详解" class="headerlink" title="@Scheduled详解"></a>@Scheduled详解</h3><p>在上面的入门例子中，使用了@Scheduled(fixedRate = 3000) 注解来定义每过 3 秒执行的任务，对于 @Scheduled 的使用可以总结如下几种方式：</p><ul><li>@Scheduled(fixedRate = 3000) ：上一次开始执行时间点之后 3 秒再执行（fixedRate 属性：定时任务开始后再次执行定时任务的延时（需等待上次定时任务完成），单位毫秒）</li><li>@Scheduled(fixedDelay = 3000) ：上一次执行完毕时间点之后 3 秒再执行（fixedDelay 属性：定时任务执行完成后再次执行定时任务的延时（需等待上次定时任务完成），单位毫秒）</li><li>@Scheduled(initialDelay = 1000, fixedRate = 3000) ：第一次延迟1秒后执行，之后按fixedRate的规则每 3 秒执行一次（initialDelay 属性：第一次执行定时任务的延迟时间，需配合fixedDelay或者fixedRate来使用）</li><li>@Scheduled(cron=”0 0 2 1 * ? *”) ：通过cron表达式定义规则</li></ul><p>其中，常用的cron表达式有：</p><ul><li>0 0 2 1 * ? * ：表示在每月 1 日的凌晨 2 点执行</li><li>0 15 10 ? * MON-FRI ：表示周一到周五每天上午 10:15 执行</li><li>0 15 10 ? 6L 2019-2020 ：表示 2019-2020 年的每个月的最后一个星期五上午 10:15 执行</li><li>0 0 10,14,16 * * ? ：每天上午 10 点，下午 2 点，4 点执行</li><li>0 0/30 9-17 * * ? ：朝九晚五工作时间内每半小时执行</li><li>0 0 12 ? * WED ：表示每个星期三中午 12 点执行</li><li>0 0 12 * * ? ：每天中午 12点执行</li><li>0 15 10 ? * * ：每天上午 10:15 执行</li><li>0 15 10 * * ? ：每天上午 10:15 执行</li><li>0 15 10 * * ? * ：每天上午 10:15 执行</li><li>0 15 10 * * ? 2019 ：2019 年的每天上午 10:15 执行</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文主要介绍了基于 Spring Boot 内置的定时任务的配置使用，主要涉及两个注解，四个属性的配置：</p><ul><li>主程序入口 @EnableScheduling 开启定时任务</li><li>定时方法上 @Scheduled 设置定时</li><li>cron属性：按cron规则执行</li><li>fixedRate 属性：以固定速率执行</li><li>fixedDelay 属性：上次执行完毕后延迟再执行</li><li>initialDelay 属性：第一次延时执行，第一次执行完毕后延迟后再次执行</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 定时任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot整合异步邮件服务</title>
      <link href="/2019/12/26/Springboot%E6%95%B4%E5%90%88%E5%BC%82%E6%AD%A5%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1/"/>
      <url>/2019/12/26/Springboot%E6%95%B4%E5%90%88%E5%BC%82%E6%AD%A5%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="Springboot整合异步邮件服务"><a href="#Springboot整合异步邮件服务" class="headerlink" title="Springboot整合异步邮件服务"></a>Springboot整合异步邮件服务</h2><ul><li>在很多场景都需要使用到用户和系统的其他交互如：验证码。。。此时可以选择短信或者邮件的形式，但是短信业务需要收费，所以我们就近选择邮件服务</li></ul><h3 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--spring boot mail 集成jar--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="2-配置邮件服务"><a href="#2-配置邮件服务" class="headerlink" title="2.配置邮件服务"></a>2.配置邮件服务</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 邮件设置</span><br><span class="line">spring:</span><br><span class="line">  mail:</span><br><span class="line">    host: smtp.qq.com</span><br><span class="line">    username: 1447250889@qq.com # 邮箱账号</span><br><span class="line">    password: dsadadasdada    # 授权码（在邮箱开启pop3和smtp后会给你）</span><br><span class="line">    properties:</span><br><span class="line">      mail:</span><br><span class="line">        smtp:</span><br><span class="line">          auth: true</span><br><span class="line">          starttls:</span><br><span class="line">            enable: true</span><br><span class="line">            required: true</span><br><span class="line"># 邮箱信息</span><br><span class="line">mail:</span><br><span class="line">  fromMail:</span><br><span class="line">    addr: 1447250889@qq.com</span><br></pre></td></tr></table></figure><h3 id="3-邮箱工具类"><a href="#3-邮箱工具类" class="headerlink" title="3.邮箱工具类"></a>3.邮箱工具类</h3><ul><li>提供各种邮件服务：纯文本邮件，html邮件…</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line">package kid1999.upload.utils;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class="line">import org.springframework.core.io.FileSystemResource;</span><br><span class="line">import org.springframework.mail.SimpleMailMessage;</span><br><span class="line">import org.springframework.mail.javamail.JavaMailSender;</span><br><span class="line">import org.springframework.mail.javamail.MimeMessageHelper;</span><br><span class="line">import org.springframework.scheduling.annotation.Async;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import javax.mail.MessagingException;</span><br><span class="line">import javax.mail.internet.MimeMessage;</span><br><span class="line">import java.io.File;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kid1999</span><br><span class="line"> * @title: MailUtil</span><br><span class="line"> * @date 2019/12/22 15:32</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">@Slf4j</span><br><span class="line">public class MailUtil &#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private JavaMailSender mailSender;</span><br><span class="line"></span><br><span class="line">// 注入常量</span><br><span class="line">@Value(&quot;$&#123;mail.fromMail.addr&#125;&quot;)</span><br><span class="line">private String from;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 发送文本邮件</span><br><span class="line"> * @param toAddr</span><br><span class="line"> * @param title</span><br><span class="line"> * @param content</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@Async(&quot;taskExecutor&quot;)</span><br><span class="line">public void sendTextMail(String toAddr, String title, String content) &#123;</span><br><span class="line">// 纯文本邮件对象</span><br><span class="line">SimpleMailMessage message = new SimpleMailMessage();</span><br><span class="line">message.setFrom(from);</span><br><span class="line">message.setTo(toAddr);</span><br><span class="line">message.setSubject(title);</span><br><span class="line">message.setText(content);</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">mailSender.send(message);</span><br><span class="line">log.info(&quot;Text邮件已经发送。&quot;);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">log.error(&quot;发送Text邮件时发生异常！&quot;, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 发送html邮件</span><br><span class="line"> * @param toAddr</span><br><span class="line"> * @param title</span><br><span class="line"> * @param content</span><br><span class="line"> */</span><br><span class="line">@Async(&quot;taskExecutor&quot;)</span><br><span class="line">public void sendHtmlMail(String toAddr, String title, String content) &#123;</span><br><span class="line">// html 邮件对象</span><br><span class="line">MimeMessage message = mailSender.createMimeMessage();</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">//true表示需要创建一个multipart message</span><br><span class="line">MimeMessageHelper helper = new MimeMessageHelper(message, true);</span><br><span class="line">helper.setFrom(from);</span><br><span class="line">helper.setTo(toAddr);</span><br><span class="line">helper.setSubject(title);</span><br><span class="line">helper.setText(content, true);</span><br><span class="line"></span><br><span class="line">mailSender.send(message);</span><br><span class="line">log.info(&quot;html邮件发送成功&quot;);</span><br><span class="line">&#125; catch (MessagingException e) &#123;</span><br><span class="line">log.error(&quot;发送html邮件时发生异常！&quot;, e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 发送带附件的邮件</span><br><span class="line"> * @param toAddr</span><br><span class="line"> * @param title</span><br><span class="line"> * @param content</span><br><span class="line"> * @param filePath</span><br><span class="line"> */</span><br><span class="line">@Async(&quot;taskExecutor&quot;)</span><br><span class="line">public void sendAttachmentsMail(String toAddr, String title, String content, String filePath)&#123;</span><br><span class="line">MimeMessage message = mailSender.createMimeMessage();</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">MimeMessageHelper helper = new MimeMessageHelper(message, true);</span><br><span class="line">helper.setFrom(from);</span><br><span class="line">helper.setTo(toAddr);</span><br><span class="line">helper.setSubject(title);</span><br><span class="line">helper.setText(content, true);</span><br><span class="line"></span><br><span class="line">FileSystemResource file = new FileSystemResource(new File(filePath));</span><br><span class="line">String fileName = filePath.substring(filePath.lastIndexOf(File.separator));</span><br><span class="line">helper.addAttachment(fileName, file);</span><br><span class="line">//helper.addAttachment(&quot;test&quot;+fileName, file);</span><br><span class="line"></span><br><span class="line">mailSender.send(message);</span><br><span class="line">log.info(&quot;带附件的邮件已经发送。&quot;);</span><br><span class="line">&#125; catch (MessagingException e) &#123;</span><br><span class="line">log.error(&quot;发送带附件的邮件时发生异常！&quot;, e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 发送正文中有静态资源（图片）的邮件</span><br><span class="line"> * @param toAddr</span><br><span class="line"> * @param title</span><br><span class="line"> * @param content</span><br><span class="line"> * @param rscPath</span><br><span class="line"> * @param rscId</span><br><span class="line"> */</span><br><span class="line">@Async(&quot;taskExecutor&quot;)</span><br><span class="line">public void sendInlineResourceMail(String toAddr, String title, String content, String rscPath, String rscId)&#123;</span><br><span class="line">MimeMessage message = mailSender.createMimeMessage();</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">MimeMessageHelper helper = new MimeMessageHelper(message, true);</span><br><span class="line">helper.setFrom(from);</span><br><span class="line">helper.setTo(toAddr);</span><br><span class="line">helper.setSubject(title);</span><br><span class="line">helper.setText(content, true);</span><br><span class="line"></span><br><span class="line">FileSystemResource res = new FileSystemResource(new File(rscPath));</span><br><span class="line">helper.addInline(rscId, res);</span><br><span class="line"></span><br><span class="line">mailSender.send(message);</span><br><span class="line">log.info(&quot;嵌入静态资源的邮件已经发送。&quot;);</span><br><span class="line">&#125; catch (MessagingException e) &#123;</span><br><span class="line">log.error(&quot;发送嵌入静态资源的邮件时发生异常！&quot;, e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 发送邮箱验证码</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@Async(&quot;taskExecutor&quot;)</span><br><span class="line">public void sendMailCode(String toAddr, String title, String mailCode) &#123;</span><br><span class="line">log.info(&quot;发送邮箱验证码&quot;);</span><br><span class="line">// html 邮件对象</span><br><span class="line">MimeMessage message = mailSender.createMimeMessage();</span><br><span class="line"></span><br><span class="line">String content=&quot;&lt;html&gt;\n&quot; +</span><br><span class="line">&quot;&lt;body&gt;\n&quot; +</span><br><span class="line">&quot;    &lt;h3&gt;你的验证码是：&quot;+ mailCode +&quot;&lt;/h3&gt;\n&quot; +</span><br><span class="line">&quot;&lt;/body&gt;\n&quot; +</span><br><span class="line">&quot;&lt;/html&gt;&quot;;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">//true表示需要创建一个multipart message</span><br><span class="line">MimeMessageHelper helper = new MimeMessageHelper(message, true);</span><br><span class="line">helper.setFrom(from);</span><br><span class="line">helper.setTo(toAddr);</span><br><span class="line">helper.setSubject(title);</span><br><span class="line">helper.setText(content, true);</span><br><span class="line">mailSender.send(message);</span><br><span class="line">log.info(&quot;html邮件发送成功&quot;);</span><br><span class="line">&#125; catch (MessagingException e) &#123;</span><br><span class="line">log.error(&quot;发送html邮件时发生异常！&quot;, e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-发送邮件："><a href="#4-发送邮件：" class="headerlink" title="4.发送邮件："></a>4.发送邮件：</h3><ul><li>本处以申请修改密码时，需要核对账号-邮箱，然后发送验证码到邮箱</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// 填写表单 （核对账号，邮箱）</span><br><span class="line">@PostMapping(&quot;/checktable&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">Result checkTable(HttpServletRequest request,</span><br><span class="line">                  @RequestParam(value = &quot;name&quot;) String name,</span><br><span class="line">                  @RequestParam(value = &quot;email&quot;) String email,</span><br><span class="line">                  @RequestParam(value = &quot;code&quot;) String code)&#123;</span><br><span class="line">log.info(&quot;核对账户，邮箱&quot;);</span><br><span class="line">if(checkVerificationCode(code,request))&#123;</span><br><span class="line">if(name.equals(&quot;&quot;) || email.equals(&quot;&quot;))&#123;</span><br><span class="line">return Result.fail(400,&quot;用户名或邮箱不能为空&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">User user = userService.findUserByName(name);</span><br><span class="line">if( user == null)&#123;</span><br><span class="line">return Result.fail(400,&quot;用户名不存在&quot;);</span><br><span class="line">&#125;</span><br><span class="line">if(!user.getEmail().equals(email))&#123;</span><br><span class="line">return Result.fail(400,&quot;用户，邮箱不匹配&quot;);</span><br><span class="line">&#125;</span><br><span class="line">String mailCode = RandomUtil.randomString(6);</span><br><span class="line">mailUtil.sendMailCode(email,&quot;你的验证码&quot;,mailCode);</span><br><span class="line">request.getSession().setAttribute(&quot;mailCode&quot;,mailCode);</span><br><span class="line">return Result.success(&quot;请填写邮箱验证码&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">return Result.fail(400,&quot;验证码不对&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异步事件优化"><a href="#异步事件优化" class="headerlink" title="异步事件优化"></a>异步事件优化</h2><ul><li>由于同步事件，发送邮件的时间会很长，如果使用同步，前端会得不到返回一直在等待，影响客户体验</li><li>使用异步即可修复这个问题</li></ul><h3 id="1-在springboot中配置异步线程池"><a href="#1-在springboot中配置异步线程池" class="headerlink" title="1.在springboot中配置异步线程池"></a>1.在springboot中配置异步线程池</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package kid1999.upload.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.Executor;</span><br><span class="line">import java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kid1999</span><br><span class="line"> * @title: TaskPoolConfig</span><br><span class="line"> * @date 2019/12/22 16:09</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class TaskPoolConfig &#123;</span><br><span class="line">@Bean(&quot;taskExecutor&quot;)</span><br><span class="line">public Executor taskExecutor () &#123;</span><br><span class="line">ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();</span><br><span class="line">// 核心线程数10：线程池创建时候初始化的线程数</span><br><span class="line">executor.setCorePoolSize(10);</span><br><span class="line">// 最大线程数20：线程池最大的线程数，只有在缓冲队列满了之后才会申请超过核心线程数的线程</span><br><span class="line">executor.setMaxPoolSize(15);</span><br><span class="line">// 缓冲队列200：用来缓冲执行任务的队列</span><br><span class="line">executor.setQueueCapacity(200);</span><br><span class="line">// 允许线程的空闲时间60秒：当超过了核心线程数之外的线程在空闲时间到达之后会被销毁</span><br><span class="line">executor.setKeepAliveSeconds(60);</span><br><span class="line">// 线程池名的前缀：设置好了之后可以方便定位处理任务所在的线程池</span><br><span class="line">executor.setThreadNamePrefix(&quot;taskExecutor-&quot;);</span><br><span class="line">        /*</span><br><span class="line">        线程池对拒绝任务的处理策略：这里采用了CallerRunsPolicy策略，</span><br><span class="line">        当线程池没有处理能力的时候，该策略会直接在 execute 方法的调用线程中运行被拒绝的任务；</span><br><span class="line">        如果执行程序已关闭，则会丢弃该任务</span><br><span class="line">         */</span><br><span class="line">executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line">// 设置线程池关闭的时候等待所有任务都完成再继续销毁其他的Bean</span><br><span class="line">executor.setWaitForTasksToCompleteOnShutdown(true);</span><br><span class="line">// 设置线程池中任务的等待时间，如果超过这个时候还没有销毁就强制销毁，以确保应用最后能够被关闭，而不是阻塞住。</span><br><span class="line">executor.setAwaitTerminationSeconds(600);</span><br><span class="line">return executor;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-在程序入口类添加-EnableAsync注解"><a href="#2-在程序入口类添加-EnableAsync注解" class="headerlink" title="2.在程序入口类添加 @EnableAsync注解"></a>2.在程序入口类添加 @EnableAsync注解</h3><h3 id="3-在需要异步的方法上注入-Async-“taskExecutor”-异步事件"><a href="#3-在需要异步的方法上注入-Async-“taskExecutor”-异步事件" class="headerlink" title="3.在需要异步的方法上注入 @Async(“taskExecutor”) 异步事件"></a>3.在需要异步的方法上注入 @Async(“taskExecutor”) 异步事件</h3><ul><li>此处的注解使用的 “taskExecutor” 就是我们刚才定义的 异步线程池</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 邮箱 </tag>
            
            <tag> 异步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LayUI和Springboot的基本使用</title>
      <link href="/2019/12/26/LayUI%E5%92%8CSpringboot%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/12/26/LayUI%E5%92%8CSpringboot%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="LayUI是一款非常好用的动态前端库"><a href="#LayUI是一款非常好用的动态前端库" class="headerlink" title="LayUI是一款非常好用的动态前端库"></a>LayUI是一款非常好用的动态前端库</h2><ul><li>主要提供丰富的动作组件，区别于Boostrap静态库缺乏js支持</li></ul><h3 id="1-首先聊聊前后端交互的几种方式："><a href="#1-首先聊聊前后端交互的几种方式：" class="headerlink" title="1.首先聊聊前后端交互的几种方式："></a>1.首先聊聊前后端交互的几种方式：</h3><ul><li><ol><li>前后端耦合开发，后端根据请求生成在前端模板。</li></ol></li><li><ol start="2"><li>半耦合，我现在大部分的状态，后端根据用户请求生成在前端模板，但是没有数据。前端利用ajax再获取数据填充页面。</li></ol></li><li><ol start="3"><li>前后端分离，纯RestFul风格开发。用户和前端交互，前端使用三大框架（vue,aj,react），通过http协议向后端请求数据填充页面，同时完成权限管理和用户的交互。后端只负责根据请求返回对应的数据（多用一个公用的包装类进行包装，传输json）</li></ol></li></ul><h3 id="2-所以，我们今天聊到的LayUI就是属于半耦合开发"><a href="#2-所以，我们今天聊到的LayUI就是属于半耦合开发" class="headerlink" title="2.所以，我们今天聊到的LayUI就是属于半耦合开发"></a>2.所以，我们今天聊到的LayUI就是属于半耦合开发</h3><ul><li>用户请求 –&gt; 后端渲染前端模板 –&gt; LayUI利用ajax获取数据，并填充生成页面 –&gt; 返回用户</li></ul><h2 id="使用LayUI和Springboot实现作业的显示和删除"><a href="#使用LayUI和Springboot实现作业的显示和删除" class="headerlink" title="使用LayUI和Springboot实现作业的显示和删除"></a>使用LayUI和Springboot实现作业的显示和删除</h2><h3 id="1-首先是后端返回模板："><a href="#1-首先是后端返回模板：" class="headerlink" title="1.首先是后端返回模板："></a>1.首先是后端返回模板：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 某个项目详情页面</span><br><span class="line"> * @param model</span><br><span class="line"> * @param userId</span><br><span class="line"> * @param workId</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@GetMapping(&quot;/deatils&quot;)</span><br><span class="line">String Test(Model model,</span><br><span class="line">            @RequestParam(value = &quot;userid&quot;) int userId,</span><br><span class="line">@RequestParam(value = &quot;workid&quot;) int workId)&#123;</span><br><span class="line">HomeWork homeWork = homeworkService.findUserIdByWorkId(workId);</span><br><span class="line">if(homeWork.getUserId() == userId)&#123;</span><br><span class="line">model.addAttribute(&quot;workid&quot;,workId);</span><br><span class="line">return &quot;homeworks/homeworkDetails&quot;;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">return &quot;index&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-前端初始化时，ajax获取数据"><a href="#2-前端初始化时，ajax获取数据" class="headerlink" title="2.前端初始化时，ajax获取数据"></a>2.前端初始化时，ajax获取数据</h3><ul><li>此处是LayUI自己封装的请求，默认是get请求</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;script th:inline=&quot;JavaScript&quot;&gt;</span><br><span class="line">   // 加载表</span><br><span class="line">    layui.use(&#x27;table&#x27;, function()&#123;</span><br><span class="line">        var table = layui.table;</span><br><span class="line">        // 加载表</span><br><span class="line">        table.render(&#123;</span><br><span class="line">            elem: &#x27;#test&#x27;</span><br><span class="line">            ,url:&#x27;/api/homeworks&#x27;</span><br><span class="line">            ,id: &#x27;TestId&#x27;</span><br><span class="line">            ,where: &#123;</span><br><span class="line">                userid: [[$&#123;session.user.getId()&#125;]],</span><br><span class="line">                workid: [[$&#123;workid&#125;]]</span><br><span class="line">            &#125;</span><br><span class="line">            ,title: &#x27;学生上传信息&#x27;</span><br><span class="line">            ,totalRow: true</span><br><span class="line">            ,totalRowText: &#x27;合计：&#x27;</span><br><span class="line">            ,toolbar: &#x27;#toolbarDemo&#x27;</span><br><span class="line">            ,cols: [</span><br><span class="line">                [</span><br><span class="line">                    &#123;type: &#x27;checkbox&#x27;, fixed: &#x27;left&#x27;&#125;</span><br><span class="line">                    ,&#123;field:&#x27;id&#x27;, title:&#x27;学号&#x27;,sort: true&#125;</span><br><span class="line">                    ,&#123;field:&#x27;name&#x27;, title:&#x27;姓名&#x27;&#125;</span><br><span class="line">                    ,&#123;field:&#x27;classname&#x27;, title:&#x27;班级&#x27;,sort: true&#125;</span><br><span class="line">                    ,&#123;field:&#x27;uptime&#x27;, title:&#x27;上传时间&#x27;,sort: true&#125;</span><br><span class="line">                    ,&#123;field:&#x27;filename&#x27;, title:&#x27;文件名&#x27;&#125;</span><br><span class="line">                    ,&#123;field:&#x27;filesize&#x27;, title:&#x27;文件大小(kb)&#x27;,sort: true&#125;</span><br><span class="line">                    ,&#123;fixed: &#x27;right&#x27;, align:&#x27;center&#x27;, toolbar: &#x27;#barDemo&#x27;&#125; //这里的toolbar值是模板元素的选择器</span><br><span class="line">                ]</span><br><span class="line">            ]</span><br><span class="line">            ,page: true</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        //监听头工具栏事件</span><br><span class="line">        table.on(&#x27;toolbar(test)&#x27;, function(obj)&#123;</span><br><span class="line">            var checkStatus = table.checkStatus(obj.config.id)</span><br><span class="line">                ,data = checkStatus.data; //获取选中的数据</span><br><span class="line">            switch(obj.event)&#123;</span><br><span class="line">                case &#x27;download&#x27;:</span><br><span class="line">                    console.info(data);</span><br><span class="line">                    console.info(data.length)</span><br><span class="line">                    if(data.length == 0)&#123;</span><br><span class="line">                        layer.msg(&#x27;请选择需要下载的文件！&#x27;);</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                        layer.msg(&#x27;开始下载！&#x27;);</span><br><span class="line">                        download(data);</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        //监听行工具事件</span><br><span class="line">        table.on(&#x27;tool(test)&#x27;, function(obj)&#123; //注：tool 是工具条事件名，test 是 table 原始容器的属性 lay-filter=&quot;对应的值&quot;</span><br><span class="line">            var data = obj.data //获得当前行数据</span><br><span class="line">                ,layEvent = obj.event; //获得 lay-event 对应的值</span><br><span class="line">            console.info(data);</span><br><span class="line">            if(layEvent === &#x27;detail&#x27;)&#123;</span><br><span class="line">                layer.msg(&#x27;查看操作&#x27;);</span><br><span class="line">            &#125; else if(layEvent === &#x27;del&#x27;)&#123;</span><br><span class="line">                layer.confirm(&#x27;真的删除行吗？&#x27;, function(index)&#123;</span><br><span class="line">                    obj.del(); //删除对应行（tr）的DOM结构</span><br><span class="line">                    layer.close(index);</span><br><span class="line">                    //向服务端发送删除指令</span><br><span class="line">                    deleteHomeWork(data);</span><br><span class="line">                    table.reload(&#x27;TestId&#x27;, &#123;</span><br><span class="line">                    where: &#123;</span><br><span class="line">                        userid: [[$&#123;session.user.getId()&#125;]],</span><br><span class="line">                            worktitle: [[$&#123;worktitle&#125;]],</span><br><span class="line">                            page : 1,</span><br><span class="line">                            pageSize: 10</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;); //只重载数据</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; else if(layEvent === &#x27;edit&#x27;)&#123;</span><br><span class="line">                layer.msg(&#x27;编辑操作&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="3-后端返回ajax数据，带包装"><a href="#3-后端返回ajax数据，带包装" class="headerlink" title="3.后端返回ajax数据，带包装"></a>3.后端返回ajax数据，带包装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 获取homework列表</span><br><span class="line"> */</span><br><span class="line">@GetMapping(&quot;/homeworks&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">Layui getHomeworks(@RequestParam(value = &quot;workid&quot;) String workid,</span><br><span class="line">                    @RequestParam(value = &quot;userid&quot;) int userid,</span><br><span class="line">                    @RequestParam(value = &quot;limit&quot;,defaultValue = &quot;10&quot;) int limit,</span><br><span class="line">                    @RequestParam(value = &quot;page&quot;,defaultValue = &quot;1&quot;) int page</span><br><span class="line">)&#123;</span><br><span class="line">    log.info(&quot;获取homeworks&quot;);</span><br><span class="line">    List&lt;Student&gt; students = studentService.getStudentsByWorkId(workid,page,limit);</span><br><span class="line">    return Layui.data(1,students);   // 使用包装类包装返回结果</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package kid1999.upload.utils;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @desc:  LayUI 的工具类</span><br><span class="line"> * @auther: kid1999</span><br><span class="line"> * @date: 2019/12/21 22:05</span><br><span class="line"> **/</span><br><span class="line">public class Layui extends HashMap&lt;String, Object&gt; &#123;</span><br><span class="line">    public static Layui data(Integer count, List&lt;?&gt; data)&#123;</span><br><span class="line">        Layui r = new Layui();</span><br><span class="line">        r.put(&quot;code&quot;, 0);</span><br><span class="line">        r.put(&quot;msg&quot;, &quot;&quot;);</span><br><span class="line">        r.put(&quot;count&quot;, count);</span><br><span class="line">        r.put(&quot;data&quot;, data);</span><br><span class="line">        return r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-前端解包装"><a href="#4-前端解包装" class="headerlink" title="4.前端解包装"></a>4.前端解包装</h3><ul><li>如上，安装此类包装会被LayUI自动解包：</li><li>code：0 为正确返回</li><li>msg： 信息</li><li>data：数据（核心）</li><li><h3 id="5-前端发出ajax请求"><a href="#5-前端发出ajax请求" class="headerlink" title="5.前端发出ajax请求"></a>5.前端发出ajax请求</h3></li><li>jq的ajax请求</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 删除作业</span><br><span class="line">function deleteHomeWork(data)&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: &#x27;/api/homework&#x27;,</span><br><span class="line">        type: &quot;delete&quot;,</span><br><span class="line">        async: true, // 是否异步请求（此处需这只为异步请求true，否则bootstrap的modal不会顺序显示）</span><br><span class="line">        cache: false, // 是否缓存此页面，每次都请求服务器</span><br><span class="line">        contentType: &quot;application/json&quot;, //&quot;application/x-www-form-urlencoded&quot;, // 内容编码类型，默认</span><br><span class="line">        dataType: &quot;json&quot;, // 预期服务器返回数据格式</span><br><span class="line">        timeout: 3000, // 超时时间，60s</span><br><span class="line">        data: JSON.stringify(data), // 请求参数</span><br><span class="line">        success: function(data)&#123;</span><br><span class="line">            if(data.code === 200)&#123;</span><br><span class="line">                layer.msg(data.info);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                layer.msg(data.info);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        error: function(xhr, errMsg, e)&#123;</span><br><span class="line">            console.info(JSON.stringify(data));</span><br><span class="line">            layer.msg(errMsg)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-后端返回"><a href="#6-后端返回" class="headerlink" title="6.后端返回"></a>6.后端返回</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 删除student记录</span><br><span class="line"> */</span><br><span class="line">@DeleteMapping(&quot;/homework&quot;)</span><br><span class="line">Result deleteHomeWork(@RequestBody Student student)&#123;</span><br><span class="line">    log.info(&quot;删除student记录&quot;);</span><br><span class="line">    fastDFSClientUtils.deleteFile(student.getFileurl());</span><br><span class="line">    studentService.deleteStudentById(student.getId());</span><br><span class="line">    return Result.success(&quot;删除成功&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="…-后面都类似了"><a href="#…-后面都类似了" class="headerlink" title="….后面都类似了"></a>….后面都类似了</h3><p>更多LayUI的问题参考其 <a href="https://www.layui.com/doc/">官方文档</a> 和 <a href="https://www.layui.com/demo/">示例</a></p>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LayUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot整合Kaptcha支持验证码</title>
      <link href="/2019/12/21/Springboot%E6%95%B4%E5%90%88Kaptcha%E6%94%AF%E6%8C%81%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
      <url>/2019/12/21/Springboot%E6%95%B4%E5%90%88Kaptcha%E6%94%AF%E6%8C%81%E9%AA%8C%E8%AF%81%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="Kaptcha"><a href="#Kaptcha" class="headerlink" title="Kaptcha"></a>Kaptcha</h1><ul><li>Kaptcha，是Google开源的一个可高度配置的实用验证码生成工具。</li></ul><h2 id="1-在Springboot中导入："><a href="#1-在Springboot中导入：" class="headerlink" title="1.在Springboot中导入："></a>1.在Springboot中导入：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.penggle&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;kaptcha&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.3.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="2-添加Kaptcha的配置规则"><a href="#2-添加Kaptcha的配置规则" class="headerlink" title="2.添加Kaptcha的配置规则"></a>2.添加Kaptcha的配置规则</h2><ul><li>可用xml也可以Class （此处采用Class配置）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">package kid1999.upload.config;</span><br><span class="line"></span><br><span class="line">import com.google.code.kaptcha.impl.DefaultKaptcha;</span><br><span class="line">import com.google.code.kaptcha.util.Config;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @desc:  Kaptcha 配置类</span><br><span class="line"> * @auther: kid1999</span><br><span class="line"> * @date: 2019/12/21 12:19</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class KaptchaConfig &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public DefaultKaptcha getDefaultKaptcha() &#123;</span><br><span class="line">        com.google.code.kaptcha.impl.DefaultKaptcha defaultKaptcha = new com.google.code.kaptcha.impl.DefaultKaptcha();</span><br><span class="line">        Properties properties = new Properties();</span><br><span class="line">        // 图片边框</span><br><span class="line">        properties.setProperty(&quot;kaptcha.border&quot;, &quot;yes&quot;);</span><br><span class="line">        // 边框颜色</span><br><span class="line">        properties.setProperty(&quot;kaptcha.border.color&quot;, &quot;105,179,90&quot;);</span><br><span class="line">        // 字体颜色</span><br><span class="line">        properties.setProperty(&quot;kaptcha.textproducer.font.color&quot;, &quot;red&quot;);</span><br><span class="line">        // 图片宽</span><br><span class="line">        properties.setProperty(&quot;kaptcha.image.width&quot;, &quot;120&quot;);</span><br><span class="line">        // 图片高</span><br><span class="line">        properties.setProperty(&quot;kaptcha.image.height&quot;, &quot;40&quot;);</span><br><span class="line">        // 字体大小</span><br><span class="line">        properties.setProperty(&quot;kaptcha.textproducer.font.size&quot;, &quot;30&quot;);</span><br><span class="line">        // session key</span><br><span class="line">        properties.setProperty(&quot;kaptcha.session.key&quot;, &quot;code&quot;);</span><br><span class="line">        // 验证码长度</span><br><span class="line">        properties.setProperty(&quot;kaptcha.textproducer.char.length&quot;, &quot;4&quot;);</span><br><span class="line">        // 字体</span><br><span class="line">        properties.setProperty(&quot;kaptcha.textproducer.font.names&quot;, &quot;宋体,楷体,微软雅黑&quot;);</span><br><span class="line"></span><br><span class="line">        properties.setProperty(&quot;kaptcha.noise.color&quot;, &quot;35,37,38&quot;);</span><br><span class="line"></span><br><span class="line">        Config config = new Config(properties);</span><br><span class="line">        defaultKaptcha.setConfig(config);</span><br><span class="line"></span><br><span class="line">        return defaultKaptcha;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-配置验证码的生成和核对"><a href="#3-配置验证码的生成和核对" class="headerlink" title="3.配置验证码的生成和核对"></a>3.配置验证码的生成和核对</h2><ul><li>新建一个Controller<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">package kid1999.upload.controller;</span><br><span class="line"></span><br><span class="line">import com.google.code.kaptcha.impl.DefaultKaptcha;</span><br><span class="line">import kid1999.upload.dto.Result;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line">import javax.imageio.ImageIO;</span><br><span class="line">import javax.servlet.ServletOutputStream;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import javax.servlet.http.HttpSession;</span><br><span class="line">import java.awt.image.BufferedImage;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @desc:</span><br><span class="line"> * @auther: kid1999</span><br><span class="line"> * @date: 2019/12/21 12:20</span><br><span class="line"> **/</span><br><span class="line">@Slf4j</span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/api/kaptcha&quot;)</span><br><span class="line">public class KaptchaController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    DefaultKaptcha defaultKaptcha;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 生成验证码</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/vrifyCode&quot;)</span><br><span class="line">    public ModelAndView getKaptchaImage(HttpServletRequest request, HttpServletResponse response) throws Exception &#123;</span><br><span class="line">        log.info(&quot;生成验证码&quot;);</span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        response.setDateHeader(&quot;Expires&quot;, 0);</span><br><span class="line">        response.setHeader(&quot;Cache-Control&quot;,&quot;no-store, no-cache, must-revalidate&quot;);</span><br><span class="line">        response.addHeader(&quot;Cache-Control&quot;, &quot;post-check=0, pre-check=0&quot;);</span><br><span class="line">        response.setHeader(&quot;Pragma&quot;, &quot;no-cache&quot;);</span><br><span class="line">        response.setContentType(&quot;image/jpeg&quot;);</span><br><span class="line">        // 获取KAPTCHA验证的随机文本</span><br><span class="line">        String capText = defaultKaptcha.createText();</span><br><span class="line">        // 将生成好的图片放入会话中</span><br><span class="line">        session.setAttribute(&quot;vrifyCode&quot;, capText);</span><br><span class="line">        // create the image with the text</span><br><span class="line">        BufferedImage bi = defaultKaptcha.createImage(capText);</span><br><span class="line">        ServletOutputStream out = response.getOutputStream();</span><br><span class="line">        ImageIO.write(bi, &quot;jpg&quot;, out);</span><br><span class="line">        try &#123;</span><br><span class="line">            out.flush();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            out.close();//关闭</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 校对验证码</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public Result checkVerificationCode(String vrifyCode, HttpServletRequest request) &#123;</span><br><span class="line">        String verificationCodeIn = (String) request.getSession().getAttribute(&quot;vrifyCode&quot;);</span><br><span class="line">        request.getSession().removeAttribute(&quot;vrifyCode&quot;);</span><br><span class="line">        if (StringUtils.isEmpty(verificationCodeIn) || !verificationCodeIn.equals(vrifyCode)) &#123;</span><br><span class="line">            return Result.fail(400,&quot;验证码错误，或已失效&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return Result.success(&quot;验证通过&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-前端的配置"><a href="#4-前端的配置" class="headerlink" title="4.前端的配置"></a>4.前端的配置</h2><ul><li>此处以登录的验证码为例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;input-group&quot; style=&quot;float: left;width: 195px;&quot;&gt;</span><br><span class="line">        &lt;label&gt;验证码: &lt;/label&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; name=&quot;code&quot; id=&quot;code&quot; class=&quot;form-control&quot; style=&quot;width: 150px&quot; maxlength=&quot;5&quot; placeholder=&quot;验证码&quot; autocomplete=&quot;off&quot;&gt;&amp;nbsp;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;img id=&quot;captcha-img&quot; style=&quot;width: 120px;height: 40px;display: inline-block;float: right&quot;  src=&quot;/api/kaptcha/vrifyCode&quot; onclick=&quot;this.src=&#x27;/api/kaptcha/vrifyCode?d=&#x27;+ new Date()*1&quot; title=&quot;看不清？换一张&quot; /&gt;</span><br><span class="line">    &lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="5-核对"><a href="#5-核对" class="headerlink" title="5.核对"></a>5.核对</h2><ul><li>在生成验证码图片的时候，已经将验证码写入session中了</li><li>所以此时只需要从session中获取code验证回传的code即可</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/** 验证码验证</span><br><span class="line"> */</span><br><span class="line">public Boolean checkVerificationCode(String vrifyCode, HttpServletRequest request) &#123;</span><br><span class="line">String verificationCodeIn = (String) request.getSession().getAttribute(&quot;vrifyCode&quot;);</span><br><span class="line">request.getSession().removeAttribute(&quot;vrifyCode&quot;);</span><br><span class="line">if (StringUtils.isEmpty(verificationCodeIn) || !verificationCodeIn.equals(vrifyCode)) &#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效果如下："><a href="#效果如下：" class="headerlink" title="效果如下："></a>效果如下：</h3><p><img data-src="https://pic1.superbed.cn/item/5dfdc73f76085c3289aac3a2.png" class="lazyload"></p>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kaptcha </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis,Spring与前端之间的时间格式</title>
      <link href="/2019/12/21/MyBatis-Spring%E4%B8%8E%E5%89%8D%E7%AB%AF%E4%B9%8B%E9%97%B4%E7%9A%84%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F/"/>
      <url>/2019/12/21/MyBatis-Spring%E4%B8%8E%E5%89%8D%E7%AB%AF%E4%B9%8B%E9%97%B4%E7%9A%84%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-首先是MySQL与Java的时间格式对应图"><a href="#1-首先是MySQL与Java的时间格式对应图" class="headerlink" title="1.首先是MySQL与Java的时间格式对应图"></a>1.首先是MySQL与Java的时间格式对应图</h2><p><img data-src="https://pic2.superbed.cn/item/5dfdc7fc76085c3289ab0855.png" class="lazyload"></p><h2 id="2-四种时间格式的选择"><a href="#2-四种时间格式的选择" class="headerlink" title="2.四种时间格式的选择"></a>2.四种时间格式的选择</h2><p><img data-src="https://gss0.baidu.com/9vo3dSag_xI4khGko9WTAnF6hhy/zhidao/wh%3D600%2C800/sign=312277d3a04bd1130498bf346a9f8837/cdbf6c81800a19d8458917a53efa828ba71e468c.jpg" class="lazyload"></p><ul><li>date 只有年月日</li><li>datetime 最完整 也是最占内存的</li><li>timestamp 较完整，但是最大上限是2038年</li><li>time 只表示时间</li><li>year 只表示年</li></ul><h2 id="3-在Spring中自动时间的转换"><a href="#3-在Spring中自动时间的转换" class="headerlink" title="3.在Spring中自动时间的转换"></a>3.在Spring中自动时间的转换</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package kid1999.upload.model;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line">import com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line">import com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line">import com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import org.springframework.format.annotation.DateTimeFormat;</span><br><span class="line"></span><br><span class="line">import java.sql.Timestamp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">@TableName(&quot;homework&quot;)</span><br><span class="line">public class HomeWork &#123;</span><br><span class="line"></span><br><span class="line">  @TableId(type = IdType.AUTO)    // 自增</span><br><span class="line">  private int id;</span><br><span class="line">  private String title;</span><br><span class="line">  private String infomation;</span><br><span class="line">  @DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br><span class="line">  @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;,timezone=&quot;GMT+8&quot;)</span><br><span class="line">  private Timestamp createtime;</span><br><span class="line">  @DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br><span class="line">  @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;,timezone=&quot;GMT+8&quot;)</span><br><span class="line">  private Timestamp endtime;</span><br><span class="line">  private String type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JsonFormat 负责前端和后端的转换 json &lt;-&gt; class</li><li>DateTimeFormat 负责后端与数据库的转换 class &lt;-&gt; row</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时间格式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合FastDFS</title>
      <link href="/2019/12/21/SpringBoot%E6%95%B4%E5%90%88FastDFS/"/>
      <url>/2019/12/21/SpringBoot%E6%95%B4%E5%90%88FastDFS/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-整合-FastDFS-实现文件上传打包下载"><a href="#SpringBoot-整合-FastDFS-实现文件上传打包下载" class="headerlink" title="SpringBoot 整合 FastDFS 实现文件上传打包下载"></a>SpringBoot 整合 FastDFS 实现文件上传打包下载</h1><h2 id="FastDFS"><a href="#FastDFS" class="headerlink" title="FastDFS"></a>FastDFS</h2><ul><li>FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。</li></ul><h2 id="1-FastDFS的安装"><a href="#1-FastDFS的安装" class="headerlink" title="1.FastDFS的安装"></a>1.FastDFS的安装</h2><ul><li>参照 baidu | Google</li><li>docker 安装</li></ul><h2 id="2-使用fastdfs-client操作FastDFS"><a href="#2-使用fastdfs-client操作FastDFS" class="headerlink" title="2.使用fastdfs-client操作FastDFS"></a>2.使用fastdfs-client操作FastDFS</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- fastDFS --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.tobato&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastdfs-client&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.26.7&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-io&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.6&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="3-添加FastDFS的配置"><a href="#3-添加FastDFS的配置" class="headerlink" title="3.添加FastDFS的配置"></a>3.添加FastDFS的配置</h2><ul><li>可xml 可 bean 可yaml(此处使用)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># fastDFS 配置</span><br><span class="line">fdfs:</span><br><span class="line">  soTimeout: 1500 #socket连接超时时长</span><br><span class="line">  connectTimeout: 600 #连接tracker服务器超时时长</span><br><span class="line">  resHost: 10.6.11.xxx</span><br><span class="line">  storagePort: 23000</span><br><span class="line">  thumbImage: #缩略图生成参数，可选</span><br><span class="line">    width: 150</span><br><span class="line">    height: 150</span><br><span class="line">  trackerList: #TrackerList参数,支持多个，我这里只有一个，如果有多个在下方加- x.x.x.x:port</span><br><span class="line">    - 10.16.11.xxx:22122</span><br></pre></td></tr></table></figure><h2 id="4-加载FastDFS的配置信息"><a href="#4-加载FastDFS的配置信息" class="headerlink" title="4.加载FastDFS的配置信息"></a>4.加载FastDFS的配置信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package kid1999.upload.config;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @desc:  fastDFS配置类</span><br><span class="line"> * @auther: kid1999</span><br><span class="line"> * @date: 2019/12/19 19:23</span><br><span class="line"> **/</span><br><span class="line">@Component</span><br><span class="line">@Data</span><br><span class="line">public class FastDfsConfig &#123;</span><br><span class="line">    @Value(&quot;$&#123;fdfs.resHost&#125;&quot;)</span><br><span class="line">    private String resHost;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;fdfs.storagePort&#125;&quot;)</span><br><span class="line">    private String storagePort;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-配置自己需要的FastDFS操作"><a href="#5-配置自己需要的FastDFS操作" class="headerlink" title="5.配置自己需要的FastDFS操作"></a>5.配置自己需要的FastDFS操作</h2><ul><li>如上传，下载，查看信息，删除 …</li><li><a href="https://github.com/tobato/FastDFS_Client">更多操作</a> 参考源码中的测试案例<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">package kid1999.upload.utils;</span><br><span class="line"></span><br><span class="line">import com.github.tobato.fastdfs.domain.fdfs.FileInfo;</span><br><span class="line">import com.github.tobato.fastdfs.domain.fdfs.StorePath;</span><br><span class="line">import com.github.tobato.fastdfs.domain.proto.storage.DownloadByteArray;</span><br><span class="line">import com.github.tobato.fastdfs.exception.FdfsUnsupportStorePathException;</span><br><span class="line">import com.github.tobato.fastdfs.service.FastFileStorageClient;</span><br><span class="line">import kid1999.upload.config.FastDfsConfig;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.apache.commons.io.FilenameUtils;</span><br><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kid1999</span><br><span class="line"> * @desc:</span><br><span class="line"> * @auther: kid1999</span><br><span class="line"> * @date: 2019/12/19 19:25</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">public class FastDFSClientUtils &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private FastFileStorageClient storageClient;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private FastDfsConfig appConfig;   // 项目参数配置</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 上传文件</span><br><span class="line">     * @param file 文件对象</span><br><span class="line">     * @return 文件访问地址</span><br><span class="line">     * @throws IOException</span><br><span class="line">     */</span><br><span class="line">    public String uploadFile(MultipartFile file) throws IOException &#123;</span><br><span class="line">        StorePath storePath = storageClient.uploadFile(file.getInputStream(),file.getSize(), FilenameUtils.getExtension(file.getOriginalFilename()),null);</span><br><span class="line">        return getResAccessUrl(storePath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 查询文件信息</span><br><span class="line">     * @param fileUrl</span><br><span class="line">     * @return  FileInfo 远程文件信息</span><br><span class="line">     */</span><br><span class="line">    public FileInfo getFileInfo(String fileUrl)&#123;</span><br><span class="line">        if (StringUtils.isEmpty(fileUrl)) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        StorePath storePath = StorePath.parseFromUrl(fileUrl);</span><br><span class="line">        return storageClient.queryFileInfo(storePath.getGroup(), storePath.getPath());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 删除文件</span><br><span class="line">     * @param fileUrl 文件访问地址</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public void deleteFile(String fileUrl) &#123;</span><br><span class="line">        if (StringUtils.isEmpty(fileUrl)) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            StorePath storePath = StorePath.parseFromUrl(fileUrl);</span><br><span class="line">            storageClient.deleteFile(storePath.getGroup(), storePath.getPath());</span><br><span class="line">        &#125; catch (FdfsUnsupportStorePathException e) &#123;</span><br><span class="line">            log.warn(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 下载文件</span><br><span class="line">     * @param fileUrl  文件访问地址</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public byte[] downloadFile(String fileUrl)&#123;</span><br><span class="line">        if(StringUtils.isEmpty(fileUrl))&#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            StorePath storePath = StorePath.parseFromUrl(fileUrl);</span><br><span class="line">            DownloadByteArray callback = new DownloadByteArray();</span><br><span class="line">            byte[] content = storageClient.downloadFile(storePath.getGroup(), storePath.getPath(), callback);</span><br><span class="line">            return content;</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            log.warn(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 更新文件（复写）</span><br><span class="line">     * @param file</span><br><span class="line">     * @param oldFileUrl    原文件</span><br><span class="line">     * @return  文件路径</span><br><span class="line">     * @throws IOException</span><br><span class="line">     */</span><br><span class="line">    public String updateFile(MultipartFile file,String oldFileUrl) throws IOException &#123;</span><br><span class="line">        deleteFile(oldFileUrl);</span><br><span class="line">        StorePath storePath = storageClient.uploadFile(file.getInputStream(),file.getSize(), FilenameUtils.getExtension(file.getOriginalFilename()),null);</span><br><span class="line">        return getResAccessUrl(storePath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 封装完整URL地址</span><br><span class="line">     * @param storePath</span><br><span class="line">     */</span><br><span class="line">    private String getResAccessUrl(StorePath storePath) &#123;</span><br><span class="line">        String fileUrl = &quot;http://&quot; + appConfig.getResHost()</span><br><span class="line">                + &quot;:&quot; + appConfig.getStoragePort() + &quot;/&quot; + storePath.getFullPath();</span><br><span class="line">        return fileUrl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="—–这里已经完成正常的CRUD操作—–"><a href="#—–这里已经完成正常的CRUD操作—–" class="headerlink" title="—–这里已经完成正常的CRUD操作—–"></a>—–这里已经完成正常的CRUD操作—–</h2><h2 id="—–下面是一些具体案例—–"><a href="#—–下面是一些具体案例—–" class="headerlink" title="—–下面是一些具体案例—–"></a>—–下面是一些具体案例—–</h2><h2 id="6-封装上面完成上传文件和批量打包下载"><a href="#6-封装上面完成上传文件和批量打包下载" class="headerlink" title="6.封装上面完成上传文件和批量打包下载"></a>6.封装上面完成上传文件和批量打包下载</h2><ul><li>上传文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">// 文件上传处理</span><br><span class="line">@PostMapping(&quot;/upfile&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">Result singleFileUpload(@RequestParam(&quot;file&quot;) MultipartFile file,</span><br><span class="line">                        @RequestParam(&quot;workid&quot;) int workid,</span><br><span class="line">                        @RequestParam(&quot;type&quot;) String type,</span><br><span class="line">                        @RequestParam(&quot;remarks&quot;) String remarks,</span><br><span class="line">                        @RequestParam(&quot;name&quot;) String sname,</span><br><span class="line">                        @RequestParam(&quot;studentClass&quot;) String classname,</span><br><span class="line">                        @RequestParam(&quot;studentId&quot;) String studentno,</span><br><span class="line">                        Model model,</span><br><span class="line">                        HttpServletRequest request) &#123;</span><br><span class="line"></span><br><span class="line">Result result = new Result();</span><br><span class="line">if (file.isEmpty())&#123;</span><br><span class="line">return Result.fail(400,&quot;文件不允许为空&quot;);</span><br><span class="line">&#125;</span><br><span class="line">// 获取来访页面url</span><br><span class="line">String referer = request.getHeader(&quot;referer&quot;);</span><br><span class="line">if(referer != null)&#123;</span><br><span class="line">model.addAttribute(&quot;referer&quot;,referer);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">model.addAttribute(&quot;referer&quot;,request.getHeader(&quot;host&quot;));</span><br><span class="line">&#125;</span><br><span class="line">// 文件信息处理</span><br><span class="line">String fname = file.getOriginalFilename();</span><br><span class="line">String filename = &quot;&quot;;</span><br><span class="line">//  姓名-项目名   学号-项目名   学号-姓名-项目名   班级-姓名-项目名   班级-姓名-学号-项目名</span><br><span class="line">// 处理保存的文件名</span><br><span class="line">switch (type)&#123;</span><br><span class="line">case &quot;1&quot; : filename = sname + &quot;-&quot; + fname;break;</span><br><span class="line">case &quot;2&quot; : filename = studentno + &quot;-&quot; + fname;break;</span><br><span class="line">case &quot;3&quot; : filename = studentno + &quot;-&quot; + sname + &quot;-&quot; + fname;break;</span><br><span class="line">case &quot;4&quot; : filename = classname + &quot;-&quot; + sname + &quot;-&quot; + fname;break;</span><br><span class="line">case &quot;5&quot; : filename = classname + &quot;-&quot; + sname + &quot;-&quot; + studentno + &quot;-&quot; + fname;break;</span><br><span class="line">case &quot;6&quot; : filename = sname + &quot;.&quot; + fname.substring(fname.lastIndexOf(&quot;.&quot;) + 1);break;</span><br><span class="line">case &quot;7&quot; : filename = sname + &quot;.&quot; + fname.substring(fname.lastIndexOf(&quot;.&quot;) + 1);break;</span><br><span class="line">&#125;</span><br><span class="line">log.info(sname+ &quot;--&quot; + studentno + &quot;--&quot; + filename );</span><br><span class="line">// 构造student</span><br><span class="line">Student newStudent = new Student();</span><br><span class="line">newStudent.setName(sname);</span><br><span class="line">newStudent.setClassname(classname);</span><br><span class="line">newStudent.setRemarks(remarks);</span><br><span class="line">newStudent.setUptime(new Timestamp(System.currentTimeMillis()));</span><br><span class="line">newStudent.setWorkid(workid);</span><br><span class="line">newStudent.setFilename(filename);</span><br><span class="line"></span><br><span class="line">// 先查看是否重复</span><br><span class="line">Student student = studentService.getStudentBySname(workid,sname);</span><br><span class="line"></span><br><span class="line">// 文件已提交过了</span><br><span class="line">if(student != null)&#123;</span><br><span class="line">try&#123;</span><br><span class="line">newStudent.setId(student.getId());    // 把id带走</span><br><span class="line">String fileUrl = fastDFSClientUtils.updateFile(file,student.getFileurl());//使用fastDFS写入</span><br><span class="line">newStudent.setFileurl(fileUrl);</span><br><span class="line">studentService.updateStudent(newStudent);</span><br><span class="line">return Result.success(&quot;你已经提交过了，上传成功！&quot;);</span><br><span class="line">&#125;catch (Exception e)&#123;</span><br><span class="line">return Result.fail(400,&quot;文件上传失败！&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">try&#123;</span><br><span class="line">String fileUrl = fastDFSClientUtils.uploadFile(file);</span><br><span class="line">newStudent.setFileurl(fileUrl);</span><br><span class="line">studentService.addStudent(newStudent);</span><br><span class="line">return Result.success(&quot;文件上传成功！&quot;);</span><br><span class="line">&#125;catch (Exception e)&#123;</span><br><span class="line">return Result.fail(400,&quot;文件上传失败！&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>批量打包下载</li></ul><p>封装批量打包下载工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">package kid1999.upload.utils;</span><br><span class="line"></span><br><span class="line">import kid1999.upload.dto.ZipModel;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.*;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.zip.ZipEntry;</span><br><span class="line">import java.util.zip.ZipOutputStream;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @desc:</span><br><span class="line"> * @auther: kid1999</span><br><span class="line"> * @date: 2019/12/19 20:21</span><br><span class="line"> **/</span><br><span class="line">@Component</span><br><span class="line">@Slf4j</span><br><span class="line">public class ZipUtil &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private FastDFSClientUtils fastDFSClientUtils;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 压缩文件列表中的文件</span><br><span class="line">     *</span><br><span class="line">     * @param files</span><br><span class="line">     * @param outputStream</span><br><span class="line">     * @throws IOException</span><br><span class="line">     */</span><br><span class="line">    public void zipFile(List&lt;ZipModel&gt; files, ZipOutputStream outputStream)&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            int size = files.size();</span><br><span class="line">            //压缩列表中的文件</span><br><span class="line">            for (int i = 0; i &lt; size; i++) &#123;</span><br><span class="line">                ZipModel zipModel = files.get(i);</span><br><span class="line">                zipFile(zipModel, outputStream);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将文件写入到zip文件中</span><br><span class="line">     *</span><br><span class="line">     * @param zipModel</span><br><span class="line">     * @param outputstream</span><br><span class="line">     * @throws IOException</span><br><span class="line">     */</span><br><span class="line">    public  void zipFile(ZipModel zipModel, ZipOutputStream outputstream) throws IOException &#123;</span><br><span class="line">        if (zipModel != null &amp;&amp; zipModel.getFilePath() != null &amp;&amp; zipModel.getFileName() != null) &#123;</span><br><span class="line">            log.info(zipModel.getFileName() + &quot;,被下载: &quot; + zipModel.getFilePath());</span><br><span class="line">            byte[] content = fastDFSClientUtils.downloadFile(zipModel.getFilePath());</span><br><span class="line">            InputStream bInStream = new ByteArrayInputStream(content);</span><br><span class="line">            ZipEntry entry = new ZipEntry(zipModel.getFileName());</span><br><span class="line">            outputstream.putNextEntry(entry);</span><br><span class="line">            final int MAX_BYTE = 10 * 1024 * 1024; //最大的流为10M</span><br><span class="line">            long streamTotal = 0;      //接受流的容量</span><br><span class="line">            int streamNum = 0;      //流需要分开的数量</span><br><span class="line">            int leaveByte = 0;      //文件剩下的字符数</span><br><span class="line">            byte[] inOutbyte;       //byte数组接受文件的数据</span><br><span class="line"></span><br><span class="line">            streamTotal = bInStream.available();      //通过available方法取得流的最大字符数</span><br><span class="line">            streamNum = (int) Math.floor(streamTotal / MAX_BYTE); //取得流文件需要分开的数量</span><br><span class="line">            leaveByte = (int) streamTotal % MAX_BYTE;    //分开文件之后,剩余的数量</span><br><span class="line"></span><br><span class="line">            if (streamNum &gt; 0) &#123;</span><br><span class="line">                for (int j = 0; j &lt; streamNum; ++j) &#123;</span><br><span class="line">                    inOutbyte = new byte[MAX_BYTE];</span><br><span class="line">                    //读入流,保存在byte数组</span><br><span class="line">                    bInStream.read(inOutbyte, 0, MAX_BYTE);</span><br><span class="line">                    outputstream.write(inOutbyte, 0, MAX_BYTE); //写出流</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //写出剩下的流数据</span><br><span class="line">            inOutbyte = new byte[leaveByte];</span><br><span class="line">            bInStream.read(inOutbyte, 0, leaveByte);</span><br><span class="line">            outputstream.write(inOutbyte);</span><br><span class="line">            outputstream.closeEntry();</span><br><span class="line">            bInStream.close(); //关闭</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 下载打包的文件</span><br><span class="line">     * @param file</span><br><span class="line">     * @param response</span><br><span class="line">     */</span><br><span class="line">    public void downloadZip(File file, HttpServletResponse response) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (!file.exists()) &#123;</span><br><span class="line">                file.createNewFile();</span><br><span class="line">            &#125;</span><br><span class="line">            // 以流的形式下载文件。</span><br><span class="line">            BufferedInputStream fis = new BufferedInputStream(new FileInputStream(file.getPath()));</span><br><span class="line">            byte[] buffer = new byte[fis.available()];</span><br><span class="line">            fis.read(buffer);</span><br><span class="line">            fis.close();</span><br><span class="line">            // 清空response</span><br><span class="line">            response.reset();</span><br><span class="line"></span><br><span class="line">            OutputStream toClient = new BufferedOutputStream(response.getOutputStream());</span><br><span class="line">            response.setContentType(&quot;application/octet-stream&quot;);</span><br><span class="line">            response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename=&quot; + file.getName());</span><br><span class="line">            toClient.write(buffer);</span><br><span class="line">            toClient.flush();</span><br><span class="line">            toClient.close();</span><br><span class="line">            file.delete();  //将生成的服务器端文件删除</span><br><span class="line">        &#125; catch (IOException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用批量打包下载工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">package kid1999.upload.controller;</span><br><span class="line"></span><br><span class="line">import kid1999.upload.dto.ZipModel;</span><br><span class="line">import kid1999.upload.utils.ZipUtil;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.zip.ZipOutputStream;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@Slf4j</span><br><span class="line">public class download &#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private ZipUtil zipUtil;</span><br><span class="line"></span><br><span class="line">@PostMapping(&quot;download&quot;)</span><br><span class="line">void download(HttpServletRequest request,</span><br><span class="line"> HttpServletResponse response) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">if (request.getParameterValues(&quot;filenames&quot;) == null) &#123;</span><br><span class="line">response.sendRedirect(request.getHeader(&quot;REFERER&quot;));</span><br><span class="line">&#125; else &#123;</span><br><span class="line">List&lt;ZipModel&gt; zipModelList = new ArrayList&lt;&gt;();</span><br><span class="line">String[] filenames = request.getParameterValues(&quot;filenames&quot;);</span><br><span class="line">for (int i = 0; i &lt; filenames.length; i++) &#123;</span><br><span class="line">String[] files = filenames[i].split(&quot; &quot;);</span><br><span class="line">zipModelList.add(new ZipModel(files[0], files[1]));</span><br><span class="line">&#125;</span><br><span class="line">//todo:设置打包后的文件名</span><br><span class="line">String fileName = &quot;File.zip&quot;;</span><br><span class="line">//todo:临时文件目录,用于存储打包的下载文件</span><br><span class="line">String globalUploadPath = request.getSession().getServletContext().getRealPath(&quot;/&quot;);</span><br><span class="line">String outFilePath = globalUploadPath + File.separator + fileName;</span><br><span class="line">File file = new File(outFilePath);</span><br><span class="line">//文件输出流 压缩流</span><br><span class="line">ZipOutputStream toClient = new ZipOutputStream(new FileOutputStream(file));</span><br><span class="line">//todo:调用通用方法下载fastfds文件，打包成zip文件</span><br><span class="line">zipUtil.zipFile(zipModelList, toClient);</span><br><span class="line">toClient.close();</span><br><span class="line">response.setHeader(&quot;content-disposition&quot;, &quot;attachment;fileName=&quot; + fileName);</span><br><span class="line">//todo:将zip文件下载下来</span><br><span class="line">zipUtil.downloadZip(file, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">log.error(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FastDFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>素数筛法</title>
      <link href="/2019/12/15/%E7%B4%A0%E6%95%B0%E7%AD%9B%E6%B3%95/"/>
      <url>/2019/12/15/%E7%B4%A0%E6%95%B0%E7%AD%9B%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="埃式筛法"><a href="#埃式筛法" class="headerlink" title="埃式筛法"></a>埃式筛法</h2><ul><li>O(n*logn)</li></ul><p>原理: 利用一个数组保存0-n的数据,未访问过的就是素数,每次素数从素数N开始,依次递加晒除非素数,直到最后剩下的都是素数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">埃式 筛法</span><br><span class="line">public int countPrimes(int n) &#123;</span><br><span class="line">    int res = 0;</span><br><span class="line">    boolean[] flag = new boolean[n+1];</span><br><span class="line">    for(int i=2;i&lt;n;i++)&#123;</span><br><span class="line">        if(!flag[i]) res++;</span><br><span class="line">        for(int j=2*i;j&lt;n;j+=i)&#123;</span><br><span class="line">            flag[j] = true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="欧式筛法"><a href="#欧式筛法" class="headerlink" title="欧式筛法"></a>欧式筛法</h2><ul><li>O(n)</li></ul><p>原理: 在埃式筛法的基础上排除那些重复筛选的计算.</p><p>prime数组 中的素数是递增的,当 i 能整除 prime[j]，那么 i*prime[j+1] 这个合数肯定被 prime[j] 乘以某个数筛掉。<br>因为i中含有prime[j], prime[j] 比 prime[j+1] 小。接下去的素数同理。所以不用筛下去了。<br>在满足i%prme[j]==0这个条件之前以及第一次满足改条件时,prime[j]必定是prime[j]*i的最小因子。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 欧式 筛法</span><br><span class="line"> public int countPrimes(int n) &#123;</span><br><span class="line">    byte[] check = new byte[n];//用来标记是否已经访问过了，如果访问过了就打1，没访问过打0</span><br><span class="line">    int[] primeList = new int[n]; //用来记素数</span><br><span class="line"></span><br><span class="line">    int count = 0;//用来记录素数个数</span><br><span class="line">    for(int i = 2;i&lt; n;i++) &#123;</span><br><span class="line">        if(check[i]==0) &#123;    //打了1的就不会再看了，重复赋值浪费时间</span><br><span class="line">            primeList[count++] = i; //count变量记录素数个数，数组记录已知的素数的值</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for(int j=0;j&lt;count&amp;&amp;i*primeList[j]&lt;n;j++) &#123;</span><br><span class="line">            check[i*primeList[j]] = 1; //标记 x=i*primeList[j],x位置是我访问过的位置，打1</span><br><span class="line">            if(i%primeList[j]==0) &#123;   //这一部分不好理解，比方说6，之前访问过（2,3），那么6%2==0,不用再检查6%3了，真正负责记录数据的是count变量</span><br><span class="line">                break;</span><br><span class="line">            &#125;           </span><br><span class="line">        &#125;          </span><br><span class="line">    &#125;  </span><br><span class="line">    return count;   </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="普通优化筛法"><a href="#普通优化筛法" class="headerlink" title="普通优化筛法"></a>普通优化筛法</h2><p>原理: 只用遍历到i到sqrt(n),每遇到一个质数,从 i平方 开始以 步进为i 的筛</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 普通优化 筛法    </span><br><span class="line">public int countPrimes(int n) &#123;</span><br><span class="line">    boolean[] nums = new boolean[n];</span><br><span class="line">    //只需要遍历到n的平方根</span><br><span class="line">    int sqrt = (int)Math.sqrt(n);</span><br><span class="line">    for (int i = 2; i &lt;= sqrt; i++) &#123;</span><br><span class="line">        if (!nums[i]) &#123;</span><br><span class="line">            for (int j = i * i; j &lt; n; j += i) &#123;</span><br><span class="line">                nums[j] = true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    int res = 0;</span><br><span class="line">    for (int i = 2; i &lt; n; i++) &#123;</span><br><span class="line">        if (!nums[i])&#123;</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="经过试验对比，欧式筛和普通优化的筛法拥有相似的速度，而普通优化更利于理解，所以推荐使用最后一种方法"><a href="#经过试验对比，欧式筛和普通优化的筛法拥有相似的速度，而普通优化更利于理解，所以推荐使用最后一种方法" class="headerlink" title="经过试验对比，欧式筛和普通优化的筛法拥有相似的速度，而普通优化更利于理解，所以推荐使用最后一种方法"></a>经过试验对比，欧式筛和普通优化的筛法拥有相似的速度，而普通优化更利于理解，所以推荐使用最后一种方法</h3>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 素数筛法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分模板</title>
      <link href="/2019/12/15/%E4%BA%8C%E5%88%86%E6%A8%A1%E6%9D%BF/"/>
      <url>/2019/12/15/%E4%BA%8C%E5%88%86%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="二分模板"><a href="#二分模板" class="headerlink" title="二分模板"></a>二分模板</h2><ul><li>有单调性一定可以二分，可以二分的，不一定具有单调性</li></ul><h4 id="1-整数二分模板"><a href="#1-整数二分模板" class="headerlink" title="1.整数二分模板"></a>1.整数二分模板</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">bool check(int x) &#123;/* ... */&#125; // 检查x是否满足某种性质</span><br><span class="line"></span><br><span class="line">// 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用：</span><br><span class="line">int bsearch_1(int l, int r)</span><br><span class="line">&#123;</span><br><span class="line">    while (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        int mid = l + r &gt;&gt; 1;</span><br><span class="line">        if (check(mid)) r = mid;    // check()判断mid是否满足性质</span><br><span class="line">        else l = mid + 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return l;</span><br><span class="line">&#125;</span><br><span class="line">// 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：</span><br><span class="line">int bsearch_2(int l, int r)</span><br><span class="line">&#123;</span><br><span class="line">    while (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        int mid = l + r + 1 &gt;&gt; 1;   //向右逼近时保证+1向上取整</span><br><span class="line">        if (check(mid)) l = mid;</span><br><span class="line">        else r = mid - 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 区间[l, r]被划分成[l, mid - 1]和[mid+1, r]时使用：</span><br><span class="line">int bsearch_3(int l, int r)</span><br><span class="line">&#123;</span><br><span class="line">    while(l&lt;=r)&#123;</span><br><span class="line">        int mid = l+r&gt;&gt;1;</span><br><span class="line">        if(check(mid)) return mid;</span><br><span class="line">        else if(target &gt; M.get(mid)) r = mid-1;</span><br><span class="line">        else l = mid+1;</span><br><span class="line">    &#125;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="两个模板的区别"><a href="#两个模板的区别" class="headerlink" title="两个模板的区别:"></a>两个模板的区别:</h5><p>当target==nums[mid] 时返回 r = mid; 向左逼近,返回左边界</p><p>当target==nums[mid] 时返回 l = mid; 向右逼近,返回右边界</p><h4 id="2-小数二分模板"><a href="#2-小数二分模板" class="headerlink" title="2.小数二分模板"></a>2.小数二分模板</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">bool check(double x) &#123;/* ... */&#125; // 检查x是否满足某种性质</span><br><span class="line"></span><br><span class="line">double bsearch_3(double l, double r)</span><br><span class="line">&#123;</span><br><span class="line">    const double eps = 1e-6;   // eps 表示精度，取决于题目对精度的要求</span><br><span class="line">    while (r - l &gt; eps)</span><br><span class="line">    &#123;</span><br><span class="line">        double mid = (l + r) / 2;</span><br><span class="line">        if (check(mid)) r = mid;</span><br><span class="line">        else l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    return l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h3><ul><li>搜索时可以用二分也可以用双指针</li><li>二分需要对中间值进行比较的情况</li><li>双指针需要对两个数的和进行比较的情况</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速幂</title>
      <link href="/2019/12/15/%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
      <url>/2019/12/15/%E5%BF%AB%E9%80%9F%E5%B9%82/</url>
      
        <content type="html"><![CDATA[<h4 id="1-a-b-题链接"><a href="#1-a-b-题链接" class="headerlink" title="1. a ^ b : 题链接"></a>1. a ^ b : <a href="https://www.acwing.com/problem/content/877/">题链接</a></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">a ^ b = </span><br><span class="line">a * a * a * a * a .....</span><br><span class="line">把 指数b 化作二进制  = </span><br><span class="line">a ^ 1 * a ^ 2 * a ^ 4 ....</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 例如: 求 m^k % p</span><br><span class="line">public static int qmi(int m, int k, int p)&#123;</span><br><span class="line">int res = 1, t = m;</span><br><span class="line">while(k &gt; 0)&#123;</span><br><span class="line">if( (k&amp;1) == 1)&#123;</span><br><span class="line">res = res * t % p;</span><br><span class="line">&#125;</span><br><span class="line">t = t * t % p;  //t^1 t^2 t^4 ...</span><br><span class="line">k = k&gt;&gt;1;</span><br><span class="line">&#125;</span><br><span class="line">return res % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-a-b-题链接"><a href="#2-a-b-题链接" class="headerlink" title="2. a * b : 题链接"></a>2. a * b : <a href="https://www.acwing.com/problem/content/92/">题链接</a></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a * b = </span><br><span class="line">a + a + a + a + a .....</span><br><span class="line">把 指数b 化作二进制  = </span><br><span class="line">a * 1 + a * 2 + a * 4 ....</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 例如: 求 m*k % p</span><br><span class="line">public static int qci(int m, int k, int p)&#123;</span><br><span class="line">int res = 0, t = m;</span><br><span class="line">while(k &gt; 0)&#123;</span><br><span class="line">if((b&amp;1) == 1) res = (res + t) % p;</span><br><span class="line">        t = (t * 2) % p;</span><br><span class="line">        b &gt;&gt;= 1;</span><br><span class="line">&#125;</span><br><span class="line">return res % p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速幂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背包模板</title>
      <link href="/2019/12/15/%E8%83%8C%E5%8C%85%E6%A8%A1%E6%9D%BF/"/>
      <url>/2019/12/15/%E8%83%8C%E5%8C%85%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><ol><li><p>0-1背包问题 : 对于物品而言只能选择1个或者0个两种情况(选不选)</p></li><li><p>完全背包 : 对于物品而言可以无限制选取,也可以不选</p></li><li><p>多重背包 : 对于某物品而言最多能够选择从s个,同样也可不选</p></li><li><p>混合背包 : 有些物品可以选择1,有些物品可以选择无数个,有些物品只能选择是s[i]个.即:01背包+完全背包+多重背包</p></li><li><p>二维费用背包 : 在重量的基础上增加空间的限制</p></li><li><p>分组背包:多重背包的普遍版本 一些物品捆绑在一起,每一组物品中只能选择其中的一个物品s[i]</p></li><li><p>贪心 : 对于物品只需要价值比最大,物品可分</p></li></ol><h3 id="1-0-1背包-参考"><a href="#1-0-1背包-参考" class="headerlink" title="1. 0-1背包 参考"></a>1. 0-1背包 <a href="https://www.acwing.com/problem/content/2/">参考</a></h3><p>dp 解释 : 前i个物品在空间为j的情况下的 (最值)</p><h5 id="1-朴素版"><a href="#1-朴素版" class="headerlink" title="1.朴素版"></a>1.朴素版</h5><p><code>普通0-1背包:  dp[i][j] = max(dp[i-1][j] , dp[i-1][j−w[i]] + v[i])</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line">    Scanner sc = new Scanner(System.in);</span><br><span class="line">    int w = sc.nextInt();</span><br><span class="line">    int n = sc.nextInt();</span><br><span class="line">    int[][] dp = new int[n+1][w+1];</span><br><span class="line">    int[] weight = new int[n+1];</span><br><span class="line">    int[] value = new int[n+1];</span><br><span class="line">    for (int i = 1; i &lt;=n ; i++) &#123;</span><br><span class="line">      weight[i] = sc.nextInt();</span><br><span class="line">      value[i] = sc.nextInt();</span><br><span class="line">    &#125;</span><br><span class="line">    // 若是比第i个物品在j 的空间下放不下 就取前一个物品的最大值 填充 ,若放得下 就比较放于不放 </span><br><span class="line">    for (int i = 1; i &lt;=n ; i++) &#123;</span><br><span class="line">      for (int j = 1; j &lt;=w ; j++) &#123;</span><br><span class="line">        if(weight[i] &gt; j)&#123;</span><br><span class="line">          dp[i][j] = dp[i-1][j];</span><br><span class="line">        &#125;else&#123;      //变数在这里 dp递推方程</span><br><span class="line">          int v1 = dp[i-1][j];</span><br><span class="line">          int v2 = dp[i-1][j-weight[i]] + value[i]*weight[i]; </span><br><span class="line">          dp[i][j] = Math.max(v1,v2);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(dp[n][w]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-一维空间优化版"><a href="#2-一维空间优化版" class="headerlink" title="2.一维空间优化版"></a>2.一维空间优化版</h5><p><code>空间优化0-1背包:  f[j] = max(f[j] , f[j−w[i]] + v[i])</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for (int i = 1; i &lt;= n; i++)</span><br><span class="line">for (int j = W; j &gt;= w[i]; j--)</span><br><span class="line">f[j] = max(f[j], f[j - w[i]] + v[i]);</span><br><span class="line">printf(&quot;%d\n&quot;, f[W]);</span><br></pre></td></tr></table></figure><h4 id="理解空间优化"><a href="#理解空间优化" class="headerlink" title="理解空间优化:"></a>理解空间优化:</h4><p>我们可以看到内层循环对于容量的计算是逆序的。本来之前二维的数组，是利用上一层来转移到下一层来表示每个物品最多只能拿一次。现在丢弃了一个物品维度，无法这样表示。所以可以倒序枚举空间大小，转移之前的状态都是未更新的，这样来表示每个物品只能够拿一次</p><p>当我们计算f[j]时，用到了f[j]和f[j-w[i]]，f[j]表示不拿当前的物品，f[j-w[i]]表示拿当前的物品。因为对于容量是从大到小逆序计算的，所以f[j-w[i]]是没有被更新过的，表示还没有拿当前层的物品，这样就表示每个物品最多只能拿一次。</p><p>而如果正向从小到大进行计算，f[j-w[i]]则是已经更新过的，这样就表示每个物品都能拿无数次，这样正向计算就成了完全背包。</p><h3 id="2-完全背包-参考"><a href="#2-完全背包-参考" class="headerlink" title="2.完全背包 参考"></a>2.完全背包 <a href="https://www.acwing.com/problem/content/3/">参考</a></h3><h5 id="1-朴素版-1"><a href="#1-朴素版-1" class="headerlink" title="1.朴素版"></a>1.朴素版</h5><p><code>dp[i][j] = max(dp[i-1][j] , dp[i][j−w[i]] + v[i])</code></p><p>朴素版类似上面 只是dp递推时可以是 <code>max(dp[i-1][j] , dp[i][j−w[i]] + v[i])</code> 即可以多次选择本物品</p><h5 id="2-一维空间优化版-1"><a href="#2-一维空间优化版-1" class="headerlink" title="2.一维空间优化版"></a>2.一维空间优化版</h5><p>此为洛谷1616题,求单位时间内采药价值最大<br>(运用一维优化空间)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">public class P1616 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line">int t = sc.nextInt();</span><br><span class="line">int m = sc.nextInt();</span><br><span class="line">int[] dp = new int[t+1];</span><br><span class="line">int[] weight = new int[m+1];</span><br><span class="line">int[] value = new int[m+1];</span><br><span class="line">for (int i = 1; i &lt;=m ; i++) &#123;</span><br><span class="line">weight[i] = sc.nextInt();</span><br><span class="line">value[i] = sc.nextInt();</span><br><span class="line">&#125;</span><br><span class="line">for (int i = 1; i &lt;=m ; i++) &#123;</span><br><span class="line">for (int j = weight[i]; j &lt;=t; j++) &#123;</span><br><span class="line">dp[j] = Math.max(dp[j],dp[j-weight[i]] + value[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(dp[t]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-多重背包-参考"><a href="#3-多重背包-参考" class="headerlink" title="3.多重背包 参考"></a>3.多重背包 <a href="https://www.acwing.com/problem/content/4/">参考</a></h3><ul><li>解法类似01背包 转化为0k背包<h5 id="1-朴素版-2"><a href="#1-朴素版-2" class="headerlink" title="1.朴素版"></a>1.朴素版</h5><code>dp[i][j] = max(dp[i-1][j-k*w[i]] + k*v[i]) | 0&lt;=k&lt;=n[i]</code></li></ul><ul><li>朴素版类: 在前i个物品可选，容量为j的情况下，选k个物品的最大值</li><li>即可以选择k次本物品</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        int n = sc.nextInt();</span><br><span class="line">        int v = sc.nextInt();</span><br><span class="line">        int[] weight = new int[n+1];</span><br><span class="line">        int[] values = new int[n+1];</span><br><span class="line">        int[] counts = new int[n+1];</span><br><span class="line">        for (int i = 0; i &lt;n ; i++) &#123;</span><br><span class="line">            weight[i] = sc.nextInt();</span><br><span class="line">            values[i] = sc.nextInt();</span><br><span class="line">            counts[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        int[] dp = new int[v+1];</span><br><span class="line">        for (int i = 0; i &lt;n ; i++) &#123;</span><br><span class="line">            for (int j = v; j &gt;= 0 ; j--) &#123;</span><br><span class="line">                for (int k = 1; k&lt;=counts[i] &amp;&amp; k*weight[i] &lt;= j ; k++) &#123;</span><br><span class="line">                    dp[j] = Math.max(dp[j],dp[j-k*weight[i]]+k*values[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dp[v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-二进制优化"><a href="#2-二进制优化" class="headerlink" title="2.二进制优化"></a>2.二进制优化</h5><ul><li>首先将所有k*w 单独表示成一个个重kw价值kv的物品</li><li>利用类似快速幂的思想，用k = 1,2,4,8.. + 余数可以表示取k次该物品</li><li>时间复杂度从N^3 降到N^2*logN</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        int n = sc.nextInt();</span><br><span class="line">        int w = sc.nextInt();</span><br><span class="line">        List&lt;Pair&lt;Integer,Integer&gt;&gt; goods = new ArrayList&lt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt;n ; i++) &#123;</span><br><span class="line">            int weight = sc.nextInt();</span><br><span class="line">            int value = sc.nextInt();</span><br><span class="line">            int count = sc.nextInt();</span><br><span class="line">            for (int j = 1; j &lt;=count ; j*=2) &#123;</span><br><span class="line">                count -= j;</span><br><span class="line">                goods.add(new Pair&lt;&gt;(weight*j,value*j));</span><br><span class="line">            &#125;</span><br><span class="line">            if(count &gt; 0) goods.add(new Pair&lt;&gt;(count*weight,count*value));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int[] dp = new int[w+1];</span><br><span class="line">        for (Pair&lt;Integer,Integer&gt; good:goods) &#123;</span><br><span class="line">            for (int j = w; j &gt;=good.getKey() ; j--) &#123;</span><br><span class="line">                dp[j] = Math.max(dp[j],dp[j-good.getKey()]+good.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dp[w]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-混合背包-参考"><a href="#4-混合背包-参考" class="headerlink" title="4.混合背包 参考"></a>4.混合背包 <a href="https://www.acwing.com/problem/content/7/">参考</a></h3><ul><li><p>将各种背包分类处理</p><h5 id="1-朴素版-3"><a href="#1-朴素版-3" class="headerlink" title="1.朴素版"></a>1.朴素版</h5></li><li><p>将多重背包处理为01背包</p></li><li><p>对01和完全背包分开处理</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class 混合背包 &#123;</span><br><span class="line"></span><br><span class="line">    private static class Thing&#123;</span><br><span class="line">        int kind;   // 种类</span><br><span class="line">        int weight;  // 重量</span><br><span class="line">        int value;   // 价值</span><br><span class="line">        Thing(int kind,int weight,int value)&#123;</span><br><span class="line">            this.kind = kind;</span><br><span class="line">            this.value = value;</span><br><span class="line">            this.weight = weight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        int n = sc.nextInt();</span><br><span class="line">        int w = sc.nextInt();</span><br><span class="line">        List&lt;Thing&gt; things = new ArrayList&lt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt;n ; i++) &#123;</span><br><span class="line">            int weight = sc.nextInt();</span><br><span class="line">            int value = sc.nextInt();</span><br><span class="line">            int count = sc.nextInt();</span><br><span class="line">            if(count &lt; 0) things.add(new Thing(-1,weight,value));       // 01背包</span><br><span class="line">            else if(count == 0) things.add(new Thing(0,weight,value));  // 完全背包</span><br><span class="line">            else&#123;                                                            // 多重背包</span><br><span class="line">                for (int j = 1; j &lt;=count ; j*=2) &#123;</span><br><span class="line">                    count -= j;</span><br><span class="line">                    things.add(new Thing(-1,weight*j,value*j));</span><br><span class="line">                &#125;</span><br><span class="line">                if(count &gt; 0) things.add(new Thing(-1,weight*count,value*count));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int[] dp = new int[w+1];</span><br><span class="line">        for (Thing thing:things) &#123;</span><br><span class="line">            if(thing.kind &lt; 0)&#123;</span><br><span class="line">                for (int j = w; j &gt;=thing.weight ; j--) dp[j] = Math.max(dp[j],dp[j-thing.weight]+thing.value);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                for (int j = thing.weight; j &lt;= w ; j++) dp[j] = Math.max(dp[j],dp[j-thing.weight]+thing.value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dp[w]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-二维费用背包-参考"><a href="#5-二维费用背包-参考" class="headerlink" title="5.二维费用背包 参考"></a>5.二维费用背包 <a href="https://www.acwing.com/problem/content/8/">参考</a></h3><ul><li><p>dp[i] 变为二维的 dp[i][j] 表示二维空间的容量</p><h5 id="1-朴素版-4"><a href="#1-朴素版-4" class="headerlink" title="1.朴素版"></a>1.朴素版</h5></li><li><p>和一维背包类似，只是做二维的扩展了</p></li><li><p>如本题就是在01背包的基础上做了空间的限制</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">public class 二维费用背包 &#123;</span><br><span class="line">    // 在重量的基础上 限制体积</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        int n = sc.nextInt();</span><br><span class="line">        int w = sc.nextInt();   // 重量</span><br><span class="line">        int v = sc.nextInt();   // 体积</span><br><span class="line">        int[][] dp = new int[w+1][v+1];</span><br><span class="line">        for (int i = 0; i &lt;n ; i++) &#123;</span><br><span class="line">            int weight = sc.nextInt();</span><br><span class="line">            int volume = sc.nextInt();</span><br><span class="line">            int value = sc.nextInt();</span><br><span class="line">            for (int j = w; j &gt;=weight ; j--) &#123;</span><br><span class="line">                for (int k = v; k &gt;=volume ; k--) &#123;</span><br><span class="line">                    dp[j][k] = Math.max(dp[j][k],dp[j-weight][k-volume]+value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dp[w][v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-分组背包-参考"><a href="#6-分组背包-参考" class="headerlink" title="6.分组背包 参考"></a>6.分组背包 <a href="https://www.acwing.com/problem/content/9/">参考</a></h3><ul><li>实际上也是基于01背包</li><li>是多重背包的普遍版，相当于多重背包的分解为 w…kw的物品 而分组背包就是w[0]..w[k]的物品 同组物品之间无关联</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">public class 分组背包 &#123;</span><br><span class="line">    // 在01背包的基础上 划分组</span><br><span class="line">    // 相当于 多重背包的 普遍情况</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        int n = sc.nextInt();</span><br><span class="line">        int w = sc.nextInt();</span><br><span class="line">        int[] dp = new int[w+1];</span><br><span class="line">        for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">            int len = sc.nextInt();</span><br><span class="line">            int[] weight = new int[len+1];</span><br><span class="line">            int[] values = new int[len+1];</span><br><span class="line">            for (int j = 0; j &lt;len ; j++) &#123;</span><br><span class="line">                weight[j] = sc.nextInt();</span><br><span class="line">                values[j] = sc.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">            for (int j = w; j &gt;=0 ; j--) &#123;</span><br><span class="line">                for (int k = 0; k &lt; len; k++) &#123;</span><br><span class="line">                    if(j &gt;= weight[k]) dp[j] = Math.max(dp[j],dp[j-weight[k]]+values[k]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dp[w]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 背包问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小公倍数与最大公因数</title>
      <link href="/2019/12/15/%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0%E4%B8%8E%E6%9C%80%E5%A4%A7%E5%85%AC%E5%9B%A0%E6%95%B0/"/>
      <url>/2019/12/15/%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0%E4%B8%8E%E6%9C%80%E5%A4%A7%E5%85%AC%E5%9B%A0%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="1-求两个数最大公约数"><a href="#1-求两个数最大公约数" class="headerlink" title="1.求两个数最大公约数"></a>1.求两个数最大公约数</h3><p>欧几里得算法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static int gcd(int x,int y)&#123;</span><br><span class="line">if(x&gt;y)&#123;</span><br><span class="line">int tmp = x;</span><br><span class="line">x = y;</span><br><span class="line">y = tmp;</span><br><span class="line">&#125;</span><br><span class="line">return x == 0 ? y : gcd(y%x,x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-求两个数最小公倍数"><a href="#2-求两个数最小公倍数" class="headerlink" title="2.求两个数最小公倍数"></a>2.求两个数最小公倍数</h3><p>在求的最大公约数的基础上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//求a、b的最小公倍数</span><br><span class="line">int lcm(int a, int b)&#123;</span><br><span class="line">    return a*b/gcd(a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即<br><code>lcm(a,b) * gcd(a,b) = a * b</code></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 最小公倍数-最大公因数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中国剩余定理</title>
      <link href="/2019/12/15/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/"/>
      <url>/2019/12/15/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="欧几里得算法："><a href="#欧几里得算法：" class="headerlink" title="欧几里得算法："></a>欧几里得算法：</h3><ul><li>详见最大公因数gcd 和 最小公倍数lcm</li></ul><h3 id="扩展欧几里得算法："><a href="#扩展欧几里得算法：" class="headerlink" title="扩展欧几里得算法："></a>扩展欧几里得算法：</h3><ul><li>对于不完全为 0 的非负整数 a和b，gcd（a，b）表示 a，b 的最大公约数，必然存在整数对 x，y ，使得 gcd（a，b）=ax+by。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">private static int extend_getGCD(int a, int b, int x, int y) &#123;</span><br><span class="line">int temp,ans;</span><br><span class="line">if (b == 0) &#123;</span><br><span class="line">x = 1;</span><br><span class="line">y = 0;</span><br><span class="line">return a;</span><br><span class="line">&#125;</span><br><span class="line">    ans = extend_getGCD(b, a%b, x, y); </span><br><span class="line">temp = x;</span><br><span class="line">x = y;</span><br><span class="line">y = temp - a / b * y;</span><br><span class="line">return ans;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="中国剩余定理"><a href="#中国剩余定理" class="headerlink" title="中国剩余定理"></a>中国剩余定理</h3><ul><li>也就是 给你一组同余方程，并保证两两互质 求最小的满足方程的非负整数 X</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">/**</span><br><span class="line"> * @author kid1999</span><br><span class="line"> * @title: P1495</span><br><span class="line"> * @date 2019/11/12 20:33</span><br><span class="line"> */</span><br><span class="line">public class P1495 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// 输入数据</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line">int n = sc.nextInt();</span><br><span class="line">long nums[] = new long[n+1];</span><br><span class="line">long mod[] = new long[n+1];</span><br><span class="line">for (int i = 0; i &lt;n ; i++) &#123;</span><br><span class="line">nums[i] = sc.nextInt();</span><br><span class="line">mod[i] = sc.nextInt();</span><br><span class="line">&#125;</span><br><span class="line">// 用 同余的 加法 性质 统计出 sum(ai)</span><br><span class="line">// 其中 ai = 除i以外的num相加 得lcm_num 再用lcm_num*n mod num[i] == mod[i]</span><br><span class="line">long res = 0;</span><br><span class="line">for (int i = 0; i &lt;n ; i++) &#123;</span><br><span class="line">long lcm_num = 1;</span><br><span class="line">for (int j = 0; j &lt;n ; j++) &#123;</span><br><span class="line">if(j == i) continue;</span><br><span class="line">lcm_num = lcm(lcm_num,nums[j]);</span><br><span class="line">&#125;</span><br><span class="line">int k = 1;</span><br><span class="line">while (true)&#123;</span><br><span class="line">if(lcm_num*k % nums[i] == mod[i])&#123;</span><br><span class="line">res += lcm_num*k;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 计算出 最小公倍数</span><br><span class="line">long stander = 1;</span><br><span class="line">for (int i = 0; i &lt;n ; i++) &#123;</span><br><span class="line">stander = lcm(stander,nums[i]);</span><br><span class="line">&#125;</span><br><span class="line">// 逼近最小的 结果</span><br><span class="line">while (res - stander &gt;= 0)&#123;</span><br><span class="line">res -= stander;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(res);</span><br><span class="line">&#125;</span><br><span class="line">public static long gcd(long a,long b)&#123;</span><br><span class="line">return a == 0 ? b : gcd(b%a, a);</span><br><span class="line">&#125;</span><br><span class="line">public static long lcm(long a,long b)&#123;</span><br><span class="line">return (a*b)/gcd(a,b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="相关资料："><a href="#相关资料：" class="headerlink" title="相关资料："></a>相关资料：</h3><p><a href="https://www.cnblogs.com/yefeng1627/archive/2012/12/31/2841058.html">同余线性方程组</a></p><p><a href="http://www.voidcn.com/article/p-hrgcksch-rt.html">欧几里得算法扩展</a></p><p><a href="https://www.youtube.com/watch?v=bFisuyRQEGk">来着油管的中国剩余定理讲解</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中国剩余定理 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于java的算法IO读写优化</title>
      <link href="/2019/12/15/%E5%85%B3%E4%BA%8Ejava%E7%9A%84%E7%AE%97%E6%B3%95IO%E8%AF%BB%E5%86%99%E4%BC%98%E5%8C%96/"/>
      <url>/2019/12/15/%E5%85%B3%E4%BA%8Ejava%E7%9A%84%E7%AE%97%E6%B3%95IO%E8%AF%BB%E5%86%99%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h4 id="1-普通写法"><a href="#1-普通写法" class="headerlink" title="1.普通写法"></a>1.普通写法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line">int n = sc.nextInt();</span><br></pre></td></tr></table></figure><h4 id="2-读取测试文件"><a href="#2-读取测试文件" class="headerlink" title="2.读取测试文件"></a>2.读取测试文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Scanner sc = new Scanner(new FileInputStream(&quot;path&quot;));</span><br><span class="line">int n = sc.nextInt();</span><br></pre></td></tr></table></figure><h4 id="3-bufferReader加速读写"><a href="#3-bufferReader加速读写" class="headerlink" title="3.bufferReader加速读写"></a>3.bufferReader加速读写</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BufferedReader bf = new BufferedReader(new InputStreamReader(new FileInputStream(&quot;path&quot;)));</span><br><span class="line">String s = bf.readLine();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MybatisPlus的基础使用</title>
      <link href="/2019/12/11/MybatisPlus%E7%9A%84%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/12/11/MybatisPlus%E7%9A%84%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Mybatis-Plus的基础使用"><a href="#Mybatis-Plus的基础使用" class="headerlink" title="Mybatis Plus的基础使用"></a>Mybatis Plus的基础使用</h2><ul><li>为简化开发而生</li></ul><h3 id="1-实体类的定义"><a href="#1-实体类的定义" class="headerlink" title="1.实体类的定义"></a>1.实体类的定义</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">@TableName(&quot;userswork&quot;)  // 映射表</span><br><span class="line">public class Userwork &#123;</span><br><span class="line">  @TableId(type = IdType.AUTO)  // 主键策略</span><br><span class="line">  private int id;</span><br><span class="line">  private int workid;</span><br><span class="line">  private int userid;</span><br><span class="line">  </span><br><span class="line">  @TableField(exist = false) // 列策略：是否对应表属性，查询时是否返回结果....</span><br><span class="line">  private int other;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Mapper的书写（多表查询使用SQL拼接）"><a href="#2-Mapper的书写（多表查询使用SQL拼接）" class="headerlink" title="2.Mapper的书写（多表查询使用SQL拼接）"></a>2.Mapper的书写（多表查询使用SQL拼接）</h3><ul><li>继承BaseMapper实现基本的CURD功能</li><li>简单语句可以使用自带的CRUD </li><li>复杂语句也可以使用sql语句拼接</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package kid1999.upload.mapper;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line">import kid1999.upload.model.HomeWork;</span><br><span class="line">import org.apache.ibatis.annotations.Insert;</span><br><span class="line">import org.apache.ibatis.annotations.Mapper;</span><br><span class="line">import org.apache.ibatis.annotations.Select;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Mapper</span><br><span class="line">public interface homeworkMapper extends BaseMapper&lt;HomeWork&gt; &#123;</span><br><span class="line"></span><br><span class="line">    @Select(&quot;select * from homework where title = #&#123;title&#125; and id in (select workid from userswork where userid = #&#123;userId&#125;)&quot;)</span><br><span class="line">    HomeWork findHKByTitleAndUserID(String title,int userId);</span><br><span class="line"></span><br><span class="line">    @Insert(&quot;insert into homework(title, infomation, createtime, endtime, type, addr) values (#&#123;title&#125;,#&#123;infomation&#125; ,#&#123;createtime&#125; ,#&#123;endtime&#125; ,#&#123;type&#125; ,#&#123;addr&#125; )&quot;)</span><br><span class="line">    void addHomeWork(HomeWork homeWork);</span><br><span class="line"></span><br><span class="line">    @Select(&quot;select * from homework where id in (select workid from userswork where userid = #&#123;userid&#125; ) &quot;)</span><br><span class="line">    List&lt;HomeWork&gt; findByUserId(Integer userid);</span><br><span class="line">    </span><br><span class="line">    @Select(&quot;select addr from homework where id = (select workid from student where student.id = #&#123;uid&#125;)&quot;)</span><br><span class="line">    String findaddrBySid(int uid);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    @Select(&quot;select * from homework where title = #&#123;title&#125; and id in (select workid from userwork where userid = #&#123;userId&#125;)&quot;)</span><br><span class="line">    HomeWork findHKByTitle(String title,int userId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-在Service中实现一些简单的单表CRUD"><a href="#3-在Service中实现一些简单的单表CRUD" class="headerlink" title="3.在Service中实现一些简单的单表CRUD"></a>3.在Service中实现一些简单的单表CRUD</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">package kid1999.upload.service;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line">import kid1999.upload.mapper.userMapper;</span><br><span class="line">import kid1999.upload.model.User;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class userService &#123;</span><br><span class="line"></span><br><span class="line">  @Autowired</span><br><span class="line">  private userMapper userMapper;</span><br><span class="line"></span><br><span class="line">  // 简单查询使用 QueryWrapper </span><br><span class="line">  public User findUserByName(String name) &#123;</span><br><span class="line">    QueryWrapper wrapper = new QueryWrapper();</span><br><span class="line">    wrapper.eq(&quot;name&quot;,name);</span><br><span class="line">    return userMapper.selectOne(wrapper);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 增加 使用自带的 insert</span><br><span class="line">  public int addUser(User user) &#123;</span><br><span class="line">    return userMapper.insert(user);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public User login(User user) &#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = new QueryWrapper&lt;&gt;();</span><br><span class="line">    wrapper.eq(&quot;name&quot;,user.getName())</span><br><span class="line">            .eq(&quot;password&quot;,user.getPassword());</span><br><span class="line">    return userMapper.selectOne(wrapper);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  // 更新student</span><br><span class="line">  public int updateStudent(Student student) &#123;</span><br><span class="line">QueryWrapper&lt;Student&gt; wrapper = new QueryWrapper&lt;&gt;();</span><br><span class="line">wrapper.eq(&quot;id&quot;,student.getId())</span><br><span class="line">.eq(&quot;name&quot;,student.getName());</span><br><span class="line">return studentMapper.update(student,wrapper);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后续再修订-。。。。"><a href="#后续再修订-。。。。" class="headerlink" title="后续再修订 。。。。"></a>后续再修订 。。。。</h3>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatisPlus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EasyMock的简单使用</title>
      <link href="/2019/12/10/EasyMock%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/12/10/EasyMock%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="EasyMock简单使用"><a href="#EasyMock简单使用" class="headerlink" title="EasyMock简单使用"></a>EasyMock简单使用</h2><h4 id="1-安装使用，不说了…"><a href="#1-安装使用，不说了…" class="headerlink" title="1.安装使用，不说了…"></a>1.安装使用，不说了…</h4><h4 id="2-数据随机生成规则："><a href="#2-数据随机生成规则：" class="headerlink" title="2.数据随机生成规则："></a>2.数据随机生成规则：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">&quot;cname&quot;: &quot;@cname&quot;,//中文人名</span><br><span class="line">&quot;id&quot;: &quot;@id&quot;,//生成20 位数字</span><br><span class="line">&quot;title&quot;: &quot;@ctitle&quot;,//中文title</span><br><span class="line">&quot;city&quot;: &quot;@city&quot;,//中文城市</span><br><span class="line">&quot;ip&quot;: &quot;@ip&quot;,//ip 地址</span><br><span class="line">&quot;email&quot;: &quot;@email&quot;,//email</span><br><span class="line">&quot;url&quot;: &quot;@url&quot;,//url</span><br><span class="line">&quot;cfirst&quot;: &quot;@cfirst&quot;,//姓名，姓</span><br><span class="line">&quot;clast&quot;: &quot;@clast&quot;,//姓名，名</span><br><span class="line">&quot;cword&quot;: &quot;@cword(&#x27;123456&#x27;)&quot;,//123456 从中选取一个字符</span><br><span class="line">&quot;csentence&quot;: &quot;@csentence(1,5)&quot;,//文字文段</span><br><span class="line">&quot;csentence5&quot;: &quot;@csentence(5)&quot;,//文字文段</span><br><span class="line">&quot;cparagraph&quot;: &quot;@cparagraph(1,3)&quot;,//文字文段</span><br><span class="line">&quot;string&quot;: &quot;@string(11)&quot;,//输出11 个字符长度的字符串</span><br><span class="line">&quot;float&quot;: &quot;@float(0,10)&quot;,//0 到 10 的浮点数</span><br><span class="line">&quot;int&quot;: &quot;@integer(60,70)&quot;,//60 到 70 之间的整数</span><br><span class="line">&quot;boolean&quot;: &quot;@boolean&quot;,//boolean 类型 true,false</span><br><span class="line">&quot;array|1-3&quot;: [&#123;</span><br><span class="line">&quot;id&quot;: &quot;@integer(1,10)&quot;,//整数 1到10 取整数</span><br><span class="line">&quot;name&quot;: &quot;cname&quot;</span><br><span class="line">&#125;],//数组（随机 1 到3个）</span><br><span class="line">&quot;array_sort_add|+1&quot;: [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;],//数组1，2，3轮询输出</span><br><span class="line">&quot;boolean|1-2&quot;: true,//boolean 类型 true,false</span><br><span class="line">&quot;actionType|1&quot;: [&#x27;click_url&#x27;, &#x27;open_resource_detail&#x27;, &#x27;open_resource_search&#x27;],</span><br><span class="line">&quot;payload&quot;: function() &#123;</span><br><span class="line">      var returnClickUrl = &#123;</span><br><span class="line">        &quot;linkUrl&quot;: &quot;http://tob.zhisland.com/apph5&quot;</span><br><span class="line">      &#125;;</span><br><span class="line">      var returnResourceDetail = &#123;</span><br><span class="line">        &quot;resourceId&quot;: &quot;606&quot;</span><br><span class="line">      &#125;;</span><br><span class="line">      var returnResourceSearch = &#123;</span><br><span class="line">        &quot;keyWords&quot;: &quot;&quot;,</span><br><span class="line">        &quot;tagCategory&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;tag&quot;: &quot;1&quot;</span><br><span class="line">      &#125;;</span><br><span class="line">      var s = this.actionType == &#x27;click_url&#x27; ? returnClickUrl : this.actionType == &#x27;open_resource_detail&#x27; ? returnResourceDetail : returnResourceSearch;</span><br><span class="line">      return s;</span><br><span class="line">&#125;//function 返回设置返回的数据</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EasyMock </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后端分页的简单实现</title>
      <link href="/2019/12/03/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E9%A1%B5%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/12/03/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E9%A1%B5%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前后端分页的简单实现"><a href="#前后端分页的简单实现" class="headerlink" title="前后端分页的简单实现"></a>前后端分页的简单实现</h2><ul><li>Vue.js Element-UI</li><li>SpringBoot Jpa</li></ul><p>基本效果图如下：<br><img data-src="https://ae01.alicdn.com/kf/Hbf0b27aa338e4964809bce09f3eacacch.png" class="lazyload"></p><h3 id="1-前端基于Element的分页组件"><a href="#1-前端基于Element的分页组件" class="headerlink" title="1.前端基于Element的分页组件"></a>1.前端基于Element的分页组件</h3><p>Element分页组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;block&quot; style=&quot;margin-top:15px;&quot;&gt;</span><br><span class="line">      &lt;el-pagination align=&#x27;center&#x27;</span><br><span class="line">      @current-change=&quot;handleCurrentChange&quot; // 改变页码时触发的方法，还有很多其他的触发事件</span><br><span class="line">      :current-page=&quot;currentPage&quot;   // 当前页</span><br><span class="line">      :page-size=&quot;pageSize&quot;         // 分页大小</span><br><span class="line">      layout=&quot;total, prev, pager, next&quot;     // 分页条的功能(主题) 可定制</span><br><span class="line">      :total=&quot;total&quot;&gt;   // 元素总数量</span><br><span class="line">      &lt;/el-pagination&gt;   </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>定义数据参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tableData:[],  // 元素列表</span><br><span class="line">currentPage: 1, // 当前页码</span><br><span class="line">total: 0,  // 总条数</span><br><span class="line">pageSize: 10,   // 每页的数据条数</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>请求后端数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// get page</span><br><span class="line">to_getPage()&#123;</span><br><span class="line">    var self = this;</span><br><span class="line">    this.$axios.get(&quot;/member?currentPage=&quot; + self.currentPage + &quot;&amp;pageSize=&quot; + self.pageSize).then((response)=&gt;&#123;</span><br><span class="line">        let data = response.data;</span><br><span class="line">        console.info(data);</span><br><span class="line">        self.tableData = data.content;</span><br><span class="line">        self.total = data.totalElements;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="2-后端基于Jpa的简单分页方法"><a href="#2-后端基于Jpa的简单分页方法" class="headerlink" title="2.后端基于Jpa的简单分页方法"></a>2.后端基于Jpa的简单分页方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;/member&quot;)</span><br><span class="line">Page&lt;Member&gt; getmembers(Integer pageSize,</span><br><span class="line">Integer currentPage)&#123;</span><br><span class="line">// 生成一个分页器，包括当前页，大小，排序规则</span><br><span class="line">Pageable pageable = PageRequest.of(currentPage,pageSize,Sort.by(&quot;memId&quot;));</span><br><span class="line">return memberRepository.findAll(pageable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-更多关于Jpa分页的步骤知识点："><a href="#3-更多关于Jpa分页的步骤知识点：" class="headerlink" title="3.更多关于Jpa分页的步骤知识点："></a>3.更多关于Jpa分页的步骤知识点：</h3><ol><li>创建实体类</li><li>定义Repository并继承<code>PagingAndSortingRepository</code>或其子类 如：<code>JpaRepository</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 相应约定好的分页方法就送上门来了</span><br><span class="line">public interface ArticleRepository extends PagingAndSortingRepository&lt;Article,Long&gt; &#123;</span><br><span class="line">     //查询article表的所有数据，传入Pageable分页参数，不需要自己写SQL</span><br><span class="line">    Page&lt;Article&gt; findAll(Pageable pageable);</span><br><span class="line">    //根据author字段查询article表数据，传入Pageable分页参数，不需要自己写SQL</span><br><span class="line">    Page&lt;Article&gt; findByAuthor(String author, Pageable pageable);</span><br><span class="line">    //根据author字段和title字段，查询article表数据，传入Pageable分页参数，不需要自己写SQL</span><br><span class="line">    Slice&lt;Article&gt; findByAuthorAndTitle(String author, String title, Pageable pageable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>生成分页器 实现分页</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 查询第一页(从0开始)的数据，每页10条数据</span><br><span class="line">Pageable pageable = PageRequest.of(0, 10);   //第一页</span><br><span class="line">//Pageable pageable = PageRequest.of(1, 10);  //第二页</span><br><span class="line">//Pageable pageable = PageRequest.of(2, 10);  // 第三页</span><br><span class="line">//数据库操作获取查询结果</span><br><span class="line">Page&lt;Article&gt; articlePage = articleRepository.findAll(pageable);</span><br><span class="line">//将查询结果转换为List</span><br><span class="line">List&lt;Article&gt; articleList = articlePage.getContent();</span><br></pre></td></tr></table></figure><ol start="4"><li>实现排序</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 简单排序</span><br><span class="line">articleRepository.findAll(Sort.by(&quot;createTime&quot;));</span><br><span class="line"></span><br><span class="line">// 复合排序</span><br><span class="line">articleRepository.findAll(Sort.by(&quot;author&quot;).ascending()</span><br><span class="line">                        .and(Sort.by(&quot;createTime&quot;).descending()));</span><br><span class="line"></span><br><span class="line">// 分页排序</span><br><span class="line">Pageable pageable = PageRequest.of(0, 10,Sort.by(&quot;createTime&quot;));</span><br></pre></td></tr></table></figure><ol start="5"><li>关于分页器的返回对象Page<obj>继承自Slice，这里介绍一些方法内容</obj></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">List &lt;T&gt;  getContent（）; //获取元素数组</span><br><span class="line"></span><br><span class="line">Pageable  getPageable（）; //当前切片的分页信息</span><br><span class="line"></span><br><span class="line">boolean  hasContent（）; //是否有查询结果？</span><br><span class="line"></span><br><span class="line">boolean  isFirst（）;  //是否是第一个切片</span><br><span class="line"></span><br><span class="line">boolean  isLast（）;  //是否是最后一个切片</span><br><span class="line"></span><br><span class="line">Pageable nextPageable(); // 下一个切片的分页信息</span><br><span class="line"></span><br><span class="line">Pageable previousPageable(); // 上一个切片的分页信息</span><br></pre></td></tr></table></figure><ol start="6"><li>Page的方法</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//总页数</span><br><span class="line">int getTotalPages();</span><br><span class="line"></span><br><span class="line">//总数据条数</span><br><span class="line">long getTotalElements();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JPA </tag>
            
            <tag> Element-UI </tag>
            
            <tag> Axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后端通讯实测</title>
      <link href="/2019/12/03/%E5%89%8D%E5%90%8E%E7%AB%AF%E9%80%9A%E8%AE%AF%E5%AE%9E%E6%B5%8B/"/>
      <url>/2019/12/03/%E5%89%8D%E5%90%8E%E7%AB%AF%E9%80%9A%E8%AE%AF%E5%AE%9E%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="前后端通讯实测"><a href="#前后端通讯实测" class="headerlink" title="前后端通讯实测"></a>前后端通讯实测</h1><h2 id="以Vue-js为代表的前端"><a href="#以Vue-js为代表的前端" class="headerlink" title="以Vue.js为代表的前端"></a>以Vue.js为代表的前端</h2><h4 id="1-基于axios的请求"><a href="#1-基于axios的请求" class="headerlink" title="1.基于axios的请求"></a>1.基于axios的请求</h4><ul><li>在main.js中配置默认请求地址：<code>axios.defaults.baseURL = &#39;http://localhost:9999/&#39;;</code></li><li>在main.js中配置全局使用axios：<code>Vue.prototype.$axios = axios;</code></li></ul><h2 id="以Springboot为代表的后端"><a href="#以Springboot为代表的后端" class="headerlink" title="以Springboot为代表的后端"></a>以Springboot为代表的后端</h2><h4 id="1-配置跨域允许"><a href="#1-配置跨域允许" class="headerlink" title="1.配置跨域允许"></a>1.配置跨域允许</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package io.kid19999.backstage.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.web.cors.CorsConfiguration;</span><br><span class="line">import org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span><br><span class="line">import org.springframework.web.filter.CorsFilter;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class CorsConfig &#123;</span><br><span class="line">  private CorsConfiguration buildConfig() &#123;</span><br><span class="line">    CorsConfiguration corsConfiguration = new CorsConfiguration();</span><br><span class="line">    corsConfiguration.addAllowedOrigin(&quot;*&quot;); // 1允许任何域名使用</span><br><span class="line">    corsConfiguration.addAllowedHeader(&quot;*&quot;); // 2允许任何头</span><br><span class="line">    corsConfiguration.addAllowedMethod(&quot;*&quot;); // 3允许任何方法（post、get等）</span><br><span class="line">    return corsConfiguration;</span><br><span class="line">  &#125;</span><br><span class="line">  @Bean</span><br><span class="line">  public CorsFilter corsFilter() &#123;</span><br><span class="line">    UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();</span><br><span class="line">    source.registerCorsConfiguration(&quot;/**&quot;, buildConfig()); // 4</span><br><span class="line">    return new CorsFilter(source);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="综合测试："><a href="#综合测试：" class="headerlink" title="综合测试："></a>综合测试：</h2><h4 id="素材准备："><a href="#素材准备：" class="headerlink" title="素材准备："></a>素材准备：</h4><ul><li>前端 对象</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">        data:&#123;&#x27;adminId&#x27;:&#x27;kid&#x27;,&#x27;adminPwd&#x27;:&#x27;132456456&#x27;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>后端 对象<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import lombok.Data;</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">public class Login &#123;</span><br><span class="line">  private String adminId;</span><br><span class="line">  private String adminPwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-POST测试："><a href="#1-POST测试：" class="headerlink" title="1.POST测试："></a>1.POST测试：</h3><ul><li>基于对象的传输：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">前端： </span><br><span class="line">putObj()&#123;</span><br><span class="line">    var self = this;</span><br><span class="line">    this.$axios.put(&#x27;/test&#x27;, self.data).then(function (response) &#123;</span><br><span class="line">        console.info(self.data);</span><br><span class="line">        console.log(response.data);</span><br><span class="line">    &#125;).catch(function (error) &#123;</span><br><span class="line">        console.error(&quot;请求错误！&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">后端：</span><br><span class="line">post请求，如果是接收json格式（要求传输参数是json(application/json;charset=utf-8)，接收参数要是一个参数或者是一个对象并且参数前加上@RequestBody注解）；如果是表单提交(application/x-www-form-urlencoded)，接收参数没有要求即可以是对象也可以是多个参数的接收方式</span><br><span class="line">@PutMapping(&quot;/test&quot;)</span><br><span class="line">Result putObj(@RequestBody Login login)&#123;</span><br><span class="line">System.out.println(login);</span><br><span class="line">Result result = new Result();</span><br><span class="line">result.setStatusCode(1);</span><br><span class="line">result.setInfo(&quot;put obj success&quot;);</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>基于表单的传输：</li><li>基于 FormData 填充（Content-Type: multipart/form-data）协议<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">前端： </span><br><span class="line">postForm()&#123;</span><br><span class="line">    var self = this;</span><br><span class="line">    let data = new FormData();</span><br><span class="line">    data.append(&#x27;adminId&#x27;,&#x27;kid&#x27;);</span><br><span class="line">    data.append(&#x27;adminPwd&#x27;,&#x27;132456456&#x27;);</span><br><span class="line">    this.$axios.post(&#x27;/test2&#x27;, data).then(function (response) &#123;</span><br><span class="line">        console.info(self.data);</span><br><span class="line">        console.log(response.data);</span><br><span class="line">    &#125;).catch(function (error) &#123;</span><br><span class="line">        console.error(&quot;请求错误！&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">后端：</span><br><span class="line">@PostMapping(&quot;/test2&quot;)</span><br><span class="line">Result postForm(@RequestParam(&quot;adminId&quot;) String adminId,</span><br><span class="line">@RequestParam(&quot;adminPwd&quot;) String adminPwd)&#123;</span><br><span class="line">System.out.println(adminId + &quot; &quot; + adminPwd);</span><br><span class="line">Result result = new Result();</span><br><span class="line">result.setStatusCode(1);</span><br><span class="line">result.setInfo(&quot;post form success&quot;);</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-PUT测试："><a href="#2-PUT测试：" class="headerlink" title="2.PUT测试："></a>2.PUT测试：</h3><ul><li>基于对象的传输：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">前端： </span><br><span class="line">post()&#123;</span><br><span class="line">    var self = this;</span><br><span class="line">    this.$axios.post(&#x27;/test&#x27;, self.data).then(function (response) &#123;</span><br><span class="line">        console.info(self.data);</span><br><span class="line">        console.log(response.data);</span><br><span class="line">    &#125;).catch(function (error) &#123;</span><br><span class="line">        console.error(&quot;请求错误！&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">后端：</span><br><span class="line">@PostMapping(&quot;/test&quot;)</span><br><span class="line">Result toPost(@RequestBody Login login)&#123;</span><br><span class="line">System.out.println(login);</span><br><span class="line">Result result = new Result();</span><br><span class="line">result.setStatusCode(1);</span><br><span class="line">result.setInfo(&quot;success&quot;);</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>基于表单的传输：</li><li>基于qs库，(Content-Type: application/x-www-form-urlencoded)协议<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">前端： </span><br><span class="line">putForm()&#123;</span><br><span class="line">    var self = this;</span><br><span class="line">    this.$axios.put(&#x27;/test2&#x27;, qs.stringify(self.data)</span><br><span class="line">    ).then(function (response) &#123;</span><br><span class="line">        console.info(self.data);</span><br><span class="line">        console.log(response.data);</span><br><span class="line">    &#125;).catch(function (error) &#123;</span><br><span class="line">        console.error(&quot;请求错误！&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">后端：</span><br><span class="line">@PutMapping(&quot;/test2&quot;)</span><br><span class="line">Result putForm(@RequestParam(&quot;adminId&quot;) String adminId,</span><br><span class="line">   @RequestParam(&quot;adminPwd&quot;) String adminPwd)&#123;</span><br><span class="line">System.out.println(adminId + &quot; &quot; + adminPwd);</span><br><span class="line">Result result = new Result();</span><br><span class="line">result.setStatusCode(1);</span><br><span class="line">result.setInfo(&quot;put form success&quot;);</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-GET测试："><a href="#3-GET测试：" class="headerlink" title="3.GET测试："></a>3.GET测试：</h3><ul><li>只能！！！  基于表单的传输：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">前端： </span><br><span class="line">getForm()&#123;</span><br><span class="line">    var self = this;</span><br><span class="line">    this.$axios.get(&#x27;/test&#x27;, &#123;params: self.data&#125;).then(function (response) &#123;</span><br><span class="line">        console.info(self.data);</span><br><span class="line">        console.log(response.data);</span><br><span class="line">    &#125;).catch(function (error) &#123;</span><br><span class="line">        console.error(&quot;请求错误！&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">后端：</span><br><span class="line"></span><br><span class="line">@GetMapping(&quot;/test&quot;)</span><br><span class="line">Result getObj(@RequestParam(&quot;adminId&quot;) String adminId,</span><br><span class="line">  @RequestParam(&quot;adminPwd&quot;) String adminPwd)&#123;</span><br><span class="line">System.out.println(adminId + &quot; &quot; + adminPwd);</span><br><span class="line">Result result = new Result();</span><br><span class="line">result.setStatusCode(1);</span><br><span class="line">result.setInfo(&quot;get obj success&quot;);</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-DELETE测试："><a href="#4-DELETE测试：" class="headerlink" title="4.DELETE测试："></a>4.DELETE测试：</h3><ul><li>基于对象的传输：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">前端： </span><br><span class="line">deleteObj()&#123;</span><br><span class="line">    var self = this;</span><br><span class="line">    this.$axios.delete(&#x27;/test&#x27;, &#123;data: self.data&#125;).then(function (response) &#123;</span><br><span class="line">        console.info(self.data);</span><br><span class="line">        console.log(response.data);</span><br><span class="line">    &#125;).catch(function (error) &#123;</span><br><span class="line">        console.error(&quot;请求错误！&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">后端：</span><br><span class="line">@DeleteMapping(&quot;/test&quot;)</span><br><span class="line">Result deleteObj(@RequestBody Login login)&#123;</span><br><span class="line">System.out.println(login);</span><br><span class="line">Result result = new Result();</span><br><span class="line">result.setStatusCode(1);</span><br><span class="line">result.setInfo(&quot;delete obj success&quot;);</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>基于表单的传输：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">前端： </span><br><span class="line">deleteForm()&#123;</span><br><span class="line">    var self = this;</span><br><span class="line">    this.$axios.delete(&#x27;/test2&#x27;, &#123;params: self.data&#125;).then(function (response) &#123;</span><br><span class="line">        console.info(self.data);</span><br><span class="line">        console.log(response.data);</span><br><span class="line">    &#125;).catch(function (error) &#123;</span><br><span class="line">        console.error(&quot;请求错误！&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">后端：</span><br><span class="line">@DeleteMapping(&quot;/test2&quot;)</span><br><span class="line">Result deletForm(@RequestParam(&quot;adminId&quot;) String adminId,</span><br><span class="line"> @RequestParam(&quot;adminPwd&quot;) String adminPwd)&#123;</span><br><span class="line">System.out.println(adminId + &quot; &quot; + adminPwd);</span><br><span class="line">Result result = new Result();</span><br><span class="line">result.setStatusCode(1);</span><br><span class="line">result.setInfo(&quot;delete form success&quot;);</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>post和put类似可用各种方式传输，也最为安全</li><li>get只能用表单传输， {params: self.data}</li><li>delete两种方式都能，但是参数格式略有不同：表单{params: self.data}，对象{data: self.data}</li></ol><h4 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h4><ul><li><a href="https://juejin.im/post/5d7a019bf265da03a31d65bb">axios基本使用</a></li><li><a href="https://segmentfault.com/a/1190000015261229">axios中post的三种方式</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
            <tag> Axios </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thymeleaf模板技术尝试</title>
      <link href="/2019/11/30/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%8A%80%E6%9C%AF%E5%B0%9D%E8%AF%95/"/>
      <url>/2019/11/30/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%8A%80%E6%9C%AF%E5%B0%9D%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Thymeleaf-模板技术尝试"><a href="#Thymeleaf-模板技术尝试" class="headerlink" title="Thymeleaf 模板技术尝试"></a>Thymeleaf 模板技术尝试</h1><ul><li><p>Thymeleaf是一个Java XML / XHTML / HTML5 模板引擎 ，可以在Web（基于servlet ）和非Web环境中工作。 它更适合在基于MVC的Web应用程序的视图层提供XHTML / HTML5，但它甚至可以在脱机环境中处理任何XML文件。 它提供完整的Spring Framework。</p></li><li><p>在Web应用程序中，Thymeleaf旨在成为JavaServer Pages （JSP）的完全替代品，并实现自然模板的概念：模板文件可以直接在浏览器中打开，并且仍然可以正确显示为网页。</p></li><li><p><a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html">Thymeleaf 3.0 官方文档</a></p></li></ul><h2 id="Thymeleaf-常用关键字"><a href="#Thymeleaf-常用关键字" class="headerlink" title="Thymeleaf 常用关键字"></a>Thymeleaf 常用关键字</h2><p><img data-src="https://ae01.alicdn.com/kf/Ha6d22c20c9d245df8d8521475655a66aB.png" class="lazyload"></p><h2 id="1-创建HTML"><a href="#1-创建HTML" class="headerlink" title="1.创建HTML"></a>1.创建HTML</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="2-获取变量值-…"><a href="#2-获取变量值-…" class="headerlink" title="2.获取变量值${…}"></a>2.获取变量值${…}</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p th:text=&quot;&#x27;Hello！, &#x27; + $&#123;name&#125; + &#x27;!&#x27;&quot;&gt;3333&lt;/p&gt;</span><br></pre></td></tr></table></figure><h2 id="3-链接表达式-…"><a href="#3-链接表达式-…" class="headerlink" title="3.链接表达式: @{…}"></a>3.链接表达式: @{…}</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;details.html&quot; th:href=&quot;@&#123;/order/details(orderId=$&#123;o.id&#125;)&#125;&quot;&gt;view&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;details.html&quot; th:href=&quot;@&#123;order/&#123;orderId&#125;/details(orderId=$&#123;o.id&#125;)&#125;&quot;&gt;Content路径,默认访问static下的order文件夹&lt;/a&gt;</span><br></pre></td></tr></table></figure><h2 id="4-文本替换"><a href="#4-文本替换" class="headerlink" title="4.文本替换"></a>4.文本替换</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span th:text=&quot;&#x27;Welcome to our application, &#x27; + $&#123;user.name&#125; + &#x27;!&#x27;&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="5-运算符"><a href="#5-运算符" class="headerlink" title="5.运算符"></a>5.运算符</h2><ul><li>默认支持</li></ul><h2 id="6-条件"><a href="#6-条件" class="headerlink" title="6.条件"></a>6.条件</h2><ul><li>if/unless</li><li>使用th:if和th:unless属性进行条件判断</li><li>th:unless于th:if恰好相反，只有表达式中的条件不成立，才会显示其内容。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;a th:href=&quot;@&#123;/login&#125;&quot; th:unless=$&#123;session.user != null&#125;&gt;Login&lt;/a&gt;</span><br></pre></td></tr></table></figure></li><li>switch</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div th:switch=&quot;$&#123;user.role&#125;&quot;&gt;</span><br><span class="line">  &lt;p th:case=&quot;&#x27;admin&#x27;&quot;&gt;User is an administrator&lt;/p&gt;</span><br><span class="line">  &lt;p th:case=&quot;#&#123;roles.manager&#125;&quot;&gt;User is a manager&lt;/p&gt;</span><br><span class="line">  &lt;p th:case=&quot;*&quot;&gt;User is some other thing&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="7-循环"><a href="#7-循环" class="headerlink" title="7.循环"></a>7.循环</h2><ul><li>th:each</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;tr th:each=&quot;prod : $&#123;prods&#125;&quot;&gt;</span><br><span class="line">    &lt;td th:text=&quot;$&#123;prod.name&#125;&quot;&gt;Onions&lt;/td&gt;</span><br><span class="line">    &lt;td th:text=&quot;$&#123;prod.price&#125;&quot;&gt;2.41&lt;/td&gt;</span><br><span class="line">    &lt;td th:text=&quot;$&#123;prod.inStock&#125;? #&#123;true&#125; : #&#123;false&#125;&quot;&gt;yes&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br></pre></td></tr></table></figure><h2 id="8-模板布局"><a href="#8-模板布局" class="headerlink" title="8.模板布局"></a>8.模板布局</h2><ul><li>Thymeleaf需要我们定义这些部分，“片段”，以便包含，这可以使用th:fragment属性来完成。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div th:fragment=&quot;navbar&quot;&gt;</span><br><span class="line">      &amp;copy; 2011 The Good Thymes Virtual Grocery</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>我们可以使用其中一个th:insert或th:replace属性轻松地在我们的主页中包含这些片段。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  ...</span><br><span class="line">  &lt;div th:insert=&quot;~&#123;base :: navbar&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">  或者</span><br><span class="line">  &lt;div th:insert=&quot;base :: navbar&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thymeleaf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiro安全框架基础知识点</title>
      <link href="/2019/11/27/Shiro%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2019/11/27/Shiro%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="Shiro基础知识点"><a href="#Shiro基础知识点" class="headerlink" title="Shiro基础知识点"></a>Shiro基础知识点</h1><ul><li><p>Apache Shiro 是ASF旗下的一款开源软件（Shiro发音为“shee-roh”，日语“堡垒（Castle）”的意思），提供了一个强大而灵活的安全框架。可为任何应用提供安全保障— 从命令行应用、移动应用到大型网络及企业应用。</p></li><li><p>Apache Shiro提供了认证、授权、加密和会话管理功能，将复杂的问题隐藏起来，提供清晰直观的API使开发者可以很轻松地开发自己的程序安全代码。并且在实现此目标时无须依赖第三方的框架、容器或服务，当然也能做到与这些环境的整合，使其在任何环境下都可拿来使用。</p></li></ul><h2 id="Shiro的核心四部分"><a href="#Shiro的核心四部分" class="headerlink" title="Shiro的核心四部分"></a>Shiro的核心四部分</h2><ul><li><p>认证（Authentication）：用户身份识别。有时可看作为“登录（login）”，它是用户证明自己是谁的一个行为。</p></li><li><p>授权（Authorization）：访问控制过程，好比决定“认证（who）”可以访问“什么（what）”.</p></li><li><p>会话管理（SessionManagement）：管理用户的会话（sessions），甚至在没有WEB或EJB容器的环境中。管理用户与时间相关的状态。</p></li><li><p>加密（Cryptography）：使用加密算法保护数据更加安全，防止数据被偷窥。</p></li></ul><h3 id="1-Spring整合Shiro"><a href="#1-Spring整合Shiro" class="headerlink" title="1.Spring整合Shiro"></a>1.Spring整合Shiro</h3><ol><li>pom 依赖<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--整合shiro--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-ShiroConfig"><a href="#2-ShiroConfig" class="headerlink" title="2. ShiroConfig"></a>2. ShiroConfig</h3><ul><li>shiro的基本配置</li><li>1.ShiroFilterFactoryBean    #Shiro对外的接口，代表当前“用户”</li><li>2.DefaultWebSecurityManager   #关联realm</li><li>3.UserRealm   #负责登录验证和资源授权</li><li><img data-src="https://pic2.zhimg.com/80/v2-8526e78cc56a9505dcca6d0f3fcac3dd_hd.jpg" class="lazyload"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">package io.kid1999.operatesystem.config;</span><br><span class="line"></span><br><span class="line">import org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line">import org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line">import org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">import java.util.LinkedHashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kid1999</span><br><span class="line"> * @title: Shiro 的 配置</span><br><span class="line"> * @date 2019/11/26 21:27</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class ShiroConfig &#123;</span><br><span class="line"></span><br><span class="line">// 3. 创建 ShiroFilterFactoryBean</span><br><span class="line">@Bean</span><br><span class="line">public ShiroFilterFactoryBean getShiroFilterFactoryBean(@Qualifier(&quot;securityManager&quot;) DefaultWebSecurityManager securityManager)&#123;</span><br><span class="line">ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();</span><br><span class="line">// 设置安全管理器</span><br><span class="line">shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">/**  添加Shiro的内置过滤器</span><br><span class="line"> * 常用：</span><br><span class="line"> * anon : 无需认证（登录） 可以访问</span><br><span class="line"> * authc ：必须认证才可以访问</span><br><span class="line"> * user : 如果使用remenberMe功能可以直接访问</span><br><span class="line"> * perms: 该资源必须获得相关权限才可访问</span><br><span class="line"> * role: 该资源必须获得角色权限才可以访问</span><br><span class="line"> *</span><br><span class="line"> *  注意： 这个授权拦截链 是按顺序执行的！！！</span><br><span class="line"> */</span><br><span class="line">Map&lt;String,String&gt; filterMap = new LinkedHashMap&lt;&gt;();</span><br><span class="line">filterMap.put(&quot;/&quot;,&quot;anon&quot;);</span><br><span class="line">filterMap.put(&quot;/login&quot;,&quot;anon&quot;);</span><br><span class="line">filterMap.put(&quot;/error&quot;,&quot;anon&quot;);</span><br><span class="line">//filterMap.put(&quot;/admin&quot;,&quot;authc&quot;);</span><br><span class="line"></span><br><span class="line">// 权限过滤器  也可以设置角色过滤</span><br><span class="line">filterMap.put(&quot;/admin&quot;,&quot;perms[user:admin]&quot;);</span><br><span class="line"></span><br><span class="line">shiroFilterFactoryBean.setLoginUrl(&quot;/login&quot;);       // 设置跳转的登录页面</span><br><span class="line">shiroFilterFactoryBean.setUnauthorizedUrl(&quot;/noAuth&quot;);   // 设置未授权访问页面</span><br><span class="line">shiroFilterFactoryBean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line"></span><br><span class="line">return shiroFilterFactoryBean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 2. 创建DefaultWebSecurityManager </span><br><span class="line">// 所有与安全有关的操作都会与SecurityManager进行交互</span><br><span class="line">@Bean(name = &quot;securityManager&quot;)</span><br><span class="line">public DefaultWebSecurityManager getDefaultWebSecurityManager(@Qualifier(&quot;getRealm&quot;) UserRealm userRealm)&#123;</span><br><span class="line">DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();</span><br><span class="line">// 关联realm</span><br><span class="line">securityManager.setRealm(getRealm());</span><br><span class="line">return securityManager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 1. 创建Realm</span><br><span class="line">// Shiro从Realm获取安全数据（用户、角色、权限）</span><br><span class="line">@Bean</span><br><span class="line">public UserRealm getRealm()&#123;</span><br><span class="line">return new UserRealm();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-UserRealm"><a href="#3-UserRealm" class="headerlink" title="3. UserRealm"></a>3. UserRealm</h3><ul><li>Shiro从从Realm获取安全数据（如用户、角色、权限）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">package io.kid1999.operatesystem.config;</span><br><span class="line"></span><br><span class="line">import io.kid1999.operatesystem.model.Admin;</span><br><span class="line">import io.kid1999.operatesystem.repository.AdminRepository;</span><br><span class="line">import org.apache.shiro.authc.*;</span><br><span class="line">import org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line">import org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class="line">import org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line">import org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kid1999</span><br><span class="line"> * @title: UserRealm 自定义 realm 处理 授权和认证</span><br><span class="line"> * @date 2019/11/26 21:29</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class UserRealm extends AuthorizingRealm  &#123;</span><br><span class="line">@Autowired</span><br><span class="line">private AdminRepository adminRepository;</span><br><span class="line"></span><br><span class="line">// 授权执行逻辑</span><br><span class="line">@Override</span><br><span class="line">protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) &#123;</span><br><span class="line">System.out.println(&quot;授权执行逻辑&quot;);</span><br><span class="line"></span><br><span class="line">// 给资源进行授权</span><br><span class="line">SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();</span><br><span class="line"></span><br><span class="line">// 添加资源授权字符串</span><br><span class="line">info.addStringPermission(&quot;user:admin&quot;);</span><br><span class="line"></span><br><span class="line">return info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 认证执行逻辑</span><br><span class="line">@Override</span><br><span class="line">protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException &#123;</span><br><span class="line">System.out.println(&quot;认证执行逻辑&quot;);</span><br><span class="line"></span><br><span class="line">// 1. 获取传来验证的token</span><br><span class="line">UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken;</span><br><span class="line">String name = token.getUsername();</span><br><span class="line">String password = String.valueOf(token.getPassword());</span><br><span class="line">// 2. 通过用户名 取出数据库的数据</span><br><span class="line">Admin user = adminRepository.findByAdminId(name);</span><br><span class="line"></span><br><span class="line">// 3. 判断用户名</span><br><span class="line">if (user == null)&#123;</span><br><span class="line">return null;        // 找不到用户名 报 UnknownAccountException</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 4. 判断密码</span><br><span class="line">/**</span><br><span class="line"> * arg0: 回传login的数据</span><br><span class="line"> * arg1: 数据库的密码</span><br><span class="line"> * arg2: realm 的name</span><br><span class="line"> */</span><br><span class="line">return new SimpleAuthenticationInfo(&quot;&quot;,user.getAdminPwd(),&quot;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-AdminRepository-链接数据库"><a href="#4-AdminRepository-链接数据库" class="headerlink" title="4.AdminRepository 链接数据库"></a>4.AdminRepository 链接数据库</h3><ul><li>Realm 会连接数据源 进行身份验证</li><li>此处放上我的JPA</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package io.kid1999.operatesystem.repository;</span><br><span class="line">import io.kid1999.operatesystem.model.Admin;</span><br><span class="line">import org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line">import org.springframework.data.jpa.repository.Query;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kid1999</span><br><span class="line"> * @title: ManagerRepository</span><br><span class="line"> * @date 2019/11/24 10:07</span><br><span class="line"> */</span><br><span class="line">public interface AdminRepository extends JpaRepository&lt;Admin,Integer&gt; &#123;</span><br><span class="line">@Query(value = &quot;select * from admin m where m.admin_id = ?1 and m.admin_pwd = ?2&quot; ,nativeQuery = true)</span><br><span class="line">Admin login(String studentId, String passWord);</span><br><span class="line"></span><br><span class="line">Admin findByAdminId(String adminId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-登录Controller"><a href="#5-登录Controller" class="headerlink" title="5.登录Controller"></a>5.登录Controller</h3><ul><li>此处没有使用加密 和 缓存机制<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 使用Shiro实现登录</span><br><span class="line"> */</span><br><span class="line">@PostMapping(&quot;/login&quot;)</span><br><span class="line">String toLogin(String studentId,</span><br><span class="line">               String passWord,</span><br><span class="line">               Model model)&#123;</span><br><span class="line">// 1.获取Subject</span><br><span class="line">Subject subject = SecurityUtils.getSubject();</span><br><span class="line">// 2.封装登录方法</span><br><span class="line">UsernamePasswordToken token = new UsernamePasswordToken(studentId,passWord);</span><br><span class="line">// 3.执行登录方法</span><br><span class="line">try &#123;</span><br><span class="line">subject.login(token);       // 调用login方法 -&gt; realm 做验证</span><br><span class="line">return &quot;admin&quot;;</span><br><span class="line">&#125;catch (UnknownAccountException e)&#123;</span><br><span class="line">model.addAttribute(&quot;msg&quot;,&quot;用户名不存在&quot;);</span><br><span class="line">return &quot;login&quot;;</span><br><span class="line">&#125;catch (IncorrectCredentialsException e)&#123;</span><br><span class="line">model.addAttribute(&quot;msg&quot;,&quot;密码错误&quot;);</span><br><span class="line">return &quot;login&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-整合redis接管session和缓存"><a href="#6-整合redis接管session和缓存" class="headerlink" title="6.整合redis接管session和缓存"></a>6.整合redis接管session和缓存</h3><ol><li>再导入两个包</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-ehcache&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- shiro+redis缓存插件 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.crazycake&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-redis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.2.3&lt;/version&gt;</span><br><span class="line">    &lt;!--     剔除这个错误依赖       --&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">    &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>在ShiroConfig 配置到 securityManager </li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 2. 创建DefaultWebSecurityManager  管理器</span><br><span class="line">@Bean(name = &quot;securityManager&quot;)</span><br><span class="line">public DefaultWebSecurityManager getDefaultWebSecurityManager(@Qualifier(&quot;getRealm&quot;) UserRealm userRealm)&#123;</span><br><span class="line">DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();</span><br><span class="line">// 关联realm</span><br><span class="line">securityManager.setRealm(getRealm());</span><br><span class="line">// 自定义缓存实现 使用redis</span><br><span class="line">securityManager.setCacheManager(cacheManager());</span><br><span class="line">// 自定义session管理 使用redis</span><br><span class="line">securityManager.setSessionManager(sessionManager());</span><br><span class="line">return securityManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-整合redis接管session和缓存"><a href="#7-整合redis接管session和缓存" class="headerlink" title="7.整合redis接管session和缓存"></a>7.整合redis接管session和缓存</h3><ol><li>继承FormAuthenticationFilter 重写一些方法</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">package io.kid19999.backstage.config.Shiro;</span><br><span class="line"></span><br><span class="line">import io.kid19999.backstage.repository.SignLogRepository;</span><br><span class="line">import org.apache.shiro.authc.AuthenticationException;</span><br><span class="line">import org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line">import org.apache.shiro.subject.Subject;</span><br><span class="line">import org.apache.shiro.web.filter.authc.FormAuthenticationFilter;</span><br><span class="line">import org.apache.shiro.web.util.WebUtils;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletRequest;</span><br><span class="line">import javax.servlet.ServletResponse;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @desc:   自定义 登录验证 的操作</span><br><span class="line"> * @auther: kid1999</span><br><span class="line"> * @date: 2019/11/28 20:52</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">public class AuthenticationFilter extends FormAuthenticationFilter &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private SignLogRepository signLogRepository;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected boolean onLoginSuccess(AuthenticationToken token, Subject subject, ServletRequest request, ServletResponse response) throws Exception &#123;</span><br><span class="line">        //获取已登录的用户信息</span><br><span class="line">        String username = (String) subject.getPrincipal();</span><br><span class="line">        //获取session</span><br><span class="line">        HttpServletRequest httpServletRequest = WebUtils.toHttp(request);</span><br><span class="line">        HttpSession session = httpServletRequest.getSession();</span><br><span class="line">        //把用户信息保存到session</span><br><span class="line">        session.setAttribute(&quot;activeUser&quot;, username);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;login success&quot;);</span><br><span class="line">        System.out.println(token.getPrincipal());</span><br><span class="line">        String name = token.getPrincipal().toString();</span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line">        return super.onLoginSuccess(token, subject, request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected boolean onAccessDenied(ServletRequest request, ServletResponse response) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;拒绝访问&quot;);</span><br><span class="line">        return super.onAccessDenied(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected boolean onLoginFailure(AuthenticationToken token, AuthenticationException e, ServletRequest request, ServletResponse response) &#123;</span><br><span class="line">        System.out.println(&quot;登录失败&quot;);</span><br><span class="line">        return super.onLoginFailure(token, e, request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>在ShiroConfig 注入 自定义拦截器</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 注入 拦截器和认证</span><br><span class="line">shiroFilterFactoryBean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line">Map&lt;String,Filter&gt; filter = new HashMap&lt;&gt;();</span><br><span class="line">filter.put(&quot;authc&quot;,new AuthenticationFilter());</span><br><span class="line">shiroFilterFactoryBean.setFilters(filter);</span><br></pre></td></tr></table></figure><ol start="3"><li>拦截器的实际工作流程：<br><a href="https://blog.wuwii.com/shiro-2.html">详见</a></li></ol><h3 id="8-Vue的简单安全认证："><a href="#8-Vue的简单安全认证：" class="headerlink" title="8.Vue的简单安全认证："></a>8.Vue的简单安全认证：</h3><ol><li><p>导入vue-cookies 使用cookie保存当前用户的状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import VueCookies from &#x27;vue-cookies&#x27;</span><br><span class="line">Vue.use(VueCookies);</span><br></pre></td></tr></table></figure></li><li><p>使用钩子函数对路由进行权限跳转</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">  let cookieRoles = window.$cookies.get(&quot;role&quot;);</span><br><span class="line">  if(to.path === &#x27;/&#x27;)&#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125; else if (!cookieRoles &amp;&amp; to.path !== &#x27;/login&#x27;) &#123; // cookie中有登陆用户信息跳转页面，否则到登陆页面</span><br><span class="line">    next(&#x27;/login&#x27;);</span><br><span class="line">  &#125; else if (to.meta.permission) &#123;// 如果该页面配置了权限属性（自定义permission）</span><br><span class="line">    // 如果是管理员权限则可进入</span><br><span class="line">    roles.indexOf(&#x27;admin&#x27;) &gt; -1 ? next() : next(&#x27;/403&#x27;);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>登录后返回状态 存入cookie中 默认保存一天</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">this.$axios.post(&#x27;/login&#x27;, qs.stringify(data), &#123;headers:&#123;&#x27;Content-Type&#x27;:&#x27;application/x-www-form-urlencoded&#x27;&#125;&#125;).then(function (response) &#123;</span><br><span class="line">      let res = response.data;</span><br><span class="line">      if(res[&#x27;reslut&#x27;] === 1)&#123;</span><br><span class="line">        self.$store.commit(&#x27;Login&#x27;);</span><br><span class="line">        let arr = res[&#x27;info&#x27;].split(&#x27; &#x27;);</span><br><span class="line">        window.$cookies.set(&quot;role&quot;,arr[1]);</span><br><span class="line">        window.$cookies.set(&quot;sessionId&quot;,arr[0]);</span><br><span class="line">        self.$router.push(&quot;/&quot;);</span><br><span class="line">        self.$message.success(&#123;message:&quot;登录成功&quot;&#125;);</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        self.$message.error(res[&#x27;info&#x27;]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).catch(function (error) &#123;</span><br><span class="line">      console.log(error);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h2 id="流程总结："><a href="#流程总结：" class="headerlink" title="流程总结："></a>流程总结：</h2><ol><li>首先 ShiroFilterFactoryBean 查询拦截规则 跳转 login（或者自己访问login）</li><li>登录验证Controller 调用 subject.login(token)</li><li>Realm接收信息，并且和数据源的数据进行对比 返回 判断结果</li><li>如果不成功 返回错误，如果成功 去往资源网站。 </li><li>ShiroFilterFactoryBean 判断资源访问权限</li><li>调用 Realm的 授权方法 从数据源获取 用户权限 返回结果</li><li>如果 不成功 返回错误。成功 允许访问 </li></ol><h3 id="思考："><a href="#思考：" class="headerlink" title="思考："></a>思考：</h3><p><img data-src="https://ae01.alicdn.com/kf/H0c51e33d70144f179cf8600f263263e3R.png" class="lazyload"><br>前端验证cookie是可见的 role 容易被查看 修改不安全</p><p>后端再次验证 session是否存在(超时被抹除|logout被抹除)</p><p>每次访问的时候先去过滤器一下是否session存在</p><hr><p>参考资料：</p><p><a href="https://zhuanlan.zhihu.com/p/63910997">知乎-Shiro详解</a></p><p><a href="https://juejin.im/post/5ac78b31f265da237411387e">掘金-spring整合shiro</a></p><p><a href="https://www.bilibili.com/video/av40342174">B站视频</a></p><ul><li><p>Apache Shiro 是ASF旗下的一款开源软件（Shiro发音为“shee-roh”，日语“堡垒（Castle）”的意思），提供了一个强大而灵活的安全框架。可为任何应用提供安全保障— 从命令行应用、移动应用到大型网络及企业应用。</p></li><li><p>Apache Shiro提供了认证、授权、加密和会话管理功能，将复杂的问题隐藏起来，提供清晰直观的API使开发者可以很轻松地开发自己的程序安全代码。并且在实现此目标时无须依赖第三方的框架、容器或服务，当然也能做到与这些环境的整合，使其在任何环境下都可拿来使用。</p></li></ul><h2 id="Shiro的核心四部分-1"><a href="#Shiro的核心四部分-1" class="headerlink" title="Shiro的核心四部分"></a>Shiro的核心四部分</h2><ul><li><p>认证（Authentication）：用户身份识别。有时可看作为“登录（login）”，它是用户证明自己是谁的一个行为。</p></li><li><p>授权（Authorization）：访问控制过程，好比决定“认证（who）”可以访问“什么（what）”.</p></li><li><p>会话管理（SessionManagement）：管理用户的会话（sessions），甚至在没有WEB或EJB容器的环境中。管理用户与时间相关的状态。</p></li><li><p>加密（Cryptography）：使用加密算法保护数据更加安全，防止数据被偷窥。</p></li></ul><h3 id="1-Spring整合Shiro-1"><a href="#1-Spring整合Shiro-1" class="headerlink" title="1.Spring整合Shiro"></a>1.Spring整合Shiro</h3><ol><li>pom 依赖<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--整合shiro--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-ShiroConfig-1"><a href="#2-ShiroConfig-1" class="headerlink" title="2. ShiroConfig"></a>2. ShiroConfig</h3><ul><li>shiro的基本配置</li><li>1.ShiroFilterFactoryBean    #Shiro对外的接口，代表当前“用户”</li><li>2.DefaultWebSecurityManager   #关联realm</li><li>3.UserRealm   #负责登录验证和资源授权</li><li><img data-src="https://pic2.zhimg.com/80/v2-8526e78cc56a9505dcca6d0f3fcac3dd_hd.jpg" class="lazyload"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">package io.kid1999.operatesystem.config;</span><br><span class="line"></span><br><span class="line">import org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line">import org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line">import org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">import java.util.LinkedHashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kid1999</span><br><span class="line"> * @title: Shiro 的 配置</span><br><span class="line"> * @date 2019/11/26 21:27</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class ShiroConfig &#123;</span><br><span class="line"></span><br><span class="line">// 3. 创建 ShiroFilterFactoryBean</span><br><span class="line">@Bean</span><br><span class="line">public ShiroFilterFactoryBean getShiroFilterFactoryBean(@Qualifier(&quot;securityManager&quot;) DefaultWebSecurityManager securityManager)&#123;</span><br><span class="line">ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();</span><br><span class="line">// 设置安全管理器</span><br><span class="line">shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">/**  添加Shiro的内置过滤器</span><br><span class="line"> * 常用：</span><br><span class="line"> * anon : 无需认证（登录） 可以访问</span><br><span class="line"> * authc ：必须认证才可以访问</span><br><span class="line"> * user : 如果使用remenberMe功能可以直接访问</span><br><span class="line"> * perms: 该资源必须获得相关权限才可访问</span><br><span class="line"> * role: 该资源必须获得角色权限才可以访问</span><br><span class="line"> *</span><br><span class="line"> *  注意： 这个授权拦截链 是按顺序执行的！！！</span><br><span class="line"> */</span><br><span class="line">Map&lt;String,String&gt; filterMap = new LinkedHashMap&lt;&gt;();</span><br><span class="line">filterMap.put(&quot;/&quot;,&quot;anon&quot;);</span><br><span class="line">filterMap.put(&quot;/login&quot;,&quot;anon&quot;);</span><br><span class="line">filterMap.put(&quot;/error&quot;,&quot;anon&quot;);</span><br><span class="line">//filterMap.put(&quot;/admin&quot;,&quot;authc&quot;);</span><br><span class="line"></span><br><span class="line">// 权限过滤器  也可以设置角色过滤</span><br><span class="line">filterMap.put(&quot;/admin&quot;,&quot;perms[user:admin]&quot;);</span><br><span class="line"></span><br><span class="line">shiroFilterFactoryBean.setLoginUrl(&quot;/login&quot;);       // 设置跳转的登录页面</span><br><span class="line">shiroFilterFactoryBean.setUnauthorizedUrl(&quot;/noAuth&quot;);   // 设置未授权访问页面</span><br><span class="line">shiroFilterFactoryBean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line"></span><br><span class="line">return shiroFilterFactoryBean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 2. 创建DefaultWebSecurityManager </span><br><span class="line">// 所有与安全有关的操作都会与SecurityManager进行交互</span><br><span class="line">@Bean(name = &quot;securityManager&quot;)</span><br><span class="line">public DefaultWebSecurityManager getDefaultWebSecurityManager(@Qualifier(&quot;getRealm&quot;) UserRealm userRealm)&#123;</span><br><span class="line">DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();</span><br><span class="line">// 关联realm</span><br><span class="line">securityManager.setRealm(getRealm());</span><br><span class="line">return securityManager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 1. 创建Realm</span><br><span class="line">// Shiro从Realm获取安全数据（用户、角色、权限）</span><br><span class="line">@Bean</span><br><span class="line">public UserRealm getRealm()&#123;</span><br><span class="line">return new UserRealm();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-UserRealm-1"><a href="#3-UserRealm-1" class="headerlink" title="3. UserRealm"></a>3. UserRealm</h3><ul><li>Shiro从从Realm获取安全数据（如用户、角色、权限）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">package io.kid1999.operatesystem.config;</span><br><span class="line"></span><br><span class="line">import io.kid1999.operatesystem.model.Admin;</span><br><span class="line">import io.kid1999.operatesystem.repository.AdminRepository;</span><br><span class="line">import org.apache.shiro.authc.*;</span><br><span class="line">import org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line">import org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class="line">import org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line">import org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kid1999</span><br><span class="line"> * @title: UserRealm 自定义 realm 处理 授权和认证</span><br><span class="line"> * @date 2019/11/26 21:29</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class UserRealm extends AuthorizingRealm  &#123;</span><br><span class="line">@Autowired</span><br><span class="line">private AdminRepository adminRepository;</span><br><span class="line"></span><br><span class="line">// 授权执行逻辑</span><br><span class="line">@Override</span><br><span class="line">protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) &#123;</span><br><span class="line">System.out.println(&quot;授权执行逻辑&quot;);</span><br><span class="line"></span><br><span class="line">// 给资源进行授权</span><br><span class="line">SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();</span><br><span class="line"></span><br><span class="line">// 添加资源授权字符串</span><br><span class="line">info.addStringPermission(&quot;user:admin&quot;);</span><br><span class="line"></span><br><span class="line">return info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 认证执行逻辑</span><br><span class="line">@Override</span><br><span class="line">protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException &#123;</span><br><span class="line">System.out.println(&quot;认证执行逻辑&quot;);</span><br><span class="line"></span><br><span class="line">// 1. 获取传来验证的token</span><br><span class="line">UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken;</span><br><span class="line">String name = token.getUsername();</span><br><span class="line">String password = String.valueOf(token.getPassword());</span><br><span class="line">// 2. 通过用户名 取出数据库的数据</span><br><span class="line">Admin user = adminRepository.findByAdminId(name);</span><br><span class="line"></span><br><span class="line">// 3. 判断用户名</span><br><span class="line">if (user == null)&#123;</span><br><span class="line">return null;        // 找不到用户名 报 UnknownAccountException</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 4. 判断密码</span><br><span class="line">/**</span><br><span class="line"> * arg0: 回传login的数据</span><br><span class="line"> * arg1: 数据库的密码</span><br><span class="line"> * arg2: realm 的name</span><br><span class="line"> */</span><br><span class="line">return new SimpleAuthenticationInfo(&quot;&quot;,user.getAdminPwd(),&quot;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-AdminRepository-链接数据库-1"><a href="#4-AdminRepository-链接数据库-1" class="headerlink" title="4.AdminRepository 链接数据库"></a>4.AdminRepository 链接数据库</h3><ul><li>Realm 会连接数据源 进行身份验证</li><li>此处放上我的JPA</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package io.kid1999.operatesystem.repository;</span><br><span class="line">import io.kid1999.operatesystem.model.Admin;</span><br><span class="line">import org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line">import org.springframework.data.jpa.repository.Query;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kid1999</span><br><span class="line"> * @title: ManagerRepository</span><br><span class="line"> * @date 2019/11/24 10:07</span><br><span class="line"> */</span><br><span class="line">public interface AdminRepository extends JpaRepository&lt;Admin,Integer&gt; &#123;</span><br><span class="line">@Query(value = &quot;select * from admin m where m.admin_id = ?1 and m.admin_pwd = ?2&quot; ,nativeQuery = true)</span><br><span class="line">Admin login(String studentId, String passWord);</span><br><span class="line"></span><br><span class="line">Admin findByAdminId(String adminId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-登录Controller-1"><a href="#5-登录Controller-1" class="headerlink" title="5.登录Controller"></a>5.登录Controller</h3><ul><li>此处没有使用加密 和 缓存机制<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 使用Shiro实现登录</span><br><span class="line"> */</span><br><span class="line">@PostMapping(&quot;/login&quot;)</span><br><span class="line">String toLogin(String studentId,</span><br><span class="line">               String passWord,</span><br><span class="line">               Model model)&#123;</span><br><span class="line">// 1.获取Subject</span><br><span class="line">Subject subject = SecurityUtils.getSubject();</span><br><span class="line">// 2.封装登录方法</span><br><span class="line">UsernamePasswordToken token = new UsernamePasswordToken(studentId,passWord);</span><br><span class="line">// 3.执行登录方法</span><br><span class="line">try &#123;</span><br><span class="line">subject.login(token);       // 调用login方法 -&gt; realm 做验证</span><br><span class="line">return &quot;admin&quot;;</span><br><span class="line">&#125;catch (UnknownAccountException e)&#123;</span><br><span class="line">model.addAttribute(&quot;msg&quot;,&quot;用户名不存在&quot;);</span><br><span class="line">return &quot;login&quot;;</span><br><span class="line">&#125;catch (IncorrectCredentialsException e)&#123;</span><br><span class="line">model.addAttribute(&quot;msg&quot;,&quot;密码错误&quot;);</span><br><span class="line">return &quot;login&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="流程总结：-1"><a href="#流程总结：-1" class="headerlink" title="流程总结："></a>流程总结：</h2><ol><li>首先 ShiroFilterFactoryBean 查询拦截规则 跳转 login（或者自己访问login）</li><li>登录验证Controller 调用 subject.login(token)</li><li>Realm接收信息，并且和数据源的数据进行对比 返回 判断结果</li><li>如果不成功 返回错误，如果成功 去往资源网站。 </li><li>ShiroFilterFactoryBean 判断资源访问权限</li><li>调用 Realm的 授权方法 从数据源获取 用户权限 返回结果</li><li>如果 不成功 返回错误。成功 允许访问 </li></ol><hr><p>参考资料：</p><p><a href="https://zhuanlan.zhihu.com/p/63910997">知乎-Shiro详解</a></p><p><a href="https://www.bilibili.com/video/av40342174">B站视频</a></p>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shiro </tag>
            
            <tag> security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jpa基础知识点</title>
      <link href="/2019/11/27/Jpa%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2019/11/27/Jpa%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="Jpa基础知识点"><a href="#Jpa基础知识点" class="headerlink" title="Jpa基础知识点"></a>Jpa基础知识点</h1><ul><li>JPA是Java Persistence API的简称，中文名Java持久层API，是JDK 5.0注解或XML描述对象－关系表的映射关系，并将运行期的实体对象持久化到数据库中。</li><li>Spring Data JPA是较大的Spring Data系列的一部分，可轻松实现基于JPA的存储库。该模块处理对基于JPA的数据访问层的增强支持。它使构建使用数据访问技术的Spring支持的应用程序变得更加容易。</li></ul><h2 id="1-JPA的基本配置"><a href="#1-JPA的基本配置" class="headerlink" title="1.JPA的基本配置"></a>1.JPA的基本配置</h2><ol><li>pom依赖</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="2-项目配置文件"><a href="#2-项目配置文件" class="headerlink" title="2. 项目配置文件"></a>2. 项目配置文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  # mysql 配置：</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql://10.16.11.211:3306/test?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf8</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">  jpa:</span><br><span class="line">    hibernate:</span><br><span class="line">      ddl-auto: update</span><br><span class="line">    show-sql: true</span><br><span class="line">    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect  #不加这句则默认为myisam引擎</span><br><span class="line">    open-in-view: true</span><br></pre></td></tr></table></figure><h2 id="3-创建一个简单实体类"><a href="#3-创建一个简单实体类" class="headerlink" title="3. 创建一个简单实体类"></a>3. 创建一个简单实体类</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package io.kid1999.teacher_manager.model;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import javax.persistence.*;</span><br><span class="line"></span><br><span class="line">@Entity     // 表示这是一个数据库实体</span><br><span class="line">@Table(name = &quot;user&quot;)   // 表示对于的表，不设置name时 默认和类名相同</span><br><span class="line">@Data   </span><br><span class="line">public class User &#123;</span><br><span class="line"></span><br><span class="line">@Id     // 指定 ID</span><br><span class="line">@GeneratedValue  // 指定主键生成策略，默认自增长</span><br><span class="line">@Column(name = &quot;id&quot;)</span><br><span class="line">private Integer id;</span><br><span class="line"></span><br><span class="line">@Basic   // 默认会加上这个注解，表示该属性到数据库同名字段的映射</span><br><span class="line">private String addr;</span><br><span class="line"></span><br><span class="line">@Column(name = &quot;name&quot;)      // 默认不写的时候=Basic 表示该属性到数据库name字段的映射</span><br><span class="line">private String name;</span><br><span class="line"></span><br><span class="line">@Transient  // 表示此字段与数据库无关，取消@Basic</span><br><span class="line">private String info;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@GeneratedValue JPA自带的几种主键生成策略：</span><br><span class="line">TABLE： 使用一个特定的数据库表格来保存主键。</span><br><span class="line">SEQUENCE： 根据底层数据库的序列来生成主键，条件是数据库支持序列。这个值要与generator一起使用，generator 指定生成主键使用的生成器（可能是orcale中自己编写的序列）。</span><br><span class="line">IDENTITY： 主键由数据库自动生成（主要是支持自动增长的数据库，如mysql）。</span><br><span class="line">AUTO： 主键由程序控制，也是GenerationType的默认值。</span><br></pre></td></tr></table></figure><h2 id="4-创建一些关联关系的对象"><a href="#4-创建一些关联关系的对象" class="headerlink" title="4. 创建一些关联关系的对象"></a>4. 创建一些关联关系的对象</h2><ul><li>关联关系必须注意维护端和被维护端的选取</li><li><ol><li>在一对多中，多的一方作为维护端，一的一方作为被维护端</li></ol></li><li><ol start="2"><li>在一对一中，任意选取一方作为维护端，宁一方作为被维护端</li></ol></li><li><ol start="3"><li>在多对多中，任意选取一方作为维护端，但必须记住中间表的关系由维护端负责</li></ol></li></ul><h3 id="1-多对一-的配置"><a href="#1-多对一-的配置" class="headerlink" title="1. 多对一 的配置"></a>1. 多对一 的配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package io.kid1999.teacher_manager.model;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import javax.persistence.*;</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">@Entity</span><br><span class="line">@Table</span><br><span class="line">public class Student &#123;</span><br><span class="line">    @Id</span><br><span class="line">    private Integer studentId;</span><br><span class="line">    private String studentName;</span><br><span class="line">    private Integer gradeId;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 多对一 ManyToOne</span><br><span class="line">     * JPA中，many一端作为维护端，One一端作为被维护端</span><br><span class="line">     * many一方指定@ManyToOne注解 ，并使用 @JoinClomn指定关联的外键</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    @ManyToOne(targetEntity = Grade.class,fetch = FetchType.LAZY)  //对应的对象,且设置为懒加载（不在每一次查询时都进行多表关联）</span><br><span class="line">    @JoinColumn(name = &quot;gradeId&quot;,insertable = false,updatable = false)   //对应关联的键,在插入更新时不插入grade</span><br><span class="line">    private Grade grade;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 必须重新toString  不然在打印时候会递归查询 grade</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;&quot; +</span><br><span class="line">                &quot;studentId=&quot; + studentId +</span><br><span class="line">                &quot;, studentName=&#x27;&quot; + studentName + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, gradeId=&quot; + gradeId +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-一对多-的配置"><a href="#2-一对多-的配置" class="headerlink" title="2. 一对多 的配置"></a>2. 一对多 的配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package io.kid1999.teacher_manager.model;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line">import javax.persistence.*;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">@Entity</span><br><span class="line">@Table</span><br><span class="line">public class Grade &#123;</span><br><span class="line">    @Id</span><br><span class="line">    private Integer gradeId;</span><br><span class="line">    private String gradeName;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 一对多 OneTOMany</span><br><span class="line">     * 可以在 One 一方指定@OneToMany注释 并设置 mappedBy属性，以指定他是这一关联中被维护的一端</span><br><span class="line">     */</span><br><span class="line">    @OneToMany(mappedBy = &quot;grade&quot;)</span><br><span class="line">    private List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试：学生和班级之间的多对一关系"><a href="#测试：学生和班级之间的多对一关系" class="headerlink" title="测试：学生和班级之间的多对一关系"></a>测试：学生和班级之间的多对一关系</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">  @Autowired</span><br><span class="line">  private StudentRepository studentRepository;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private GradeRepository gradeRepository;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">@Transactional</span><br><span class="line">void TestManyToOne()&#123;</span><br><span class="line">    Student student = new Student();</span><br><span class="line">    student.setStudentId(1212);</span><br><span class="line">    student.setStudentName(&quot;kid&quot;);</span><br><span class="line">    student.setGradeId(1);</span><br><span class="line">    studentRepository.save(student);    // 插入</span><br><span class="line">    Grade grade = studentRepository.getOne(1212).getGrade();</span><br><span class="line">    System.out.println(grade.getGradeId() + grade.getGradeName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">@Transactional</span><br><span class="line">void TestOnTomany()&#123;</span><br><span class="line">    Grade grade = new Grade();</span><br><span class="line">    grade.setGradeId(2);</span><br><span class="line">    grade.setGradeName(&quot;math&quot;);</span><br><span class="line">    gradeRepository.save(grade);    // 插入</span><br><span class="line">    List&lt;Student&gt; students = gradeRepository.getOne(1).getStudents();   // 外键查询</span><br><span class="line">    System.out.println(students);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-一对一-的配置"><a href="#3-一对一-的配置" class="headerlink" title="3. 一对一 的配置"></a>3. 一对一 的配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package io.kid1999.teacher_manager.model;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line">import javax.persistence.*;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">@Entity</span><br><span class="line">@Table</span><br><span class="line">public class Grade &#123;</span><br><span class="line">    @Id</span><br><span class="line">    private Integer gradeId;</span><br><span class="line">    private String gradeName;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 一对多 OneTOMany</span><br><span class="line">     * 可以在 One 一方指定@OneToMany注释 并设置 mappedBy属性，以指定他是这一关联中被维护的一端</span><br><span class="line">     */</span><br><span class="line">    @OneToMany(mappedBy = &quot;grade&quot;, fetch = FetchType.LAZY)</span><br><span class="line">    private List&lt;Student&gt; students;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 一对一 被维护端</span><br><span class="line">     */</span><br><span class="line">    @OneToOne(mappedBy = &quot;grade&quot;)</span><br><span class="line">    private Teacher teacher;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Grade&#123;&quot; +</span><br><span class="line">                &quot;gradeId=&quot; + gradeId +</span><br><span class="line">                &quot;, gradeName=&#x27;&quot; + gradeName + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package io.kid1999.teacher_manager.model;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line">import javax.persistence.*;</span><br><span class="line"></span><br><span class="line">@Entity</span><br><span class="line">@Table</span><br><span class="line">@Data</span><br><span class="line">public class Teacher &#123;</span><br><span class="line">    @Id</span><br><span class="line">    @GeneratedValue</span><br><span class="line">    private Integer teacherId;</span><br><span class="line">    private String teacherName;</span><br><span class="line">    private Integer gradeId;</span><br><span class="line"></span><br><span class="line">    // OnToOne 维护端</span><br><span class="line">    @OneToOne</span><br><span class="line">    @JoinColumn(name = &quot;gradeId&quot;,insertable = false,updatable = false,unique = true) // 查询唯一</span><br><span class="line">    private Grade grade;</span><br><span class="line"></span><br><span class="line">    // 重写toString</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Teacher&#123;&quot; +</span><br><span class="line">                &quot;teacherId=&quot; + teacherId +</span><br><span class="line">                &quot;, taacherName=&quot; + teacherName +</span><br><span class="line">                &quot;, gradeId=&quot; + gradeId +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-教师和班级之间的一对一关系"><a href="#测试-教师和班级之间的一对一关系" class="headerlink" title="测试 教师和班级之间的一对一关系"></a>测试 教师和班级之间的一对一关系</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Transactional</span><br><span class="line">void TestOneToOne()&#123;</span><br><span class="line">//    Teacher teacher = new Teacher();</span><br><span class="line">//    teacher.setGradeId(2);</span><br><span class="line">//    teacher.setTeacherName(&quot;hello&quot;);</span><br><span class="line">//    teacherResitory.saveAndFlush(teacher);</span><br><span class="line">    Teacher teacher1 = teacherResitory.getOne(7);</span><br><span class="line">    Grade grade = teacher1.getGrade();</span><br><span class="line">    System.out.println(grade);</span><br><span class="line">    System.out.println(grade.getStudents());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-多对多-的配置"><a href="#3-多对多-的配置" class="headerlink" title="3.多对多 的配置"></a>3.多对多 的配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package io.kid1999.teacher_manager.model;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line">import javax.persistence.*;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">@Entity</span><br><span class="line">@Table</span><br><span class="line">public class Student &#123;</span><br><span class="line">    @Id</span><br><span class="line">    private Integer studentId;</span><br><span class="line">    private String studentName;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 多对一 ManyToOne</span><br><span class="line">     * JPA中，many一端作为维护端，One一端作为被维护端</span><br><span class="line">     * many一方指定@ManyToOne注解 ，并使用 @JoinClomn指定关联的外键</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    private Integer gradeId;</span><br><span class="line">    @ManyToOne(targetEntity = Grade.class,fetch = FetchType.LAZY)  //对应的对象,且设置为懒加载（不在每一次查询时都进行多表关联）</span><br><span class="line">    @JoinColumn(name = &quot;gradeId&quot;,insertable = false,updatable = false)   //对应关联的键,在插入更新时不插入grade</span><br><span class="line">    private Grade grade;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 多对多的维护端  需要一个中间表进行维护</span><br><span class="line">     */</span><br><span class="line">    @ManyToMany</span><br><span class="line">    @JoinTable(name = &quot;students_roles&quot;,  // 指定中间表名</span><br><span class="line">        joinColumns =&#123;@JoinColumn(name = &quot;studentId&quot;,referencedColumnName = &quot;studentId&quot;)&#125;,   // 指定中间表和student的关联</span><br><span class="line">        inverseJoinColumns = &#123;@JoinColumn(name = &quot;roleId&quot;,referencedColumnName = &quot;roleId&quot;)&#125;  // 指定中间表和role的关联</span><br><span class="line">    )</span><br><span class="line">    private List&lt;Role&gt; roles;</span><br><span class="line"></span><br><span class="line">    // 必须重新toString  不然在打印时候会递归查询 grade</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;&quot; +</span><br><span class="line">                &quot;studentId=&quot; + studentId +</span><br><span class="line">                &quot;, studentName=&#x27;&quot; + studentName + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, gradeId=&quot; + gradeId +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package io.kid1999.teacher_manager.model;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line">import javax.persistence.*;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">@Entity</span><br><span class="line">@Table</span><br><span class="line">public class Role &#123;</span><br><span class="line">    @Id</span><br><span class="line">    private Integer roleId;</span><br><span class="line">    private String roleName;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 多对多 被维护端</span><br><span class="line">     */</span><br><span class="line">    @ManyToMany(mappedBy = &quot;roles&quot;)</span><br><span class="line">    private List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-学生和身份之间的多对多关系"><a href="#测试-学生和身份之间的多对多关系" class="headerlink" title="测试 学生和身份之间的多对多关系"></a>测试 学生和身份之间的多对多关系</h4><ul><li>选取的学生作为维护端 所以只能在学生注册时添加对应的关系<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Transactional</span><br><span class="line">void TestManyToMany()&#123;</span><br><span class="line">    Student student = new Student();</span><br><span class="line">    student.setStudentId(123);</span><br><span class="line">    student.setStudentName(&quot;kid&quot;);</span><br><span class="line">    student.setGradeId(2);</span><br><span class="line">    student.setRoles(roleRepository.findAll());</span><br><span class="line">    studentRepository.save(student);    // 插入</span><br><span class="line"></span><br><span class="line">//    Role role = new Role();</span><br><span class="line">//    role.setRoleId(1);</span><br><span class="line">//    role.setRoleName(&quot;hello&quot;);</span><br><span class="line">//    roleRepository.save(role);</span><br><span class="line"></span><br><span class="line">//    Student student = studentRepository.getOne(111);</span><br><span class="line">//    List&lt;Role&gt; roles = student.getRoles();</span><br><span class="line">//    System.out.println(roles);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h4><ol><li>维护端和被维护端的选取</li><li>懒加载</li><li>JoinColumn关联列是否需要插入和更新</li><li>toString的死循环问题</li></ol><h2 id="4-Repository-层-实现-Repository-标准"><a href="#4-Repository-层-实现-Repository-标准" class="headerlink" title="4. Repository 层 实现 Repository 标准"></a>4. Repository 层 实现 Repository 标准</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Repository</span><br><span class="line">public interface AccountRepository extends JpaRepository&lt;Account,String&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-Repository-的继承关系"><a href="#5-Repository-的继承关系" class="headerlink" title="5.Repository 的继承关系"></a>5.Repository 的继承关系</h2><p><img data-src="https://pic1.superbed.cn/item/5ddd4baf8e0e2e3ee99f0395.png" class="lazyload"></p><ul><li>epository：空接口，表名任何继承它的均为仓库接口类</li><li>CrudRepository：继承Repository，实现了一组CRUD相关的方法</li><li>PagingAndSortingRepository：继承CrudRepository，实现了一组分页、排序相关的方法</li><li>JpaRepository：继承PagingAndSortRepository，实现一组JPA规范相关的方法<br>自定义的XxxRepository需要继承JpaRepository，这样该接口就具备了通用的数据访问控制层的能力。</li></ul><p><img data-src="https://pic1.superbed.cn/item/5ddd4baf8e0e2e3ee99f0393.png" class="lazyload"></p><h2 id="6-Repository的几种写法"><a href="#6-Repository的几种写法" class="headerlink" title="6.Repository的几种写法"></a>6.Repository的几种写法</h2><h4 id="自带的方法"><a href="#自带的方法" class="headerlink" title="自带的方法"></a>自带的方法</h4><ul><li>如： Save(), findAll()， getXXX() ….<h4 id="简单命名拼凑"><a href="#简单命名拼凑" class="headerlink" title="简单命名拼凑"></a>简单命名拼凑</h4></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; findUserByName(String name);</span><br></pre></td></tr></table></figure><h4 id="使用HSQL"><a href="#使用HSQL" class="headerlink" title="使用HSQL"></a>使用HSQL</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**  2. HQL</span><br><span class="line"> * HQL 和 JPQL 语法是一样的</span><br><span class="line"> * sql常用关键字和JPQL一样</span><br><span class="line"> * JPQL特点： 字段，表名 由对象类型和属性代替 （区分大小写）</span><br><span class="line"> * 编码规范： Sql常用关键字全部大写,不能使用 *</span><br><span class="line"> */</span><br><span class="line"> </span><br><span class="line"> // 1.通过 ？1 传参</span><br><span class="line">@Query(&quot;SELECT u FROM User u WHERE u.name = ?1&quot;)</span><br><span class="line">List&lt;User&gt; findUserByHSql(String name);</span><br><span class="line"></span><br><span class="line">// 2.通过 参数名 传参</span><br><span class="line">@Query(&quot;SELECT u FROM User u WHERE u.name = :name&quot;)</span><br><span class="line">List&lt;User&gt; findUserByHsqlAndParams(@Param(&quot;name&quot;) String name);</span><br></pre></td></tr></table></figure><ul><li>？加数字表示占位符，？1代表在方法参数里的第一个参数，区别于其他的index，这里从1开始 </li><li>JPQL的语法中，表名的位置对应Entity的名称，字段对应Entity的属性</li><li>:加上变量名，这里是与方法参数中有@Param的值匹配的，而不是与实际参数匹配的</li></ul><h4 id="使用-原始-SQL"><a href="#使用-原始-SQL" class="headerlink" title="使用 原始 SQL"></a>使用 原始 SQL</h4><ul><li>雷同HQL， 在@Query 中 加入 nativeQuery = true</li><li>注意在修改数据的操作中必须加 @Transactional 事务注解</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//更新</span><br><span class="line">@Transactional</span><br><span class="line">@Modifying</span><br><span class="line">@Query(value = &quot;update user a set a.name=?1 where a.id= ?2&quot;,nativeQuery = true)</span><br><span class="line">int updateName(String name,Integer id);</span><br><span class="line"></span><br><span class="line">// 删除</span><br><span class="line">@Transactional</span><br><span class="line">@Modifying</span><br><span class="line">@Query(value = &quot;delete from user where id = ?1&quot;,nativeQuery = true)</span><br><span class="line">void deletIdBysql(Integer id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 使用 HQL 删除数据</span><br><span class="line">@Transactional</span><br><span class="line">@Modifying</span><br><span class="line">@Query(&quot;delete from User u where u.id = ?1&quot;)</span><br><span class="line">void deletId(Integer id);</span><br></pre></td></tr></table></figure><ul><li>数据修改操作需要加上事务注解，保证数据的一致性</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hello world </tag>
            
            <tag> JPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis基础知识点</title>
      <link href="/2019/11/25/MyBatis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2019/11/25/MyBatis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis基础知识点"><a href="#MyBatis基础知识点" class="headerlink" title="MyBatis基础知识点"></a>MyBatis基础知识点</h1><h2 id="1-基础配置"><a href="#1-基础配置" class="headerlink" title="1.基础配置"></a>1.基础配置</h2><h5 id="1-添加依赖包"><a href="#1-添加依赖包" class="headerlink" title="1.添加依赖包"></a>1.添加依赖包</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--mysql--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;8.0.16&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h5 id="2-配置log4j"><a href="#2-配置log4j" class="headerlink" title="2.配置log4j"></a>2.配置log4j</h5><p>在 resources 目录下增加文件 log4j.properties</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=INFO, stdout</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</span><br></pre></td></tr></table></figure><h5 id="3-自定义model-POJO类"><a href="#3-自定义model-POJO类" class="headerlink" title="3.自定义model (POJO类)"></a>3.自定义model (POJO类)</h5><h5 id="4-MyBatis-的全局配置"><a href="#4-MyBatis-的全局配置" class="headerlink" title="4.MyBatis 的全局配置"></a>4.MyBatis 的全局配置</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!-- 数据库连接配置 --&gt;</span><br><span class="line">    &lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">        &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">            &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class="line">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/blog_db?useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line">    &lt;!-- 映射文件配置 --&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=&quot;mapper/UserMapper.xml&quot;/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h5 id="5-自定义映射接口"><a href="#5-自定义映射接口" class="headerlink" title="5.自定义映射接口"></a>5.自定义映射接口</h5><p>此接口对应映射配置中的sql语句 实现sql转对象 对象转sql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface UserMapper &#123;</span><br><span class="line">    //根据id获取用户信息</span><br><span class="line">    User findById(Long id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-编写XML映射文件"><a href="#6-编写XML映射文件" class="headerlink" title="6.编写XML映射文件"></a>6.编写XML映射文件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC</span><br><span class="line">        &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">        &lt;!-- 对应映射接口的命名空间 --&gt;</span><br><span class="line">&lt;mapper namespace=&quot;mapper.UserMapper&quot;&gt;</span><br><span class="line">    &lt;!-- findById对应接口中的方法 --&gt;</span><br><span class="line">    &lt;select id=&quot;findById&quot; parameterType=&quot;java.lang.Long&quot; resultType=&quot;bean.User&quot;&gt;</span><br><span class="line">        select * from blog_db.user where id=#&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br><span class="line"></span><br><span class="line">注释：</span><br><span class="line">id 对应 接口中的方法名</span><br><span class="line">parameterType ： sql语句中参数的类型</span><br><span class="line">resultType ：返回结果类型</span><br><span class="line">#&#123;id&#125; ： 占位</span><br></pre></td></tr></table></figure><h5 id="7-主函数调用"><a href="#7-主函数调用" class="headerlink" title="7.主函数调用"></a>7.主函数调用</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">  public static void main(String[] args) throws Exception&#123;</span><br><span class="line">    // 1.新建session工厂构建类</span><br><span class="line">    SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();</span><br><span class="line">    // 2.session工厂构建类  读取配置文件构造 session工厂</span><br><span class="line">    SqlSessionFactory sessionFactory = sqlSessionFactoryBuilder.build(</span><br><span class="line">            Resources.getResourceAsReader(&quot;mybatis-config.xml&quot;),</span><br><span class="line">            &quot;development&quot;  // 这个参数可以省略，因为 mybatis-config.xml 的&lt;environments&gt;标签指定了默认环境为development</span><br><span class="line">    );</span><br><span class="line">    // 3.会话工厂 构建 会话</span><br><span class="line">    SqlSession sqlSession = sessionFactory.openSession();</span><br><span class="line">    // 4.调用session的操作数据库的一个操作</span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    User user = userMapper.findById(1L);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    // 5.关闭会话</span><br><span class="line">    sqlSession.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基本使用结束—————————"><a href="#基本使用结束—————————" class="headerlink" title="基本使用结束—————————"></a>基本使用结束—————————</h3><h4 id="1-使class的字段与sql中不一致的字段-一一对应"><a href="#1-使class的字段与sql中不一致的字段-一一对应" class="headerlink" title="1.使class的字段与sql中不一致的字段 一一对应"></a>1.使class的字段与sql中不一致的字段 一一对应</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">方案一  新建map规则：</span><br><span class="line">&lt;!-- 此处将User对象的username与sql的name对应 --&gt;</span><br><span class="line">&lt;resultMap id=&quot;userResult&quot; type=&quot;bean.User&quot;&gt;</span><br><span class="line">    &lt;result property=&quot;username&quot; column=&quot;name&quot; javaType=&quot;String&quot; jdbcType=&quot;VARCHAR&quot;/&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line">                                        &lt;!-- 此处遵循userResult的映射规则 --&gt;</span><br><span class="line">&lt;select id=&quot;findById&quot; parameterType=&quot;Long&quot; resultMap=&quot;userResult&quot; resultType=&quot;bean.User&quot;&gt;</span><br><span class="line">    select * from blog_db.user where id=#&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">方案二  修改查询语句使符合字段：</span><br><span class="line">select id, name AS username, email, password from blog_db.user where id=#&#123;id&#125;</span><br></pre></td></tr></table></figure><h4 id="2-多参数查询"><a href="#2-多参数查询" class="headerlink" title="2.多参数查询"></a>2.多参数查询</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">方案一： 使用默认的param*占位</span><br><span class="line">在接口中配置：</span><br><span class="line">User findUserByNameAndPassWd(String name,String passwd);</span><br><span class="line">在xml中配置：</span><br><span class="line">&lt;select id=&quot;findUserByNameAndPassWd&quot; resultType=&quot;model.User&quot;&gt;</span><br><span class="line">  select * from blog_db.user where name=#&#123;param1&#125; and password=#&#123;param2&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">方案二：使用注解注入参数名 使用参数占位</span><br><span class="line">在接口中配置：</span><br><span class="line">User findUserByNameAndPassWd2(@Param(&quot;name&quot;) String name, @Param(&quot;passwd&quot;) String passwd);</span><br><span class="line">在xml中配置：</span><br><span class="line">&lt;select id=&quot;findUserByNameAndPassWd2&quot; resultType=&quot;model.User&quot;&gt;</span><br><span class="line">  select * from blog_db.user where name=#&#123;name&#125; and password=#&#123;passwd&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h4 id="3-Sort的小细节"><a href="#3-Sort的小细节" class="headerlink" title="3.Sort的小细节"></a>3.Sort的小细节</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">排序的参数不能使用#&#123;&#125; 只能用$&#123;&#125;</span><br><span class="line">&lt;select id=&quot;TestSort&quot; resultType=&quot;model.User&quot;&gt;</span><br><span class="line">  select * from blog_db.user order by $&#123;orderRule&#125; desc</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h4 id="4-事务："><a href="#4-事务：" class="headerlink" title="4.事务："></a>4.事务：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">得到一个数据库的操作对象</span><br><span class="line">UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">然后进行操作：</span><br><span class="line">对于insert delete 和 update 需要有手动提交事务</span><br><span class="line">userMapper.xxx(操作)</span><br><span class="line">sqlSession.rollback(true);  // 强制回滚</span><br><span class="line">sqlSession.commit();  //提交</span><br><span class="line">sqlSession.commit(true);  // 强制提交 </span><br></pre></td></tr></table></figure><h4 id="5-动态Sql"><a href="#5-动态Sql" class="headerlink" title="5.动态Sql"></a>5.动态Sql</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">如果该字段不为空就加入where中进行比较</span><br><span class="line">&lt;select id=&quot;find&quot; resultType=&quot;model.User&quot; parameterType=&quot;model.User&quot;&gt;</span><br><span class="line">    select * from blog_db.user</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;if test=&quot; id != null&quot;&gt;</span><br><span class="line">            and id = #&#123;id&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;name != null&quot;&gt;</span><br><span class="line">            and name = #&#123;name&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;email != null&quot;&gt;</span><br><span class="line">            and email = #&#123;email&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;password != null&quot;&gt;</span><br><span class="line">            and password = #&#123;password&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h4 id="6-一对一和一对多连表查询-返回混合值"><a href="#6-一对一和一对多连表查询-返回混合值" class="headerlink" title="6.一对一和一对多连表查询 返回混合值"></a>6.一对一和一对多连表查询 返回混合值</h4><ol><li>使用扩展类，存储返回的数据 （一对一）</li><li>模型里有模型  （一对一）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap id=&quot;blogResult&quot; type=&quot;bean.Blog&quot;&gt;</span><br><span class="line">    &lt;result property=&quot;id&quot; column=&quot;blog_id&quot;/&gt;</span><br><span class="line">    &lt;result property=&quot;ownerId&quot; column=&quot;user_id&quot;/&gt;</span><br><span class="line">    &lt;result property=&quot;title&quot; column=&quot;blog_title&quot;/&gt;</span><br><span class="line">    &lt;result property=&quot;content&quot; column=&quot;blog_content&quot;/&gt;</span><br><span class="line">    &lt;!--模型里有模型 association--&gt;</span><br><span class="line">    &lt;association property=&quot;user&quot; javaType=&quot;bean.User&quot;&gt;</span><br><span class="line">        &lt;id property=&quot;id&quot; column=&quot;user_id&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;name&quot; column=&quot;user_name&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;email&quot; column=&quot;user_email&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;password&quot; column=&quot;user_password&quot;/&gt;</span><br><span class="line">    &lt;/association&gt;</span><br><span class="line"></span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=&quot;findById&quot; parameterType=&quot;Long&quot; resultMap=&quot;blogResult&quot; resultType=&quot;bean.Blog&quot;&gt;</span><br><span class="line">    SELECT</span><br><span class="line">        blog.id AS blog_id,</span><br><span class="line">        blog.title AS blog_title,</span><br><span class="line">        blog.content AS blog_content,</span><br><span class="line">        user.id AS user_id,</span><br><span class="line">        user.name AS user_name,</span><br><span class="line">        user.email AS user_email,</span><br><span class="line">        user.password AS user_password</span><br><span class="line">    FROM blog, user </span><br><span class="line">    WHERE </span><br><span class="line">        blog.id = #&#123;id&#125; </span><br><span class="line">        AND user.id=blog.owner_id;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h4 id="3-模型里有集合-（一对多）"><a href="#3-模型里有集合-（一对多）" class="headerlink" title="3. 模型里有集合  （一对多）"></a>3. 模型里有集合  （一对多）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">    &lt;!--首先创建map映射关系--&gt;</span><br><span class="line">&lt;resultMap id=&quot;userResult&quot; type=&quot;model.User&quot;&gt;</span><br><span class="line">    &lt;result property=&quot;id&quot; column=&quot;user_id&quot;/&gt;</span><br><span class="line">    &lt;result property=&quot;name&quot; column=&quot;user_name&quot;/&gt;</span><br><span class="line">    &lt;result property=&quot;email&quot; column=&quot;user_email&quot;/&gt;</span><br><span class="line">    &lt;result property=&quot;password&quot; column=&quot;user_password&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--result里有集合 collection--&gt;</span><br><span class="line">    &lt;collection property=&quot;blogs&quot; ofType=&quot;model.Blog&quot;&gt;</span><br><span class="line">        &lt;id property=&quot;id&quot; column=&quot;blog_id&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;ownerId&quot; column=&quot;user_id&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;title&quot; column=&quot;blog_title&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;content&quot; column=&quot;blog_content&quot;/&gt;</span><br><span class="line">    &lt;/collection&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=&quot;findById&quot; parameterType=&quot;Long&quot; resultMap=&quot;userResult&quot; resultType=&quot;model.User&quot;&gt;</span><br><span class="line">    SELECT</span><br><span class="line">        user.id AS user_id,</span><br><span class="line">        user.name AS user_name,</span><br><span class="line">        user.email AS user_email,</span><br><span class="line">        user.password AS user_password,</span><br><span class="line">        blog.id AS blog_id,</span><br><span class="line">        blog.title AS blog_title,</span><br><span class="line">        blog.content AS blog_content</span><br><span class="line">    FROM user, blog</span><br><span class="line">    WHERE</span><br><span class="line">        user.id = 1</span><br><span class="line">        AND user.id=blog.owner_id;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h4 id="7-两个表的查询关联"><a href="#7-两个表的查询关联" class="headerlink" title="7.两个表的查询关联"></a>7.两个表的查询关联</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">这个mapper是BlogMapper的xml配置</span><br><span class="line">记得将改xml 注入 全局配置中</span><br><span class="line">&lt;mapper namespace=&quot;mapper.BlogMapper&quot;&gt;</span><br><span class="line">    &lt;!--联合多表查询--&gt;</span><br><span class="line">    &lt;!--首先要有两个表的map关系--&gt;</span><br><span class="line">    &lt;resultMap id=&quot;blogResult&quot; type=&quot;model.Blog&quot;&gt;</span><br><span class="line">        &lt;result property=&quot;id&quot; column=&quot;blog_id&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;ownerId&quot; column=&quot;user_id&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;title&quot; column=&quot;blog_title&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;content&quot; column=&quot;blog_content&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;association property=&quot;user&quot;</span><br><span class="line">                     javaType=&quot;model.User&quot;</span><br><span class="line">                     select=&quot;findOwnerOfBlog&quot;</span><br><span class="line">                     column=&quot;user_id&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;resultMap id=&quot;userResult&quot; type=&quot;model.User&quot;&gt;</span><br><span class="line">        &lt;result property=&quot;id&quot; column=&quot;user_id&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;name&quot; column=&quot;user_name&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;email&quot; column=&quot;user_email&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;password&quot; column=&quot;user_password&quot;/&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--两个查询--&gt;</span><br><span class="line">    &lt;select id=&quot;findById&quot; parameterType=&quot;Long&quot; resultMap=&quot;blogResult&quot; resultType=&quot;model.Blog&quot;&gt;</span><br><span class="line">        SELECT</span><br><span class="line">        id AS blog_id,</span><br><span class="line">        id AS user_id,</span><br><span class="line">        title AS blog_title,</span><br><span class="line">        content AS blog_content</span><br><span class="line">        FROM</span><br><span class="line">        blog</span><br><span class="line">        WHERE</span><br><span class="line">        id = #&#123;id&#125;;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;findOwnerOfBlog&quot;  parameterType=&quot;int&quot;  resultMap=&quot;userResult&quot; resultType=&quot;model.User&quot;&gt;</span><br><span class="line">        SELECT</span><br><span class="line">        id user_id,</span><br><span class="line">        name user_name,</span><br><span class="line">        email user_email,</span><br><span class="line">        password user_password</span><br><span class="line">        FROM</span><br><span class="line">        user</span><br><span class="line">        WHERE</span><br><span class="line">        id=#&#123;user_id&#125;;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br><span class="line"></span><br><span class="line">其流程是： </span><br><span class="line">1.首先 client调用BlogMapper的findById方法</span><br><span class="line">2.sql执行，作出回应，返回Blog的值（此时不直接存储User对象的值）</span><br><span class="line">3.在Blog的mapper映射中 调用 select findOwnerOfBlog 方法 传入 user_id 查询 输出User</span><br></pre></td></tr></table></figure><h4 id="8-延迟加载"><a href="#8-延迟加载" class="headerlink" title="8.延迟加载"></a>8.延迟加载</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在上述案例的基础上，在全局配置文件中增加如下配置即可实现：</span><br><span class="line">&lt;settings&gt;</span><br><span class="line">    &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">    &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">&lt;/settings&gt;</span><br><span class="line">修改后会在需要User值时，才进行select findOwnerOfBlog 方法的触发</span><br></pre></td></tr></table></figure><h4 id="9-多对多的实现"><a href="#9-多对多的实现" class="headerlink" title="9.多对多的实现"></a>9.多对多的实现</h4><h4 id="10-分页查询"><a href="#10-分页查询" class="headerlink" title="10.分页查询"></a>10.分页查询</h4><ol><li>limit显式实现</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;findByUserId&quot; resultType=&quot;model.Blog&quot;&gt;</span><br><span class="line">    select id,owner_id as ownerId,title,content</span><br><span class="line">    from blog</span><br><span class="line">    where owner_id = #&#123;param1&#125;</span><br><span class="line">    order by id asc</span><br><span class="line">    limit #&#123;param2&#125;, #&#123;param3&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>rowBounds + pageHelper 实现</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">在接口中：</span><br><span class="line">List&lt;Blog&gt; findByUserIdWithHelper(Long ownerId, RowBounds rowBounds);</span><br><span class="line">在xml中：</span><br><span class="line">&lt;select id=&quot;findByUserIdWithHelper&quot; resultType=&quot;model.Blog&quot;&gt;</span><br><span class="line">    SELECT</span><br><span class="line">    id,</span><br><span class="line">    owner_id AS ownerId,</span><br><span class="line">    title,</span><br><span class="line">    content</span><br><span class="line">    FROM</span><br><span class="line">        blog</span><br><span class="line">    WHERE</span><br><span class="line">        owner_id = #&#123;param1&#125;</span><br><span class="line">    ORDER BY id ASC</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">最后还要导包，在全局配置中加入插件pagehelper：</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">    &lt;plugin interceptor=&quot;com.github.pagehelper.PageInterceptor&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;rowBoundsWithCount&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">    &lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br></pre></td></tr></table></figure><h4 id="11-使用注解"><a href="#11-使用注解" class="headerlink" title="11.使用注解"></a>11.使用注解</h4><p>在mapper接口内使用注解sql语句实现简单的查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Select(&quot;select * from blog_db.user&quot;)</span><br><span class="line">List&lt;Blog&gt; findAll();</span><br><span class="line">其他更多....用时再查</span><br></pre></td></tr></table></figure><h4 id="12-MyBatis的二级缓存机制"><a href="#12-MyBatis的二级缓存机制" class="headerlink" title="12.MyBatis的二级缓存机制"></a>12.MyBatis的二级缓存机制</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1.一级缓存默认开启</span><br><span class="line">    范围：Mapper（同一个mapper 相当于DAO）</span><br><span class="line">    清空：当有 update delete insert操作发生</span><br><span class="line"></span><br><span class="line">2.二级缓存手动开启</span><br><span class="line">    范围：Session（同一个Session会话）</span><br><span class="line">    清空：</span><br><span class="line">    开启：</span><br><span class="line">    1.在全局配置文件中添加：</span><br><span class="line">    &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;   &lt;!--开启二级缓存--&gt;</span><br><span class="line">    2.将Mapper序列化</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://blog.letiantian.me/mybatis">优秀的学习资源</a></p>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hello world </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC基本概念和使用</title>
      <link href="/2019/11/25/SpringMVC%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/11/25/SpringMVC%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringMVC基本概念和使用"><a href="#SpringMVC基本概念和使用" class="headerlink" title="SpringMVC基本概念和使用"></a>SpringMVC基本概念和使用</h1><ul><li>Spring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web Flow里面。Spring 框架提供了构建 Web 应用程序的全功能 MVC 模块。</li></ul><h2 id="基本架构流程"><a href="#基本架构流程" class="headerlink" title="基本架构流程"></a>基本架构流程</h2><ul><li>核心思想 MVC分层设计</li></ul><p><img data-src="https://pic2.superbed.cn/item/5ddb62008e0e2e3ee94bde32.png" class="lazyload"></p><h2 id="1-入门配置"><a href="#1-入门配置" class="headerlink" title="1.入门配置"></a>1.入门配置</h2><ol><li>导包： 最基本的Spring和SpringMVC 8个包，包括web</li><li>配置SpringMVC 设置</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;</span><br><span class="line">        http://www.springframework.org/schema/beans</span><br><span class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">        http://www.springframework.org/schema/mvc</span><br><span class="line">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span><br><span class="line">        http://www.springframework.org/schema/context</span><br><span class="line">        http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 开启注解扫描 --&gt;</span><br><span class="line">    &lt;context:component-scan base-package=&quot;code.controller&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 视图解析器对象 --&gt;</span><br><span class="line">    &lt;bean id=&quot;internalResourceViewResolver&quot; class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/pages/&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 开启SpringMVC框架注解的支持 --&gt;</span><br><span class="line">    &lt;mvc:annotation-driven /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>web 配置</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span><br><span class="line">         version=&quot;4.0&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;display-name&gt;SpringMVC Project&lt;/display-name&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;!--控制中心--&gt;</span><br><span class="line">        &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--初始化加载SpringMVC配置--&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;classpath:SpringMVC.xml&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--映射监听--&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><p>4.处理函数书写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package code.controller;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(path = &quot;/test&quot;)   //一级路径</span><br><span class="line">public class helloController&#123;</span><br><span class="line"></span><br><span class="line">  // 书写一个方法对请求作出回应</span><br><span class="line">  @RequestMapping(path = &quot;/hello&quot;)  // 二级路径</span><br><span class="line">  public String SayHello()&#123;</span><br><span class="line">    System.out.println(&quot;hello SrpingMVC.&quot;);</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-基本配置"><a href="#2-基本配置" class="headerlink" title="2.基本配置"></a>2.基本配置</h3><ol><li>架构图理解<br><img data-src="https://pic2.superbed.cn/item/5ddb62008e0e2e3ee94bde34.png" class="lazyload"></li><li>RequestMapping注解<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.RequestMapping注解Controller下形成一级路径，再书写在func下形成二级目录</span><br><span class="line">2.path属性 = value 属性</span><br><span class="line">3.method属性  post get</span><br><span class="line">4.headers属性  选择接受必须携带哪些headers的url</span><br><span class="line">5.params属性 选择接受符合规定的参数的url</span><br><span class="line">6.参数绑定</span><br><span class="line">    1.普通数据类型，直接通过同名方法参数获取</span><br><span class="line">    2.bean对象类型，通过构建javabean 并通过与对象属性相同的属性名获取</span><br><span class="line">    3.绑定集合类型，通过 list[] 或 map[&#x27;&#x27;] 对应封装</span><br></pre></td></tr></table></figure></li><li>配置过滤器解决中文乱码问题 (web.xml)中</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置监听器解决中文乱码问题--&gt;</span><br><span class="line">    &lt;filter&gt;</span><br><span class="line">        &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;</span><br><span class="line">        &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;encoding&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;UTF-8&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line">    &lt;/filter&gt;</span><br><span class="line">    &lt;filter-mapping&gt;</span><br><span class="line">        &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>自定义类型转换</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1.自建转换类 实现 Converter&lt;&gt;接口</span><br><span class="line">2.Srping.xml中配置</span><br><span class="line">&lt;!--配置自定义类型转换器--&gt;</span><br><span class="line">    &lt;bean id=&quot;conversionService&quot; class=&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;converters&quot;&gt;</span><br><span class="line">            &lt;set&gt;</span><br><span class="line">                &lt;!--加载可用的类型转换器对象--&gt;</span><br><span class="line">                &lt;bean class=&quot;code.utils.StringToDate&quot;&gt;&lt;/bean&gt;</span><br><span class="line">            &lt;/set&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!-- 开启SpringMVC框架注解的支持 --&gt;</span><br><span class="line">    &lt;mvc:annotation-driven conversion-service=&quot;conversionService&quot;/&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li><p>获取 Servlet ,session , reqeust, response</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在参数位置引用: HttpServletRequest 和 HttpServletResponse</span><br><span class="line">@RequestMapping(&quot;/Servlet&quot;)</span><br><span class="line">  public String testServlet(HttpServletRequest request, HttpServletResponse response)&#123;</span><br><span class="line">    System.out.println(request); //request</span><br><span class="line">    System.out.println(request.getSession());   //session</span><br><span class="line">    System.out.println(request.getSession().getServletContext()); //servlet</span><br><span class="line">    System.out.println(response); //response</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>强制绑定该参数名的传入参数 @RequestParam(“”)</p></li><li><p>restfule 编程风格 @PathVariable</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">通过 / 后直接跟&#123;参数&#125;,减少使用 ?传参和方法名</span><br><span class="line">@RequestMapping(&quot;/testPathVariable/&#123;id&#125;&quot;)</span><br><span class="line">  public String testPathVariable(@PathVariable String id)&#123;</span><br><span class="line">    System.out.println(id);</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>拿到整个post请求的请求体: @RequestBody</p></li><li><p>拿到请求的Header @RequestHeader</p></li><li><p>拿到请求的cookie值 @CookieValue(value=””)</p></li><li><p>函数执行前的方法 @ModelAttribute</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ModelAttribute 会先于当前目录下的方法执行，可以利用其性质先进行封装判断后把值传给处理函数</span><br><span class="line">  @ModelAttribute</span><br><span class="line">  public Account testModelAttribute1(String name,String passwd)&#123;</span><br><span class="line">    Account account = new Account();</span><br><span class="line">    account.setName(name);</span><br><span class="line">    account.setPasswd(passwd);</span><br><span class="line">    account.setUser(new User(&quot;kid&quot;,20));</span><br><span class="line">    return account;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  @RequestMapping(&quot;/testModelAttribute&quot;)</span><br><span class="line">  public String testModelAttribute2(Account account)&#123;</span><br><span class="line">    System.out.println(account);</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>SessionAttributes 设置session域的共有数据</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Model默认吧数据存到request 如果要设置到session </span><br><span class="line">需要在class前添加@SessionAttributes(value = &#123;&quot;msg&quot;&#125;)注解</span><br><span class="line"></span><br><span class="line">// set</span><br><span class="line">@RequestMapping(&quot;/testSessionAttribute&quot;)</span><br><span class="line">  public String testSessionAttribute(Model model)&#123;</span><br><span class="line">    model.addAttribute(&quot;msg&quot;,&quot;hello world&quot;);  // 为model添加数据</span><br><span class="line">    // model  会把数据存到request中</span><br><span class="line">    System.out.println(&quot;testSessionAttribute&quot;);</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // get</span><br><span class="line">  @RequestMapping(&quot;/getSessionAttribute&quot;)</span><br><span class="line">  public String getSessionAttribute(ModelMap modelMap)&#123;</span><br><span class="line">    String msg = (String) modelMap.get(&quot;msg&quot;);  //取出session的值</span><br><span class="line">    System.out.println(&quot;getSessionAttribute&quot;);</span><br><span class="line">    System.out.println(msg);</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // del</span><br><span class="line">  @RequestMapping(&quot;/delSessionAttribute&quot;)</span><br><span class="line">  public String delSessionAttribute(SessionStatus status)&#123;</span><br><span class="line">    status.setComplete();   // 清空session</span><br><span class="line">    System.out.println(&quot;清空session&quot;);</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="3-视图解析器"><a href="#3-视图解析器" class="headerlink" title="3.视图解析器"></a>3.视图解析器</h3><h4 id="1-返回值是String-配置视图解析器，正常转发"><a href="#1-返回值是String-配置视图解析器，正常转发" class="headerlink" title="1. 返回值是String 配置视图解析器，正常转发"></a>1. 返回值是String 配置视图解析器，正常转发</h4><h4 id="2-返回值是void，使用HttpServletrequest-response-转发或者重定向"><a href="#2-返回值是void，使用HttpServletrequest-response-转发或者重定向" class="headerlink" title="2. 返回值是void，使用HttpServletrequest / response 转发或者重定向"></a>2. 返回值是void，使用HttpServletrequest / response 转发或者重定向</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/testVoid&quot;)</span><br><span class="line">  public void testVoid(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">    // 编写请求转发：</span><br><span class="line">//    request.getRequestDispatcher(&quot;/WEB-INF/pages/success.jsp&quot;).forward(request,response);</span><br><span class="line">    //重定向</span><br><span class="line">    response.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">    response.setContentType(&quot;text/html;charset=UTF-8&quot;);</span><br><span class="line">    response.getWriter().println(&quot;你好！&quot;);</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="3-返回值是ModelAndView"><a href="#3-返回值是ModelAndView" class="headerlink" title="3. 返回值是ModelAndView"></a>3. 返回值是ModelAndView</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/testModelAndView&quot;)</span><br><span class="line">  public ModelAndView testModelAndView() &#123;</span><br><span class="line">    ModelAndView mv = new ModelAndView();</span><br><span class="line">    User user = new User();</span><br><span class="line">    user.setUage(12);</span><br><span class="line">    user.setUname(&quot;kid&quot;);</span><br><span class="line">    mv.addObject(&quot;user&quot;,user);  //设置request参数</span><br><span class="line">    mv.setViewName(&quot;success&quot;);    // 设置转发页面</span><br><span class="line">    return mv;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="4-开放静态资源加载-SpringMVC-xml"><a href="#4-开放静态资源加载-SpringMVC-xml" class="headerlink" title="4. 开放静态资源加载 SpringMVC.xml"></a>4. 开放静态资源加载 SpringMVC.xml</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--前段控制器，那些静态资源不控制--&gt;</span><br><span class="line">    &lt;mvc:resources mapping=&quot;/js/**&quot; location=&quot;/js/&quot; /&gt;</span><br></pre></td></tr></table></figure><h4 id="5-AJAX的小案例"><a href="#5-AJAX的小案例" class="headerlink" title="5. AJAX的小案例"></a>5. AJAX的小案例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">前段ajax请求</span><br><span class="line">&lt;script src=&quot;js/jquery-3.3.1.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      //页面加载，绑定单击事件</span><br><span class="line">      $(function () &#123;</span><br><span class="line">        $(&quot;#btn&quot;).click(function () &#123;</span><br><span class="line">          // alert(&quot;hello world by js.&quot;);</span><br><span class="line">          // 发送ajax请求</span><br><span class="line">          $.ajax(&#123;</span><br><span class="line">            url:&quot;user/testAjax&quot;,</span><br><span class="line">            contentType:&quot;application/json;charset=UTF-8&quot;,</span><br><span class="line">            data:&#x27;&#123;&quot;uname&quot;:&quot;kid&quot;,&quot;uage&quot;:18&#125;&#x27;,</span><br><span class="line">            dataType:&quot;json&quot;,</span><br><span class="line">            type:&quot;post&quot;,</span><br><span class="line">            success:function (data) &#123;</span><br><span class="line">                alert(data.uname);</span><br><span class="line">                alert(data.uage);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    </span><br><span class="line">controller 执行</span><br><span class="line">// testAjax</span><br><span class="line">@RequestMapping(&quot;/testAjax&quot;)</span><br><span class="line">public @ResponseBody User testAjax(@RequestBody User user)&#123;</span><br><span class="line">System.out.println(&quot;ajax data 已收到...&quot;);</span><br><span class="line">System.out.println(user);</span><br><span class="line">user.setUname(&quot;kid1999&quot;);</span><br><span class="line">return user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">注意：ajax数据传输使用的是json springmvc对json传输的封装，使用的jackson包（需要提前导入）</span><br></pre></td></tr></table></figure><h4 id="6-传统文件上传"><a href="#6-传统文件上传" class="headerlink" title="6. 传统文件上传"></a>6. 传统文件上传</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">1.前端 设置</span><br><span class="line">&lt;form action=&quot;fileupload&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">    选择文件：&lt;input type=&quot;file&quot; name=&quot;upload&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;upload&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">2.后端接收</span><br><span class="line">@RequestMapping(&quot;/fileupload&quot;)</span><br><span class="line">  public String fileupload(HttpServletRequest request) throws Exception &#123;</span><br><span class="line">    System.out.println(&quot;upload success...&quot;);</span><br><span class="line">    // 使用fileupload组件完成文件上传</span><br><span class="line">    // 上传的位置</span><br><span class="line">    String path = request.getSession().getServletContext().getRealPath(&quot;/upload/&quot;);</span><br><span class="line">    // 判断路径是否存在</span><br><span class="line">    File file = new File(path);</span><br><span class="line">    if(!file.exists())&#123;</span><br><span class="line">      // 创建文件夹</span><br><span class="line">      file.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 解析request对象 获取文件上传项</span><br><span class="line">    DiskFileItemFactory factory = new DiskFileItemFactory();</span><br><span class="line">    ServletFileUpload upload = new ServletFileUpload(factory);</span><br><span class="line">    // 解析request</span><br><span class="line">    List&lt;FileItem&gt; items = upload.parseRequest(request);</span><br><span class="line">    // 遍历</span><br><span class="line">    for (FileItem item:items) &#123;</span><br><span class="line">      // 判断，当前item对象是否是上传文件项</span><br><span class="line">      if(item.isFormField())&#123;</span><br><span class="line">        // 普通表单</span><br><span class="line">      &#125;else &#123;</span><br><span class="line">        String filename = item.getName();</span><br><span class="line">        // 文件名设置 唯一值</span><br><span class="line">        String uuid = UUID.randomUUID().toString().replace(&quot;-&quot;,&quot;&quot;);</span><br><span class="line">        filename = uuid + &quot;_&quot; + filename;</span><br><span class="line">        item.write(new File(path,filename));  // 完成文件上传</span><br><span class="line">        item.delete();  //清空临时缓存</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  注意： 需要依赖commons-io和fileupload组件</span><br></pre></td></tr></table></figure><h4 id="7-SpringMVC的文件上传"><a href="#7-SpringMVC的文件上传" class="headerlink" title="7. SpringMVC的文件上传"></a>7. SpringMVC的文件上传</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">1.前端</span><br><span class="line">&lt;form action=&quot;/springmvcUpload&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">    选择文件：&lt;input type=&quot;file&quot; name=&quot;upload&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;upload&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">2.后端SpringMVC处理</span><br><span class="line">// SpringMVC文件上传</span><br><span class="line">  @RequestMapping(&quot;/springmvcUpload&quot;)</span><br><span class="line">  public String springmvcUpload (HttpServletRequest request,MultipartFile upload) throws IOException &#123;</span><br><span class="line">    System.out.println(&quot;upload success...&quot;);</span><br><span class="line">    // 先用</span><br><span class="line">    String path = request.getSession().getServletContext().getRealPath(&quot;/upload/&quot;);</span><br><span class="line">    File file = new File(path);</span><br><span class="line">    if(!file.exists()) file.mkdirs();</span><br><span class="line">    String uuid = UUID.randomUUID().toString().replace(&quot;-&quot;,&quot;&quot;);</span><br><span class="line">    String filename = upload.getOriginalFilename();</span><br><span class="line">    filename = uuid + &quot;_&quot; + filename;</span><br><span class="line">    upload.transferTo(new File(path,filename));</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"> 3.SpringMVC.xml</span><br><span class="line"> &lt;!--配置文件解析器对象--&gt;</span><br><span class="line">&lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;maxUploadSize&quot; value= &quot;10485760&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">注意：前端input的name 对应后端 MultipartFile 的参数名</span><br></pre></td></tr></table></figure><h4 id="8-跨服务器文件上传-（略）"><a href="#8-跨服务器文件上传-（略）" class="headerlink" title="8. 跨服务器文件上传  （略）"></a>8. 跨服务器文件上传  （略）</h4><h4 id="9-异常处理"><a href="#9-异常处理" class="headerlink" title="9. 异常处理"></a>9. 异常处理</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">    1.编写自定义异常类，做提示信息 SysException</span><br><span class="line">public class SysException extends Exception&#123;</span><br><span class="line">  // 存储提示信息</span><br><span class="line">  private String message;</span><br><span class="line">  @Override</span><br><span class="line">  public String getMessage() &#123;</span><br><span class="line">    return message;</span><br><span class="line">  &#125;</span><br><span class="line">  public void setMessage(String message) &#123;</span><br><span class="line">    this.message = message;</span><br><span class="line">  &#125;</span><br><span class="line">  public SysException(String message) &#123;</span><br><span class="line">    this.message = message;</span><br><span class="line">  &#125;</span><br><span class="line">  public SysException() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">    2.编写异常处理器 实现 HandlerExceptionResolver</span><br><span class="line">public class SysExceptionSolver implements HandlerExceptionResolver &#123;</span><br><span class="line">  // 处理业务逻辑</span><br><span class="line">  @Override</span><br><span class="line">  public ModelAndView resolveException(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) &#123;</span><br><span class="line">    // 获取异常对象</span><br><span class="line">    SysException ex = null;</span><br><span class="line">    if(e instanceof SysException) ex = (SysException)e;</span><br><span class="line">    else ex = new SysException(&quot;系统正在维护....&quot;);</span><br><span class="line">    // 创建ModelAndView对象</span><br><span class="line">    ModelAndView mv = new ModelAndView();</span><br><span class="line">    mv.addObject(&quot;message&quot;,ex.getMessage());</span><br><span class="line">    mv.setViewName(&quot;error&quot;);    //跳转</span><br><span class="line">    return mv;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">    3.配置异常处理器 bean</span><br><span class="line">    &lt;!--配置异常处理器--&gt;</span><br><span class="line">&lt;bean id=&quot;sysExceptionSolver&quot; class=&quot;code.Exception.SysExceptionSolver&quot;/&gt;</span><br><span class="line"></span><br><span class="line">流程： 上抛错误到前端控制器，自定义异常处理器处理异常。</span><br><span class="line">使用时上抛到该错误：</span><br><span class="line"> public String testError() throws SysException&#123; // 上抛异常</span><br><span class="line">    System.out.println(&quot;异常测试&quot;);</span><br><span class="line">    try &#123;</span><br><span class="line">      int a = 10/0;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">      // 控制台打印</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      // 抛出自定义异常信息</span><br><span class="line">      throw new SysException(&quot;查询所有用户出现错误。。&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="10-SpringMVC拦截器"><a href="#10-SpringMVC拦截器" class="headerlink" title="10. SpringMVC拦截器"></a>10. SpringMVC拦截器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">1.编写拦截器，实现HandlerIntercepter</span><br><span class="line">public class myIntercepter implements HandlerInterceptor &#123;</span><br><span class="line">  // 预处理，controller 方法之前</span><br><span class="line">  // return true 放行。。</span><br><span class="line">  // return false 不放行</span><br><span class="line">  @Override</span><br><span class="line">  public boolean preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o) throws Exception &#123;</span><br><span class="line">    System.out.println(&quot;preHandle拦截器已生效。。。&quot;);</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 预处理，controller 方法之后，web页面之前</span><br><span class="line">  @Override</span><br><span class="line">  public void postHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView) throws Exception &#123;</span><br><span class="line">//    直接做请求转发</span><br><span class="line">    //    httpServletRequest.getRequestDispatcher(&quot;&quot;).forward(httpServletRequest,httpServletResponse);</span><br><span class="line">  &#125;</span><br><span class="line">  // 预处理，web页面之后 最后的方法</span><br><span class="line">  @Override</span><br><span class="line">  public void afterCompletion(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">2.配置拦截器</span><br><span class="line">&lt;!--配置拦截器--&gt;</span><br><span class="line">&lt;mvc:interceptors&gt;</span><br><span class="line">    &lt;!--配置单个--&gt;</span><br><span class="line">    &lt;mvc:interceptor&gt;</span><br><span class="line">        &lt;!--拦截路径--&gt;</span><br><span class="line">        &lt;mvc:mapping path=&quot;/*&quot;/&gt;</span><br><span class="line">        &lt;!--不拦截--&gt;</span><br><span class="line">        &lt;!--&lt;mvc:exclude-mapping path=&quot;&quot;/&gt;--&gt;</span><br><span class="line">        &lt;!--配置bean--&gt;</span><br><span class="line">        &lt;bean class=&quot;code.intercepter.myIntercepter&quot;/&gt;</span><br><span class="line">    &lt;/mvc:interceptor&gt;</span><br><span class="line">&lt;/mvc:interceptors&gt;</span><br></pre></td></tr></table></figure><h3 id="4-SSM整合。。"><a href="#4-SSM整合。。" class="headerlink" title="4.SSM整合。。"></a>4.SSM整合。。</h3>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hello world </tag>
            
            <tag> SpringMVC </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 基础知识点</title>
      <link href="/2019/11/25/Spring%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2019/11/25/Spring%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring框架"><a href="#Spring框架" class="headerlink" title="Spring框架"></a>Spring框架</h1><ul><li>Spring框架是由于软件开发的复杂性而创建的。Spring使用的是基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅仅限于服务器端的开发。从简单性、可测试性和松耦合性角度而言，绝大部分Java应用都可以从Spring中受益。</li><li>控制反转</li><li>面向切片编程</li></ul><h2 id="IOC-控制反转"><a href="#IOC-控制反转" class="headerlink" title="IOC 控制反转"></a>IOC 控制反转</h2><p>将new 对象的（创建，管理，销毁..）任务交给 Spring去管理，程序员只需要去设置bean或者注解，然后申请使用即可</p><h2 id="DI-辅助IOC"><a href="#DI-辅助IOC" class="headerlink" title="DI 辅助IOC"></a>DI 辅助IOC</h2><p>对IOC的依赖进行注入</p><h4 id="bean的三种创建模式："><a href="#bean的三种创建模式：" class="headerlink" title="bean的三种创建模式："></a>bean的三种创建模式：</h4><pre><code>1.空参构造2.静态工厂3.动态工厂</code></pre><h2 id="XML配置模式："><a href="#XML配置模式：" class="headerlink" title="XML配置模式："></a>XML配置模式：</h2><h3 id="bean标签的基本配置"><a href="#bean标签的基本配置" class="headerlink" title="bean标签的基本配置"></a>bean标签的基本配置</h3><p>将需要给spring管理的class进行配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">name: 该对象的名字，供给后面使用的定位 （不建议重复）</span><br><span class="line">class: 给spring管理的类的路径</span><br><span class="line">lazy-init: 懒加载，谁用谁加载</span><br><span class="line">scope:  默认 单例模式，只调用一次构造</span><br><span class="line">        prototype: 多例模式，调用一次，新建一次对象</span><br><span class="line">        request</span><br><span class="line">        session  在web项目中使用，与对应的r/s生命周期相同</span><br><span class="line">init-method: 初始化后调用的 方法</span><br><span class="line">destroy-method: 销毁前调用的方法</span><br><span class="line"></span><br><span class="line">eg: &lt;bean name = &quot;&quot; class = &quot;&quot; lazy-init = &quot;&quot; scope = &quot; &quot; ....&gt;</span><br></pre></td></tr></table></figure><h3 id="属性注入"><a href="#属性注入" class="headerlink" title="属性注入"></a>属性注入</h3><p>为bean对象注入依赖的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.set方法注入：</span><br><span class="line">    1.基本类型注入： &lt;property name = &quot;注入的字段名&quot; value = &quot; &quot;/&gt; </span><br><span class="line">    2.引用类型注入： &lt;property name = &quot;注入的字段名&quot; ref = &quot; &quot;(已经创建的bean 的name)/&gt;</span><br><span class="line">2.构造方法注入：&lt;property name = &quot;注入的字段名&quot; value = &quot;值&quot; ref = &quot;&quot; type = &quot;指定参数类型&quot;  index = &quot;指定参数索引&quot; /&gt; </span><br><span class="line">3.复杂类型注入：</span><br><span class="line">    &lt;property name = &quot;注入的字段名&quot;&gt;</span><br><span class="line">        1.list  &lt;list&gt;&lt;value&gt;&lt;/value&gt;&lt;/list&gt;</span><br><span class="line">        2.map   &lt;map&gt;&lt;entry key = &quot;&quot; value = &quot;&quot;&gt;&lt;/map&gt;</span><br><span class="line">    &lt;/property&gt;</span><br></pre></td></tr></table></figure><h2 id="注解开发模式："><a href="#注解开发模式：" class="headerlink" title="注解开发模式："></a>注解开发模式：</h2><h3 id="bean对象的管理与配置"><a href="#bean对象的管理与配置" class="headerlink" title="bean对象的管理与配置"></a>bean对象的管理与配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">创建bean对象 @Component(&quot;name&quot;)</span><br><span class="line">为了更加细化：  1.@Controller(&quot;name&quot;) web层</span><br><span class="line">               2.@Service(&quot;name&quot;) service层</span><br><span class="line">               3.@Repository(&quot;name&quot;) dao层</span><br><span class="line">@scope</span><br><span class="line">@init-method</span><br><span class="line">@destroy-method</span><br></pre></td></tr></table></figure><h3 id="属性注入-1"><a href="#属性注入-1" class="headerlink" title="属性注入"></a>属性注入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">直接在set方法或者构造方法上加注解</span><br><span class="line">@value（&quot;value&quot;） 注入值类型</span><br><span class="line">@Autowired（）注入引用类型</span><br><span class="line">@Resource(&quot;name&quot;) 手工装配bean的name 注入引用类型</span><br></pre></td></tr></table></figure><h3 id="使用Junit整合Spring进行单元测试"><a href="#使用Junit整合Spring进行单元测试" class="headerlink" title="使用Junit整合Spring进行单元测试"></a>使用Junit整合Spring进行单元测试</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在测试类中使用注解</span><br><span class="line">@RunWith(SprngJUnit4ClassRunner.class) //使用junit进行测试，创建容器</span><br><span class="line">@ContextConfiguration(&quot;classpath:...xml&quot;) // 读取配置文件</span><br><span class="line">在需要的测试方法上</span><br><span class="line">@Test </span><br></pre></td></tr></table></figure><h3 id="其他内容"><a href="#其他内容" class="headerlink" title="其他内容"></a>其他内容</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.导入其他的Spring配置文件</span><br><span class="line">&lt;import resource = &quot;...xml&quot;/&gt;</span><br></pre></td></tr></table></figure><h2 id="Spring-AOP-面向切面编程"><a href="#Spring-AOP-面向切面编程" class="headerlink" title="Spring-AOP 面向切面编程"></a>Spring-AOP 面向切面编程</h2><p> 将纵向重复的代码，横向抽取解决  — 基于动态代理<br> （AOP术语解释 <a href="https://blog.csdn.net/yuanye348623610/article/details/8823429%EF%BC%89">https://blog.csdn.net/yuanye348623610/article/details/8823429）</a></p><p> 两种动态代理<br> 1.接口 — 2.继承</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">AOP的配置：</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">&lt;!-- 切入点 --&gt;</span><br><span class="line">&lt;aop:pointcut expression = &quot;切入点表达式(要增强的方法)&quot;  id=&quot;标识&quot;/&gt;</span><br><span class="line">&lt;!-- 切面 通知+切入点 --&gt;</span><br><span class="line">&lt;aop:aspect ref=&quot;通知&quot;&gt;</span><br><span class="line">&lt;aop:before method=&quot;方法名&quot; pointcut-ref = &quot;代理对象&quot;/&gt; 最终通知</span><br><span class="line">&lt;aop:after...&gt; 前置通知</span><br><span class="line">&lt;aop:after-returning...&gt; 成功通知</span><br><span class="line">&lt;aop:after-throwing..&gt; 异常通知</span><br><span class="line">&lt;aop:around...&gt; 环绕活动</span><br><span class="line">&lt;/aop:aspect&gt; </span><br><span class="line"></span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hello world </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript尝试</title>
      <link href="/2019/11/25/TypeScript%E5%B0%9D%E8%AF%95/"/>
      <url>/2019/11/25/TypeScript%E5%B0%9D%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装nodejs"><a href="#1-安装nodejs" class="headerlink" title="1.安装nodejs"></a>1.安装nodejs</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h2 id="2-安装TypeScript包"><a href="#2-安装TypeScript包" class="headerlink" title="2.安装TypeScript包"></a>2.安装TypeScript包</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install typescript -g</span><br><span class="line">tsc --version</span><br></pre></td></tr></table></figure><h2 id="3-编写HelloWorld程序"><a href="#3-编写HelloWorld程序" class="headerlink" title="3.编写HelloWorld程序"></a>3.编写HelloWorld程序</h2><ol><li><p>初始化项目：进入你的编程文件夹后，可以使用 <code>npm init -y</code> 来初始化项目，生成package.json文件。</p></li><li><p>创建tsconfig.json文件，在终端中输入 <code>tsc --init</code> ：它是一个TypeScript项目的配置文件，可以通过读取它来设置TypeScript编译器的编译参数。</p></li><li><p>安装@types/node,使用 <code>npm install @types/node --dev-save</code>进行安装。这个主要是解决模块的声明文件问题。</p></li><li><p>编写HelloWorld.ts文件，然后进行保存，代码如下。</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a:string = &quot;HelloWorld&quot;</span><br><span class="line">console.log(a)</span><br></pre></td></tr></table></figure><ol start="5"><li><p>在Vscode的任务菜单下，打开运行生成任务，然后选择tsc：构建-tsconfig.json，这时候就会生成一个helloWorld.js文件</p></li><li><p>在终端中输入 <code>node helloWorld.js</code> 就可以看到结果了。</p></li></ol><p><a href="https://jspang.com/">更多技术信息 参考技术胖Blog</a></p>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hello world </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go初试 六</title>
      <link href="/2019/11/24/Go%E5%88%9D%E8%AF%95%E5%85%AD/"/>
      <url>/2019/11/24/Go%E5%88%9D%E8%AF%95%E5%85%AD/</url>
      
        <content type="html"><![CDATA[<h1 id="Go语言入门尝试-六"><a href="#Go语言入门尝试-六" class="headerlink" title="Go语言入门尝试  六"></a>Go语言入门尝试  六</h1><ul><li>Go（又称 Golang）是 Google 的 Robert Griesemer，Rob Pike 及 Ken Thompson 开发的一种静态强类型、编译型语言。Go 语言语法与 C 相近，但功能上有：内存安全，GC（垃圾回收），结构形态及 CSP-style 并发计算。</li></ul><h2 id="1-Go语言的协程机制"><a href="#1-Go语言的协程机制" class="headerlink" title="1.Go语言的协程机制"></a>1.Go语言的协程机制</h2><ul><li>协程细化于线程<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package ch16</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func TestGroutine(t *testing.T)  &#123;</span><br><span class="line">for i:=0;i&lt;10;i++&#123;</span><br><span class="line">go func(i int) &#123;//go 启动一个协程</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;(i)</span><br><span class="line">time.Sleep(time.Millisecond*50)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-通过共享内存实现协程通讯"><a href="#2-通过共享内存实现协程通讯" class="headerlink" title="2. 通过共享内存实现协程通讯"></a>2. 通过共享内存实现协程通讯</h2><ul><li>通过同享资源 上锁，等待的方式 实现协程的有序执行<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">package ch17</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;sync&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">共享内存的并发机制</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">// 线程不安全的</span><br><span class="line">func TestCounterThread(t *testing.T)  &#123;</span><br><span class="line">counter := 0// 存在竞争</span><br><span class="line">for i:=0;i&lt;5000;i++&#123;</span><br><span class="line">go func() &#123;</span><br><span class="line">counter++</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">t.Log(&quot;counter = &quot;,counter)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 加锁线程安全</span><br><span class="line">func TestCounterThreadSafe(t *testing.T)  &#123;</span><br><span class="line">var mut sync.Mutex</span><br><span class="line">counter := 0// 存在竞争</span><br><span class="line">for i:=0;i&lt;5000;i++&#123;</span><br><span class="line">go func() &#123;</span><br><span class="line">defer func() &#123;mut.Unlock()&#125;()//进程错误时释放资源</span><br><span class="line">mut.Lock()// 加锁</span><br><span class="line">counter++</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Second)// 等待内部线程执行完</span><br><span class="line">t.Log(&quot;counter = &quot;,counter)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 等待子线程运行完  类似 join</span><br><span class="line">func TestCounterThreadWaitGroup(t *testing.T)  &#123;</span><br><span class="line">var mut sync.Mutex</span><br><span class="line">var wg sync.WaitGroup</span><br><span class="line">counter := 0// 存在竞争</span><br><span class="line">for i:=0;i&lt;5000;i++&#123;</span><br><span class="line">wg.Add(1)// 开始等待</span><br><span class="line">go func() &#123;</span><br><span class="line">defer func() &#123;mut.Unlock()&#125;()//进程错误时释放资源</span><br><span class="line">mut.Lock()// 加锁</span><br><span class="line">counter++</span><br><span class="line">wg.Done()//等待结束</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()//等待</span><br><span class="line">t.Log(&quot;counter = &quot;,counter)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-使用channel的方式实现协程的通讯"><a href="#3-使用channel的方式实现协程的通讯" class="headerlink" title="3.使用channel的方式实现协程的通讯"></a>3.使用channel的方式实现协程的通讯</h2><ul><li>channel 分两种队列不等待 和 牵手等待 （channel的容量决定）</li><li> 此次模拟一个生产消费模型</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package ch17</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">//  串行 运行两个任务</span><br><span class="line">func service() string  &#123;</span><br><span class="line">time.Sleep(time.Millisecond *50)</span><br><span class="line">return &quot;Done&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//并行运行两个协程  通过 channel  通讯</span><br><span class="line">func AsyncService() chan string &#123;</span><br><span class="line">rerch := make(chan string,1)// buffer channel 消息队列</span><br><span class="line">go func() &#123;</span><br><span class="line">ret := service()</span><br><span class="line">fmt.Println(&quot;returned result.&quot;)</span><br><span class="line">rerch &lt;- ret// 如果是普通channel service发送数据后会等待other拿走数据</span><br><span class="line">fmt.Println(&quot;service exited.&quot;)</span><br><span class="line">&#125;()</span><br><span class="line">return rerch</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 其他任务</span><br><span class="line">func otherTask()  &#123;</span><br><span class="line">fmt.Println(&quot;work on someting else&quot;)</span><br><span class="line">time.Sleep(time.Millisecond *100)</span><br><span class="line">fmt.Println(&quot;Task is Done.&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func TestService(t *testing.T)  &#123;</span><br><span class="line">//fmt.Println(service())</span><br><span class="line">retch := AsyncService()</span><br><span class="line">otherTask()</span><br><span class="line">fmt.Println(&lt;-retch)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-select-语句"><a href="#4-select-语句" class="headerlink" title="4.select 语句"></a>4.select 语句</h2><ul><li><p>select 是 Go 中的一个控制结构，类似于用于通信的 switch 语句。每个 case 必须是一个通信操作，要么是发送要么是接收。</p></li><li><p>select 随机执行一个可运行的 case。如果没有 case 可运行，它将阻塞，直到有 case 可运行。一个默认的子句应该总是可运行的。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package ch18</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func service() string  &#123;</span><br><span class="line">time.Sleep(time.Millisecond *500)</span><br><span class="line">return &quot;Done&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func AsyncService() chan string &#123;</span><br><span class="line">rerch := make(chan string,1)// buffer channel 消息队列</span><br><span class="line">go func() &#123;</span><br><span class="line">ret := service()</span><br><span class="line">fmt.Println(&quot;returned result.&quot;)</span><br><span class="line">rerch &lt;- ret// 如果是普通channel service发送数据后会等待other拿走数据</span><br><span class="line">fmt.Println(&quot;service exited.&quot;)</span><br><span class="line">&#125;()</span><br><span class="line">return rerch</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func TestService(t *testing.T)  &#123;</span><br><span class="line">select &#123;</span><br><span class="line">case ret := &lt;-AsyncService():</span><br><span class="line">t.Log(ret)</span><br><span class="line">case &lt;-time.After(time.Millisecond *100):// 超时直接 gg</span><br><span class="line">t.Error(&quot;time out&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-channel-的退出"><a href="#5-channel-的退出" class="headerlink" title="5.channel 的退出"></a>5.channel 的退出</h2><ul><li>生产者使用 close 关闭协程</li><li>当 协程结束时，使用 WaitGroup Done 通知消费者协程关闭</li><li>主进程等待所有Done后结束</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package ch19</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;sync&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 生产者</span><br><span class="line">func dataProducer(ch chan int,wg *sync.WaitGroup)  &#123;</span><br><span class="line">go func() &#123;</span><br><span class="line">for i:=0;i&lt;10 ;i++  &#123;</span><br><span class="line">ch &lt;- i</span><br><span class="line">&#125;</span><br><span class="line">close(ch)// 关闭 chanel</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 消费者</span><br><span class="line">func dataReceiver(ch chan int,wg *sync.WaitGroup)&#123;</span><br><span class="line">go func() &#123;</span><br><span class="line">for&#123;</span><br><span class="line">if data,ok := &lt;-ch;ok&#123;// 在channel时 退出</span><br><span class="line">fmt.Println(data)</span><br><span class="line">&#125;else &#123;</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func TestCloseChannel(t *testing.T)  &#123;</span><br><span class="line">var wg sync.WaitGroup</span><br><span class="line">ch := make(chan int)</span><br><span class="line">wg.Add(1)</span><br><span class="line">dataProducer(ch,&amp;wg)</span><br><span class="line">wg.Add(1)</span><br><span class="line">dataReceiver(ch,&amp;wg)</span><br><span class="line">wg.Wait()//等待两个协程结束</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> 并发编程 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/11/24/Go%E5%88%9D%E8%AF%95%E4%BA%94/"/>
      <url>/2019/11/24/Go%E5%88%9D%E8%AF%95%E4%BA%94/</url>
      
        <content type="html"><![CDATA[<hr><p>title: Go初试 五<br>date: 2019-11-24 23:27:26<br>tags: “Go”<br>categories: “GoLang”</p><hr><h1 id="Go语言入门尝试-五"><a href="#Go语言入门尝试-五" class="headerlink" title="Go语言入门尝试  五"></a>Go语言入门尝试  五</h1><ul><li>Go（又称 Golang）是 Google 的 Robert Griesemer，Rob Pike 及 Ken Thompson 开发的一种静态强类型、编译型语言。Go 语言语法与 C 相近，但功能上有：内存安全，GC（垃圾回收），结构形态及 CSP-style 并发计算。</li></ul><h2 id="1-Go语言中本地包的构建和使用"><a href="#1-Go语言中本地包的构建和使用" class="headerlink" title="1. Go语言中本地包的构建和使用"></a>1. Go语言中本地包的构建和使用</h2><ul><li><ol><li>生成一个斐波那契数列函数的包  ch15/series/…go<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package series</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;errors&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 初始化函数</span><br><span class="line">func init()  &#123;</span><br><span class="line">fmt.Println(&quot;init...&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func GetFib(n int) ([]int,error) &#123;</span><br><span class="line">if n &lt; 2 || n &gt; 100&#123;</span><br><span class="line">return nil,errors.New(&quot;n should be in [2,100]&quot;)</span><br><span class="line">&#125;</span><br><span class="line">res := []int&#123;1,1&#125;</span><br><span class="line">for i:=2;i&lt;n;i++&#123;</span><br><span class="line">res = append(res,res[i-1]+res[i-2])</span><br><span class="line">&#125;</span><br><span class="line">return res,nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>2.使用刚刚声明的包  ch15/client/…go</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package client</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;ch15/series&quot;       // 引入</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 调用 自定义的包</span><br><span class="line">func TestPackage(t *testing.T)  &#123;</span><br><span class="line">t.Log(series.GetFib(10))// 包内方法必须是大写开头 不然无法识别</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意有几点：</p></li><li><p>包路径，包内方法名必须大写开头…</p></li></ul><h2 id="2-使用网上的包"><a href="#2-使用网上的包" class="headerlink" title="2.使用网上的包"></a>2.使用网上的包</h2><ul><li>远程的包，大多托管于 github </li><li>使用命令 go get github.com/作者/项目名</li><li>例如： go get github.com/emirpasic/Gods<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package remote_package</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;github.com/emirpasic/Gods/lists/arraylist&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">包管理 软件：</span><br><span class="line">dep</span><br><span class="line">golide</span><br><span class="line">go module</span><br><span class="line">。。。</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">func TestRemotePackage(t *testing.T)  &#123;</span><br><span class="line">list := arraylist.New()</span><br><span class="line">a := &#x27;a&#x27;</span><br><span class="line">for i:=0;i&lt;26;i++&#123;</span><br><span class="line">list.Add(string(a))</span><br><span class="line">a++</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(list)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Go初试 四</title>
      <link href="/2019/11/24/Go%E5%88%9D%E8%AF%95%E5%9B%9B/"/>
      <url>/2019/11/24/Go%E5%88%9D%E8%AF%95%E5%9B%9B/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Go语言入门尝试-四"><a href="#Go语言入门尝试-四" class="headerlink" title="Go语言入门尝试  四"></a>Go语言入门尝试  四</h1><ul><li>Go（又称 Golang）是 Google 的 Robert Griesemer，Rob Pike 及 Ken Thompson 开发的一种静态强类型、编译型语言。Go 语言语法与 C 相近，但功能上有：内存安全，GC（垃圾回收），结构形态及 CSP-style 并发计算。</li></ul><h2 id="1-Go的继承"><a href="#1-Go的继承" class="headerlink" title="1. Go的继承"></a>1. Go的继承</h2><ul><li>Go 的继承是不完整的</li><li>父类无法访问子类的数据和方法 ，只能全部重写 获得新的方法<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">package ch12</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">go的继承不能叫做完整的继承：</span><br><span class="line">1. 父类无法访问子类的数据和方法  无多态</span><br><span class="line">2. 只能全部重写 获得新的方法</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">// pet 类</span><br><span class="line">type Pet struct &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (p *Pet) Speak()&#123;</span><br><span class="line">fmt.Print(&quot;....&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (p *Pet) SpeakTo(host string)&#123;</span><br><span class="line">p.Speak()</span><br><span class="line">fmt.Println(&quot; &quot;,host)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// dog 类  继承 pet</span><br><span class="line">/*</span><br><span class="line">type Dog struct &#123;</span><br><span class="line">p *Pet</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (d *Dog) Speak()&#123;</span><br><span class="line">d.p.Speak()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (d *Dog) SpeakTo(host string)&#123;</span><br><span class="line">d.p.SpeakTo(host)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 子类继承父类的简单写法：</span><br><span class="line">type Dog struct &#123;</span><br><span class="line">Pet</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// test</span><br><span class="line">func TestDog(t *testing.T)  &#123;</span><br><span class="line">dog := new(Dog)</span><br><span class="line">dog.SpeakTo(&quot;kid&quot;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-空接口"><a href="#2-空接口" class="headerlink" title="2.空接口"></a>2.空接口</h2><ul><li>Go 允许空接口，但是同时可可以判断接口的type<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package ch13</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func Testfn(p interface&#123;&#125;)&#123;</span><br><span class="line">switch p.(type) &#123;</span><br><span class="line">case int:</span><br><span class="line">fmt.Println(&quot;int &quot;,p)</span><br><span class="line">case string:</span><br><span class="line">fmt.Println(&quot;string &quot;,p)</span><br><span class="line">default:</span><br><span class="line">fmt.Println(&quot;Unknow type.&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 空接口</span><br><span class="line">func TestEmptyAssertion(t *testing.T)  &#123;</span><br><span class="line">Testfn(10)</span><br><span class="line">Testfn(&quot;10&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-通过接口实现多态"><a href="#3-通过接口实现多态" class="headerlink" title="3.通过接口实现多态"></a>3.通过接口实现多态</h2><ul><li>标准步骤：定义接口，父类，子类，抽象方法调用父类</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">package ch13</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type Code string</span><br><span class="line">/*</span><br><span class="line">通过 接口实现 多态</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 定义接口</span><br><span class="line">type Programmer interface &#123;</span><br><span class="line">HelloWrold() Code</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type GOPaogrammer struct &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (p *GOPaogrammer) HelloWrold() Code&#123;</span><br><span class="line">return &quot;Go&#x27;s code&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type JavaProgrammer struct &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (p *JavaProgrammer) HelloWrold() Code &#123;</span><br><span class="line">return &quot;Java&#x27;s code&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 一个抽象方法</span><br><span class="line">func aProgram(p Programmer)&#123;</span><br><span class="line">fmt.Printf(&quot;%T  %v\n&quot;,p,p.HelloWrold())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func Test(t *testing.T)&#123;</span><br><span class="line">goProg := &amp;GOPaogrammer&#123;&#125;// 新建一个对象返回的实际上一个指针</span><br><span class="line">javaProg := new(JavaProgrammer)</span><br><span class="line">aProgram(goProg)</span><br><span class="line">aProgram(javaProg)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-错误处理"><a href="#4-错误处理" class="headerlink" title="4. 错误处理"></a>4. 错误处理</h2><ul><li>核心： 及早失败，早处理</li><li>使用多返回值的特点把错误信息带出函数<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package ch14</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;errors&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func GetFib(n int) ([]int,error) &#123;</span><br><span class="line">if n &lt; 2 || n &gt; 100&#123;</span><br><span class="line">return nil,errors.New(&quot;n should be in [2,100]&quot;)</span><br><span class="line">&#125;</span><br><span class="line">res := []int&#123;1,1&#125;</span><br><span class="line">for i:=2;i&lt;n;i++&#123;</span><br><span class="line">res = append(res,res[i-1]+res[i-2])</span><br><span class="line">&#125;</span><br><span class="line">return res,nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> 核心： 及早失败</span><br><span class="line">1.Go 的错误机制： errors.New（）</span><br><span class="line">2.使用多返回值 带出错误</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">func TestFunc(t *testing.T)  &#123;</span><br><span class="line">if v,err:=GetFib(-10);err!=nil&#123;</span><br><span class="line">t.Error(err)</span><br><span class="line">&#125;else &#123;</span><br><span class="line">t.Log(v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-错误恢复"><a href="#5-错误恢复" class="headerlink" title="5. 错误恢复"></a>5. 错误恢复</h2><ul><li>使用recover恢复是很危险的，容易造成僵尸进程</li><li>中断的三种方式的 不同点<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package ch14</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;errors&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// recover 恢复错误  很危险的</span><br><span class="line">func TestPanicVxExit(t *testing.T)  &#123;</span><br><span class="line">defer func() &#123;</span><br><span class="line">if err:= recover();err !=nil&#123;</span><br><span class="line">fmt.Println(&quot;recovered from &quot;,err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">fmt.Println(&quot;start&quot;)</span><br><span class="line">panic(errors.New(&quot;someting error!&quot;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">panic抛出异常退出</span><br><span class="line">exit 异常退出</span><br><span class="line">recover 恢复出错前的状态</span><br><span class="line"> */</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go初试 三</title>
      <link href="/2019/11/24/Go%E5%88%9D%E8%AF%95%E4%B8%89/"/>
      <url>/2019/11/24/Go%E5%88%9D%E8%AF%95%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Go语言入门尝试-三"><a href="#Go语言入门尝试-三" class="headerlink" title="Go语言入门尝试  三"></a>Go语言入门尝试  三</h1><ul><li>Go（又称 Golang）是 Google 的 Robert Griesemer，Rob Pike 及 Ken Thompson 开发的一种静态强类型、编译型语言。Go 语言语法与 C 相近，但功能上有：内存安全，GC（垃圾回收），结构形态及 CSP-style 并发计算。</li></ul><h2 id="1-func-方法"><a href="#1-func-方法" class="headerlink" title="1.func 方法"></a>1.func 方法</h2><ul><li>方法是go里面的一等公民</li><li>方法可以返回方法 类似包装器</li><li>多返回</li><li>多参数</li><li>defer 最后执行 类似finally</li><li>func 都是赋值传递参数<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">package ch10</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;math/rand&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 类似包装器： 输入func 输出func</span><br><span class="line">func timeSpent(testFunc func(op int) int) func(op int) int  &#123;</span><br><span class="line">return func(n int) int &#123;</span><br><span class="line">start := time.Now()</span><br><span class="line">ret := testFunc(n)</span><br><span class="line">fmt.Print(&quot;time spent:&quot;,time.Since(start).Seconds())</span><br><span class="line">return ret</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func slowFun(op int) int&#123;</span><br><span class="line">time.Sleep(time.Second*1)</span><br><span class="line">return op</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func TestSlowFun(t *testing.T)&#123;</span><br><span class="line">tsSF := timeSpent(slowFun)</span><br><span class="line">t.Log(tsSF(10))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 多返回的方法</span><br><span class="line">func returnMultiValues() (int,int)&#123;</span><br><span class="line">return rand.Intn(10),rand.Intn(25)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func TestFn(t *testing.T)  &#123;</span><br><span class="line">a,b := returnMultiValues()</span><br><span class="line">t.Log(a,b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 多参数方法</span><br><span class="line">func Sum(ops ...int) int&#123;</span><br><span class="line">res:=0</span><br><span class="line">for _,op := range ops&#123;</span><br><span class="line">res += op</span><br><span class="line">&#125;</span><br><span class="line">return res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func TestVarparam(t *testing.T)&#123;</span><br><span class="line">t.Log(Sum(1,2,3,4,5))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 最后执行函数 类似finally</span><br><span class="line">func Clear()&#123;</span><br><span class="line">fmt.Println(&quot;clear resource.&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func TestDefer(t *testing.T)&#123;</span><br><span class="line">defer Clear()// 最后执行</span><br><span class="line">fmt.Println(&quot;start test.&quot;)</span><br><span class="line">panic(&quot;err&quot;) // 异常退出</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-类型预定义"><a href="#2-类型预定义" class="headerlink" title="2. 类型预定义"></a>2. 类型预定义</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package ch11</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 使用类型预定义 简化</span><br><span class="line">type IntConv func(op int) int</span><br><span class="line"></span><br><span class="line">func timeSpent(testFunc IntConv) IntConv  &#123;</span><br><span class="line">return func(n int) int &#123;</span><br><span class="line">start := time.Now()</span><br><span class="line">ret := testFunc(n)</span><br><span class="line">fmt.Print(&quot;time spent:&quot;,time.Since(start).Seconds())</span><br><span class="line">return ret</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func slowFun(op int) int&#123;</span><br><span class="line">time.Sleep(time.Second*1)</span><br><span class="line">return op</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func TestSlowFun(t *testing.T)&#123;</span><br><span class="line">tsSF := timeSpent(slowFun)</span><br><span class="line">t.Log(tsSF(10))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-类（结构体）"><a href="#3-类（结构体）" class="headerlink" title="3. 类（结构体）"></a>3. 类（结构体）</h2><ul><li>go 的类 类似于 结构体 + 包含该结构体指针的func</li><li>2种定义类方法的方式<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package ch11</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">&quot;unsafe&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 定义结构体</span><br><span class="line">type Employee struct &#123;</span><br><span class="line">Id string</span><br><span class="line">Name string</span><br><span class="line">Age int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 定义类方法</span><br><span class="line"></span><br><span class="line">// 1. 使用 对象复制传递： 实例成员会进行值复制</span><br><span class="line">func (e Employee) String() string  &#123;</span><br><span class="line">fmt.Printf(&quot;address is %x\n&quot;,unsafe.Pointer(&amp;e.Name))// 输出 name的地址</span><br><span class="line">return fmt.Sprintf(&quot;Id:%s-name:%s-age:%d&quot;,e.Id,e.Name,e.Age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 2. 使用 指针复制传递： 实例成员不会进行值复制</span><br><span class="line">func (e *Employee) toString() string  &#123;</span><br><span class="line">fmt.Printf(&quot;address is %x\n&quot;,unsafe.Pointer(&amp;e.Name))// 输出 name的地址</span><br><span class="line">return fmt.Sprintf(&quot;Id:%s-name:%s-age:%d&quot;,e.Id,e.Name,e.Age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func TestStruct(t *testing.T)&#123;</span><br><span class="line">e := Employee&#123;&quot;0&quot;,&quot;kid&quot;,20&#125;</span><br><span class="line">t.Log(e.String())</span><br><span class="line">t.Logf(&quot;%T&quot;,e)//等得到的是对象</span><br><span class="line"></span><br><span class="line">e1 := &amp;Employee&#123;&quot;0&quot;,&quot;kid&quot;,25&#125;</span><br><span class="line">t.Log(e1.toString())</span><br><span class="line">t.Logf(&quot;%T&quot;,e1)//等得到的是对象</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-接口"><a href="#4-接口" class="headerlink" title="4.接口"></a>4.接口</h2><ul><li>Go 无继承 只有接口</li><li>go 是 鸭子类型</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package ch11</span><br><span class="line"></span><br><span class="line">import &quot;testing&quot;</span><br><span class="line"></span><br><span class="line">type Progarmmer interface &#123;</span><br><span class="line">WriteHelloWorld() string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Goparogrammer struct &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (g *Goparogrammer) WriteHelloWorld() string&#123;</span><br><span class="line">return &quot;fmt.Println(\&quot;Hello world\&quot;)&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// go 接口没有依赖关系 是鸭子类型</span><br><span class="line">func TestClient(t *testing.T)&#123;</span><br><span class="line">var p Progarmmer</span><br><span class="line">p = new (Goparogrammer)</span><br><span class="line">t.Log(p.WriteHelloWorld())</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go初试 二</title>
      <link href="/2019/11/24/Go%E5%88%9D%E8%AF%95%E4%BA%8C/"/>
      <url>/2019/11/24/Go%E5%88%9D%E8%AF%95%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="Go语言入门尝试-二"><a href="#Go语言入门尝试-二" class="headerlink" title="Go语言入门尝试  二"></a>Go语言入门尝试  二</h1><ul><li>Go（又称 Golang）是 Google 的 Robert Griesemer，Rob Pike 及 Ken Thompson 开发的一种静态强类型、编译型语言。Go 语言语法与 C 相近，但功能上有：内存安全，GC（垃圾回收），结构形态及 CSP-style 并发计算。</li></ul><h2 id="1-Array数组"><a href="#1-Array数组" class="headerlink" title="1.Array数组"></a>1.Array数组</h2><ul><li>数组的三种初始化方式</li><li>数组的遍历方式</li><li>数组的切片<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package ch6</span><br><span class="line"></span><br><span class="line">import &quot;testing&quot;</span><br><span class="line"></span><br><span class="line">func TestArrayInit(t *testing.T)&#123;</span><br><span class="line">// 默认初始化为0</span><br><span class="line">var arr [3]int</span><br><span class="line">t.Log(arr[1],arr[2])</span><br><span class="line">// 初始化赋值</span><br><span class="line">arr2 := [3]int&#123;1,2,3&#125;</span><br><span class="line">t.Log(arr2)</span><br><span class="line">// 初始化自定义大小</span><br><span class="line">arr3 :=[...]int&#123;1,2,3&#125;</span><br><span class="line">t.Log(arr3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 数组的遍历</span><br><span class="line">func TestArrayTravel(t *testing.T)  &#123;</span><br><span class="line">arr4:=[...]int&#123;1,2,3,4,5&#125;</span><br><span class="line">// 普通写法</span><br><span class="line">for i:=0;i&lt;len(arr4) ;i++  &#123;</span><br><span class="line">t.Log(arr4[i])</span><br><span class="line">&#125;</span><br><span class="line">// for each</span><br><span class="line">for _,e := range arr4&#123;</span><br><span class="line">t.Log(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 数组的切片  [包含，不包含]</span><br><span class="line">func TestArraySection(t *testing.T)&#123;</span><br><span class="line">arr5:= [...]int&#123;1,2,3,4&#125;;</span><br><span class="line">arr5_sec := arr5[:3]</span><br><span class="line">t.Log(arr5,arr5_sec)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="2-切片"><a href="#2-切片" class="headerlink" title="2.切片"></a>2.切片</h2><ul><li>切片是种数据结构：（起点，当前长度，总容量）</li><li>切片的容量增长规律为 2^n 类似List</li><li>切片的初始化<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package ch6</span><br><span class="line"></span><br><span class="line">import &quot;testing&quot;</span><br><span class="line"></span><br><span class="line">// 切片</span><br><span class="line">func TestSlice(t *testing.T)  &#123;</span><br><span class="line">var s0 []int</span><br><span class="line">t.Log(len(s0),cap(s0))</span><br><span class="line">s0 = append(s0, 1)</span><br><span class="line">t.Log(len(s0),cap(s0))// 可访问序列的长度和容量</span><br><span class="line"></span><br><span class="line">s1:=[]int&#123;1,2,3,4&#125;// 生成一个切片</span><br><span class="line">t.Log(len(s1),cap(s1))</span><br><span class="line"></span><br><span class="line">s2:=make([]int,3,5)// 生成长度为3容量为5的切片</span><br><span class="line">t.Log(len(s2),cap(s2))</span><br><span class="line">t.Log(s2[0],s2[1],s2[2])</span><br><span class="line"></span><br><span class="line">// 往len后追加</span><br><span class="line">s2 = append(s2, 1)</span><br><span class="line">t.Log(s2[0],s2[1],s2[2],s2[3])</span><br><span class="line">t.Log(len(s2),cap(s2))</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 切片容量和长度的增长规律  容量按2^n增长</span><br><span class="line">func TestSliceGrowing(t *testing.T)  &#123;</span><br><span class="line">s:=[]int&#123;&#125;</span><br><span class="line">for i:=0;i&lt;10;i++ &#123;</span><br><span class="line">s = append(s, i)</span><br><span class="line">t.Log(len(s),cap(s))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 切片的数据结构</span><br><span class="line">func TestSliceShareMemory(t *testing.T)&#123;</span><br><span class="line">year := []string&#123;&quot;Jan&quot;,&quot;Feb&quot;,&quot;Mar&quot;,&quot;Apr&quot;,&quot;May&quot;,&quot;Jun&quot;,&quot;Jul&quot;,&quot;Aug&quot;,&quot;Sep&quot;,&quot;Oct&quot;,&quot;Nov&quot;,&quot;Dec&quot;&#125;</span><br><span class="line">Q2 := year[3:6]</span><br><span class="line">t.Log(Q2,len(Q2),cap(Q2))// 长度为3 容量为9</span><br><span class="line"></span><br><span class="line">summer:=year[5:8]</span><br><span class="line">summer[0] = &quot;Unknow&quot;// 整个数组都会被影响</span><br><span class="line">t.Log(year)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-map-k-v键值对"><a href="#3-map-k-v键值对" class="headerlink" title="3.map k-v键值对"></a>3.map k-v键值对</h2><ul><li>map的初始化</li><li>对于不存的元素 返回 状态</li><li>遍历</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package ch7</span><br><span class="line"></span><br><span class="line">import &quot;testing&quot;</span><br><span class="line"></span><br><span class="line">// map 的初始化</span><br><span class="line">func TestInitMap(t *testing.T)  &#123;</span><br><span class="line">m1 := map[int]int&#123;1:1,2:4,3:9&#125;</span><br><span class="line">t.Log(m1[2])</span><br><span class="line">t.Log(&quot;len m1&quot;,len(m1))</span><br><span class="line"></span><br><span class="line">m2 := map[int]int&#123;&#125;</span><br><span class="line">m2[4] = 16</span><br><span class="line">t.Log(&quot;len m2&quot;,len(m2))</span><br><span class="line"></span><br><span class="line">m3:= make(map[int]int,10)// 初始化map容量长度</span><br><span class="line">t.Log(&quot;len m3&quot;,len(m3))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 对比 value = 0 和 元素不存在</span><br><span class="line">func TestAccessNotExistKey(t *testing.T)&#123;</span><br><span class="line">m1 := map[int]int&#123;&#125;// 初始化都为0</span><br><span class="line">t.Log(m1[1])</span><br><span class="line">m1[2] = 0</span><br><span class="line">t.Log(m1[2])</span><br><span class="line"></span><br><span class="line">if v,ok := m1[3];ok&#123;//如果key不存在除了返回value=0，还会返回一个状态为false</span><br><span class="line">t.Log(&quot;key 3&#x27;s value is &quot;,v)</span><br><span class="line">&#125;else &#123;</span><br><span class="line">t.Log(&quot;key 3 is not existing.&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 遍历 map</span><br><span class="line">func TestTravelMap(t *testing.T)  &#123;</span><br><span class="line">m1 := map[int]int&#123;1:1,2:4,3:9&#125;</span><br><span class="line">for k,v := range m1 &#123;</span><br><span class="line">t.Log(k,v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-map-的拓展"><a href="#4-map-的拓展" class="headerlink" title="4.map 的拓展"></a>4.map 的拓展</h2><ul><li>map存储func</li><li>map实现set<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package ch8</span><br><span class="line"></span><br><span class="line">import &quot;testing&quot;</span><br><span class="line"></span><br><span class="line">// 将方法作为map的value</span><br><span class="line">func TestMapWithFubValue(t *testing.T)  &#123;</span><br><span class="line">m := map[int] func(op int)int &#123;&#125;</span><br><span class="line">m[1] = func(op int) int &#123;return op&#125;</span><br><span class="line">m[2] = func(op int) int &#123;return op*op&#125;</span><br><span class="line">m[3] = func(op int) int &#123;return op*op*op&#125;</span><br><span class="line"></span><br><span class="line">t.Log(m[1](2),m[2](2),m[3](2))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用map 实现 set</span><br><span class="line">func TestMapForSet(t *testing.T)&#123;</span><br><span class="line">mySet := map[int]bool&#123;&#125;</span><br><span class="line">mySet[1] = true</span><br><span class="line">n:=1</span><br><span class="line">if mySet[n]&#123;</span><br><span class="line">t.Log(n,&quot; is exist&quot;)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">t.Log(n,&quot;is not exist.&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mySet[3] = true</span><br><span class="line">t.Log(len(mySet))</span><br><span class="line">delete(mySet,1)</span><br><span class="line">n=1</span><br><span class="line">if mySet[n]&#123;</span><br><span class="line">t.Log(n,&quot; is exist&quot;)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">t.Log(n,&quot;is not exist.&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-string"><a href="#5-string" class="headerlink" title="5.string"></a>5.string</h2><ul><li>string 默认 utf-8编码</li><li>遍历</li><li>strings的函数</li><li>strconv的函数<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">package ch9</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;strconv&quot;</span><br><span class="line">&quot;strings&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 字符集 和 字符编码</span><br><span class="line">func TestString(t *testing.T)&#123;</span><br><span class="line">var s string</span><br><span class="line">t.Log(s)</span><br><span class="line">t.Log(len(s))</span><br><span class="line"></span><br><span class="line">s = &quot;\xE4\xB8\xA5&quot;</span><br><span class="line">t.Log(s)</span><br><span class="line">s = &quot;中&quot;</span><br><span class="line">t.Log(len(s))</span><br><span class="line"></span><br><span class="line">c := []rune(s)</span><br><span class="line">t.Logf(&quot;中 unicode %x&quot;,c[0])// 字符编码</span><br><span class="line">t.Logf(&quot;中 UTF8 %x&quot;,s)// 字符编码的具体实现</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 字符串的遍历</span><br><span class="line">func TestStringRange(t *testing.T)&#123;</span><br><span class="line">s:=&quot;中华人民共和国&quot;</span><br><span class="line">for _,value := range s&#123;</span><br><span class="line">t.Logf(&quot;%[1]c  %[1]x&quot;,value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// strings函数</span><br><span class="line">func TestStringFn(t *testing.T)  &#123;</span><br><span class="line">s := &quot;A,B,C&quot;</span><br><span class="line">parts := strings.Split(s,&quot;,&quot;)</span><br><span class="line">for _,part := range parts&#123;</span><br><span class="line">t.Logf(part)</span><br><span class="line">&#125;</span><br><span class="line">t.Log(strings.Join(parts,&quot;-&quot;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// strconv 库函数</span><br><span class="line">func TestConv(t *testing.T)  &#123;</span><br><span class="line">s := strconv.Itoa(10)</span><br><span class="line">t.Log(&quot;str: &quot; + s)</span><br><span class="line">if i,err :=strconv.Atoi(&quot;25&quot;);err == nil&#123;</span><br><span class="line">t.Log(10 + i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go初试 一</title>
      <link href="/2019/11/23/Go%E5%88%9D%E8%AF%95%20%E4%B8%80/"/>
      <url>/2019/11/23/Go%E5%88%9D%E8%AF%95%20%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Go语言入门尝试-一"><a href="#Go语言入门尝试-一" class="headerlink" title="Go语言入门尝试  一"></a>Go语言入门尝试  一</h1><ul><li>Go（又称 Golang）是 Google 的 Robert Griesemer，Rob Pike 及 Ken Thompson 开发的一种静态强类型、编译型语言。Go 语言语法与 C 相近，但功能上有：内存安全，GC（垃圾回收），结构形态及 CSP-style 并发计算。<h2 id="1-标准入门第一步：-HelloWorld"><a href="#1-标准入门第一步：-HelloWorld" class="headerlink" title="1.标准入门第一步： HelloWorld"></a>1.标准入门第一步： HelloWorld</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;os&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 1. package 必须是 main 对应 main方法</span><br><span class="line">// 2. import 引入依赖</span><br><span class="line">// 3. main 方法没有参数也没有退出值 全靠其他依赖完成</span><br><span class="line"></span><br><span class="line">func main()&#123;</span><br><span class="line">fmt.Print(&quot;hello world.&quot; + os.Args[1]);</span><br><span class="line">os.Exit(0)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-测试方法与命名规范："><a href="#2-测试方法与命名规范：" class="headerlink" title="2.测试方法与命名规范："></a>2.测试方法与命名规范：</h2></li><li>以斐波那契数列为例</li><li>测试方法文件必须以 _test.go结尾，package不必是main</li><li>但是方法测试的方法必须是func TestXXX(t *testing.T)的命名</li><li>申请变量有三种方式赋值也有三种方式<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">package try_test</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">)</span><br><span class="line">// 变量</span><br><span class="line">func TestFibList(t *testing.T) &#123;</span><br><span class="line">// 直接声明变量</span><br><span class="line">//var a int = 1</span><br><span class="line">//var b int = 1</span><br><span class="line">// 申请多个变量</span><br><span class="line">//var(</span><br><span class="line">//a int = 1</span><br><span class="line">//b int = 1</span><br><span class="line">//)</span><br><span class="line">// 简写申请变量</span><br><span class="line">a := 1</span><br><span class="line">b := 1</span><br><span class="line">t.Log(a,&quot; &quot;)</span><br><span class="line">t.Log(b,&quot; &quot;)</span><br><span class="line">for i:=0;i&lt;5;i++&#123;</span><br><span class="line">t.Log(b,&quot; &quot;)</span><br><span class="line">tmp := a</span><br><span class="line">a = b</span><br><span class="line">b = tmp + a</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 变量赋值</span><br><span class="line">func TestExchange(t *testing.T)  &#123;</span><br><span class="line">a:=1</span><br><span class="line">b:=2</span><br><span class="line"></span><br><span class="line">// 普通的交换变量</span><br><span class="line">//tmp := a</span><br><span class="line">//a = b</span><br><span class="line">//b = tmp</span><br><span class="line">//t.Log(a,b)</span><br><span class="line"></span><br><span class="line">// 多个变量赋值</span><br><span class="line">a,b = b,a</span><br><span class="line">t.Log(a,b)</span><br><span class="line">&#125;</span><br><span class="line">// 常量</span><br><span class="line">const(</span><br><span class="line">// iota 连续赋值</span><br><span class="line">Mondy = 1 + iota</span><br><span class="line">Tuesday</span><br><span class="line">Wednesday</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func TestConstantTry(t *testing.T)  &#123;</span><br><span class="line">t.Log(Mondy,Tuesday)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-变量类型："><a href="#3-变量类型：" class="headerlink" title="3.变量类型："></a>3.变量类型：</h2><ul><li>类型像C但是不支持隐性类型转换</li><li>支持指针但是不支持指针运算</li><li>字符串为空 == “”<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package ch3</span><br><span class="line"></span><br><span class="line">import &quot;testing&quot;</span><br><span class="line"></span><br><span class="line">type MyInt int64        // 自定义类型</span><br><span class="line"></span><br><span class="line">// 数据类型不支持隐形转换</span><br><span class="line">func TestImplicit(t *testing.T)&#123;</span><br><span class="line">var a int = 1</span><br><span class="line">var b int64</span><br><span class="line">b = int64(a)</span><br><span class="line">var c MyInt</span><br><span class="line">c = MyInt(b)</span><br><span class="line">t.Log(a,b,c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 指针可用 但不支持运算</span><br><span class="line">func TestPoint(t *testing.T)  &#123;</span><br><span class="line">a := 1</span><br><span class="line">aPtr := &amp;a</span><br><span class="line">//aPtr = aPtr +1</span><br><span class="line">t.Log(a,aPtr)</span><br><span class="line">t.Logf(&quot;%T %T&quot;,a,aPtr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// String 为空用“”表示</span><br><span class="line">func TestString(t *testing.T)&#123;</span><br><span class="line">var s string</span><br><span class="line">t.Log(s)</span><br><span class="line">t.Log(len(s))</span><br><span class="line">if s == &quot;&quot;&#123;</span><br><span class="line">t.Log(&quot;s 为空&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="4-数组"><a href="#4-数组" class="headerlink" title="4.数组"></a>4.数组</h2><ul><li>数组的比较只限长度相同的数组</li><li>itoa 自加定义<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package ch4</span><br><span class="line"></span><br><span class="line">import &quot;testing&quot;</span><br><span class="line"></span><br><span class="line">// 数组的比较</span><br><span class="line">func TestCompareArray(t *testing.T)  &#123;</span><br><span class="line">a:=[...] int&#123;1,2,3&#125;</span><br><span class="line">b:=[...] int&#123;1,1,3&#125;</span><br><span class="line">//c:=[...] int&#123;1,2,3,4&#125;</span><br><span class="line">d:=[...] int&#123;1,2,3&#125;</span><br><span class="line"></span><br><span class="line">t.Log(a==b)</span><br><span class="line">//t.Log(a==c)// 长度不同直接报错</span><br><span class="line">t.Log(a==d)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// TestBitClear</span><br><span class="line">const (</span><br><span class="line">read = 1 &lt;&lt; iota</span><br><span class="line">write</span><br><span class="line">exec</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func TestBitClear(t *testing.T)&#123;</span><br><span class="line">a := 7  // 0111</span><br><span class="line">a = a &amp;^ read// 清除可读权限</span><br><span class="line">t.Log(a&amp;read == read,a&amp;write==write,a&amp;exec==exec)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="5-分支判断"><a href="#5-分支判断" class="headerlink" title="5.分支判断"></a>5.分支判断</h2><ul><li>if 语句与 多返回写法</li><li>多条件的 switch</li><li>使用switch 代替 复杂的 if<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package ch5</span><br><span class="line"></span><br><span class="line">import &quot;testing&quot;</span><br><span class="line"></span><br><span class="line">// if 语句与 多返回</span><br><span class="line">func TestIfMultiSec(t *testing.T)  &#123;</span><br><span class="line">if a:=1 == 1; a&#123;</span><br><span class="line">t.Log(&quot;1==1&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 多返回在if中应用</span><br><span class="line">//if v,err := someFun(); err==nil&#123;</span><br><span class="line">//t.Log(&quot;success&quot;)</span><br><span class="line">//&#125;else&#123;</span><br><span class="line">//t.Log(&quot;error&quot;)</span><br><span class="line">//&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 多条件的 switch</span><br><span class="line">func TestSwitchMultiCase(t *testing.T)&#123;</span><br><span class="line">for i:=0;i&lt;5 ;i++  &#123;</span><br><span class="line">switch i &#123;</span><br><span class="line">case 0,2:t.Log(&quot;even&quot;)</span><br><span class="line">case 1,3:t.Log(&quot;odd&quot;)</span><br><span class="line">default:t.Log(&quot;it is not 0-3&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用switch 代替 复杂的 if</span><br><span class="line">func TestSwitchCaseCondition(t *testing.T)  &#123;</span><br><span class="line">for i:=0;i&lt;5 ;i++  &#123;</span><br><span class="line">switch &#123;</span><br><span class="line">case i%2==0:t.Log(&quot;even&quot;)</span><br><span class="line">case i%2==1:t.Log(&quot;odd&quot;)</span><br><span class="line">default:t.Log(&quot;unknow&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="6-循环条件"><a href="#6-循环条件" class="headerlink" title="6.循环条件"></a>6.循环条件</h2><ul><li>这个和其他语言都一样<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package ch5</span><br><span class="line"></span><br><span class="line">import &quot;testing&quot;</span><br><span class="line"></span><br><span class="line">func TestLoop(t *testing.T)&#123;</span><br><span class="line">n:=0</span><br><span class="line">for n&lt;5&#123;</span><br><span class="line">t.Log(n)</span><br><span class="line">n++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> hello world </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDFS的Shell操作</title>
      <link href="/2019/11/20/HDFS%E7%9A%84Shell%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/11/20/HDFS%E7%9A%84Shell%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="查询-hdfs-的命令"><a href="#查询-hdfs-的命令" class="headerlink" title="查询  hdfs 的命令:"></a>查询  hdfs 的命令:</h1><ul><li>hadoop  fs  xxx</li></ul><h2 id="1-追加内容到hdfs中的文件"><a href="#1-追加内容到hdfs中的文件" class="headerlink" title="1.追加内容到hdfs中的文件"></a>1.追加内容到hdfs中的文件</h2><blockquote><p>hadoop fs -appendToFile 本地文件 hdfs中的文件</p></blockquote><h2 id="2-查看文件内容"><a href="#2-查看文件内容" class="headerlink" title="2.查看文件内容"></a>2.查看文件内容</h2><blockquote><p>hadoop fs -cat 文件</p></blockquote><h2 id="3-修改文件权限"><a href="#3-修改文件权限" class="headerlink" title="3.修改文件权限"></a>3.修改文件权限</h2><blockquote><p>hadoop fs -chmod 权限修改  对象文件</p></blockquote><h2 id="4-修改文件的所属用户和组"><a href="#4-修改文件的所属用户和组" class="headerlink" title="4.修改文件的所属用户和组"></a>4.修改文件的所属用户和组</h2><blockquote><p>hadoop fs -chown  用户名 组名 文件</p></blockquote><h2 id="5-上传本地文件到hdfs"><a href="#5-上传本地文件到hdfs" class="headerlink" title="5.上传本地文件到hdfs"></a>5.上传本地文件到hdfs</h2><blockquote><p>hadoop fs -put 本地文件 hdfs路径<br>hadoop fs -copyFromLocal 本地文件 hdfs路径</p></blockquote><h2 id="6-下载hdfs文件到本地"><a href="#6-下载hdfs文件到本地" class="headerlink" title="6.下载hdfs文件到本地"></a>6.下载hdfs文件到本地</h2><blockquote><p>hadoop fs -get hdfs文件 本地路径<br>hadoop fs -copyToLocal hdfs文件 本地路径</p></blockquote><h2 id="7-在hdfs中拷贝文件"><a href="#7-在hdfs中拷贝文件" class="headerlink" title="7.在hdfs中拷贝文件"></a>7.在hdfs中拷贝文件</h2><blockquote><p>hadoop fs -cp 目标 拷贝路径</p></blockquote><h2 id="8-查询磁盘使用量"><a href="#8-查询磁盘使用量" class="headerlink" title="8.查询磁盘使用量"></a>8.查询磁盘使用量</h2><blockquote><p>hadoop fs -df -h  路径</p></blockquote><h2 id="9-统计磁盘文件的大小"><a href="#9-统计磁盘文件的大小" class="headerlink" title="9.统计磁盘文件的大小"></a>9.统计磁盘文件的大小</h2><blockquote><p>hadoop fs -du -s -h 目标目录-</p></blockquote><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><pre><code>hadoop fs -lshadoop fs -mvhadoop fs mkdirhadoop fs rm -r</code></pre>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDFS的配置和一些操作</title>
      <link href="/2019/11/20/HDFS%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/11/20/HDFS%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="1-返回hadoop集群的信息："><a href="#1-返回hadoop集群的信息：" class="headerlink" title="1.返回hadoop集群的信息："></a>1.返回hadoop集群的信息：</h2><p><code>hdfs dfsadmin -report</code></p><h2 id="2-返回可访问的端口："><a href="#2-返回可访问的端口：" class="headerlink" title="2.返回可访问的端口："></a>2.返回可访问的端口：</h2><p><code>netstat -ntlp  </code></p><h2 id="3-hadoop的网页访问-："><a href="#3-hadoop的网页访问-：" class="headerlink" title="3.hadoop的网页访问 ："></a>3.hadoop的网页访问 ：</h2><p> <code>masterip + ：端口50070</code></p><h2 id="4-关闭节点："><a href="#4-关闭节点：" class="headerlink" title="4.关闭节点："></a>4.关闭节点：</h2><p><code>hadoop-daemon.sh stop namenode/datanode</code>  </p><h2 id="5-hadoop-etc-hadoop-下的slaves管理着datanode："><a href="#5-hadoop-etc-hadoop-下的slaves管理着datanode：" class="headerlink" title="5.hadoop/etc/hadoop 下的slaves管理着datanode："></a>5.hadoop/etc/hadoop 下的slaves管理着datanode：</h2><p><code>vim slaves</code></p><blockquote><p>填入所有 datanode名字（S1）</p></blockquote><h2 id="6-利用master管理所有子节点："><a href="#6-利用master管理所有子节点：" class="headerlink" title="6.利用master管理所有子节点："></a>6.利用master管理所有子节点：</h2><blockquote><p><code>start-dfs.sh</code> 启动所有节点</p></blockquote><blockquote><p><code>stop-dfs.sh </code> 关闭所有节点</p></blockquote><h2 id="7-免密登陆："><a href="#7-免密登陆：" class="headerlink" title="7.免密登陆："></a>7.免密登陆：</h2><blockquote><p>ssh-keygen -t rsa<br>cd /.ssh</p></blockquote><p> 一路回车 生成两个文件 一个root的私钥 ，一个公钥</p><blockquote><p>ssh-copy-id S1（子节点）</p></blockquote><p>将公钥给子节点，以后就不用给密码了</p><h2 id="8-hadoop-fs-ls（Linux的命令）-。。。。"><a href="#8-hadoop-fs-ls（Linux的命令）-。。。。" class="headerlink" title="8. hadoop fs  -ls（Linux的命令）  。。。。"></a>8. hadoop fs  -ls（Linux的命令）  。。。。</h2><p>其实是类似linux</p><blockquote><p>例如  <code>hadoop fs -put     ...</code><br>将。。。上传至hdfs系统</p></blockquote><h2 id="9-修改文件备份数量"><a href="#9-修改文件备份数量" class="headerlink" title="9.修改文件备份数量"></a>9.修改文件备份数量</h2><p>vim hdfs-site.xml<br>添加:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;3&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop集群搭建手册</title>
      <link href="/2019/11/20/Hadoop%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E6%89%8B%E5%86%8C/"/>
      <url>/2019/11/20/Hadoop%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop集群搭建手册"><a href="#Hadoop集群搭建手册" class="headerlink" title="Hadoop集群搭建手册"></a>Hadoop集群搭建手册</h1><h2 id="1-准备材料"><a href="#1-准备材料" class="headerlink" title="1.准备材料"></a>1.准备材料</h2><ul><li>centos7 虚拟机N台</li><li>xshell xftp</li><li>hadoop,jdk安装包</li></ul><h2 id="2-将Linux连接到客户端（本机）"><a href="#2-将Linux连接到客户端（本机）" class="headerlink" title="2.将Linux连接到客户端（本机）"></a>2.将Linux连接到客户端（本机）</h2><pre><code>修改网关： 本机为192.168.2.1  其他为101/102/103.。。。在虚拟机中选择host-only网络vim /etc/sysconfig/network&gt;&gt;&gt;NETWORKING=yes&gt;&gt;&gt;GATWAY=192.168.2.1 (本机ip)修改ipvim /etc/sysconfig/network-sripts/ifcfg-enp0s3  (linux网卡名字)&gt;&gt;&gt;TYPE=Ethernet&gt;&gt;&gt;IPADDR=192.168.20  (给linux分配的ip)&gt;&gt;&gt;NETMASK=255.255.255.0修改主机名 ；hostnamectl set-hostname  ....重启网络：service network restart测试是否修改成功：（注意关掉防火墙)ifconfigping 客户端ip</code></pre><h2 id="3-安装好一台linux："><a href="#3-安装好一台linux：" class="headerlink" title="3.安装好一台linux："></a>3.安装好一台linux：</h2><pre><code>装好xshell 利用ssh访问linux装好xftp  将本地下载的 Hadoop jdk 上传 linux安装 jdk：rpm -ivh 。。。rpm   （默认安装在/usr/java）用 java命令检查安装 Hadoop：tar -xvf 。。。tar.gzmv改名</code></pre><p>设置环境变量</p><blockquote><p>vim /etc/profile</p></blockquote><pre><code>export HADOOP_HOME=/usr/local/hadoopexport PATH=$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$PATH</code></pre><p>让设置生效</p><pre><code>source /etc/profile</code></pre><p>设置Hadoop的JAVA_HOME</p><pre><code>cd /usr/local/hadoopvim etc/hadoop/hadoop-env.shexport JAVA_HOME=/usr/java/default</code></pre><h2 id="4-网络联通"><a href="#4-网络联通" class="headerlink" title="4.网络联通"></a>4.网络联通</h2><pre><code>全部关掉防火墙systemctl stop firewalldsystemctl disable firewalld查看防火墙状态firewall-cmd --state停止firewallsystemctl stop firewalld.service禁止firewall开机启动systemctl disable firewalld.service 互相ping测试是否联通分别进行 修改ip/ 修改主机名 / 重启网络 的操作</code></pre><h2 id="5-配置-usr-local-hadoop-etc-hadoop"><a href="#5-配置-usr-local-hadoop-etc-hadoop" class="headerlink" title="5.配置/usr/local/hadoop/etc/hadoop"></a>5.配置/usr/local/hadoop/etc/hadoop</h2><p>中心节点配置：</p><blockquote><p>vim core-site.xml</p></blockquote><pre><code>&lt;!-- 指定HADOOP所使用的文件系统schema（URI），HDFS的老大（NameNode）的地址 --&gt;&lt;property&gt;    &lt;name&gt;fs.defaultFS&lt;/name&gt;    &lt;value&gt;hdfs://master:9000&lt;/value&gt;&lt;/property&gt;&lt;!-- 指定hadoop运行时产生文件的存储目录 --&gt;&lt;property&gt;      &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;    &lt;value&gt;/usr/local/hadoop/tmp&lt;/value&gt;&lt;/property&gt;</code></pre><p> 修改备份数量</p><blockquote><p>vim hdfs-site.xml</p></blockquote><pre><code>&lt;!-- 指定HDFS副本的数量 --&gt;&lt;property&gt;    &lt;name&gt;dfs.replication&lt;/name&gt;    &lt;value&gt;1&lt;/value&gt;&lt;/property&gt; &lt;!-- 指Second namenode的启动位置 --&gt;&lt;property&gt;    &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;    &lt;value&gt;master:50090&lt;/value&gt;&lt;/property&gt;</code></pre><p>修改计算框架    </p><blockquote><p>vim mapred-site.xml</p></blockquote><pre><code>&lt;!-- 指定mr运行在yarn上 --&gt;&lt;property&gt;    &lt;name&gt;mapreduce.framework.name&lt;/name&gt;    &lt;value&gt;yarn&lt;/value&gt;&lt;/property&gt;</code></pre><p>修改资源调用框架</p><blockquote><p>vim yarn-site.xml</p></blockquote><pre><code>&lt;!-- 指定YARN的老大（ResourceManager）的地址 --&gt;&lt;property&gt;        &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;        &lt;value&gt;master&lt;/value&gt;&lt;/property&gt;    &lt;!-- reducer获取数据的方式 --&gt;&lt;property&gt;        &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;        &lt;value&gt;mapreduce_shuffle&lt;/value&gt; &lt;/property&gt;</code></pre><h4 id="如果是完全分布式-将上面的做好的拷贝-修改ip-hostname即可。如果是伪分布式-就这样运行就好了"><a href="#如果是完全分布式-将上面的做好的拷贝-修改ip-hostname即可。如果是伪分布式-就这样运行就好了" class="headerlink" title="如果是完全分布式,将上面的做好的拷贝,修改ip hostname即可。如果是伪分布式,就这样运行就好了"></a>如果是完全分布式,将上面的做好的拷贝,修改ip hostname即可。如果是伪分布式,就这样运行就好了</h4><h2 id="6-启动hdfs"><a href="#6-启动hdfs" class="headerlink" title="6.启动hdfs"></a>6.启动hdfs</h2><pre><code>首先格式化hdfs   hdfs namenode -format将ip与名字对应vim /etc/hosts    192.168.2.20  master    ....    ....    ....master启动 namenode：    hadoop-daemon.sh start namenodejps  检查namenode是否启动vim slaves添加子节点信息    master    s1    ....slave启动 datanode：    hadoop-daemon.sh start datanodejps检查</code></pre><h2 id="错误指南"><a href="#错误指南" class="headerlink" title="错误指南"></a>错误指南</h2><pre><code>1.如果出现javahome问题          &gt;&gt;&gt; 配置javahome路径 vim hadoop-env.sh             /usr/java/default2.出现 -bash  hadoop  。。。not found 问题    &gt;&gt;&gt; 配置 vim /etc/profile增加:    export HADOOP_HOME=/usr/local/hadoop    export PATH=$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$PATH3.修改完配置信息以后记得 source  /。。。4.多次格式化hdfs会导致 namenode与datanode的id不合  &gt;&gt; master启动不了datanode 进入hadoop的logs 下查看日志   &gt;&gt;  修改Version的 natanode 和 namenode 的clusterID一致</code></pre>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019蓝桥杯校赛总结</title>
      <link href="/2019/11/17/2019%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A0%A1%E8%B5%9B/"/>
      <url>/2019/11/17/2019%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A0%A1%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h2 id="2019蓝桥杯校赛总结"><a href="#2019蓝桥杯校赛总结" class="headerlink" title="2019蓝桥杯校赛总结"></a>2019蓝桥杯校赛总结</h2><h4 id="1-2-计算器计算内存-手动忽略"><a href="#1-2-计算器计算内存-手动忽略" class="headerlink" title="1 - 2 计算器计算内存(手动忽略)"></a>1 - 2 计算器计算内存(手动忽略)</h4><h4 id="3-统计1-2019中带’9’的数字有多少个"><a href="#3-统计1-2019中带’9’的数字有多少个" class="headerlink" title="3.统计1-2019中带’9’的数字有多少个"></a>3.统计1-2019中带’9’的数字有多少个</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class C &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int res = 0;</span><br><span class="line">for(int i=1;i&lt;=2019;i++)&#123;</span><br><span class="line">if(func(String.valueOf(i))) res++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(res);</span><br><span class="line">&#125;</span><br><span class="line">public static boolean func(String n) &#123;</span><br><span class="line">for(char c:n.toCharArray())&#123;</span><br><span class="line">if(c == &#x27;9&#x27;) return true;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>思路很简单,要么用字符串要么用取模判断是不是含有’9’</li></ul><h4 id="4-统计8-8的图里有多少种走对角线的方式"><a href="#4-统计8-8的图里有多少种走对角线的方式" class="headerlink" title="4.统计8*8的图里有多少种走对角线的方式"></a>4.统计8*8的图里有多少种走对角线的方式</h4><p>这个题有点东西是在给了很多限制，其实最后发现都是没啥用的，加不加也是那么多 (只能往右或者往下走) 直接dfs即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class D &#123;</span><br><span class="line">static int res = 0;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">dfs(0,0,0);</span><br><span class="line">System.out.println(res);</span><br><span class="line">&#125;</span><br><span class="line">public static void dfs(int i,int j,int count)&#123;</span><br><span class="line">if(i&lt;0||i&gt;=8||j&lt;0||j&gt;=8||count&gt;14) return;</span><br><span class="line">if(i==7&amp;&amp;j==7&amp;&amp;count==14)&#123;</span><br><span class="line">res++;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">dfs(i+1,j,count+1);</span><br><span class="line">dfs(i,j+1,count+1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-和第三题有点类似-只不过是求1-n直接有多少-由不同数字组成的数字"><a href="#5-和第三题有点类似-只不过是求1-n直接有多少-由不同数字组成的数字" class="headerlink" title="5.和第三题有点类似,只不过是求1-n直接有多少(由不同数字组成的数字)"></a>5.和第三题有点类似,只不过是求1-n直接有多少(由不同数字组成的数字)</h4><ul><li>多加一个vis数组判断该数,是否在这个数字里出现过 复杂度应该是(数字的位数*n)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class E &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line">int n = sc.nextInt();</span><br><span class="line">int res = n;</span><br><span class="line">for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">if(func(i)) res--;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(res);</span><br><span class="line">&#125;</span><br><span class="line">public static boolean func(int num)&#123;</span><br><span class="line">boolean[] vis = new boolean[11];//这里有点费空间</span><br><span class="line">while(num != 0)&#123;</span><br><span class="line">int n = num%10;</span><br><span class="line">if(vis[n]) return true;</span><br><span class="line">else vis[n] = true;</span><br><span class="line">num /= 10;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="6-求最长上升子序列的长度"><a href="#6-求最长上升子序列的长度" class="headerlink" title="6.求最长上升子序列的长度"></a>6.求最长上升子序列的长度</h4><ul><li>直接遍历 (n的时间复杂度) 统计最长的序列长度<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class F &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line">int n = sc.nextInt();</span><br><span class="line">int[] nums = new int[n+1];</span><br><span class="line">for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">nums[i] = sc.nextInt();</span><br><span class="line">&#125;</span><br><span class="line">int max = 1;</span><br><span class="line">int len = 1;</span><br><span class="line">int num = nums[0];</span><br><span class="line">for(int i=1;i&lt;n;i++)&#123;</span><br><span class="line">if(num&lt;nums[i]) len++;</span><br><span class="line">else len = 1;</span><br><span class="line">num = nums[i];</span><br><span class="line">if(len &gt; max ) max = len;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(max);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="7-本来是一道送分题-求逆序对"><a href="#7-本来是一道送分题-求逆序对" class="headerlink" title="7.本来是一道送分题,求逆序对"></a>7.本来是一道送分题,求逆序对</h4><ul><li>写过的题，结果活生生会被自己玩成了丢分题，思路很简单直接两层for暴力也能过，但是使用归并排序理论上是能过10w的测试集的。关键一步没写出来，难受，不想说话…..<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public class G &#123;</span><br><span class="line">static int res = 0;</span><br><span class="line">static int[] nums;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line">int n = sc.nextInt();</span><br><span class="line">nums = new int[n+1];</span><br><span class="line">for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">nums[i] = sc.nextInt();</span><br><span class="line">&#125;</span><br><span class="line">merge_sort(nums,0,n-1);</span><br><span class="line">System.out.println(res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void merge_sort(int[] nums,int l,int r)&#123;</span><br><span class="line">if(l&gt;=r) return;</span><br><span class="line">int mid = l+r&gt;&gt;1;</span><br><span class="line">merge_sort(nums,l,mid);</span><br><span class="line">merge_sort(nums,mid+1,r);</span><br><span class="line">int[] tmp = new int[r-l+1];</span><br><span class="line">int k=0,left=l,right=mid+1;</span><br><span class="line">while(left&lt;=mid &amp;&amp; right&lt;=r)&#123;</span><br><span class="line">if(nums[left]&lt;=nums[right]) tmp[k++] = nums[left++];</span><br><span class="line">else &#123;</span><br><span class="line">tmp[k++] = nums[right++];</span><br><span class="line">res+=mid-left+1;            // 核心: 逆序对 应该是后面的数去前面的路程之和</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">while(left&lt;=mid)&#123;</span><br><span class="line">tmp[k++] = nums[left++];</span><br><span class="line">&#125;</span><br><span class="line">while(right&lt;=r) tmp[k++] = nums[right++];</span><br><span class="line">for(int n:tmp) nums[l++] = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="8-求1-n之间取n个数且满足奇数位大于前一项-偶数位小于前一项"><a href="#8-求1-n之间取n个数且满足奇数位大于前一项-偶数位小于前一项" class="headerlink" title="8.求1-n之间取n个数且满足奇数位大于前一项,偶数位小于前一项"></a>8.求1-n之间取n个数且满足奇数位大于前一项,偶数位小于前一项</h4><ul><li>相当标准的搜索,但是好像拿不了多少分</li><li>思路: 第一个数随便取,后面的按奇偶位分策略搜索<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public class H &#123;</span><br><span class="line">static int res = 0;</span><br><span class="line">static int n,m;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line">m = sc.nextInt();</span><br><span class="line">n = sc.nextInt();</span><br><span class="line">for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">dfs(2,i);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void dfs(int index,int pre)&#123;</span><br><span class="line">if(index == m+1)&#123;</span><br><span class="line">res++;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">if(index % 2 == 0)&#123;</span><br><span class="line">for(int i=1;i&lt;pre;i++)&#123;</span><br><span class="line">dfs(index+1,i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">for(int i=pre+1;i&lt;=n;i++)&#123;</span><br><span class="line">dfs(index+1,i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="9-加上步长-求最短路径"><a href="#9-加上步长-求最短路径" class="headerlink" title="9.加上步长,求最短路径"></a>9.加上步长,求最短路径</h4><ul><li>也是dfs搜索最短路径,不过是搜索的路线有所限制,必须是满足路径之长小于步长(使用dp数组保存该点的最短路径,用空间换时间)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class I &#123;</span><br><span class="line">static boolean[][] vis;</span><br><span class="line">static int[][] dp;</span><br><span class="line">static int n,m;</span><br><span class="line">static double size; </span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line">n = sc.nextInt();</span><br><span class="line">m = sc.nextInt();</span><br><span class="line">size = sc.nextDouble();</span><br><span class="line">vis = new boolean[n+1][m+1];</span><br><span class="line">dp = new int[n+1][m+1];</span><br><span class="line">System.out.println(dfs(1,1));</span><br><span class="line">&#125;</span><br><span class="line">public static int dfs(int i,int j)&#123;</span><br><span class="line">if(i==n&amp;&amp;j==m) return 0;</span><br><span class="line">if(dp[i][j] != 0) return dp[i][j];</span><br><span class="line">int min = Integer.MAX_VALUE;</span><br><span class="line">for(int x=0;x&lt;=n-i;x++)&#123;        // 搜索策略</span><br><span class="line">for(int y=0;y&lt;=m-j;y++)&#123;</span><br><span class="line">if(Math.sqrt((x*x) + (y*y)) &gt; size) break;</span><br><span class="line">if(!vis[i+x][j+y]) &#123;</span><br><span class="line">vis[i+x][j+y] = true;</span><br><span class="line">min = Math.min(min, dfs(i+x,j+y));</span><br><span class="line">vis[i+x][j+y] = false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dp[i][j] = min+1;       // 保存最短路径</span><br><span class="line">return min + 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>但是好像还是过不了1000*1000的矩阵</p><h4 id="10-按原顺序输出前n大的数字"><a href="#10-按原顺序输出前n大的数字" class="headerlink" title="10.按原顺序输出前n大的数字"></a>10.按原顺序输出前n大的数字</h4><ul><li>前n大可以直接sort或者用优先队列</li><li>后面按顺序输出,可以用map记录前n大的数据,再回原数组中按位置输出</li><li>使用map可以用key记录数字,value记录出现次数,处理具有重复数据的情况<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public class J &#123;</span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line">int n = sc.nextInt();</span><br><span class="line">int m = sc.nextInt();</span><br><span class="line">int[] nums = new int[n+1];</span><br><span class="line">PriorityQueue&lt;Integer&gt; q = new PriorityQueue&lt;&gt;(m);</span><br><span class="line">for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">int num = sc.nextInt();</span><br><span class="line">nums[i] = num;</span><br><span class="line">if(q.size() &lt;m) q.add(num);</span><br><span class="line">else if(q.peek() &lt; num)&#123;</span><br><span class="line">q.poll();</span><br><span class="line">q.add(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Map&lt;Integer,Integer&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">for(int i=0;i&lt;m;i++)&#123;</span><br><span class="line">int key = q.poll();</span><br><span class="line">if(map.containsKey(key))&#123;</span><br><span class="line">map.put(key,map.get(key)+1);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">map.put(key,1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">if(map.containsKey(nums[i]))&#123;</span><br><span class="line">System.out.print(nums[i] + &quot; &quot;);</span><br><span class="line">if(map.get(nums[i]) == 1) map.remove(nums[i]);</span><br><span class="line">else map.put(nums[i], map.get(nums[i])-1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>O(nlogn)的复杂度,应该能过,只是最后太着急,忘了加上判断,value为0时删除该元素….</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><p> DFS用的很多，但是剪枝没写好，只能拿部分分。<br> 失误太多，会的没写出来，反而浪费大把时间。希望能过校赛，给个补救的机会。。。。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> DFS </tag>
            
            <tag> 排序算法 </tag>
            
            <tag> 模拟 </tag>
            
            <tag> 竞赛 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序模板</title>
      <link href="/2019/11/16/%E6%8E%92%E5%BA%8F%E6%A8%A1%E6%9D%BF/"/>
      <url>/2019/11/16/%E6%8E%92%E5%BA%8F%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><ul><li>利用分治，选择一个标兵使左右区间分别满足&lt;=和&gt;=标兵，递归子区间直到区间长度为1</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public static void quick_sort(int[] nums, int l, int r) &#123;</span><br><span class="line">if(l&gt;=r) return;</span><br><span class="line">int m = nums[l+r&gt;&gt;1],left = l-1,right = r+1;  //注意此处的标兵取值 必须与下面递归的标兵相反 l - right</span><br><span class="line">while (left&lt;right)&#123;</span><br><span class="line">do left++; while (nums[left] &lt; m);</span><br><span class="line">do right--; while (nums[right] &gt; m);</span><br><span class="line">if(left&lt;right) &#123;</span><br><span class="line">int tmp = nums[left];</span><br><span class="line">nums[left] = nums[right];</span><br><span class="line">nums[right] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">quick_sort(nums,l,right);</span><br><span class="line">quick_sort(nums,right+1, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>持续优化：1.类似荷兰旗问题，当所求值与标兵相同时 不参与下一次递归<br>  2.随机标兵 表现会比固定标兵的效果好</p><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><ul><li>也是分治，先递归，再合并。每次递归二分直到区间长度为1，然后和并返回有序数组</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public static void merge_sort(int[] nums,int l,int r)&#123;</span><br><span class="line">    if(l&gt;=r) return;</span><br><span class="line">    int mid = l+r&gt;&gt;1;</span><br><span class="line">    merge_sort(nums,l,mid);</span><br><span class="line">    merge_sort(nums,mid+1,r);</span><br><span class="line">    int[] tmp = new int[r-l+1];</span><br><span class="line">    int k=0,left=l,right=mid+1;</span><br><span class="line">    while(left&lt;=mid &amp;&amp; right&lt;=r)&#123;</span><br><span class="line">        if(nums[left]&lt;nums[right]) tmp[k++] = nums[left++];</span><br><span class="line">        else tmp[k++] = nums[right++];</span><br><span class="line">    &#125;</span><br><span class="line">    while(left&lt;=mid) tmp[k++] = nums[left++];</span><br><span class="line">    while(right&lt;=r) tmp[k++] = nums[right++];</span><br><span class="line">    for(int n:tmp) nums[l++] = n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="快排重在切分区间，归并重在合并区间"><a href="#快排重在切分区间，归并重在合并区间" class="headerlink" title="快排重在切分区间，归并重在合并区间"></a>快排重在切分区间，归并重在合并区间</h4><h2 id="java中的复合排序"><a href="#java中的复合排序" class="headerlink" title="java中的复合排序"></a>java中的复合排序</h2><ul><li>对新建的结构体使用继承 Comparable接口 实习排序对比</li><li>对于普通的对比，使用 new Comparator类</li><li>对于复合对比 使用多层if-else嵌套</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Comparator;</span><br><span class="line">import java.util.List;</span><br><span class="line">// 对结构体排序</span><br><span class="line">class Node implements Comparable&lt;Node&gt;&#123;</span><br><span class="line">int x;</span><br><span class="line">int y;</span><br><span class="line">public Node(int x, int y) &#123;</span><br><span class="line">this.x = x;</span><br><span class="line">this.y = y;</span><br><span class="line">&#125;</span><br><span class="line">// 先按 x 排序 再按 y排序</span><br><span class="line">@Override</span><br><span class="line">public int compareTo(Node other) &#123;</span><br><span class="line">if(other.x &gt; this.x) return 1;</span><br><span class="line">else if(other.x &lt; this.x) return -1;</span><br><span class="line">else &#123;</span><br><span class="line">return other.y - this.y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class NodeSort &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">List&lt;Node&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">list.sort(new Comparator&lt;Node&gt;() &#123;</span><br><span class="line">@Override</span><br><span class="line">public int compare(Node o1, Node o2) &#123;</span><br><span class="line">return o1.x-o2.x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="java中的优先队列（堆排序）"><a href="#java中的优先队列（堆排序）" class="headerlink" title="java中的优先队列（堆排序）"></a>java中的优先队列（堆排序）</h2><ul><li>堆排序默认维护n大小的最值（默认最大值 小顶堆）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Comparator;</span><br><span class="line">import java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line">public class heapSort &#123;</span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line">    int[] arr = &#123;1,5,3,2,7,6,4,9,8&#125;;</span><br><span class="line">    int k = 3;      // 队的size</span><br><span class="line">    PriorityQueue&lt;Integer&gt; q1 = new PriorityQueue&lt;&gt;(k);   // 维护小顶堆</span><br><span class="line">    PriorityQueue&lt;Integer&gt; q = new PriorityQueue&lt;&gt;(k, new Comparator&lt;Integer&gt;() &#123;   // 维护大顶堆</span><br><span class="line">      @Override</span><br><span class="line">      public int compare(Integer o1, Integer o2) &#123;</span><br><span class="line">        return o2-o1;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    for (int i = 0; i &lt;9 ; i++) &#123;</span><br><span class="line">      if(q.size() &lt; k) q.add(arr[i]);</span><br><span class="line">      else if(arr[i] &lt; q.peek())&#123;</span><br><span class="line">        q.poll();</span><br><span class="line">        q.add(arr[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = 0; i &lt;k ; i++) &#123;</span><br><span class="line">      System.out.println(q.poll());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Swagger2</title>
      <link href="/2019/08/29/SpringBoot%E6%95%B4%E5%90%88Swagger2/"/>
      <url>/2019/08/29/SpringBoot%E6%95%B4%E5%90%88Swagger2/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot整合Swagger2"><a href="#SpringBoot整合Swagger2" class="headerlink" title="SpringBoot整合Swagger2"></a>SpringBoot整合Swagger2</h1><h2 id="1-Swagger-简介"><a href="#1-Swagger-简介" class="headerlink" title="1.Swagger 简介"></a>1.Swagger 简介</h2><p>Swagger 是一套基于 OpenAPI 规范构建的开源工具，可以帮助我们设计、构建、记录以及使用 Rest API。Swagger 主要包含了以下三个部分：</p><ol><li>Swagger Editor：基于浏览器的编辑器，我们可以使用它编写我们 OpenAPI 规范。</li><li>Swagger UI：它会将我们编写的 OpenAPI 规范呈现为交互式的 API 文档，后文我将使用浏览器来查看并且操作我们的 Rest API。</li><li>Swagger Codegen：它可以通过为 OpenAPI（以前称为 Swagger）规范定义的任何 API 生成服务器存根和客户端 SDK 来简化构建过程。</li></ol><h3 id="2-为什么要使用-Swagger"><a href="#2-为什么要使用-Swagger" class="headerlink" title="2.为什么要使用 Swagger"></a>2.为什么要使用 Swagger</h3><p>当下很多公司都采取前后端分离的开发模式，前端和后端的工作由不同的工程师完成。在这种开发模式下，维持一份及时更新且完整的 Rest API 文档将会极大的提高我们的工作效率。传统意义上的文档都是后端开发人员手动编写的，相信大家也都知道这种方式很难保证文档的及时性，这种文档久而久之也就会失去其参考意义，反而还会加大我们的沟通成本。而 Swagger 给我们提供了一个全新的维护 API 文档的方式，下面我们就来了解一下它的优点：</p><ol><li>代码变，文档变。只需要少量的注解，Swagger 就可以根据代码自动生成 API 文档，很好的保证了文档的时效性。</li><li>跨语言性，支持 40 多种语言。</li><li>Swagger UI 呈现出来的是一份可交互式的 API 文档，我们可以直接在文档页面尝试 API 的调用，省去了准备复杂的调用参数的过程。</li><li>还可以将文档规范导入相关的工具（例如 SoapUI）, 这些工具将会为我们自动地创建自动化测试。</li></ol><h2 id="3-准备-Spring-Boot-Web-项目"><a href="#3-准备-Spring-Boot-Web-项目" class="headerlink" title="3.准备 Spring Boot Web 项目"></a>3.准备 Spring Boot Web 项目</h2><p>1.创建项目</p><p>2.添加依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--    swagger api测试    --&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>3.编写接口</p><ol><li><p>Controller</p><p><strong>注意此处的<code>@RequestMapping(&quot;/user&quot;)</code>   <code>user</code>一定是已经定义的APIModel,否则接口不显示</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span> <span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;用户管理&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span> <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/query/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;通过ID查询&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = &quot;id&quot;, value = &quot;用户ID&quot;, required = true, dataType = &quot;int&quot;, paramType = &quot;path&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultModel&lt;User&gt; <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        User user = userService.findById(id);</span><br><span class="line">        <span class="keyword">return</span> ResultModel.success(<span class="string">&quot;id查询成功&quot;</span>, user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/query/ids&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;通过ID列表查询&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultModel&lt;List&lt;User&gt;&gt; findByIdIn(<span class="keyword">int</span>[] ids) &#123;</span><br><span class="line">        List&lt;User&gt; users = userService.findByIdIn(ids);</span><br><span class="line">        <span class="keyword">return</span> ResultModel.success(<span class="string">&quot;in查询成功&quot;</span>, users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/query/user&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;通过用户实体查询&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultModel&lt;List&lt;User&gt;&gt; findByUser(User user) &#123;</span><br><span class="line">        List&lt;User&gt; users = userService.findByUser(user);</span><br><span class="line">        <span class="keyword">return</span> ResultModel.success(<span class="string">&quot;通过实体查询成功&quot;</span>, users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/query/all&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;查询所有用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultModel&lt;List&lt;User&gt;&gt; findAll() &#123;</span><br><span class="line">        List&lt;User&gt; users = userService.findAll();</span><br><span class="line">        <span class="keyword">return</span> ResultModel.success(<span class="string">&quot;全体查找成功&quot;</span>, users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/query/username&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;通过用户名称模糊查询&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = &quot;userName&quot;, value = &quot;用户名称&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultModel&lt;List&lt;User&gt;&gt; findByUserName(String userName) &#123;</span><br><span class="line">        List&lt;User&gt; users = userService.findByUserName(userName);</span><br><span class="line">        <span class="keyword">return</span> ResultModel.success(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/insert&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;新增默认用户&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultModel&lt;Integer&gt; <span class="title">insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUserName(<span class="string">&quot;zhongshiwen&quot;</span>);</span><br><span class="line">        user.setNickName(<span class="string">&quot;zsw&quot;</span>);</span><br><span class="line">        user.setRealName(<span class="string">&quot;钟仕文&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;zsw123456&quot;</span>);</span><br><span class="line">        user.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        Area area = <span class="keyword">new</span> Area();</span><br><span class="line">        area.setLevel((<span class="keyword">byte</span>) <span class="number">5</span>);</span><br><span class="line">        user.setArea(area);</span><br><span class="line">        userService.save(user);</span><br><span class="line">        <span class="keyword">return</span> ResultModel.success(<span class="string">&quot;新增用户成功&quot;</span>, user.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;更新用户信息&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultModel&lt;Integer&gt; <span class="title">update</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = userService.update(user);</span><br><span class="line">        <span class="keyword">return</span> ResultModel.success(row);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/update/status&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;更新单个用户状态&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;id&quot;, value = &quot;用户ID&quot;, required = true),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;status&quot;, value = &quot;状态&quot;, required = true)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultModel&lt;User&gt; <span class="title">updateStatus</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">byte</span> status)</span> </span>&#123;</span><br><span class="line">        User user = userService.updateStatus(id, status);</span><br><span class="line">        <span class="keyword">return</span> ResultModel.success(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/delete&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;删除单个用户&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(value = &quot;用户ID&quot;, required = true)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultModel&lt;Integer&gt; <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResultModel.success(userService.delete(id));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Entity</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span> <span class="meta">@NoArgsConstructor</span> <span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@ApiModel</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户ID&quot;)</span> <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;账户名&quot;)</span> <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;注册时间&quot;)</span> <span class="keyword">private</span> LocalDateTime registerTime;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;最近登录时间&quot;)</span> <span class="keyword">private</span> LocalDateTime lastLoginTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotPersistent</span> <span class="meta">@ApiModelProperty(hidden = true)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Area area; <span class="comment">//用户所在地区</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotPersistent</span> <span class="meta">@ApiModelProperty(hidden = true)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> List&lt;Role&gt; roles; <span class="comment">//用户角色列表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>返回结果</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span> <span class="meta">@Setter</span> <span class="meta">@ApiModel(description = &quot;返回结果&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultModel</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;是否成功: true or false&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> result;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;描述性原因&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;业务数据&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ResultModel</span><span class="params">(<span class="keyword">boolean</span> result, String message, T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.result = result;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; ResultModel&lt;T&gt; <span class="title">success</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResultModel&lt;&gt;(<span class="keyword">true</span>, <span class="string">&quot;SUCCESS&quot;</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; ResultModel&lt;T&gt; <span class="title">success</span><span class="params">(String message, T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResultModel&lt;&gt;(<span class="keyword">true</span>, message, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultModel <span class="title">failure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResultModel&lt;&gt;(<span class="keyword">false</span>, <span class="string">&quot;FAILURE&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultModel <span class="title">failure</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResultModel&lt;&gt;(<span class="keyword">false</span>, message, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.配置Swagger</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2Config</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Value(&quot;$&#123;swagger2.enable&#125;&quot;)</span> <span class="keyword">private</span> <span class="keyword">boolean</span> enable;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean(&quot;UserApis&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Docket <span class="title">userApis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">           .groupName(<span class="string">&quot;用户模块&quot;</span>)</span><br><span class="line">           .select()</span><br><span class="line">           .apis(RequestHandlerSelectors.withClassAnnotation(Api.class))</span><br><span class="line">           .paths(PathSelectors.regex(<span class="string">&quot;/user.*&quot;</span>))</span><br><span class="line">           .build()</span><br><span class="line">           .apiInfo(apiInfo())</span><br><span class="line">           .enable(enable);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean(&quot;CustomApis&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Docket <span class="title">customApis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">           .groupName(<span class="string">&quot;客户模块&quot;</span>)</span><br><span class="line">           .select()</span><br><span class="line">           .apis(RequestHandlerSelectors.withClassAnnotation(Api.class))</span><br><span class="line">           .paths(PathSelectors.regex(<span class="string">&quot;/custom.*&quot;</span>))</span><br><span class="line">           .build()</span><br><span class="line">           .apiInfo(apiInfo())</span><br><span class="line">           .enable(enable);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">           .title(<span class="string">&quot;XXXXX系统平台接口文档&quot;</span>)</span><br><span class="line">           .description(<span class="string">&quot;提供子模块1/子模块2/子模块3的文档&quot;</span>)</span><br><span class="line">           .termsOfServiceUrl(<span class="string">&quot;https://kid1999.github.io/&quot;</span>)</span><br><span class="line">           .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">           .build();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.验证</p><p>启动应用后，会自动生成http://{root-path}/swagger-ui.html页面，访问后，效果如下所示：</p><p><img alt="img" data-src="https://user-gold-cdn.xitu.io/2018/5/18/16371ace7275a3e9?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" class="lazyload"></p><h2 id="4-Swagger-UI-的使用"><a href="#4-Swagger-UI-的使用" class="headerlink" title="4.Swagger UI 的使用"></a>4.Swagger UI 的使用</h2><h3 id="接口查看"><a href="#接口查看" class="headerlink" title="接口查看"></a>接口查看</h3><p>SwaggerUI 会以列表的方式展示所有扫描到的接口，初始状态是收缩的，我们只需要点击展开就好，而且会在左边标识接口的请求方式（GET、POST、PUT、DELETE 等等）。</p><p><strong>Swagger 接口列表界面</strong></p><p><img alt="图 5. Swagger 接口列表界面" data-src="https://developer.ibm.com/developer/default/articles/j-using-swagger-in-a-spring-boot-project/images/image005.png" class="lazyload"></p><h3 id="接口调用"><a href="#接口调用" class="headerlink" title="接口调用"></a>接口调用</h3><p>如下图所示，点击接口展开后页面右上角的 <strong>Try it out</strong> 按钮后，页面会变成如图所示：</p><p><strong>接口详情界面</strong></p><p><img alt="图 6. 接口详情界面" data-src="https://developer.ibm.com/developer/default/articles/j-using-swagger-in-a-spring-boot-project/images/image006.png" class="lazyload"></p><p>SwaggerUI 会给我们自动填充请求参数的数据结构，我们需要做的只是点击 <strong>Execute</strong> 即可发起调用</p><p><strong>接口调用界面</strong></p><p><img alt="图 7. 接口调用界面" data-src="https://developer.ibm.com/developer/default/articles/j-using-swagger-in-a-spring-boot-project/images/image007.png" class="lazyload"></p><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><p>如下图所示，SwaggerUI 会通过我们在实体上使用的 <code>@ApiModel</code> 注解以及 <code>@ApiModelProperty</code> 注解来自动补充实体以及其属性的描述和备注。</p><p><strong>图 8. 实体界面</strong></p><p><img alt="图 8. 实体界面" data-src="https://developer.ibm.com/developer/default/articles/j-using-swagger-in-a-spring-boot-project/images/image008.png" class="lazyload"></p><h2 id="5-常用的Swagger2注解"><a href="#5-常用的Swagger2注解" class="headerlink" title="5.常用的Swagger2注解"></a>5.常用的Swagger2注解</h2><h3 id="Controller-相关注解"><a href="#Controller-相关注解" class="headerlink" title="Controller 相关注解"></a>Controller 相关注解</h3><p><code>@Api</code>: 可设置对控制器的描述。</p><p><strong>@Api 主要属性</strong></p><table><thead><tr><th align="left"><strong>注解属性</strong></th><th align="left"><strong>类型</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">tags</td><td align="left">String[]</td><td align="left">控制器标签。</td></tr><tr><td align="left">description</td><td align="left">String</td><td align="left">控制器描述（该字段被申明为过期）。</td></tr></tbody></table><h3 id="接口相关注解"><a href="#接口相关注解" class="headerlink" title="接口相关注解"></a>接口相关注解</h3><p><code>@ApiOperation</code>: 可设置对接口的描述。</p><p><strong>@ApiOperation 主要属性</strong></p><table><thead><tr><th align="left"><strong>注解属性</strong></th><th align="left"><strong>类型</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">value</td><td align="left">String</td><td align="left">接口说明。</td></tr><tr><td align="left">notes</td><td align="left">String</td><td align="left">接口发布说明。</td></tr><tr><td align="left">tags</td><td align="left">Stirng[]</td><td align="left">标签。</td></tr><tr><td align="left">response</td><td align="left">Class&lt;?&gt;</td><td align="left">接口返回类型。</td></tr><tr><td align="left">httpMethod</td><td align="left">String</td><td align="left">接口请求方式。</td></tr></tbody></table><p><code>@ApiIgnore</code>: Swagger 文档不会显示拥有该注解的接口。 <code>@ApiImplicitParams</code>: 用于描述接口的非对象参数集。 <code>@ApiImplicitParam</code>: 用于描述接口的非对象参数，一般与 <code>@ApiImplicitParams</code> 组合使用。</p><p><strong>@ApiImplicitParam 主要属性</strong></p><table><thead><tr><th align="left"><strong>注解属性</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">paramType</td><td align="left">查询参数类型，实际上就是参数放在那里。取值：path：以地址的形式提交数据，根据 id 查询用户的接口就是这种形式传参；query：Query string 的方式传参；header：以流的形式提交；form：以 Form 表单的形式提交。</td></tr><tr><td align="left">dataType</td><td align="left">参数的数据类型。取值：Long 和 String</td></tr><tr><td align="left">name</td><td align="left">参数名字。</td></tr><tr><td align="left">value</td><td align="left">参数意义的描述。</td></tr><tr><td align="left">required</td><td align="left">是否必填。取值：true：必填参数；false：非必填参数。</td></tr></tbody></table><h3 id="Model-相关注解"><a href="#Model-相关注解" class="headerlink" title="Model 相关注解"></a>Model 相关注解</h3><p><code>@ApiModel</code>: 可设置接口相关实体的描述。 <code>@ApiModelProperty</code>: 可设置实体属性的相关描述。</p><p><strong>@ApiModelProperty 主要属性</strong></p><table><thead><tr><th align="left"><strong>注解属性</strong></th><th align="left"><strong>类型</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">value</td><td align="left">String</td><td align="left">字段说明。</td></tr><tr><td align="left">name</td><td align="left">String</td><td align="left">重写字段名称。</td></tr><tr><td align="left">dataType</td><td align="left">Stirng</td><td align="left">重写字段类型。</td></tr><tr><td align="left">required</td><td align="left">boolean</td><td align="left">是否必填。</td></tr><tr><td align="left">example</td><td align="left">Stirng</td><td align="left">举例说明。</td></tr><tr><td align="left">hidden</td><td align="left">boolean</td><td align="left">是否在文档中隐藏该字段。</td></tr><tr><td align="left">allowEmptyValue</td><td align="left">boolean</td><td align="left">是否允许为空。</td></tr><tr><td align="left">allowableValues</td><td align="left">String</td><td align="left">该字段允许的值，当我们 API 的某个参数为枚举类型时，使用这个属性就可以清楚地告诉 API 使用者该参数所能允许传入的值。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swagger2 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
