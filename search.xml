<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Thymeleaf模板技术尝试</title>
      <link href="/2019/11/30/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%8A%80%E6%9C%AF%E5%B0%9D%E8%AF%95/"/>
      <url>/2019/11/30/Thymeleaf%E6%A8%A1%E6%9D%BF%E6%8A%80%E6%9C%AF%E5%B0%9D%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Thymeleaf-模板技术尝试"><a href="#Thymeleaf-模板技术尝试" class="headerlink" title="Thymeleaf 模板技术尝试"></a>Thymeleaf 模板技术尝试</h1><ul><li><p>Thymeleaf是一个Java XML / XHTML / HTML5 模板引擎 ，可以在Web（基于servlet ）和非Web环境中工作。 它更适合在基于MVC的Web应用程序的视图层提供XHTML / HTML5，但它甚至可以在脱机环境中处理任何XML文件。 它提供完整的Spring Framework。</p></li><li><p>在Web应用程序中，Thymeleaf旨在成为JavaServer Pages （JSP）的完全替代品，并实现自然模板的概念：模板文件可以直接在浏览器中打开，并且仍然可以正确显示为网页。</p></li><li><p><a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html" target="_blank" rel="noopener">Thymeleaf 3.0 官方文档</a></p></li></ul><h2 id="Thymeleaf-常用关键字"><a href="#Thymeleaf-常用关键字" class="headerlink" title="Thymeleaf 常用关键字"></a>Thymeleaf 常用关键字</h2><p><img alt data-src="https://ae01.alicdn.com/kf/Ha6d22c20c9d245df8d8521475655a66aB.png" class="lazyload"></p><h2 id="1-创建HTML"><a href="#1-创建HTML" class="headerlink" title="1.创建HTML"></a>1.创建HTML</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="2-获取变量值-…"><a href="#2-获取变量值-…" class="headerlink" title="2.获取变量值${…}"></a>2.获取变量值${…}</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p th:text=&quot;&apos;Hello！, &apos; + $&#123;name&#125; + &apos;!&apos;&quot;&gt;3333&lt;/p&gt;</span><br></pre></td></tr></table></figure><h2 id="3-链接表达式-…"><a href="#3-链接表达式-…" class="headerlink" title="3.链接表达式: @{…}"></a>3.链接表达式: @{…}</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;details.html&quot; th:href=&quot;@&#123;/order/details(orderId=$&#123;o.id&#125;)&#125;&quot;&gt;view&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;details.html&quot; th:href=&quot;@&#123;order/&#123;orderId&#125;/details(orderId=$&#123;o.id&#125;)&#125;&quot;&gt;Content路径,默认访问static下的order文件夹&lt;/a&gt;</span><br></pre></td></tr></table></figure><h2 id="4-文本替换"><a href="#4-文本替换" class="headerlink" title="4.文本替换"></a>4.文本替换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span th:text=&quot;&apos;Welcome to our application, &apos; + $&#123;user.name&#125; + &apos;!&apos;&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="5-运算符"><a href="#5-运算符" class="headerlink" title="5.运算符"></a>5.运算符</h2><ul><li>默认支持</li></ul><h2 id="6-条件"><a href="#6-条件" class="headerlink" title="6.条件"></a>6.条件</h2><ul><li>if/unless</li><li>使用th:if和th:unless属性进行条件判断</li><li>th:unless于th:if恰好相反，只有表达式中的条件不成立，才会显示其内容。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;a th:href=&quot;@&#123;/login&#125;&quot; th:unless=$&#123;session.user != null&#125;&gt;Login&lt;/a&gt;</span><br></pre></td></tr></table></figure></li><li>switch</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div th:switch=&quot;$&#123;user.role&#125;&quot;&gt;</span><br><span class="line">  &lt;p th:case=&quot;&apos;admin&apos;&quot;&gt;User is an administrator&lt;/p&gt;</span><br><span class="line">  &lt;p th:case=&quot;#&#123;roles.manager&#125;&quot;&gt;User is a manager&lt;/p&gt;</span><br><span class="line">  &lt;p th:case=&quot;*&quot;&gt;User is some other thing&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="7-循环"><a href="#7-循环" class="headerlink" title="7.循环"></a>7.循环</h2><ul><li>th:each</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;tr th:each=&quot;prod : $&#123;prods&#125;&quot;&gt;</span><br><span class="line">    &lt;td th:text=&quot;$&#123;prod.name&#125;&quot;&gt;Onions&lt;/td&gt;</span><br><span class="line">    &lt;td th:text=&quot;$&#123;prod.price&#125;&quot;&gt;2.41&lt;/td&gt;</span><br><span class="line">    &lt;td th:text=&quot;$&#123;prod.inStock&#125;? #&#123;true&#125; : #&#123;false&#125;&quot;&gt;yes&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br></pre></td></tr></table></figure><h2 id="8-模板布局"><a href="#8-模板布局" class="headerlink" title="8.模板布局"></a>8.模板布局</h2><ul><li>Thymeleaf需要我们定义这些部分，“片段”，以便包含，这可以使用th:fragment属性来完成。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div th:fragment=&quot;navbar&quot;&gt;</span><br><span class="line">      &amp;copy; 2011 The Good Thymes Virtual Grocery</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>我们可以使用其中一个th:insert或th:replace属性轻松地在我们的主页中包含这些片段。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  ...</span><br><span class="line">  &lt;div th:insert=&quot;~&#123;base :: navbar&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">  或者</span><br><span class="line">  &lt;div th:insert=&quot;base :: navbar&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thymeleaf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiro安全框架基础知识点</title>
      <link href="/2019/11/27/Shiro%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2019/11/27/Shiro%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="Shiro基础知识点"><a href="#Shiro基础知识点" class="headerlink" title="Shiro基础知识点"></a>Shiro基础知识点</h1><ul><li><p>Apache Shiro 是ASF旗下的一款开源软件（Shiro发音为“shee-roh”，日语“堡垒（Castle）”的意思），提供了一个强大而灵活的安全框架。可为任何应用提供安全保障— 从命令行应用、移动应用到大型网络及企业应用。</p></li><li><p>Apache Shiro提供了认证、授权、加密和会话管理功能，将复杂的问题隐藏起来，提供清晰直观的API使开发者可以很轻松地开发自己的程序安全代码。并且在实现此目标时无须依赖第三方的框架、容器或服务，当然也能做到与这些环境的整合，使其在任何环境下都可拿来使用。</p></li></ul><h2 id="Shiro的核心四部分"><a href="#Shiro的核心四部分" class="headerlink" title="Shiro的核心四部分"></a>Shiro的核心四部分</h2><ul><li><p>认证（Authentication）：用户身份识别。有时可看作为“登录（login）”，它是用户证明自己是谁的一个行为。</p></li><li><p>授权（Authorization）：访问控制过程，好比决定“认证（who）”可以访问“什么（what）”.</p></li><li><p>会话管理（SessionManagement）：管理用户的会话（sessions），甚至在没有WEB或EJB容器的环境中。管理用户与时间相关的状态。</p></li><li><p>加密（Cryptography）：使用加密算法保护数据更加安全，防止数据被偷窥。</p></li></ul><h3 id="1-Spring整合Shiro"><a href="#1-Spring整合Shiro" class="headerlink" title="1.Spring整合Shiro"></a>1.Spring整合Shiro</h3><ol><li>pom 依赖<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--整合shiro--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-ShiroConfig"><a href="#2-ShiroConfig" class="headerlink" title="2. ShiroConfig"></a>2. ShiroConfig</h3><ul><li>shiro的基本配置</li><li>1.ShiroFilterFactoryBean    #Shiro对外的接口，代表当前“用户”</li><li>2.DefaultWebSecurityManager   #关联realm</li><li>3.UserRealm   #负责登录验证和资源授权</li><li><img alt data-src="https://pic2.zhimg.com/80/v2-8526e78cc56a9505dcca6d0f3fcac3dd_hd.jpg" class="lazyload"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">package io.kid1999.operatesystem.config;</span><br><span class="line"></span><br><span class="line">import org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line">import org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line">import org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">import java.util.LinkedHashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kid1999</span><br><span class="line"> * @title: Shiro 的 配置</span><br><span class="line"> * @date 2019/11/26 21:27</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class ShiroConfig &#123;</span><br><span class="line"></span><br><span class="line">// 3. 创建 ShiroFilterFactoryBean</span><br><span class="line">@Bean</span><br><span class="line">public ShiroFilterFactoryBean getShiroFilterFactoryBean(@Qualifier(&quot;securityManager&quot;) DefaultWebSecurityManager securityManager)&#123;</span><br><span class="line">ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();</span><br><span class="line">// 设置安全管理器</span><br><span class="line">shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">/**  添加Shiro的内置过滤器</span><br><span class="line"> * 常用：</span><br><span class="line"> * anon : 无需认证（登录） 可以访问</span><br><span class="line"> * authc ：必须认证才可以访问</span><br><span class="line"> * user : 如果使用remenberMe功能可以直接访问</span><br><span class="line"> * perms: 该资源必须获得相关权限才可访问</span><br><span class="line"> * role: 该资源必须获得角色权限才可以访问</span><br><span class="line"> *</span><br><span class="line"> *  注意： 这个授权拦截链 是按顺序执行的！！！</span><br><span class="line"> */</span><br><span class="line">Map&lt;String,String&gt; filterMap = new LinkedHashMap&lt;&gt;();</span><br><span class="line">filterMap.put(&quot;/&quot;,&quot;anon&quot;);</span><br><span class="line">filterMap.put(&quot;/login&quot;,&quot;anon&quot;);</span><br><span class="line">filterMap.put(&quot;/error&quot;,&quot;anon&quot;);</span><br><span class="line">//filterMap.put(&quot;/admin&quot;,&quot;authc&quot;);</span><br><span class="line"></span><br><span class="line">// 权限过滤器  也可以设置角色过滤</span><br><span class="line">filterMap.put(&quot;/admin&quot;,&quot;perms[user:admin]&quot;);</span><br><span class="line"></span><br><span class="line">shiroFilterFactoryBean.setLoginUrl(&quot;/login&quot;);       // 设置跳转的登录页面</span><br><span class="line">shiroFilterFactoryBean.setUnauthorizedUrl(&quot;/noAuth&quot;);   // 设置未授权访问页面</span><br><span class="line">shiroFilterFactoryBean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line"></span><br><span class="line">return shiroFilterFactoryBean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 2. 创建DefaultWebSecurityManager </span><br><span class="line">// 所有与安全有关的操作都会与SecurityManager进行交互</span><br><span class="line">@Bean(name = &quot;securityManager&quot;)</span><br><span class="line">public DefaultWebSecurityManager getDefaultWebSecurityManager(@Qualifier(&quot;getRealm&quot;) UserRealm userRealm)&#123;</span><br><span class="line">DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();</span><br><span class="line">// 关联realm</span><br><span class="line">securityManager.setRealm(getRealm());</span><br><span class="line">return securityManager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 1. 创建Realm</span><br><span class="line">// Shiro从Realm获取安全数据（用户、角色、权限）</span><br><span class="line">@Bean</span><br><span class="line">public UserRealm getRealm()&#123;</span><br><span class="line">return new UserRealm();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-UserRealm"><a href="#3-UserRealm" class="headerlink" title="3. UserRealm"></a>3. UserRealm</h3><ul><li>Shiro从从Realm获取安全数据（如用户、角色、权限）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">package io.kid1999.operatesystem.config;</span><br><span class="line"></span><br><span class="line">import io.kid1999.operatesystem.model.Admin;</span><br><span class="line">import io.kid1999.operatesystem.repository.AdminRepository;</span><br><span class="line">import org.apache.shiro.authc.*;</span><br><span class="line">import org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line">import org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class="line">import org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line">import org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kid1999</span><br><span class="line"> * @title: UserRealm 自定义 realm 处理 授权和认证</span><br><span class="line"> * @date 2019/11/26 21:29</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class UserRealm extends AuthorizingRealm  &#123;</span><br><span class="line">@Autowired</span><br><span class="line">private AdminRepository adminRepository;</span><br><span class="line"></span><br><span class="line">// 授权执行逻辑</span><br><span class="line">@Override</span><br><span class="line">protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) &#123;</span><br><span class="line">System.out.println(&quot;授权执行逻辑&quot;);</span><br><span class="line"></span><br><span class="line">// 给资源进行授权</span><br><span class="line">SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();</span><br><span class="line"></span><br><span class="line">// 添加资源授权字符串</span><br><span class="line">info.addStringPermission(&quot;user:admin&quot;);</span><br><span class="line"></span><br><span class="line">return info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 认证执行逻辑</span><br><span class="line">@Override</span><br><span class="line">protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException &#123;</span><br><span class="line">System.out.println(&quot;认证执行逻辑&quot;);</span><br><span class="line"></span><br><span class="line">// 1. 获取传来验证的token</span><br><span class="line">UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken;</span><br><span class="line">String name = token.getUsername();</span><br><span class="line">String password = String.valueOf(token.getPassword());</span><br><span class="line">// 2. 通过用户名 取出数据库的数据</span><br><span class="line">Admin user = adminRepository.findByAdminId(name);</span><br><span class="line"></span><br><span class="line">// 3. 判断用户名</span><br><span class="line">if (user == null)&#123;</span><br><span class="line">return null;        // 找不到用户名 报 UnknownAccountException</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 4. 判断密码</span><br><span class="line">/**</span><br><span class="line"> * arg0: 回传login的数据</span><br><span class="line"> * arg1: 数据库的密码</span><br><span class="line"> * arg2: realm 的name</span><br><span class="line"> */</span><br><span class="line">return new SimpleAuthenticationInfo(&quot;&quot;,user.getAdminPwd(),&quot;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-AdminRepository-链接数据库"><a href="#4-AdminRepository-链接数据库" class="headerlink" title="4.AdminRepository 链接数据库"></a>4.AdminRepository 链接数据库</h3><ul><li>Realm 会连接数据源 进行身份验证</li><li>此处放上我的JPA</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package io.kid1999.operatesystem.repository;</span><br><span class="line">import io.kid1999.operatesystem.model.Admin;</span><br><span class="line">import org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line">import org.springframework.data.jpa.repository.Query;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kid1999</span><br><span class="line"> * @title: ManagerRepository</span><br><span class="line"> * @date 2019/11/24 10:07</span><br><span class="line"> */</span><br><span class="line">public interface AdminRepository extends JpaRepository&lt;Admin,Integer&gt; &#123;</span><br><span class="line">@Query(value = &quot;select * from admin m where m.admin_id = ?1 and m.admin_pwd = ?2&quot; ,nativeQuery = true)</span><br><span class="line">Admin login(String studentId, String passWord);</span><br><span class="line"></span><br><span class="line">Admin findByAdminId(String adminId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-登录Controller"><a href="#5-登录Controller" class="headerlink" title="5.登录Controller"></a>5.登录Controller</h3><ul><li>此处没有使用加密 和 缓存机制<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 使用Shiro实现登录</span><br><span class="line"> */</span><br><span class="line">@PostMapping(&quot;/login&quot;)</span><br><span class="line">String toLogin(String studentId,</span><br><span class="line">               String passWord,</span><br><span class="line">               Model model)&#123;</span><br><span class="line">// 1.获取Subject</span><br><span class="line">Subject subject = SecurityUtils.getSubject();</span><br><span class="line">// 2.封装登录方法</span><br><span class="line">UsernamePasswordToken token = new UsernamePasswordToken(studentId,passWord);</span><br><span class="line">// 3.执行登录方法</span><br><span class="line">try &#123;</span><br><span class="line">subject.login(token);       // 调用login方法 -&gt; realm 做验证</span><br><span class="line">return &quot;admin&quot;;</span><br><span class="line">&#125;catch (UnknownAccountException e)&#123;</span><br><span class="line">model.addAttribute(&quot;msg&quot;,&quot;用户名不存在&quot;);</span><br><span class="line">return &quot;login&quot;;</span><br><span class="line">&#125;catch (IncorrectCredentialsException e)&#123;</span><br><span class="line">model.addAttribute(&quot;msg&quot;,&quot;密码错误&quot;);</span><br><span class="line">return &quot;login&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-整合redis接管session和缓存"><a href="#6-整合redis接管session和缓存" class="headerlink" title="6.整合redis接管session和缓存"></a>6.整合redis接管session和缓存</h3><ol><li>再导入两个包</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-ehcache&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- shiro+redis缓存插件 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.crazycake&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-redis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.2.3&lt;/version&gt;</span><br><span class="line">    &lt;!--     剔除这个错误依赖       --&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">    &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>在ShiroConfig 配置到 securityManager </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 2. 创建DefaultWebSecurityManager  管理器</span><br><span class="line">@Bean(name = &quot;securityManager&quot;)</span><br><span class="line">public DefaultWebSecurityManager getDefaultWebSecurityManager(@Qualifier(&quot;getRealm&quot;) UserRealm userRealm)&#123;</span><br><span class="line">DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();</span><br><span class="line">// 关联realm</span><br><span class="line">securityManager.setRealm(getRealm());</span><br><span class="line">// 自定义缓存实现 使用redis</span><br><span class="line">securityManager.setCacheManager(cacheManager());</span><br><span class="line">// 自定义session管理 使用redis</span><br><span class="line">securityManager.setSessionManager(sessionManager());</span><br><span class="line">return securityManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-整合redis接管session和缓存"><a href="#7-整合redis接管session和缓存" class="headerlink" title="7.整合redis接管session和缓存"></a>7.整合redis接管session和缓存</h3><ol><li>继承FormAuthenticationFilter 重写一些方法</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">package io.kid19999.backstage.config.Shiro;</span><br><span class="line"></span><br><span class="line">import io.kid19999.backstage.repository.SignLogRepository;</span><br><span class="line">import org.apache.shiro.authc.AuthenticationException;</span><br><span class="line">import org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line">import org.apache.shiro.subject.Subject;</span><br><span class="line">import org.apache.shiro.web.filter.authc.FormAuthenticationFilter;</span><br><span class="line">import org.apache.shiro.web.util.WebUtils;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletRequest;</span><br><span class="line">import javax.servlet.ServletResponse;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @desc:   自定义 登录验证 的操作</span><br><span class="line"> * @auther: kid1999</span><br><span class="line"> * @date: 2019/11/28 20:52</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">public class AuthenticationFilter extends FormAuthenticationFilter &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private SignLogRepository signLogRepository;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected boolean onLoginSuccess(AuthenticationToken token, Subject subject, ServletRequest request, ServletResponse response) throws Exception &#123;</span><br><span class="line">        //获取已登录的用户信息</span><br><span class="line">        String username = (String) subject.getPrincipal();</span><br><span class="line">        //获取session</span><br><span class="line">        HttpServletRequest httpServletRequest = WebUtils.toHttp(request);</span><br><span class="line">        HttpSession session = httpServletRequest.getSession();</span><br><span class="line">        //把用户信息保存到session</span><br><span class="line">        session.setAttribute(&quot;activeUser&quot;, username);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;login success&quot;);</span><br><span class="line">        System.out.println(token.getPrincipal());</span><br><span class="line">        String name = token.getPrincipal().toString();</span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line">        return super.onLoginSuccess(token, subject, request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected boolean onAccessDenied(ServletRequest request, ServletResponse response) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;拒绝访问&quot;);</span><br><span class="line">        return super.onAccessDenied(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected boolean onLoginFailure(AuthenticationToken token, AuthenticationException e, ServletRequest request, ServletResponse response) &#123;</span><br><span class="line">        System.out.println(&quot;登录失败&quot;);</span><br><span class="line">        return super.onLoginFailure(token, e, request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在ShiroConfig 注入 自定义拦截器</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 注入 拦截器和认证</span><br><span class="line">shiroFilterFactoryBean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line">Map&lt;String,Filter&gt; filter = new HashMap&lt;&gt;();</span><br><span class="line">filter.put(&quot;authc&quot;,new AuthenticationFilter());</span><br><span class="line">shiroFilterFactoryBean.setFilters(filter);</span><br></pre></td></tr></table></figure><ol start="3"><li>拦截器的实际工作流程：<br><a href="https://blog.wuwii.com/shiro-2.html" target="_blank" rel="noopener">详见</a></li></ol><h3 id="8-Vue的简单安全认证："><a href="#8-Vue的简单安全认证：" class="headerlink" title="8.Vue的简单安全认证："></a>8.Vue的简单安全认证：</h3><ol><li><p>导入vue-cookies 使用cookie保存当前用户的状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import VueCookies from &apos;vue-cookies&apos;</span><br><span class="line">Vue.use(VueCookies);</span><br></pre></td></tr></table></figure></li><li><p>使用钩子函数对路由进行权限跳转</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">  let cookieRoles = window.$cookies.get(&quot;role&quot;);</span><br><span class="line">  if(to.path === &apos;/&apos;)&#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125; else if (!cookieRoles &amp;&amp; to.path !== &apos;/login&apos;) &#123; // cookie中有登陆用户信息跳转页面，否则到登陆页面</span><br><span class="line">    next(&apos;/login&apos;);</span><br><span class="line">  &#125; else if (to.meta.permission) &#123;// 如果该页面配置了权限属性（自定义permission）</span><br><span class="line">    // 如果是管理员权限则可进入</span><br><span class="line">    roles.indexOf(&apos;admin&apos;) &gt; -1 ? next() : next(&apos;/403&apos;);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>登录后返回状态 存入cookie中 默认保存一天</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">this.$axios.post(&apos;/login&apos;, qs.stringify(data), &#123;headers:&#123;&apos;Content-Type&apos;:&apos;application/x-www-form-urlencoded&apos;&#125;&#125;).then(function (response) &#123;</span><br><span class="line">      let res = response.data;</span><br><span class="line">      if(res[&apos;reslut&apos;] === 1)&#123;</span><br><span class="line">        self.$store.commit(&apos;Login&apos;);</span><br><span class="line">        let arr = res[&apos;info&apos;].split(&apos; &apos;);</span><br><span class="line">        window.$cookies.set(&quot;role&quot;,arr[1]);</span><br><span class="line">        window.$cookies.set(&quot;sessionId&quot;,arr[0]);</span><br><span class="line">        self.$router.push(&quot;/&quot;);</span><br><span class="line">        self.$message.success(&#123;message:&quot;登录成功&quot;&#125;);</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        self.$message.error(res[&apos;info&apos;]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).catch(function (error) &#123;</span><br><span class="line">      console.log(error);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h2 id="流程总结："><a href="#流程总结：" class="headerlink" title="流程总结："></a>流程总结：</h2><ol><li>首先 ShiroFilterFactoryBean 查询拦截规则 跳转 login（或者自己访问login）</li><li>登录验证Controller 调用 subject.login(token)</li><li>Realm接收信息，并且和数据源的数据进行对比 返回 判断结果</li><li>如果不成功 返回错误，如果成功 去往资源网站。 </li><li>ShiroFilterFactoryBean 判断资源访问权限</li><li>调用 Realm的 授权方法 从数据源获取 用户权限 返回结果</li><li>如果 不成功 返回错误。成功 允许访问 </li></ol><h3 id="思考："><a href="#思考：" class="headerlink" title="思考："></a>思考：</h3><p><img alt data-src="https://ae01.alicdn.com/kf/H0c51e33d70144f179cf8600f263263e3R.png" class="lazyload"><br>前端验证cookie是可见的 role 容易被查看 修改不安全</p><p>后端再次验证 session是否存在(超时被抹除|logout被抹除)</p><p>每次访问的时候先去过滤器一下是否session存在</p><hr><p>参考资料：</p><p><a href="https://zhuanlan.zhihu.com/p/63910997" target="_blank" rel="noopener">知乎-Shiro详解</a></p><p><a href="https://juejin.im/post/5ac78b31f265da237411387e" target="_blank" rel="noopener">掘金-spring整合shiro</a></p><p><a href="https://www.bilibili.com/video/av40342174" target="_blank" rel="noopener">B站视频</a></p><ul><li><p>Apache Shiro 是ASF旗下的一款开源软件（Shiro发音为“shee-roh”，日语“堡垒（Castle）”的意思），提供了一个强大而灵活的安全框架。可为任何应用提供安全保障— 从命令行应用、移动应用到大型网络及企业应用。</p></li><li><p>Apache Shiro提供了认证、授权、加密和会话管理功能，将复杂的问题隐藏起来，提供清晰直观的API使开发者可以很轻松地开发自己的程序安全代码。并且在实现此目标时无须依赖第三方的框架、容器或服务，当然也能做到与这些环境的整合，使其在任何环境下都可拿来使用。</p></li></ul><h2 id="Shiro的核心四部分-1"><a href="#Shiro的核心四部分-1" class="headerlink" title="Shiro的核心四部分"></a>Shiro的核心四部分</h2><ul><li><p>认证（Authentication）：用户身份识别。有时可看作为“登录（login）”，它是用户证明自己是谁的一个行为。</p></li><li><p>授权（Authorization）：访问控制过程，好比决定“认证（who）”可以访问“什么（what）”.</p></li><li><p>会话管理（SessionManagement）：管理用户的会话（sessions），甚至在没有WEB或EJB容器的环境中。管理用户与时间相关的状态。</p></li><li><p>加密（Cryptography）：使用加密算法保护数据更加安全，防止数据被偷窥。</p></li></ul><h3 id="1-Spring整合Shiro-1"><a href="#1-Spring整合Shiro-1" class="headerlink" title="1.Spring整合Shiro"></a>1.Spring整合Shiro</h3><ol><li>pom 依赖<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--整合shiro--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-ShiroConfig-1"><a href="#2-ShiroConfig-1" class="headerlink" title="2. ShiroConfig"></a>2. ShiroConfig</h3><ul><li>shiro的基本配置</li><li>1.ShiroFilterFactoryBean    #Shiro对外的接口，代表当前“用户”</li><li>2.DefaultWebSecurityManager   #关联realm</li><li>3.UserRealm   #负责登录验证和资源授权</li><li><img alt data-src="https://pic2.zhimg.com/80/v2-8526e78cc56a9505dcca6d0f3fcac3dd_hd.jpg" class="lazyload"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">package io.kid1999.operatesystem.config;</span><br><span class="line"></span><br><span class="line">import org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line">import org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line">import org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">import java.util.LinkedHashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kid1999</span><br><span class="line"> * @title: Shiro 的 配置</span><br><span class="line"> * @date 2019/11/26 21:27</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class ShiroConfig &#123;</span><br><span class="line"></span><br><span class="line">// 3. 创建 ShiroFilterFactoryBean</span><br><span class="line">@Bean</span><br><span class="line">public ShiroFilterFactoryBean getShiroFilterFactoryBean(@Qualifier(&quot;securityManager&quot;) DefaultWebSecurityManager securityManager)&#123;</span><br><span class="line">ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();</span><br><span class="line">// 设置安全管理器</span><br><span class="line">shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">/**  添加Shiro的内置过滤器</span><br><span class="line"> * 常用：</span><br><span class="line"> * anon : 无需认证（登录） 可以访问</span><br><span class="line"> * authc ：必须认证才可以访问</span><br><span class="line"> * user : 如果使用remenberMe功能可以直接访问</span><br><span class="line"> * perms: 该资源必须获得相关权限才可访问</span><br><span class="line"> * role: 该资源必须获得角色权限才可以访问</span><br><span class="line"> *</span><br><span class="line"> *  注意： 这个授权拦截链 是按顺序执行的！！！</span><br><span class="line"> */</span><br><span class="line">Map&lt;String,String&gt; filterMap = new LinkedHashMap&lt;&gt;();</span><br><span class="line">filterMap.put(&quot;/&quot;,&quot;anon&quot;);</span><br><span class="line">filterMap.put(&quot;/login&quot;,&quot;anon&quot;);</span><br><span class="line">filterMap.put(&quot;/error&quot;,&quot;anon&quot;);</span><br><span class="line">//filterMap.put(&quot;/admin&quot;,&quot;authc&quot;);</span><br><span class="line"></span><br><span class="line">// 权限过滤器  也可以设置角色过滤</span><br><span class="line">filterMap.put(&quot;/admin&quot;,&quot;perms[user:admin]&quot;);</span><br><span class="line"></span><br><span class="line">shiroFilterFactoryBean.setLoginUrl(&quot;/login&quot;);       // 设置跳转的登录页面</span><br><span class="line">shiroFilterFactoryBean.setUnauthorizedUrl(&quot;/noAuth&quot;);   // 设置未授权访问页面</span><br><span class="line">shiroFilterFactoryBean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line"></span><br><span class="line">return shiroFilterFactoryBean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 2. 创建DefaultWebSecurityManager </span><br><span class="line">// 所有与安全有关的操作都会与SecurityManager进行交互</span><br><span class="line">@Bean(name = &quot;securityManager&quot;)</span><br><span class="line">public DefaultWebSecurityManager getDefaultWebSecurityManager(@Qualifier(&quot;getRealm&quot;) UserRealm userRealm)&#123;</span><br><span class="line">DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();</span><br><span class="line">// 关联realm</span><br><span class="line">securityManager.setRealm(getRealm());</span><br><span class="line">return securityManager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 1. 创建Realm</span><br><span class="line">// Shiro从Realm获取安全数据（用户、角色、权限）</span><br><span class="line">@Bean</span><br><span class="line">public UserRealm getRealm()&#123;</span><br><span class="line">return new UserRealm();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-UserRealm-1"><a href="#3-UserRealm-1" class="headerlink" title="3. UserRealm"></a>3. UserRealm</h3><ul><li>Shiro从从Realm获取安全数据（如用户、角色、权限）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">package io.kid1999.operatesystem.config;</span><br><span class="line"></span><br><span class="line">import io.kid1999.operatesystem.model.Admin;</span><br><span class="line">import io.kid1999.operatesystem.repository.AdminRepository;</span><br><span class="line">import org.apache.shiro.authc.*;</span><br><span class="line">import org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line">import org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class="line">import org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line">import org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kid1999</span><br><span class="line"> * @title: UserRealm 自定义 realm 处理 授权和认证</span><br><span class="line"> * @date 2019/11/26 21:29</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class UserRealm extends AuthorizingRealm  &#123;</span><br><span class="line">@Autowired</span><br><span class="line">private AdminRepository adminRepository;</span><br><span class="line"></span><br><span class="line">// 授权执行逻辑</span><br><span class="line">@Override</span><br><span class="line">protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) &#123;</span><br><span class="line">System.out.println(&quot;授权执行逻辑&quot;);</span><br><span class="line"></span><br><span class="line">// 给资源进行授权</span><br><span class="line">SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();</span><br><span class="line"></span><br><span class="line">// 添加资源授权字符串</span><br><span class="line">info.addStringPermission(&quot;user:admin&quot;);</span><br><span class="line"></span><br><span class="line">return info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 认证执行逻辑</span><br><span class="line">@Override</span><br><span class="line">protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException &#123;</span><br><span class="line">System.out.println(&quot;认证执行逻辑&quot;);</span><br><span class="line"></span><br><span class="line">// 1. 获取传来验证的token</span><br><span class="line">UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken;</span><br><span class="line">String name = token.getUsername();</span><br><span class="line">String password = String.valueOf(token.getPassword());</span><br><span class="line">// 2. 通过用户名 取出数据库的数据</span><br><span class="line">Admin user = adminRepository.findByAdminId(name);</span><br><span class="line"></span><br><span class="line">// 3. 判断用户名</span><br><span class="line">if (user == null)&#123;</span><br><span class="line">return null;        // 找不到用户名 报 UnknownAccountException</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 4. 判断密码</span><br><span class="line">/**</span><br><span class="line"> * arg0: 回传login的数据</span><br><span class="line"> * arg1: 数据库的密码</span><br><span class="line"> * arg2: realm 的name</span><br><span class="line"> */</span><br><span class="line">return new SimpleAuthenticationInfo(&quot;&quot;,user.getAdminPwd(),&quot;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-AdminRepository-链接数据库-1"><a href="#4-AdminRepository-链接数据库-1" class="headerlink" title="4.AdminRepository 链接数据库"></a>4.AdminRepository 链接数据库</h3><ul><li>Realm 会连接数据源 进行身份验证</li><li>此处放上我的JPA</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package io.kid1999.operatesystem.repository;</span><br><span class="line">import io.kid1999.operatesystem.model.Admin;</span><br><span class="line">import org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line">import org.springframework.data.jpa.repository.Query;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kid1999</span><br><span class="line"> * @title: ManagerRepository</span><br><span class="line"> * @date 2019/11/24 10:07</span><br><span class="line"> */</span><br><span class="line">public interface AdminRepository extends JpaRepository&lt;Admin,Integer&gt; &#123;</span><br><span class="line">@Query(value = &quot;select * from admin m where m.admin_id = ?1 and m.admin_pwd = ?2&quot; ,nativeQuery = true)</span><br><span class="line">Admin login(String studentId, String passWord);</span><br><span class="line"></span><br><span class="line">Admin findByAdminId(String adminId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-登录Controller-1"><a href="#5-登录Controller-1" class="headerlink" title="5.登录Controller"></a>5.登录Controller</h3><ul><li>此处没有使用加密 和 缓存机制<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 使用Shiro实现登录</span><br><span class="line"> */</span><br><span class="line">@PostMapping(&quot;/login&quot;)</span><br><span class="line">String toLogin(String studentId,</span><br><span class="line">               String passWord,</span><br><span class="line">               Model model)&#123;</span><br><span class="line">// 1.获取Subject</span><br><span class="line">Subject subject = SecurityUtils.getSubject();</span><br><span class="line">// 2.封装登录方法</span><br><span class="line">UsernamePasswordToken token = new UsernamePasswordToken(studentId,passWord);</span><br><span class="line">// 3.执行登录方法</span><br><span class="line">try &#123;</span><br><span class="line">subject.login(token);       // 调用login方法 -&gt; realm 做验证</span><br><span class="line">return &quot;admin&quot;;</span><br><span class="line">&#125;catch (UnknownAccountException e)&#123;</span><br><span class="line">model.addAttribute(&quot;msg&quot;,&quot;用户名不存在&quot;);</span><br><span class="line">return &quot;login&quot;;</span><br><span class="line">&#125;catch (IncorrectCredentialsException e)&#123;</span><br><span class="line">model.addAttribute(&quot;msg&quot;,&quot;密码错误&quot;);</span><br><span class="line">return &quot;login&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="流程总结：-1"><a href="#流程总结：-1" class="headerlink" title="流程总结："></a>流程总结：</h2><ol><li>首先 ShiroFilterFactoryBean 查询拦截规则 跳转 login（或者自己访问login）</li><li>登录验证Controller 调用 subject.login(token)</li><li>Realm接收信息，并且和数据源的数据进行对比 返回 判断结果</li><li>如果不成功 返回错误，如果成功 去往资源网站。 </li><li>ShiroFilterFactoryBean 判断资源访问权限</li><li>调用 Realm的 授权方法 从数据源获取 用户权限 返回结果</li><li>如果 不成功 返回错误。成功 允许访问 </li></ol><hr><p>参考资料：</p><p><a href="https://zhuanlan.zhihu.com/p/63910997" target="_blank" rel="noopener">知乎-Shiro详解</a></p><p><a href="https://www.bilibili.com/video/av40342174" target="_blank" rel="noopener">B站视频</a></p>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shiro </tag>
            
            <tag> security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jpa基础知识点</title>
      <link href="/2019/11/27/Jpa%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2019/11/27/Jpa%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="Jpa基础知识点"><a href="#Jpa基础知识点" class="headerlink" title="Jpa基础知识点"></a>Jpa基础知识点</h1><ul><li>JPA是Java Persistence API的简称，中文名Java持久层API，是JDK 5.0注解或XML描述对象－关系表的映射关系，并将运行期的实体对象持久化到数据库中。</li><li>Spring Data JPA是较大的Spring Data系列的一部分，可轻松实现基于JPA的存储库。该模块处理对基于JPA的数据访问层的增强支持。它使构建使用数据访问技术的Spring支持的应用程序变得更加容易。</li></ul><h2 id="1-JPA的基本配置"><a href="#1-JPA的基本配置" class="headerlink" title="1.JPA的基本配置"></a>1.JPA的基本配置</h2><ol><li>pom依赖</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="2-项目配置文件"><a href="#2-项目配置文件" class="headerlink" title="2. 项目配置文件"></a>2. 项目配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  # mysql 配置：</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql://10.16.11.230:3306/website?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf8</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">  jpa:</span><br><span class="line">    hibernate:</span><br><span class="line">      ddl-auto: update</span><br><span class="line">    show-sql: true</span><br></pre></td></tr></table></figure><h2 id="3-创建一个实体类"><a href="#3-创建一个实体类" class="headerlink" title="3. 创建一个实体类"></a>3. 创建一个实体类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package io.kid1999.teacher_manager.model;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import javax.persistence.*;</span><br><span class="line"></span><br><span class="line">@Entity</span><br><span class="line">@Table(name = &quot;user&quot;)</span><br><span class="line">@Data</span><br><span class="line">public class User &#123;</span><br><span class="line"></span><br><span class="line">@Id</span><br><span class="line">@GeneratedValue</span><br><span class="line">@Column(name = &quot;id&quot;)</span><br><span class="line">private Integer id;</span><br><span class="line"></span><br><span class="line">@Column(name = &quot;name&quot;)</span><br><span class="line">private String name;</span><br><span class="line"></span><br><span class="line">@Column(name = &quot;addr&quot;)</span><br><span class="line">private String addr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JPA自带的几种主键生成策略</span><br><span class="line">TABLE： 使用一个特定的数据库表格来保存主键。</span><br><span class="line">SEQUENCE： 根据底层数据库的序列来生成主键，条件是数据库支持序列。这个值要与generator一起使用，generator 指定生成主键使用的生成器（可能是orcale中自己编写的序列）。</span><br><span class="line">IDENTITY： 主键由数据库自动生成（主要是支持自动增长的数据库，如mysql）。</span><br><span class="line">AUTO： 主键由程序控制，也是GenerationType的默认值。</span><br></pre></td></tr></table></figure><h2 id="4-Repository-层-实现-Repository-标准"><a href="#4-Repository-层-实现-Repository-标准" class="headerlink" title="4. Repository 层 实现 Repository 标准"></a>4. Repository 层 实现 Repository 标准</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Repository</span><br><span class="line">public interface AccountRepository extends JpaRepository&lt;Account,String&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-Repository-的继承关系"><a href="#5-Repository-的继承关系" class="headerlink" title="5.Repository 的继承关系"></a>5.Repository 的继承关系</h2><p><img alt data-src="https://pic1.superbed.cn/item/5ddd4baf8e0e2e3ee99f0395.png" class="lazyload"></p><ul><li>epository：空接口，表名任何继承它的均为仓库接口类</li><li>CrudRepository：继承Repository，实现了一组CRUD相关的方法</li><li>PagingAndSortingRepository：继承CrudRepository，实现了一组分页、排序相关的方法</li><li>JpaRepository：继承PagingAndSortRepository，实现一组JPA规范相关的方法<br>自定义的XxxRepository需要继承JpaRepository，这样该接口就具备了通用的数据访问控制层的能力。</li></ul><p><img alt data-src="https://pic1.superbed.cn/item/5ddd4baf8e0e2e3ee99f0393.png" class="lazyload"></p><h2 id="6-Repository的几种写法"><a href="#6-Repository的几种写法" class="headerlink" title="6.Repository的几种写法"></a>6.Repository的几种写法</h2><ul><li>自带的方法</li><li>简单命名拼凑</li><li>sql 拼接</li><li>hsql 的 拼接<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public interface UserRepository extends JpaRepository&lt;User,Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">// 1.通过简单的方法命名拼凑</span><br><span class="line">List&lt;User&gt; findUserByName(String name);</span><br><span class="line"></span><br><span class="line">// 2.使用query 使用sql + ? 操作</span><br><span class="line">@Query(value = &quot;select * from user where name = ?&quot;,nativeQuery = true)</span><br><span class="line">List&lt;User&gt; findUserBySql(String name);</span><br><span class="line"></span><br><span class="line">@Transactional</span><br><span class="line">@Modifying</span><br><span class="line">@Query(value = &quot;update user a set a.name=?1 where a.id= ?2&quot;,nativeQuery = true)</span><br><span class="line">int updateName(String name,Integer id);</span><br><span class="line"></span><br><span class="line">// 删除</span><br><span class="line">@Transactional</span><br><span class="line">@Modifying</span><br><span class="line">@Query(value = &quot;delete from user where id = ?1&quot;,nativeQuery = true)</span><br><span class="line">void deletIdBysql(Integer id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 3. 使用 hsql 删除数据</span><br><span class="line">@Transactional</span><br><span class="line">@Modifying</span><br><span class="line">@Query(&quot;delete from User u where u.id = ?1&quot;)</span><br><span class="line">void deletId(Integer id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>数据修改操作需要加上事务注解，保证数据的一致性</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hello world </tag>
            
            <tag> JPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis基础知识点</title>
      <link href="/2019/11/25/MyBatis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2019/11/25/MyBatis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis基础知识点"><a href="#MyBatis基础知识点" class="headerlink" title="MyBatis基础知识点"></a>MyBatis基础知识点</h1><h2 id="1-基础配置"><a href="#1-基础配置" class="headerlink" title="1.基础配置"></a>1.基础配置</h2><h5 id="1-添加依赖包"><a href="#1-添加依赖包" class="headerlink" title="1.添加依赖包"></a>1.添加依赖包</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--mysql--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;8.0.16&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h5 id="2-配置log4j"><a href="#2-配置log4j" class="headerlink" title="2.配置log4j"></a>2.配置log4j</h5><p>在 resources 目录下增加文件 log4j.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=INFO, stdout</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</span><br></pre></td></tr></table></figure><h5 id="3-自定义model-POJO类"><a href="#3-自定义model-POJO类" class="headerlink" title="3.自定义model (POJO类)"></a>3.自定义model (POJO类)</h5><h5 id="4-MyBatis-的全局配置"><a href="#4-MyBatis-的全局配置" class="headerlink" title="4.MyBatis 的全局配置"></a>4.MyBatis 的全局配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!-- 数据库连接配置 --&gt;</span><br><span class="line">    &lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">        &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">            &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class="line">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/blog_db?useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line">    &lt;!-- 映射文件配置 --&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=&quot;mapper/UserMapper.xml&quot;/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h5 id="5-自定义映射接口"><a href="#5-自定义映射接口" class="headerlink" title="5.自定义映射接口"></a>5.自定义映射接口</h5><p>此接口对应映射配置中的sql语句 实现sql转对象 对象转sql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface UserMapper &#123;</span><br><span class="line">    //根据id获取用户信息</span><br><span class="line">    User findById(Long id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-编写XML映射文件"><a href="#6-编写XML映射文件" class="headerlink" title="6.编写XML映射文件"></a>6.编写XML映射文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC</span><br><span class="line">        &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">        &lt;!-- 对应映射接口的命名空间 --&gt;</span><br><span class="line">&lt;mapper namespace=&quot;mapper.UserMapper&quot;&gt;</span><br><span class="line">    &lt;!-- findById对应接口中的方法 --&gt;</span><br><span class="line">    &lt;select id=&quot;findById&quot; parameterType=&quot;java.lang.Long&quot; resultType=&quot;bean.User&quot;&gt;</span><br><span class="line">        select * from blog_db.user where id=#&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br><span class="line"></span><br><span class="line">注释：</span><br><span class="line">id 对应 接口中的方法名</span><br><span class="line">parameterType ： sql语句中参数的类型</span><br><span class="line">resultType ：返回结果类型</span><br><span class="line">#&#123;id&#125; ： 占位</span><br></pre></td></tr></table></figure><h5 id="7-主函数调用"><a href="#7-主函数调用" class="headerlink" title="7.主函数调用"></a>7.主函数调用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">  public static void main(String[] args) throws Exception&#123;</span><br><span class="line">    // 1.新建session工厂构建类</span><br><span class="line">    SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();</span><br><span class="line">    // 2.session工厂构建类  读取配置文件构造 session工厂</span><br><span class="line">    SqlSessionFactory sessionFactory = sqlSessionFactoryBuilder.build(</span><br><span class="line">            Resources.getResourceAsReader(&quot;mybatis-config.xml&quot;),</span><br><span class="line">            &quot;development&quot;  // 这个参数可以省略，因为 mybatis-config.xml 的&lt;environments&gt;标签指定了默认环境为development</span><br><span class="line">    );</span><br><span class="line">    // 3.会话工厂 构建 会话</span><br><span class="line">    SqlSession sqlSession = sessionFactory.openSession();</span><br><span class="line">    // 4.调用session的操作数据库的一个操作</span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    User user = userMapper.findById(1L);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    // 5.关闭会话</span><br><span class="line">    sqlSession.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基本使用结束—————————"><a href="#基本使用结束—————————" class="headerlink" title="基本使用结束—————————"></a>基本使用结束—————————</h3><h4 id="1-使class的字段与sql中不一致的字段-一一对应"><a href="#1-使class的字段与sql中不一致的字段-一一对应" class="headerlink" title="1.使class的字段与sql中不一致的字段 一一对应"></a>1.使class的字段与sql中不一致的字段 一一对应</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">方案一  新建map规则：</span><br><span class="line">&lt;!-- 此处将User对象的username与sql的name对应 --&gt;</span><br><span class="line">&lt;resultMap id=&quot;userResult&quot; type=&quot;bean.User&quot;&gt;</span><br><span class="line">    &lt;result property=&quot;username&quot; column=&quot;name&quot; javaType=&quot;String&quot; jdbcType=&quot;VARCHAR&quot;/&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line">                                        &lt;!-- 此处遵循userResult的映射规则 --&gt;</span><br><span class="line">&lt;select id=&quot;findById&quot; parameterType=&quot;Long&quot; resultMap=&quot;userResult&quot; resultType=&quot;bean.User&quot;&gt;</span><br><span class="line">    select * from blog_db.user where id=#&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">方案二  修改查询语句使符合字段：</span><br><span class="line">select id, name AS username, email, password from blog_db.user where id=#&#123;id&#125;</span><br></pre></td></tr></table></figure><h4 id="2-多参数查询"><a href="#2-多参数查询" class="headerlink" title="2.多参数查询"></a>2.多参数查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">方案一： 使用默认的param*占位</span><br><span class="line">在接口中配置：</span><br><span class="line">User findUserByNameAndPassWd(String name,String passwd);</span><br><span class="line">在xml中配置：</span><br><span class="line">&lt;select id=&quot;findUserByNameAndPassWd&quot; resultType=&quot;model.User&quot;&gt;</span><br><span class="line">  select * from blog_db.user where name=#&#123;param1&#125; and password=#&#123;param2&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">方案二：使用注解注入参数名 使用参数占位</span><br><span class="line">在接口中配置：</span><br><span class="line">User findUserByNameAndPassWd2(@Param(&quot;name&quot;) String name, @Param(&quot;passwd&quot;) String passwd);</span><br><span class="line">在xml中配置：</span><br><span class="line">&lt;select id=&quot;findUserByNameAndPassWd2&quot; resultType=&quot;model.User&quot;&gt;</span><br><span class="line">  select * from blog_db.user where name=#&#123;name&#125; and password=#&#123;passwd&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h4 id="3-Sort的小细节"><a href="#3-Sort的小细节" class="headerlink" title="3.Sort的小细节"></a>3.Sort的小细节</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">排序的参数不能使用#&#123;&#125; 只能用$&#123;&#125;</span><br><span class="line">&lt;select id=&quot;TestSort&quot; resultType=&quot;model.User&quot;&gt;</span><br><span class="line">  select * from blog_db.user order by $&#123;orderRule&#125; desc</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h4 id="4-事务："><a href="#4-事务：" class="headerlink" title="4.事务："></a>4.事务：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">得到一个数据库的操作对象</span><br><span class="line">UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">然后进行操作：</span><br><span class="line">对于insert delete 和 update 需要有手动提交事务</span><br><span class="line">userMapper.xxx(操作)</span><br><span class="line">sqlSession.rollback(true);  // 强制回滚</span><br><span class="line">sqlSession.commit();  //提交</span><br><span class="line">sqlSession.commit(true);  // 强制提交</span><br></pre></td></tr></table></figure><h4 id="5-动态Sql"><a href="#5-动态Sql" class="headerlink" title="5.动态Sql"></a>5.动态Sql</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">如果该字段不为空就加入where中进行比较</span><br><span class="line">&lt;select id=&quot;find&quot; resultType=&quot;model.User&quot; parameterType=&quot;model.User&quot;&gt;</span><br><span class="line">    select * from blog_db.user</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;if test=&quot; id != null&quot;&gt;</span><br><span class="line">            and id = #&#123;id&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;name != null&quot;&gt;</span><br><span class="line">            and name = #&#123;name&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;email != null&quot;&gt;</span><br><span class="line">            and email = #&#123;email&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;password != null&quot;&gt;</span><br><span class="line">            and password = #&#123;password&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h4 id="6-一对一和一对多连表查询-返回混合值"><a href="#6-一对一和一对多连表查询-返回混合值" class="headerlink" title="6.一对一和一对多连表查询 返回混合值"></a>6.一对一和一对多连表查询 返回混合值</h4><ol><li>使用扩展类，存储返回的数据 （一对一）</li><li>模型里有模型  （一对一）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap id=&quot;blogResult&quot; type=&quot;bean.Blog&quot;&gt;</span><br><span class="line">    &lt;result property=&quot;id&quot; column=&quot;blog_id&quot;/&gt;</span><br><span class="line">    &lt;result property=&quot;ownerId&quot; column=&quot;user_id&quot;/&gt;</span><br><span class="line">    &lt;result property=&quot;title&quot; column=&quot;blog_title&quot;/&gt;</span><br><span class="line">    &lt;result property=&quot;content&quot; column=&quot;blog_content&quot;/&gt;</span><br><span class="line">    &lt;!--模型里有模型 association--&gt;</span><br><span class="line">    &lt;association property=&quot;user&quot; javaType=&quot;bean.User&quot;&gt;</span><br><span class="line">        &lt;id property=&quot;id&quot; column=&quot;user_id&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;name&quot; column=&quot;user_name&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;email&quot; column=&quot;user_email&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;password&quot; column=&quot;user_password&quot;/&gt;</span><br><span class="line">    &lt;/association&gt;</span><br><span class="line"></span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=&quot;findById&quot; parameterType=&quot;Long&quot; resultMap=&quot;blogResult&quot; resultType=&quot;bean.Blog&quot;&gt;</span><br><span class="line">    SELECT</span><br><span class="line">        blog.id AS blog_id,</span><br><span class="line">        blog.title AS blog_title,</span><br><span class="line">        blog.content AS blog_content,</span><br><span class="line">        user.id AS user_id,</span><br><span class="line">        user.name AS user_name,</span><br><span class="line">        user.email AS user_email,</span><br><span class="line">        user.password AS user_password</span><br><span class="line">    FROM blog, user </span><br><span class="line">    WHERE </span><br><span class="line">        blog.id = #&#123;id&#125; </span><br><span class="line">        AND user.id=blog.owner_id;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h4 id="3-模型里有集合-（一对多）"><a href="#3-模型里有集合-（一对多）" class="headerlink" title="3. 模型里有集合  （一对多）"></a>3. 模型里有集合  （一对多）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">    &lt;!--首先创建map映射关系--&gt;</span><br><span class="line">&lt;resultMap id=&quot;userResult&quot; type=&quot;model.User&quot;&gt;</span><br><span class="line">    &lt;result property=&quot;id&quot; column=&quot;user_id&quot;/&gt;</span><br><span class="line">    &lt;result property=&quot;name&quot; column=&quot;user_name&quot;/&gt;</span><br><span class="line">    &lt;result property=&quot;email&quot; column=&quot;user_email&quot;/&gt;</span><br><span class="line">    &lt;result property=&quot;password&quot; column=&quot;user_password&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--result里有集合 collection--&gt;</span><br><span class="line">    &lt;collection property=&quot;blogs&quot; ofType=&quot;model.Blog&quot;&gt;</span><br><span class="line">        &lt;id property=&quot;id&quot; column=&quot;blog_id&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;ownerId&quot; column=&quot;user_id&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;title&quot; column=&quot;blog_title&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;content&quot; column=&quot;blog_content&quot;/&gt;</span><br><span class="line">    &lt;/collection&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=&quot;findById&quot; parameterType=&quot;Long&quot; resultMap=&quot;userResult&quot; resultType=&quot;model.User&quot;&gt;</span><br><span class="line">    SELECT</span><br><span class="line">        user.id AS user_id,</span><br><span class="line">        user.name AS user_name,</span><br><span class="line">        user.email AS user_email,</span><br><span class="line">        user.password AS user_password,</span><br><span class="line">        blog.id AS blog_id,</span><br><span class="line">        blog.title AS blog_title,</span><br><span class="line">        blog.content AS blog_content</span><br><span class="line">    FROM user, blog</span><br><span class="line">    WHERE</span><br><span class="line">        user.id = 1</span><br><span class="line">        AND user.id=blog.owner_id;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h4 id="7-两个表的查询关联"><a href="#7-两个表的查询关联" class="headerlink" title="7.两个表的查询关联"></a>7.两个表的查询关联</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">这个mapper是BlogMapper的xml配置</span><br><span class="line">记得将改xml 注入 全局配置中</span><br><span class="line">&lt;mapper namespace=&quot;mapper.BlogMapper&quot;&gt;</span><br><span class="line">    &lt;!--联合多表查询--&gt;</span><br><span class="line">    &lt;!--首先要有两个表的map关系--&gt;</span><br><span class="line">    &lt;resultMap id=&quot;blogResult&quot; type=&quot;model.Blog&quot;&gt;</span><br><span class="line">        &lt;result property=&quot;id&quot; column=&quot;blog_id&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;ownerId&quot; column=&quot;user_id&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;title&quot; column=&quot;blog_title&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;content&quot; column=&quot;blog_content&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;association property=&quot;user&quot;</span><br><span class="line">                     javaType=&quot;model.User&quot;</span><br><span class="line">                     select=&quot;findOwnerOfBlog&quot;</span><br><span class="line">                     column=&quot;user_id&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;resultMap id=&quot;userResult&quot; type=&quot;model.User&quot;&gt;</span><br><span class="line">        &lt;result property=&quot;id&quot; column=&quot;user_id&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;name&quot; column=&quot;user_name&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;email&quot; column=&quot;user_email&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;password&quot; column=&quot;user_password&quot;/&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--两个查询--&gt;</span><br><span class="line">    &lt;select id=&quot;findById&quot; parameterType=&quot;Long&quot; resultMap=&quot;blogResult&quot; resultType=&quot;model.Blog&quot;&gt;</span><br><span class="line">        SELECT</span><br><span class="line">        id AS blog_id,</span><br><span class="line">        id AS user_id,</span><br><span class="line">        title AS blog_title,</span><br><span class="line">        content AS blog_content</span><br><span class="line">        FROM</span><br><span class="line">        blog</span><br><span class="line">        WHERE</span><br><span class="line">        id = #&#123;id&#125;;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;findOwnerOfBlog&quot;  parameterType=&quot;int&quot;  resultMap=&quot;userResult&quot; resultType=&quot;model.User&quot;&gt;</span><br><span class="line">        SELECT</span><br><span class="line">        id user_id,</span><br><span class="line">        name user_name,</span><br><span class="line">        email user_email,</span><br><span class="line">        password user_password</span><br><span class="line">        FROM</span><br><span class="line">        user</span><br><span class="line">        WHERE</span><br><span class="line">        id=#&#123;user_id&#125;;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br><span class="line"></span><br><span class="line">其流程是： </span><br><span class="line">1.首先 client调用BlogMapper的findById方法</span><br><span class="line">2.sql执行，作出回应，返回Blog的值（此时不直接存储User对象的值）</span><br><span class="line">3.在Blog的mapper映射中 调用 select findOwnerOfBlog 方法 传入 user_id 查询 输出User</span><br></pre></td></tr></table></figure><h4 id="8-延迟加载"><a href="#8-延迟加载" class="headerlink" title="8.延迟加载"></a>8.延迟加载</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在上述案例的基础上，在全局配置文件中增加如下配置即可实现：</span><br><span class="line">&lt;settings&gt;</span><br><span class="line">    &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">    &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">&lt;/settings&gt;</span><br><span class="line">修改后会在需要User值时，才进行select findOwnerOfBlog 方法的触发</span><br></pre></td></tr></table></figure><h4 id="9-多对多的实现"><a href="#9-多对多的实现" class="headerlink" title="9.多对多的实现"></a>9.多对多的实现</h4><h4 id="10-分页查询"><a href="#10-分页查询" class="headerlink" title="10.分页查询"></a>10.分页查询</h4><ol><li>limit显式实现</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;findByUserId&quot; resultType=&quot;model.Blog&quot;&gt;</span><br><span class="line">    select id,owner_id as ownerId,title,content</span><br><span class="line">    from blog</span><br><span class="line">    where owner_id = #&#123;param1&#125;</span><br><span class="line">    order by id asc</span><br><span class="line">    limit #&#123;param2&#125;, #&#123;param3&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>rowBounds + pageHelper 实现</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">在接口中：</span><br><span class="line">List&lt;Blog&gt; findByUserIdWithHelper(Long ownerId, RowBounds rowBounds);</span><br><span class="line">在xml中：</span><br><span class="line">&lt;select id=&quot;findByUserIdWithHelper&quot; resultType=&quot;model.Blog&quot;&gt;</span><br><span class="line">    SELECT</span><br><span class="line">    id,</span><br><span class="line">    owner_id AS ownerId,</span><br><span class="line">    title,</span><br><span class="line">    content</span><br><span class="line">    FROM</span><br><span class="line">        blog</span><br><span class="line">    WHERE</span><br><span class="line">        owner_id = #&#123;param1&#125;</span><br><span class="line">    ORDER BY id ASC</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">最后还要导包，在全局配置中加入插件pagehelper：</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">    &lt;plugin interceptor=&quot;com.github.pagehelper.PageInterceptor&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;rowBoundsWithCount&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">    &lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br></pre></td></tr></table></figure><h4 id="11-使用注解"><a href="#11-使用注解" class="headerlink" title="11.使用注解"></a>11.使用注解</h4><p>在mapper接口内使用注解sql语句实现简单的查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Select(&quot;select * from blog_db.user&quot;)</span><br><span class="line">List&lt;Blog&gt; findAll();</span><br><span class="line">其他更多....用时再查</span><br></pre></td></tr></table></figure><h4 id="12-MyBatis的二级缓存机制"><a href="#12-MyBatis的二级缓存机制" class="headerlink" title="12.MyBatis的二级缓存机制"></a>12.MyBatis的二级缓存机制</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.一级缓存默认开启</span><br><span class="line">    范围：Mapper（同一个mapper 相当于DAO）</span><br><span class="line">    清空：当有 update delete insert操作发生</span><br><span class="line"></span><br><span class="line">2.二级缓存手动开启</span><br><span class="line">    范围：Session（同一个Session会话）</span><br><span class="line">    清空：</span><br><span class="line">    开启：</span><br><span class="line">    1.在全局配置文件中添加：</span><br><span class="line">    &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;   &lt;!--开启二级缓存--&gt;</span><br><span class="line">    2.将Mapper序列化</span><br></pre></td></tr></table></figure><p><a href="https://blog.letiantian.me/mybatis" target="_blank" rel="noopener">优秀的学习资源</a></p>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hello world </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC基本概念和使用</title>
      <link href="/2019/11/25/SpringMVC%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/11/25/SpringMVC%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringMVC基本概念和使用"><a href="#SpringMVC基本概念和使用" class="headerlink" title="SpringMVC基本概念和使用"></a>SpringMVC基本概念和使用</h1><ul><li>Spring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web Flow里面。Spring 框架提供了构建 Web 应用程序的全功能 MVC 模块。</li></ul><h2 id="基本架构流程"><a href="#基本架构流程" class="headerlink" title="基本架构流程"></a>基本架构流程</h2><ul><li>核心思想 MVC分层设计</li></ul><p><img alt data-src="https://pic2.superbed.cn/item/5ddb62008e0e2e3ee94bde32.png" class="lazyload"></p><h2 id="1-入门配置"><a href="#1-入门配置" class="headerlink" title="1.入门配置"></a>1.入门配置</h2><ol><li>导包： 最基本的Spring和SpringMVC 8个包，包括web</li><li>配置SpringMVC 设置</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;</span><br><span class="line">        http://www.springframework.org/schema/beans</span><br><span class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">        http://www.springframework.org/schema/mvc</span><br><span class="line">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span><br><span class="line">        http://www.springframework.org/schema/context</span><br><span class="line">        http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 开启注解扫描 --&gt;</span><br><span class="line">    &lt;context:component-scan base-package=&quot;code.controller&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 视图解析器对象 --&gt;</span><br><span class="line">    &lt;bean id=&quot;internalResourceViewResolver&quot; class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/pages/&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 开启SpringMVC框架注解的支持 --&gt;</span><br><span class="line">    &lt;mvc:annotation-driven /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>web 配置</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span><br><span class="line">         version=&quot;4.0&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;display-name&gt;SpringMVC Project&lt;/display-name&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;!--控制中心--&gt;</span><br><span class="line">        &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--初始化加载SpringMVC配置--&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;classpath:SpringMVC.xml&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--映射监听--&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><p>4.处理函数书写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package code.controller;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(path = &quot;/test&quot;)   //一级路径</span><br><span class="line">public class helloController&#123;</span><br><span class="line"></span><br><span class="line">  // 书写一个方法对请求作出回应</span><br><span class="line">  @RequestMapping(path = &quot;/hello&quot;)  // 二级路径</span><br><span class="line">  public String SayHello()&#123;</span><br><span class="line">    System.out.println(&quot;hello SrpingMVC.&quot;);</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-基本配置"><a href="#2-基本配置" class="headerlink" title="2.基本配置"></a>2.基本配置</h3><ol><li>架构图理解<br><img alt data-src="https://pic2.superbed.cn/item/5ddb62008e0e2e3ee94bde34.png" class="lazyload"></li><li>RequestMapping注解<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.RequestMapping注解Controller下形成一级路径，再书写在func下形成二级目录</span><br><span class="line">2.path属性 = value 属性</span><br><span class="line">3.method属性  post get</span><br><span class="line">4.headers属性  选择接受必须携带哪些headers的url</span><br><span class="line">5.params属性 选择接受符合规定的参数的url</span><br><span class="line">6.参数绑定</span><br><span class="line">    1.普通数据类型，直接通过同名方法参数获取</span><br><span class="line">    2.bean对象类型，通过构建javabean 并通过与对象属性相同的属性名获取</span><br><span class="line">    3.绑定集合类型，通过 list[] 或 map[&apos;&apos;] 对应封装</span><br></pre></td></tr></table></figure></li><li>配置过滤器解决中文乱码问题 (web.xml)中</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置监听器解决中文乱码问题--&gt;</span><br><span class="line">    &lt;filter&gt;</span><br><span class="line">        &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;</span><br><span class="line">        &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;encoding&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;UTF-8&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line">    &lt;/filter&gt;</span><br><span class="line">    &lt;filter-mapping&gt;</span><br><span class="line">        &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>自定义类型转换</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.自建转换类 实现 Converter&lt;&gt;接口</span><br><span class="line">2.Srping.xml中配置</span><br><span class="line">&lt;!--配置自定义类型转换器--&gt;</span><br><span class="line">    &lt;bean id=&quot;conversionService&quot; class=&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;converters&quot;&gt;</span><br><span class="line">            &lt;set&gt;</span><br><span class="line">                &lt;!--加载可用的类型转换器对象--&gt;</span><br><span class="line">                &lt;bean class=&quot;code.utils.StringToDate&quot;&gt;&lt;/bean&gt;</span><br><span class="line">            &lt;/set&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;!-- 开启SpringMVC框架注解的支持 --&gt;</span><br><span class="line">    &lt;mvc:annotation-driven conversion-service=&quot;conversionService&quot;/&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li><p>获取 Servlet ,session , reqeust, response</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在参数位置引用: HttpServletRequest 和 HttpServletResponse</span><br><span class="line">@RequestMapping(&quot;/Servlet&quot;)</span><br><span class="line">  public String testServlet(HttpServletRequest request, HttpServletResponse response)&#123;</span><br><span class="line">    System.out.println(request); //request</span><br><span class="line">    System.out.println(request.getSession());   //session</span><br><span class="line">    System.out.println(request.getSession().getServletContext()); //servlet</span><br><span class="line">    System.out.println(response); //response</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>强制绑定该参数名的传入参数 @RequestParam(“”)</p></li><li><p>restfule 编程风格 @PathVariable</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">通过 / 后直接跟&#123;参数&#125;,减少使用 ?传参和方法名</span><br><span class="line">@RequestMapping(&quot;/testPathVariable/&#123;id&#125;&quot;)</span><br><span class="line">  public String testPathVariable(@PathVariable String id)&#123;</span><br><span class="line">    System.out.println(id);</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>拿到整个post请求的请求体: @RequestBody</p></li><li><p>拿到请求的Header @RequestHeader</p></li><li><p>拿到请求的cookie值 @CookieValue(value=””)</p></li><li><p>函数执行前的方法 @ModelAttribute</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ModelAttribute 会先于当前目录下的方法执行，可以利用其性质先进行封装判断后把值传给处理函数</span><br><span class="line">  @ModelAttribute</span><br><span class="line">  public Account testModelAttribute1(String name,String passwd)&#123;</span><br><span class="line">    Account account = new Account();</span><br><span class="line">    account.setName(name);</span><br><span class="line">    account.setPasswd(passwd);</span><br><span class="line">    account.setUser(new User(&quot;kid&quot;,20));</span><br><span class="line">    return account;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  @RequestMapping(&quot;/testModelAttribute&quot;)</span><br><span class="line">  public String testModelAttribute2(Account account)&#123;</span><br><span class="line">    System.out.println(account);</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>SessionAttributes 设置session域的共有数据</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Model默认吧数据存到request 如果要设置到session </span><br><span class="line">需要在class前添加@SessionAttributes(value = &#123;&quot;msg&quot;&#125;)注解</span><br><span class="line"></span><br><span class="line">// set</span><br><span class="line">@RequestMapping(&quot;/testSessionAttribute&quot;)</span><br><span class="line">  public String testSessionAttribute(Model model)&#123;</span><br><span class="line">    model.addAttribute(&quot;msg&quot;,&quot;hello world&quot;);  // 为model添加数据</span><br><span class="line">    // model  会把数据存到request中</span><br><span class="line">    System.out.println(&quot;testSessionAttribute&quot;);</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // get</span><br><span class="line">  @RequestMapping(&quot;/getSessionAttribute&quot;)</span><br><span class="line">  public String getSessionAttribute(ModelMap modelMap)&#123;</span><br><span class="line">    String msg = (String) modelMap.get(&quot;msg&quot;);  //取出session的值</span><br><span class="line">    System.out.println(&quot;getSessionAttribute&quot;);</span><br><span class="line">    System.out.println(msg);</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // del</span><br><span class="line">  @RequestMapping(&quot;/delSessionAttribute&quot;)</span><br><span class="line">  public String delSessionAttribute(SessionStatus status)&#123;</span><br><span class="line">    status.setComplete();   // 清空session</span><br><span class="line">    System.out.println(&quot;清空session&quot;);</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="3-视图解析器"><a href="#3-视图解析器" class="headerlink" title="3.视图解析器"></a>3.视图解析器</h3><h4 id="1-返回值是String-配置视图解析器，正常转发"><a href="#1-返回值是String-配置视图解析器，正常转发" class="headerlink" title="1. 返回值是String 配置视图解析器，正常转发"></a>1. 返回值是String 配置视图解析器，正常转发</h4><h4 id="2-返回值是void，使用HttpServletrequest-response-转发或者重定向"><a href="#2-返回值是void，使用HttpServletrequest-response-转发或者重定向" class="headerlink" title="2. 返回值是void，使用HttpServletrequest / response 转发或者重定向"></a>2. 返回值是void，使用HttpServletrequest / response 转发或者重定向</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/testVoid&quot;)</span><br><span class="line">  public void testVoid(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">    // 编写请求转发：</span><br><span class="line">//    request.getRequestDispatcher(&quot;/WEB-INF/pages/success.jsp&quot;).forward(request,response);</span><br><span class="line">    //重定向</span><br><span class="line">    response.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">    response.setContentType(&quot;text/html;charset=UTF-8&quot;);</span><br><span class="line">    response.getWriter().println(&quot;你好！&quot;);</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="3-返回值是ModelAndView"><a href="#3-返回值是ModelAndView" class="headerlink" title="3. 返回值是ModelAndView"></a>3. 返回值是ModelAndView</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/testModelAndView&quot;)</span><br><span class="line">  public ModelAndView testModelAndView() &#123;</span><br><span class="line">    ModelAndView mv = new ModelAndView();</span><br><span class="line">    User user = new User();</span><br><span class="line">    user.setUage(12);</span><br><span class="line">    user.setUname(&quot;kid&quot;);</span><br><span class="line">    mv.addObject(&quot;user&quot;,user);  //设置request参数</span><br><span class="line">    mv.setViewName(&quot;success&quot;);    // 设置转发页面</span><br><span class="line">    return mv;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="4-开放静态资源加载-SpringMVC-xml"><a href="#4-开放静态资源加载-SpringMVC-xml" class="headerlink" title="4. 开放静态资源加载 SpringMVC.xml"></a>4. 开放静态资源加载 SpringMVC.xml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--前段控制器，那些静态资源不控制--&gt;</span><br><span class="line">    &lt;mvc:resources mapping=&quot;/js/**&quot; location=&quot;/js/&quot; /&gt;</span><br></pre></td></tr></table></figure><h4 id="5-AJAX的小案例"><a href="#5-AJAX的小案例" class="headerlink" title="5. AJAX的小案例"></a>5. AJAX的小案例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">前段ajax请求</span><br><span class="line">&lt;script src=&quot;js/jquery-3.3.1.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      //页面加载，绑定单击事件</span><br><span class="line">      $(function () &#123;</span><br><span class="line">        $(&quot;#btn&quot;).click(function () &#123;</span><br><span class="line">          // alert(&quot;hello world by js.&quot;);</span><br><span class="line">          // 发送ajax请求</span><br><span class="line">          $.ajax(&#123;</span><br><span class="line">            url:&quot;user/testAjax&quot;,</span><br><span class="line">            contentType:&quot;application/json;charset=UTF-8&quot;,</span><br><span class="line">            data:&apos;&#123;&quot;uname&quot;:&quot;kid&quot;,&quot;uage&quot;:18&#125;&apos;,</span><br><span class="line">            dataType:&quot;json&quot;,</span><br><span class="line">            type:&quot;post&quot;,</span><br><span class="line">            success:function (data) &#123;</span><br><span class="line">                alert(data.uname);</span><br><span class="line">                alert(data.uage);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    </span><br><span class="line">controller 执行</span><br><span class="line">// testAjax</span><br><span class="line">@RequestMapping(&quot;/testAjax&quot;)</span><br><span class="line">public @ResponseBody User testAjax(@RequestBody User user)&#123;</span><br><span class="line">System.out.println(&quot;ajax data 已收到...&quot;);</span><br><span class="line">System.out.println(user);</span><br><span class="line">user.setUname(&quot;kid1999&quot;);</span><br><span class="line">return user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">注意：ajax数据传输使用的是json springmvc对json传输的封装，使用的jackson包（需要提前导入）</span><br></pre></td></tr></table></figure><h4 id="6-传统文件上传"><a href="#6-传统文件上传" class="headerlink" title="6. 传统文件上传"></a>6. 传统文件上传</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">1.前端 设置</span><br><span class="line">&lt;form action=&quot;fileupload&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">    选择文件：&lt;input type=&quot;file&quot; name=&quot;upload&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;upload&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">2.后端接收</span><br><span class="line">@RequestMapping(&quot;/fileupload&quot;)</span><br><span class="line">  public String fileupload(HttpServletRequest request) throws Exception &#123;</span><br><span class="line">    System.out.println(&quot;upload success...&quot;);</span><br><span class="line">    // 使用fileupload组件完成文件上传</span><br><span class="line">    // 上传的位置</span><br><span class="line">    String path = request.getSession().getServletContext().getRealPath(&quot;/upload/&quot;);</span><br><span class="line">    // 判断路径是否存在</span><br><span class="line">    File file = new File(path);</span><br><span class="line">    if(!file.exists())&#123;</span><br><span class="line">      // 创建文件夹</span><br><span class="line">      file.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 解析request对象 获取文件上传项</span><br><span class="line">    DiskFileItemFactory factory = new DiskFileItemFactory();</span><br><span class="line">    ServletFileUpload upload = new ServletFileUpload(factory);</span><br><span class="line">    // 解析request</span><br><span class="line">    List&lt;FileItem&gt; items = upload.parseRequest(request);</span><br><span class="line">    // 遍历</span><br><span class="line">    for (FileItem item:items) &#123;</span><br><span class="line">      // 判断，当前item对象是否是上传文件项</span><br><span class="line">      if(item.isFormField())&#123;</span><br><span class="line">        // 普通表单</span><br><span class="line">      &#125;else &#123;</span><br><span class="line">        String filename = item.getName();</span><br><span class="line">        // 文件名设置 唯一值</span><br><span class="line">        String uuid = UUID.randomUUID().toString().replace(&quot;-&quot;,&quot;&quot;);</span><br><span class="line">        filename = uuid + &quot;_&quot; + filename;</span><br><span class="line">        item.write(new File(path,filename));  // 完成文件上传</span><br><span class="line">        item.delete();  //清空临时缓存</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  注意： 需要依赖commons-io和fileupload组件</span><br></pre></td></tr></table></figure><h4 id="7-SpringMVC的文件上传"><a href="#7-SpringMVC的文件上传" class="headerlink" title="7. SpringMVC的文件上传"></a>7. SpringMVC的文件上传</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">1.前端</span><br><span class="line">&lt;form action=&quot;/springmvcUpload&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">    选择文件：&lt;input type=&quot;file&quot; name=&quot;upload&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;upload&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">2.后端SpringMVC处理</span><br><span class="line">// SpringMVC文件上传</span><br><span class="line">  @RequestMapping(&quot;/springmvcUpload&quot;)</span><br><span class="line">  public String springmvcUpload (HttpServletRequest request,MultipartFile upload) throws IOException &#123;</span><br><span class="line">    System.out.println(&quot;upload success...&quot;);</span><br><span class="line">    // 先用</span><br><span class="line">    String path = request.getSession().getServletContext().getRealPath(&quot;/upload/&quot;);</span><br><span class="line">    File file = new File(path);</span><br><span class="line">    if(!file.exists()) file.mkdirs();</span><br><span class="line">    String uuid = UUID.randomUUID().toString().replace(&quot;-&quot;,&quot;&quot;);</span><br><span class="line">    String filename = upload.getOriginalFilename();</span><br><span class="line">    filename = uuid + &quot;_&quot; + filename;</span><br><span class="line">    upload.transferTo(new File(path,filename));</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"> 3.SpringMVC.xml</span><br><span class="line"> &lt;!--配置文件解析器对象--&gt;</span><br><span class="line">&lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;maxUploadSize&quot; value= &quot;10485760&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">注意：前端input的name 对应后端 MultipartFile 的参数名</span><br></pre></td></tr></table></figure><h4 id="8-跨服务器文件上传-（略）"><a href="#8-跨服务器文件上传-（略）" class="headerlink" title="8. 跨服务器文件上传  （略）"></a>8. 跨服务器文件上传  （略）</h4><h4 id="9-异常处理"><a href="#9-异常处理" class="headerlink" title="9. 异常处理"></a>9. 异常处理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">    1.编写自定义异常类，做提示信息 SysException</span><br><span class="line">public class SysException extends Exception&#123;</span><br><span class="line">  // 存储提示信息</span><br><span class="line">  private String message;</span><br><span class="line">  @Override</span><br><span class="line">  public String getMessage() &#123;</span><br><span class="line">    return message;</span><br><span class="line">  &#125;</span><br><span class="line">  public void setMessage(String message) &#123;</span><br><span class="line">    this.message = message;</span><br><span class="line">  &#125;</span><br><span class="line">  public SysException(String message) &#123;</span><br><span class="line">    this.message = message;</span><br><span class="line">  &#125;</span><br><span class="line">  public SysException() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">    2.编写异常处理器 实现 HandlerExceptionResolver</span><br><span class="line">public class SysExceptionSolver implements HandlerExceptionResolver &#123;</span><br><span class="line">  // 处理业务逻辑</span><br><span class="line">  @Override</span><br><span class="line">  public ModelAndView resolveException(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) &#123;</span><br><span class="line">    // 获取异常对象</span><br><span class="line">    SysException ex = null;</span><br><span class="line">    if(e instanceof SysException) ex = (SysException)e;</span><br><span class="line">    else ex = new SysException(&quot;系统正在维护....&quot;);</span><br><span class="line">    // 创建ModelAndView对象</span><br><span class="line">    ModelAndView mv = new ModelAndView();</span><br><span class="line">    mv.addObject(&quot;message&quot;,ex.getMessage());</span><br><span class="line">    mv.setViewName(&quot;error&quot;);    //跳转</span><br><span class="line">    return mv;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">    3.配置异常处理器 bean</span><br><span class="line">    &lt;!--配置异常处理器--&gt;</span><br><span class="line">&lt;bean id=&quot;sysExceptionSolver&quot; class=&quot;code.Exception.SysExceptionSolver&quot;/&gt;</span><br><span class="line"></span><br><span class="line">流程： 上抛错误到前端控制器，自定义异常处理器处理异常。</span><br><span class="line">使用时上抛到该错误：</span><br><span class="line"> public String testError() throws SysException&#123; // 上抛异常</span><br><span class="line">    System.out.println(&quot;异常测试&quot;);</span><br><span class="line">    try &#123;</span><br><span class="line">      int a = 10/0;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">      // 控制台打印</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      // 抛出自定义异常信息</span><br><span class="line">      throw new SysException(&quot;查询所有用户出现错误。。&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="10-SpringMVC拦截器"><a href="#10-SpringMVC拦截器" class="headerlink" title="10. SpringMVC拦截器"></a>10. SpringMVC拦截器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">1.编写拦截器，实现HandlerIntercepter</span><br><span class="line">public class myIntercepter implements HandlerInterceptor &#123;</span><br><span class="line">  // 预处理，controller 方法之前</span><br><span class="line">  // return true 放行。。</span><br><span class="line">  // return false 不放行</span><br><span class="line">  @Override</span><br><span class="line">  public boolean preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o) throws Exception &#123;</span><br><span class="line">    System.out.println(&quot;preHandle拦截器已生效。。。&quot;);</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 预处理，controller 方法之后，web页面之前</span><br><span class="line">  @Override</span><br><span class="line">  public void postHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView) throws Exception &#123;</span><br><span class="line">//    直接做请求转发</span><br><span class="line">    //    httpServletRequest.getRequestDispatcher(&quot;&quot;).forward(httpServletRequest,httpServletResponse);</span><br><span class="line">  &#125;</span><br><span class="line">  // 预处理，web页面之后 最后的方法</span><br><span class="line">  @Override</span><br><span class="line">  public void afterCompletion(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">2.配置拦截器</span><br><span class="line">&lt;!--配置拦截器--&gt;</span><br><span class="line">&lt;mvc:interceptors&gt;</span><br><span class="line">    &lt;!--配置单个--&gt;</span><br><span class="line">    &lt;mvc:interceptor&gt;</span><br><span class="line">        &lt;!--拦截路径--&gt;</span><br><span class="line">        &lt;mvc:mapping path=&quot;/*&quot;/&gt;</span><br><span class="line">        &lt;!--不拦截--&gt;</span><br><span class="line">        &lt;!--&lt;mvc:exclude-mapping path=&quot;&quot;/&gt;--&gt;</span><br><span class="line">        &lt;!--配置bean--&gt;</span><br><span class="line">        &lt;bean class=&quot;code.intercepter.myIntercepter&quot;/&gt;</span><br><span class="line">    &lt;/mvc:interceptor&gt;</span><br><span class="line">&lt;/mvc:interceptors&gt;</span><br></pre></td></tr></table></figure><h3 id="4-SSM整合。。"><a href="#4-SSM整合。。" class="headerlink" title="4.SSM整合。。"></a>4.SSM整合。。</h3>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hello world </tag>
            
            <tag> SpringMVC </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 基础知识点</title>
      <link href="/2019/11/25/Spring%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2019/11/25/Spring%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring框架"><a href="#Spring框架" class="headerlink" title="Spring框架"></a>Spring框架</h1><ul><li>Spring框架是由于软件开发的复杂性而创建的。Spring使用的是基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅仅限于服务器端的开发。从简单性、可测试性和松耦合性角度而言，绝大部分Java应用都可以从Spring中受益。</li><li>控制反转</li><li>面向切片编程</li></ul><h2 id="IOC-控制反转"><a href="#IOC-控制反转" class="headerlink" title="IOC 控制反转"></a>IOC 控制反转</h2><p>将new 对象的（创建，管理，销毁..）任务交给 Spring去管理，程序员只需要去设置bean或者注解，然后申请使用即可</p><h2 id="DI-辅助IOC"><a href="#DI-辅助IOC" class="headerlink" title="DI 辅助IOC"></a>DI 辅助IOC</h2><p>对IOC的依赖进行注入</p><h4 id="bean的三种创建模式："><a href="#bean的三种创建模式：" class="headerlink" title="bean的三种创建模式："></a>bean的三种创建模式：</h4><pre><code>1.空参构造2.静态工厂3.动态工厂</code></pre><h2 id="XML配置模式："><a href="#XML配置模式：" class="headerlink" title="XML配置模式："></a>XML配置模式：</h2><h3 id="bean标签的基本配置"><a href="#bean标签的基本配置" class="headerlink" title="bean标签的基本配置"></a>bean标签的基本配置</h3><p>将需要给spring管理的class进行配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">name: 该对象的名字，供给后面使用的定位 （不建议重复）</span><br><span class="line">class: 给spring管理的类的路径</span><br><span class="line">lazy-init: 懒加载，谁用谁加载</span><br><span class="line">scope:  默认 单例模式，只调用一次构造</span><br><span class="line">        prototype: 多例模式，调用一次，新建一次对象</span><br><span class="line">        request</span><br><span class="line">        session  在web项目中使用，与对应的r/s生命周期相同</span><br><span class="line">init-method: 初始化后调用的 方法</span><br><span class="line">destroy-method: 销毁前调用的方法</span><br><span class="line"></span><br><span class="line">eg: &lt;bean name = &quot;&quot; class = &quot;&quot; lazy-init = &quot;&quot; scope = &quot; &quot; ....&gt;</span><br></pre></td></tr></table></figure><h3 id="属性注入"><a href="#属性注入" class="headerlink" title="属性注入"></a>属性注入</h3><p>为bean对象注入依赖的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.set方法注入：</span><br><span class="line">    1.基本类型注入： &lt;property name = &quot;注入的字段名&quot; value = &quot; &quot;/&gt; </span><br><span class="line">    2.引用类型注入： &lt;property name = &quot;注入的字段名&quot; ref = &quot; &quot;(已经创建的bean 的name)/&gt;</span><br><span class="line">2.构造方法注入：&lt;property name = &quot;注入的字段名&quot; value = &quot;值&quot; ref = &quot;&quot; type = &quot;指定参数类型&quot;  index = &quot;指定参数索引&quot; /&gt; </span><br><span class="line">3.复杂类型注入：</span><br><span class="line">    &lt;property name = &quot;注入的字段名&quot;&gt;</span><br><span class="line">        1.list  &lt;list&gt;&lt;value&gt;&lt;/value&gt;&lt;/list&gt;</span><br><span class="line">        2.map   &lt;map&gt;&lt;entry key = &quot;&quot; value = &quot;&quot;&gt;&lt;/map&gt;</span><br><span class="line">    &lt;/property&gt;</span><br></pre></td></tr></table></figure><h2 id="注解开发模式："><a href="#注解开发模式：" class="headerlink" title="注解开发模式："></a>注解开发模式：</h2><h3 id="bean对象的管理与配置"><a href="#bean对象的管理与配置" class="headerlink" title="bean对象的管理与配置"></a>bean对象的管理与配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">创建bean对象 @Component(&quot;name&quot;)</span><br><span class="line">为了更加细化：  1.@Controller(&quot;name&quot;) web层</span><br><span class="line">               2.@Service(&quot;name&quot;) service层</span><br><span class="line">               3.@Repository(&quot;name&quot;) dao层</span><br><span class="line">@scope</span><br><span class="line">@init-method</span><br><span class="line">@destroy-method</span><br></pre></td></tr></table></figure><h3 id="属性注入-1"><a href="#属性注入-1" class="headerlink" title="属性注入"></a>属性注入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">直接在set方法或者构造方法上加注解</span><br><span class="line">@value（&quot;value&quot;） 注入值类型</span><br><span class="line">@Autowired（）注入引用类型</span><br><span class="line">@Resource(&quot;name&quot;) 手工装配bean的name 注入引用类型</span><br></pre></td></tr></table></figure><h3 id="使用Junit整合Spring进行单元测试"><a href="#使用Junit整合Spring进行单元测试" class="headerlink" title="使用Junit整合Spring进行单元测试"></a>使用Junit整合Spring进行单元测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在测试类中使用注解</span><br><span class="line">@RunWith(SprngJUnit4ClassRunner.class) //使用junit进行测试，创建容器</span><br><span class="line">@ContextConfiguration(&quot;classpath:...xml&quot;) // 读取配置文件</span><br><span class="line">在需要的测试方法上</span><br><span class="line">@Test</span><br></pre></td></tr></table></figure><h3 id="其他内容"><a href="#其他内容" class="headerlink" title="其他内容"></a>其他内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.导入其他的Spring配置文件</span><br><span class="line">&lt;import resource = &quot;...xml&quot;/&gt;</span><br></pre></td></tr></table></figure><h2 id="Spring-AOP-面向切面编程"><a href="#Spring-AOP-面向切面编程" class="headerlink" title="Spring-AOP 面向切面编程"></a>Spring-AOP 面向切面编程</h2><p> 将纵向重复的代码，横向抽取解决  — 基于动态代理<br> （AOP术语解释 <a href="https://blog.csdn.net/yuanye348623610/article/details/8823429）" target="_blank" rel="noopener">https://blog.csdn.net/yuanye348623610/article/details/8823429）</a></p><p> 两种动态代理<br> 1.接口 — 2.继承</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">AOP的配置：</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">&lt;!-- 切入点 --&gt;</span><br><span class="line">&lt;aop:pointcut expression = &quot;切入点表达式(要增强的方法)&quot;  id=&quot;标识&quot;/&gt;</span><br><span class="line">&lt;!-- 切面 通知+切入点 --&gt;</span><br><span class="line">&lt;aop:aspect ref=&quot;通知&quot;&gt;</span><br><span class="line">&lt;aop:before method=&quot;方法名&quot; pointcut-ref = &quot;代理对象&quot;/&gt; 最终通知</span><br><span class="line">&lt;aop:after...&gt; 前置通知</span><br><span class="line">&lt;aop:after-returning...&gt; 成功通知</span><br><span class="line">&lt;aop:after-throwing..&gt; 异常通知</span><br><span class="line">&lt;aop:around...&gt; 环绕活动</span><br><span class="line">&lt;/aop:aspect&gt; </span><br><span class="line"></span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hello world </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript尝试</title>
      <link href="/2019/11/25/TypeScript%E5%B0%9D%E8%AF%95/"/>
      <url>/2019/11/25/TypeScript%E5%B0%9D%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装nodejs"><a href="#1-安装nodejs" class="headerlink" title="1.安装nodejs"></a>1.安装nodejs</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h2 id="2-安装TypeScript包"><a href="#2-安装TypeScript包" class="headerlink" title="2.安装TypeScript包"></a>2.安装TypeScript包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install typescript -g</span><br><span class="line">tsc --version</span><br></pre></td></tr></table></figure><h2 id="3-编写HelloWorld程序"><a href="#3-编写HelloWorld程序" class="headerlink" title="3.编写HelloWorld程序"></a>3.编写HelloWorld程序</h2><ol><li><p>初始化项目：进入你的编程文件夹后，可以使用 <code>npm init -y</code> 来初始化项目，生成package.json文件。</p></li><li><p>创建tsconfig.json文件，在终端中输入 <code>tsc --init</code> ：它是一个TypeScript项目的配置文件，可以通过读取它来设置TypeScript编译器的编译参数。</p></li><li><p>安装@types/node,使用 <code>npm install @types/node --dev-save</code>进行安装。这个主要是解决模块的声明文件问题。</p></li><li><p>编写HelloWorld.ts文件，然后进行保存，代码如下。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a:string = &quot;HelloWorld&quot;</span><br><span class="line">console.log(a)</span><br></pre></td></tr></table></figure><ol start="5"><li><p>在Vscode的任务菜单下，打开运行生成任务，然后选择tsc：构建-tsconfig.json，这时候就会生成一个helloWorld.js文件</p></li><li><p>在终端中输入 <code>node helloWorld.js</code> 就可以看到结果了。</p></li></ol><p><a href="https://jspang.com/" target="_blank" rel="noopener">更多技术信息 参考技术胖Blog</a></p>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hello world </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go初试 六</title>
      <link href="/2019/11/24/Go%E5%88%9D%E8%AF%95%E5%85%AD/"/>
      <url>/2019/11/24/Go%E5%88%9D%E8%AF%95%E5%85%AD/</url>
      
        <content type="html"><![CDATA[<h1 id="Go语言入门尝试-六"><a href="#Go语言入门尝试-六" class="headerlink" title="Go语言入门尝试  六"></a>Go语言入门尝试  六</h1><ul><li>Go（又称 Golang）是 Google 的 Robert Griesemer，Rob Pike 及 Ken Thompson 开发的一种静态强类型、编译型语言。Go 语言语法与 C 相近，但功能上有：内存安全，GC（垃圾回收），结构形态及 CSP-style 并发计算。</li></ul><h2 id="1-Go语言的协程机制"><a href="#1-Go语言的协程机制" class="headerlink" title="1.Go语言的协程机制"></a>1.Go语言的协程机制</h2><ul><li>协程细化于线程<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package ch16</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func TestGroutine(t *testing.T)  &#123;</span><br><span class="line">for i:=0;i&lt;10;i++&#123;</span><br><span class="line">go func(i int) &#123;//go 启动一个协程</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;(i)</span><br><span class="line">time.Sleep(time.Millisecond*50)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-通过共享内存实现协程通讯"><a href="#2-通过共享内存实现协程通讯" class="headerlink" title="2. 通过共享内存实现协程通讯"></a>2. 通过共享内存实现协程通讯</h2><ul><li>通过同享资源 上锁，等待的方式 实现协程的有序执行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">package ch17</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;sync&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">共享内存的并发机制</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">// 线程不安全的</span><br><span class="line">func TestCounterThread(t *testing.T)  &#123;</span><br><span class="line">counter := 0// 存在竞争</span><br><span class="line">for i:=0;i&lt;5000;i++&#123;</span><br><span class="line">go func() &#123;</span><br><span class="line">counter++</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">t.Log(&quot;counter = &quot;,counter)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 加锁线程安全</span><br><span class="line">func TestCounterThreadSafe(t *testing.T)  &#123;</span><br><span class="line">var mut sync.Mutex</span><br><span class="line">counter := 0// 存在竞争</span><br><span class="line">for i:=0;i&lt;5000;i++&#123;</span><br><span class="line">go func() &#123;</span><br><span class="line">defer func() &#123;mut.Unlock()&#125;()//进程错误时释放资源</span><br><span class="line">mut.Lock()// 加锁</span><br><span class="line">counter++</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Second)// 等待内部线程执行完</span><br><span class="line">t.Log(&quot;counter = &quot;,counter)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 等待子线程运行完  类似 join</span><br><span class="line">func TestCounterThreadWaitGroup(t *testing.T)  &#123;</span><br><span class="line">var mut sync.Mutex</span><br><span class="line">var wg sync.WaitGroup</span><br><span class="line">counter := 0// 存在竞争</span><br><span class="line">for i:=0;i&lt;5000;i++&#123;</span><br><span class="line">wg.Add(1)// 开始等待</span><br><span class="line">go func() &#123;</span><br><span class="line">defer func() &#123;mut.Unlock()&#125;()//进程错误时释放资源</span><br><span class="line">mut.Lock()// 加锁</span><br><span class="line">counter++</span><br><span class="line">wg.Done()//等待结束</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()//等待</span><br><span class="line">t.Log(&quot;counter = &quot;,counter)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-使用channel的方式实现协程的通讯"><a href="#3-使用channel的方式实现协程的通讯" class="headerlink" title="3.使用channel的方式实现协程的通讯"></a>3.使用channel的方式实现协程的通讯</h2><ul><li>channel 分两种队列不等待 和 牵手等待 （channel的容量决定）</li><li>此次模拟一个生产消费模型</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package ch17</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">//  串行 运行两个任务</span><br><span class="line">func service() string  &#123;</span><br><span class="line">time.Sleep(time.Millisecond *50)</span><br><span class="line">return &quot;Done&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//并行运行两个协程  通过 channel  通讯</span><br><span class="line">func AsyncService() chan string &#123;</span><br><span class="line">rerch := make(chan string,1)// buffer channel 消息队列</span><br><span class="line">go func() &#123;</span><br><span class="line">ret := service()</span><br><span class="line">fmt.Println(&quot;returned result.&quot;)</span><br><span class="line">rerch &lt;- ret// 如果是普通channel service发送数据后会等待other拿走数据</span><br><span class="line">fmt.Println(&quot;service exited.&quot;)</span><br><span class="line">&#125;()</span><br><span class="line">return rerch</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 其他任务</span><br><span class="line">func otherTask()  &#123;</span><br><span class="line">fmt.Println(&quot;work on someting else&quot;)</span><br><span class="line">time.Sleep(time.Millisecond *100)</span><br><span class="line">fmt.Println(&quot;Task is Done.&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func TestService(t *testing.T)  &#123;</span><br><span class="line">//fmt.Println(service())</span><br><span class="line">retch := AsyncService()</span><br><span class="line">otherTask()</span><br><span class="line">fmt.Println(&lt;-retch)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-select-语句"><a href="#4-select-语句" class="headerlink" title="4.select 语句"></a>4.select 语句</h2><ul><li><p>select 是 Go 中的一个控制结构，类似于用于通信的 switch 语句。每个 case 必须是一个通信操作，要么是发送要么是接收。</p></li><li><p>select 随机执行一个可运行的 case。如果没有 case 可运行，它将阻塞，直到有 case 可运行。一个默认的子句应该总是可运行的。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package ch18</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func service() string  &#123;</span><br><span class="line">time.Sleep(time.Millisecond *500)</span><br><span class="line">return &quot;Done&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func AsyncService() chan string &#123;</span><br><span class="line">rerch := make(chan string,1)// buffer channel 消息队列</span><br><span class="line">go func() &#123;</span><br><span class="line">ret := service()</span><br><span class="line">fmt.Println(&quot;returned result.&quot;)</span><br><span class="line">rerch &lt;- ret// 如果是普通channel service发送数据后会等待other拿走数据</span><br><span class="line">fmt.Println(&quot;service exited.&quot;)</span><br><span class="line">&#125;()</span><br><span class="line">return rerch</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func TestService(t *testing.T)  &#123;</span><br><span class="line">select &#123;</span><br><span class="line">case ret := &lt;-AsyncService():</span><br><span class="line">t.Log(ret)</span><br><span class="line">case &lt;-time.After(time.Millisecond *100):// 超时直接 gg</span><br><span class="line">t.Error(&quot;time out&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-channel-的退出"><a href="#5-channel-的退出" class="headerlink" title="5.channel 的退出"></a>5.channel 的退出</h2><ul><li>生产者使用 close 关闭协程</li><li>当 协程结束时，使用 WaitGroup Done 通知消费者协程关闭</li><li>主进程等待所有Done后结束</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package ch19</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;sync&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 生产者</span><br><span class="line">func dataProducer(ch chan int,wg *sync.WaitGroup)  &#123;</span><br><span class="line">go func() &#123;</span><br><span class="line">for i:=0;i&lt;10 ;i++  &#123;</span><br><span class="line">ch &lt;- i</span><br><span class="line">&#125;</span><br><span class="line">close(ch)// 关闭 chanel</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 消费者</span><br><span class="line">func dataReceiver(ch chan int,wg *sync.WaitGroup)&#123;</span><br><span class="line">go func() &#123;</span><br><span class="line">for&#123;</span><br><span class="line">if data,ok := &lt;-ch;ok&#123;// 在channel时 退出</span><br><span class="line">fmt.Println(data)</span><br><span class="line">&#125;else &#123;</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func TestCloseChannel(t *testing.T)  &#123;</span><br><span class="line">var wg sync.WaitGroup</span><br><span class="line">ch := make(chan int)</span><br><span class="line">wg.Add(1)</span><br><span class="line">dataProducer(ch,&amp;wg)</span><br><span class="line">wg.Add(1)</span><br><span class="line">dataReceiver(ch,&amp;wg)</span><br><span class="line">wg.Wait()//等待两个协程结束</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> 并发编程 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go初试五</title>
      <link href="/2019/11/24/Go%E5%88%9D%E8%AF%95%E4%BA%94/"/>
      <url>/2019/11/24/Go%E5%88%9D%E8%AF%95%E4%BA%94/</url>
      
        <content type="html"><![CDATA[<hr><p>title: Go初试 五<br>date: 2019-11-24 23:27:26<br>tags: “Go”<br>categories: “GoLang”</p><hr><h1 id="Go语言入门尝试-五"><a href="#Go语言入门尝试-五" class="headerlink" title="Go语言入门尝试  五"></a>Go语言入门尝试  五</h1><ul><li>Go（又称 Golang）是 Google 的 Robert Griesemer，Rob Pike 及 Ken Thompson 开发的一种静态强类型、编译型语言。Go 语言语法与 C 相近，但功能上有：内存安全，GC（垃圾回收），结构形态及 CSP-style 并发计算。</li></ul><h2 id="1-Go语言中本地包的构建和使用"><a href="#1-Go语言中本地包的构建和使用" class="headerlink" title="1. Go语言中本地包的构建和使用"></a>1. Go语言中本地包的构建和使用</h2><ul><li><ol><li>生成一个斐波那契数列函数的包  ch15/series/…go<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package series</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;errors&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 初始化函数</span><br><span class="line">func init()  &#123;</span><br><span class="line">fmt.Println(&quot;init...&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func GetFib(n int) ([]int,error) &#123;</span><br><span class="line">if n &lt; 2 || n &gt; 100&#123;</span><br><span class="line">return nil,errors.New(&quot;n should be in [2,100]&quot;)</span><br><span class="line">&#125;</span><br><span class="line">res := []int&#123;1,1&#125;</span><br><span class="line">for i:=2;i&lt;n;i++&#123;</span><br><span class="line">res = append(res,res[i-1]+res[i-2])</span><br><span class="line">&#125;</span><br><span class="line">return res,nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>2.使用刚刚声明的包  ch15/client/…go</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package client</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;ch15/series&quot;       // 引入</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 调用 自定义的包</span><br><span class="line">func TestPackage(t *testing.T)  &#123;</span><br><span class="line">t.Log(series.GetFib(10))// 包内方法必须是大写开头 不然无法识别</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意有几点：</p></li><li><p>包路径，包内方法名必须大写开头…</p></li></ul><h2 id="2-使用网上的包"><a href="#2-使用网上的包" class="headerlink" title="2.使用网上的包"></a>2.使用网上的包</h2><ul><li>远程的包，大多托管于 github </li><li>使用命令 go get github.com/作者/项目名</li><li>例如： go get github.com/emirpasic/Gods<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package remote_package</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;github.com/emirpasic/Gods/lists/arraylist&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">包管理 软件：</span><br><span class="line">dep</span><br><span class="line">golide</span><br><span class="line">go module</span><br><span class="line">。。。</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">func TestRemotePackage(t *testing.T)  &#123;</span><br><span class="line">list := arraylist.New()</span><br><span class="line">a := &apos;a&apos;</span><br><span class="line">for i:=0;i&lt;26;i++&#123;</span><br><span class="line">list.Add(string(a))</span><br><span class="line">a++</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(list)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Go初试 四</title>
      <link href="/2019/11/24/Go%E5%88%9D%E8%AF%95%E5%9B%9B/"/>
      <url>/2019/11/24/Go%E5%88%9D%E8%AF%95%E5%9B%9B/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Go语言入门尝试-四"><a href="#Go语言入门尝试-四" class="headerlink" title="Go语言入门尝试  四"></a>Go语言入门尝试  四</h1><ul><li>Go（又称 Golang）是 Google 的 Robert Griesemer，Rob Pike 及 Ken Thompson 开发的一种静态强类型、编译型语言。Go 语言语法与 C 相近，但功能上有：内存安全，GC（垃圾回收），结构形态及 CSP-style 并发计算。</li></ul><h2 id="1-Go的继承"><a href="#1-Go的继承" class="headerlink" title="1. Go的继承"></a>1. Go的继承</h2><ul><li>Go 的继承是不完整的</li><li>父类无法访问子类的数据和方法 ，只能全部重写 获得新的方法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">package ch12</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">go的继承不能叫做完整的继承：</span><br><span class="line">1. 父类无法访问子类的数据和方法  无多态</span><br><span class="line">2. 只能全部重写 获得新的方法</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">// pet 类</span><br><span class="line">type Pet struct &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (p *Pet) Speak()&#123;</span><br><span class="line">fmt.Print(&quot;....&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (p *Pet) SpeakTo(host string)&#123;</span><br><span class="line">p.Speak()</span><br><span class="line">fmt.Println(&quot; &quot;,host)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// dog 类  继承 pet</span><br><span class="line">/*</span><br><span class="line">type Dog struct &#123;</span><br><span class="line">p *Pet</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (d *Dog) Speak()&#123;</span><br><span class="line">d.p.Speak()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (d *Dog) SpeakTo(host string)&#123;</span><br><span class="line">d.p.SpeakTo(host)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 子类继承父类的简单写法：</span><br><span class="line">type Dog struct &#123;</span><br><span class="line">Pet</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// test</span><br><span class="line">func TestDog(t *testing.T)  &#123;</span><br><span class="line">dog := new(Dog)</span><br><span class="line">dog.SpeakTo(&quot;kid&quot;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-空接口"><a href="#2-空接口" class="headerlink" title="2.空接口"></a>2.空接口</h2><ul><li>Go 允许空接口，但是同时可可以判断接口的type<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package ch13</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func Testfn(p interface&#123;&#125;)&#123;</span><br><span class="line">switch p.(type) &#123;</span><br><span class="line">case int:</span><br><span class="line">fmt.Println(&quot;int &quot;,p)</span><br><span class="line">case string:</span><br><span class="line">fmt.Println(&quot;string &quot;,p)</span><br><span class="line">default:</span><br><span class="line">fmt.Println(&quot;Unknow type.&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 空接口</span><br><span class="line">func TestEmptyAssertion(t *testing.T)  &#123;</span><br><span class="line">Testfn(10)</span><br><span class="line">Testfn(&quot;10&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-通过接口实现多态"><a href="#3-通过接口实现多态" class="headerlink" title="3.通过接口实现多态"></a>3.通过接口实现多态</h2><ul><li>标准步骤：定义接口，父类，子类，抽象方法调用父类</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">package ch13</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type Code string</span><br><span class="line">/*</span><br><span class="line">通过 接口实现 多态</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 定义接口</span><br><span class="line">type Programmer interface &#123;</span><br><span class="line">HelloWrold() Code</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type GOPaogrammer struct &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (p *GOPaogrammer) HelloWrold() Code&#123;</span><br><span class="line">return &quot;Go&apos;s code&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type JavaProgrammer struct &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (p *JavaProgrammer) HelloWrold() Code &#123;</span><br><span class="line">return &quot;Java&apos;s code&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 一个抽象方法</span><br><span class="line">func aProgram(p Programmer)&#123;</span><br><span class="line">fmt.Printf(&quot;%T  %v\n&quot;,p,p.HelloWrold())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func Test(t *testing.T)&#123;</span><br><span class="line">goProg := &amp;GOPaogrammer&#123;&#125;// 新建一个对象返回的实际上一个指针</span><br><span class="line">javaProg := new(JavaProgrammer)</span><br><span class="line">aProgram(goProg)</span><br><span class="line">aProgram(javaProg)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-错误处理"><a href="#4-错误处理" class="headerlink" title="4. 错误处理"></a>4. 错误处理</h2><ul><li>核心： 及早失败，早处理</li><li>使用多返回值的特点把错误信息带出函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package ch14</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;errors&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func GetFib(n int) ([]int,error) &#123;</span><br><span class="line">if n &lt; 2 || n &gt; 100&#123;</span><br><span class="line">return nil,errors.New(&quot;n should be in [2,100]&quot;)</span><br><span class="line">&#125;</span><br><span class="line">res := []int&#123;1,1&#125;</span><br><span class="line">for i:=2;i&lt;n;i++&#123;</span><br><span class="line">res = append(res,res[i-1]+res[i-2])</span><br><span class="line">&#125;</span><br><span class="line">return res,nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> 核心： 及早失败</span><br><span class="line">1.Go 的错误机制： errors.New（）</span><br><span class="line">2.使用多返回值 带出错误</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">func TestFunc(t *testing.T)  &#123;</span><br><span class="line">if v,err:=GetFib(-10);err!=nil&#123;</span><br><span class="line">t.Error(err)</span><br><span class="line">&#125;else &#123;</span><br><span class="line">t.Log(v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-错误恢复"><a href="#5-错误恢复" class="headerlink" title="5. 错误恢复"></a>5. 错误恢复</h2><ul><li>使用recover恢复是很危险的，容易造成僵尸进程</li><li>中断的三种方式的 不同点<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package ch14</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;errors&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// recover 恢复错误  很危险的</span><br><span class="line">func TestPanicVxExit(t *testing.T)  &#123;</span><br><span class="line">defer func() &#123;</span><br><span class="line">if err:= recover();err !=nil&#123;</span><br><span class="line">fmt.Println(&quot;recovered from &quot;,err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">fmt.Println(&quot;start&quot;)</span><br><span class="line">panic(errors.New(&quot;someting error!&quot;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">panic抛出异常退出</span><br><span class="line">exit 异常退出</span><br><span class="line">recover 恢复出错前的状态</span><br><span class="line"> */</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go初试 三</title>
      <link href="/2019/11/24/Go%E5%88%9D%E8%AF%95%E4%B8%89/"/>
      <url>/2019/11/24/Go%E5%88%9D%E8%AF%95%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Go语言入门尝试-三"><a href="#Go语言入门尝试-三" class="headerlink" title="Go语言入门尝试  三"></a>Go语言入门尝试  三</h1><ul><li>Go（又称 Golang）是 Google 的 Robert Griesemer，Rob Pike 及 Ken Thompson 开发的一种静态强类型、编译型语言。Go 语言语法与 C 相近，但功能上有：内存安全，GC（垃圾回收），结构形态及 CSP-style 并发计算。</li></ul><h2 id="1-func-方法"><a href="#1-func-方法" class="headerlink" title="1.func 方法"></a>1.func 方法</h2><ul><li>方法是go里面的一等公民</li><li>方法可以返回方法 类似包装器</li><li>多返回</li><li>多参数</li><li>defer 最后执行 类似finally</li><li>func 都是赋值传递参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">package ch10</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;math/rand&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 类似包装器： 输入func 输出func</span><br><span class="line">func timeSpent(testFunc func(op int) int) func(op int) int  &#123;</span><br><span class="line">return func(n int) int &#123;</span><br><span class="line">start := time.Now()</span><br><span class="line">ret := testFunc(n)</span><br><span class="line">fmt.Print(&quot;time spent:&quot;,time.Since(start).Seconds())</span><br><span class="line">return ret</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func slowFun(op int) int&#123;</span><br><span class="line">time.Sleep(time.Second*1)</span><br><span class="line">return op</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func TestSlowFun(t *testing.T)&#123;</span><br><span class="line">tsSF := timeSpent(slowFun)</span><br><span class="line">t.Log(tsSF(10))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 多返回的方法</span><br><span class="line">func returnMultiValues() (int,int)&#123;</span><br><span class="line">return rand.Intn(10),rand.Intn(25)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func TestFn(t *testing.T)  &#123;</span><br><span class="line">a,b := returnMultiValues()</span><br><span class="line">t.Log(a,b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 多参数方法</span><br><span class="line">func Sum(ops ...int) int&#123;</span><br><span class="line">res:=0</span><br><span class="line">for _,op := range ops&#123;</span><br><span class="line">res += op</span><br><span class="line">&#125;</span><br><span class="line">return res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func TestVarparam(t *testing.T)&#123;</span><br><span class="line">t.Log(Sum(1,2,3,4,5))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 最后执行函数 类似finally</span><br><span class="line">func Clear()&#123;</span><br><span class="line">fmt.Println(&quot;clear resource.&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func TestDefer(t *testing.T)&#123;</span><br><span class="line">defer Clear()// 最后执行</span><br><span class="line">fmt.Println(&quot;start test.&quot;)</span><br><span class="line">panic(&quot;err&quot;) // 异常退出</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-类型预定义"><a href="#2-类型预定义" class="headerlink" title="2. 类型预定义"></a>2. 类型预定义</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package ch11</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 使用类型预定义 简化</span><br><span class="line">type IntConv func(op int) int</span><br><span class="line"></span><br><span class="line">func timeSpent(testFunc IntConv) IntConv  &#123;</span><br><span class="line">return func(n int) int &#123;</span><br><span class="line">start := time.Now()</span><br><span class="line">ret := testFunc(n)</span><br><span class="line">fmt.Print(&quot;time spent:&quot;,time.Since(start).Seconds())</span><br><span class="line">return ret</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func slowFun(op int) int&#123;</span><br><span class="line">time.Sleep(time.Second*1)</span><br><span class="line">return op</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func TestSlowFun(t *testing.T)&#123;</span><br><span class="line">tsSF := timeSpent(slowFun)</span><br><span class="line">t.Log(tsSF(10))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-类（结构体）"><a href="#3-类（结构体）" class="headerlink" title="3. 类（结构体）"></a>3. 类（结构体）</h2><ul><li>go 的类 类似于 结构体 + 包含该结构体指针的func</li><li>2种定义类方法的方式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package ch11</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">&quot;unsafe&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 定义结构体</span><br><span class="line">type Employee struct &#123;</span><br><span class="line">Id string</span><br><span class="line">Name string</span><br><span class="line">Age int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 定义类方法</span><br><span class="line"></span><br><span class="line">// 1. 使用 对象复制传递： 实例成员会进行值复制</span><br><span class="line">func (e Employee) String() string  &#123;</span><br><span class="line">fmt.Printf(&quot;address is %x\n&quot;,unsafe.Pointer(&amp;e.Name))// 输出 name的地址</span><br><span class="line">return fmt.Sprintf(&quot;Id:%s-name:%s-age:%d&quot;,e.Id,e.Name,e.Age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 2. 使用 指针复制传递： 实例成员不会进行值复制</span><br><span class="line">func (e *Employee) toString() string  &#123;</span><br><span class="line">fmt.Printf(&quot;address is %x\n&quot;,unsafe.Pointer(&amp;e.Name))// 输出 name的地址</span><br><span class="line">return fmt.Sprintf(&quot;Id:%s-name:%s-age:%d&quot;,e.Id,e.Name,e.Age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func TestStruct(t *testing.T)&#123;</span><br><span class="line">e := Employee&#123;&quot;0&quot;,&quot;kid&quot;,20&#125;</span><br><span class="line">t.Log(e.String())</span><br><span class="line">t.Logf(&quot;%T&quot;,e)//等得到的是对象</span><br><span class="line"></span><br><span class="line">e1 := &amp;Employee&#123;&quot;0&quot;,&quot;kid&quot;,25&#125;</span><br><span class="line">t.Log(e1.toString())</span><br><span class="line">t.Logf(&quot;%T&quot;,e1)//等得到的是对象</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-接口"><a href="#4-接口" class="headerlink" title="4.接口"></a>4.接口</h2><ul><li>Go 无继承 只有接口</li><li>go 是 鸭子类型</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package ch11</span><br><span class="line"></span><br><span class="line">import &quot;testing&quot;</span><br><span class="line"></span><br><span class="line">type Progarmmer interface &#123;</span><br><span class="line">WriteHelloWorld() string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Goparogrammer struct &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (g *Goparogrammer) WriteHelloWorld() string&#123;</span><br><span class="line">return &quot;fmt.Println(\&quot;Hello world\&quot;)&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// go 接口没有依赖关系 是鸭子类型</span><br><span class="line">func TestClient(t *testing.T)&#123;</span><br><span class="line">var p Progarmmer</span><br><span class="line">p = new (Goparogrammer)</span><br><span class="line">t.Log(p.WriteHelloWorld())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go初试 二</title>
      <link href="/2019/11/24/Go%E5%88%9D%E8%AF%95%E4%BA%8C/"/>
      <url>/2019/11/24/Go%E5%88%9D%E8%AF%95%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="Go语言入门尝试-二"><a href="#Go语言入门尝试-二" class="headerlink" title="Go语言入门尝试  二"></a>Go语言入门尝试  二</h1><ul><li>Go（又称 Golang）是 Google 的 Robert Griesemer，Rob Pike 及 Ken Thompson 开发的一种静态强类型、编译型语言。Go 语言语法与 C 相近，但功能上有：内存安全，GC（垃圾回收），结构形态及 CSP-style 并发计算。</li></ul><h2 id="1-Array数组"><a href="#1-Array数组" class="headerlink" title="1.Array数组"></a>1.Array数组</h2><ul><li>数组的三种初始化方式</li><li>数组的遍历方式</li><li>数组的切片<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package ch6</span><br><span class="line"></span><br><span class="line">import &quot;testing&quot;</span><br><span class="line"></span><br><span class="line">func TestArrayInit(t *testing.T)&#123;</span><br><span class="line">// 默认初始化为0</span><br><span class="line">var arr [3]int</span><br><span class="line">t.Log(arr[1],arr[2])</span><br><span class="line">// 初始化赋值</span><br><span class="line">arr2 := [3]int&#123;1,2,3&#125;</span><br><span class="line">t.Log(arr2)</span><br><span class="line">// 初始化自定义大小</span><br><span class="line">arr3 :=[...]int&#123;1,2,3&#125;</span><br><span class="line">t.Log(arr3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 数组的遍历</span><br><span class="line">func TestArrayTravel(t *testing.T)  &#123;</span><br><span class="line">arr4:=[...]int&#123;1,2,3,4,5&#125;</span><br><span class="line">// 普通写法</span><br><span class="line">for i:=0;i&lt;len(arr4) ;i++  &#123;</span><br><span class="line">t.Log(arr4[i])</span><br><span class="line">&#125;</span><br><span class="line">// for each</span><br><span class="line">for _,e := range arr4&#123;</span><br><span class="line">t.Log(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 数组的切片  [包含，不包含]</span><br><span class="line">func TestArraySection(t *testing.T)&#123;</span><br><span class="line">arr5:= [...]int&#123;1,2,3,4&#125;;</span><br><span class="line">arr5_sec := arr5[:3]</span><br><span class="line">t.Log(arr5,arr5_sec)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-切片"><a href="#2-切片" class="headerlink" title="2.切片"></a>2.切片</h2><ul><li>切片是种数据结构：（起点，当前长度，总容量）</li><li>切片的容量增长规律为 2^n 类似List</li><li>切片的初始化<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package ch6</span><br><span class="line"></span><br><span class="line">import &quot;testing&quot;</span><br><span class="line"></span><br><span class="line">// 切片</span><br><span class="line">func TestSlice(t *testing.T)  &#123;</span><br><span class="line">var s0 []int</span><br><span class="line">t.Log(len(s0),cap(s0))</span><br><span class="line">s0 = append(s0, 1)</span><br><span class="line">t.Log(len(s0),cap(s0))// 可访问序列的长度和容量</span><br><span class="line"></span><br><span class="line">s1:=[]int&#123;1,2,3,4&#125;// 生成一个切片</span><br><span class="line">t.Log(len(s1),cap(s1))</span><br><span class="line"></span><br><span class="line">s2:=make([]int,3,5)// 生成长度为3容量为5的切片</span><br><span class="line">t.Log(len(s2),cap(s2))</span><br><span class="line">t.Log(s2[0],s2[1],s2[2])</span><br><span class="line"></span><br><span class="line">// 往len后追加</span><br><span class="line">s2 = append(s2, 1)</span><br><span class="line">t.Log(s2[0],s2[1],s2[2],s2[3])</span><br><span class="line">t.Log(len(s2),cap(s2))</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 切片容量和长度的增长规律  容量按2^n增长</span><br><span class="line">func TestSliceGrowing(t *testing.T)  &#123;</span><br><span class="line">s:=[]int&#123;&#125;</span><br><span class="line">for i:=0;i&lt;10;i++ &#123;</span><br><span class="line">s = append(s, i)</span><br><span class="line">t.Log(len(s),cap(s))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 切片的数据结构</span><br><span class="line">func TestSliceShareMemory(t *testing.T)&#123;</span><br><span class="line">year := []string&#123;&quot;Jan&quot;,&quot;Feb&quot;,&quot;Mar&quot;,&quot;Apr&quot;,&quot;May&quot;,&quot;Jun&quot;,&quot;Jul&quot;,&quot;Aug&quot;,&quot;Sep&quot;,&quot;Oct&quot;,&quot;Nov&quot;,&quot;Dec&quot;&#125;</span><br><span class="line">Q2 := year[3:6]</span><br><span class="line">t.Log(Q2,len(Q2),cap(Q2))// 长度为3 容量为9</span><br><span class="line"></span><br><span class="line">summer:=year[5:8]</span><br><span class="line">summer[0] = &quot;Unknow&quot;// 整个数组都会被影响</span><br><span class="line">t.Log(year)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-map-k-v键值对"><a href="#3-map-k-v键值对" class="headerlink" title="3.map k-v键值对"></a>3.map k-v键值对</h2><ul><li>map的初始化</li><li>对于不存的元素 返回 状态</li><li>遍历</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package ch7</span><br><span class="line"></span><br><span class="line">import &quot;testing&quot;</span><br><span class="line"></span><br><span class="line">// map 的初始化</span><br><span class="line">func TestInitMap(t *testing.T)  &#123;</span><br><span class="line">m1 := map[int]int&#123;1:1,2:4,3:9&#125;</span><br><span class="line">t.Log(m1[2])</span><br><span class="line">t.Log(&quot;len m1&quot;,len(m1))</span><br><span class="line"></span><br><span class="line">m2 := map[int]int&#123;&#125;</span><br><span class="line">m2[4] = 16</span><br><span class="line">t.Log(&quot;len m2&quot;,len(m2))</span><br><span class="line"></span><br><span class="line">m3:= make(map[int]int,10)// 初始化map容量长度</span><br><span class="line">t.Log(&quot;len m3&quot;,len(m3))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 对比 value = 0 和 元素不存在</span><br><span class="line">func TestAccessNotExistKey(t *testing.T)&#123;</span><br><span class="line">m1 := map[int]int&#123;&#125;// 初始化都为0</span><br><span class="line">t.Log(m1[1])</span><br><span class="line">m1[2] = 0</span><br><span class="line">t.Log(m1[2])</span><br><span class="line"></span><br><span class="line">if v,ok := m1[3];ok&#123;//如果key不存在除了返回value=0，还会返回一个状态为false</span><br><span class="line">t.Log(&quot;key 3&apos;s value is &quot;,v)</span><br><span class="line">&#125;else &#123;</span><br><span class="line">t.Log(&quot;key 3 is not existing.&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 遍历 map</span><br><span class="line">func TestTravelMap(t *testing.T)  &#123;</span><br><span class="line">m1 := map[int]int&#123;1:1,2:4,3:9&#125;</span><br><span class="line">for k,v := range m1 &#123;</span><br><span class="line">t.Log(k,v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-map-的拓展"><a href="#4-map-的拓展" class="headerlink" title="4.map 的拓展"></a>4.map 的拓展</h2><ul><li>map存储func</li><li>map实现set<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package ch8</span><br><span class="line"></span><br><span class="line">import &quot;testing&quot;</span><br><span class="line"></span><br><span class="line">// 将方法作为map的value</span><br><span class="line">func TestMapWithFubValue(t *testing.T)  &#123;</span><br><span class="line">m := map[int] func(op int)int &#123;&#125;</span><br><span class="line">m[1] = func(op int) int &#123;return op&#125;</span><br><span class="line">m[2] = func(op int) int &#123;return op*op&#125;</span><br><span class="line">m[3] = func(op int) int &#123;return op*op*op&#125;</span><br><span class="line"></span><br><span class="line">t.Log(m[1](2),m[2](2),m[3](2))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用map 实现 set</span><br><span class="line">func TestMapForSet(t *testing.T)&#123;</span><br><span class="line">mySet := map[int]bool&#123;&#125;</span><br><span class="line">mySet[1] = true</span><br><span class="line">n:=1</span><br><span class="line">if mySet[n]&#123;</span><br><span class="line">t.Log(n,&quot; is exist&quot;)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">t.Log(n,&quot;is not exist.&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mySet[3] = true</span><br><span class="line">t.Log(len(mySet))</span><br><span class="line">delete(mySet,1)</span><br><span class="line">n=1</span><br><span class="line">if mySet[n]&#123;</span><br><span class="line">t.Log(n,&quot; is exist&quot;)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">t.Log(n,&quot;is not exist.&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-string"><a href="#5-string" class="headerlink" title="5.string"></a>5.string</h2><ul><li>string 默认 utf-8编码</li><li>遍历</li><li>strings的函数</li><li>strconv的函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">package ch9</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;strconv&quot;</span><br><span class="line">&quot;strings&quot;</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 字符集 和 字符编码</span><br><span class="line">func TestString(t *testing.T)&#123;</span><br><span class="line">var s string</span><br><span class="line">t.Log(s)</span><br><span class="line">t.Log(len(s))</span><br><span class="line"></span><br><span class="line">s = &quot;\xE4\xB8\xA5&quot;</span><br><span class="line">t.Log(s)</span><br><span class="line">s = &quot;中&quot;</span><br><span class="line">t.Log(len(s))</span><br><span class="line"></span><br><span class="line">c := []rune(s)</span><br><span class="line">t.Logf(&quot;中 unicode %x&quot;,c[0])// 字符编码</span><br><span class="line">t.Logf(&quot;中 UTF8 %x&quot;,s)// 字符编码的具体实现</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 字符串的遍历</span><br><span class="line">func TestStringRange(t *testing.T)&#123;</span><br><span class="line">s:=&quot;中华人民共和国&quot;</span><br><span class="line">for _,value := range s&#123;</span><br><span class="line">t.Logf(&quot;%[1]c  %[1]x&quot;,value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// strings函数</span><br><span class="line">func TestStringFn(t *testing.T)  &#123;</span><br><span class="line">s := &quot;A,B,C&quot;</span><br><span class="line">parts := strings.Split(s,&quot;,&quot;)</span><br><span class="line">for _,part := range parts&#123;</span><br><span class="line">t.Logf(part)</span><br><span class="line">&#125;</span><br><span class="line">t.Log(strings.Join(parts,&quot;-&quot;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// strconv 库函数</span><br><span class="line">func TestConv(t *testing.T)  &#123;</span><br><span class="line">s := strconv.Itoa(10)</span><br><span class="line">t.Log(&quot;str: &quot; + s)</span><br><span class="line">if i,err :=strconv.Atoi(&quot;25&quot;);err == nil&#123;</span><br><span class="line">t.Log(10 + i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go初试 一</title>
      <link href="/2019/11/23/Go%E5%88%9D%E8%AF%95%20%E4%B8%80/"/>
      <url>/2019/11/23/Go%E5%88%9D%E8%AF%95%20%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Go语言入门尝试-一"><a href="#Go语言入门尝试-一" class="headerlink" title="Go语言入门尝试  一"></a>Go语言入门尝试  一</h1><ul><li>Go（又称 Golang）是 Google 的 Robert Griesemer，Rob Pike 及 Ken Thompson 开发的一种静态强类型、编译型语言。Go 语言语法与 C 相近，但功能上有：内存安全，GC（垃圾回收），结构形态及 CSP-style 并发计算。<h2 id="1-标准入门第一步：-HelloWorld"><a href="#1-标准入门第一步：-HelloWorld" class="headerlink" title="1.标准入门第一步： HelloWorld"></a>1.标准入门第一步： HelloWorld</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;os&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 1. package 必须是 main 对应 main方法</span><br><span class="line">// 2. import 引入依赖</span><br><span class="line">// 3. main 方法没有参数也没有退出值 全靠其他依赖完成</span><br><span class="line"></span><br><span class="line">func main()&#123;</span><br><span class="line">fmt.Print(&quot;hello world.&quot; + os.Args[1]);</span><br><span class="line">os.Exit(0)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-测试方法与命名规范："><a href="#2-测试方法与命名规范：" class="headerlink" title="2.测试方法与命名规范："></a>2.测试方法与命名规范：</h2></li><li>以斐波那契数列为例</li><li>测试方法文件必须以 _test.go结尾，package不必是main</li><li>但是方法测试的方法必须是func TestXXX(t *testing.T)的命名</li><li>申请变量有三种方式赋值也有三种方式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">package try_test</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;testing&quot;</span><br><span class="line">)</span><br><span class="line">// 变量</span><br><span class="line">func TestFibList(t *testing.T) &#123;</span><br><span class="line">// 直接声明变量</span><br><span class="line">//var a int = 1</span><br><span class="line">//var b int = 1</span><br><span class="line">// 申请多个变量</span><br><span class="line">//var(</span><br><span class="line">//a int = 1</span><br><span class="line">//b int = 1</span><br><span class="line">//)</span><br><span class="line">// 简写申请变量</span><br><span class="line">a := 1</span><br><span class="line">b := 1</span><br><span class="line">t.Log(a,&quot; &quot;)</span><br><span class="line">t.Log(b,&quot; &quot;)</span><br><span class="line">for i:=0;i&lt;5;i++&#123;</span><br><span class="line">t.Log(b,&quot; &quot;)</span><br><span class="line">tmp := a</span><br><span class="line">a = b</span><br><span class="line">b = tmp + a</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 变量赋值</span><br><span class="line">func TestExchange(t *testing.T)  &#123;</span><br><span class="line">a:=1</span><br><span class="line">b:=2</span><br><span class="line"></span><br><span class="line">// 普通的交换变量</span><br><span class="line">//tmp := a</span><br><span class="line">//a = b</span><br><span class="line">//b = tmp</span><br><span class="line">//t.Log(a,b)</span><br><span class="line"></span><br><span class="line">// 多个变量赋值</span><br><span class="line">a,b = b,a</span><br><span class="line">t.Log(a,b)</span><br><span class="line">&#125;</span><br><span class="line">// 常量</span><br><span class="line">const(</span><br><span class="line">// iota 连续赋值</span><br><span class="line">Mondy = 1 + iota</span><br><span class="line">Tuesday</span><br><span class="line">Wednesday</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func TestConstantTry(t *testing.T)  &#123;</span><br><span class="line">t.Log(Mondy,Tuesday)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-变量类型："><a href="#3-变量类型：" class="headerlink" title="3.变量类型："></a>3.变量类型：</h2><ul><li>类型像C但是不支持隐性类型转换</li><li>支持指针但是不支持指针运算</li><li>字符串为空 == “”<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package ch3</span><br><span class="line"></span><br><span class="line">import &quot;testing&quot;</span><br><span class="line"></span><br><span class="line">type MyInt int64        // 自定义类型</span><br><span class="line"></span><br><span class="line">// 数据类型不支持隐形转换</span><br><span class="line">func TestImplicit(t *testing.T)&#123;</span><br><span class="line">var a int = 1</span><br><span class="line">var b int64</span><br><span class="line">b = int64(a)</span><br><span class="line">var c MyInt</span><br><span class="line">c = MyInt(b)</span><br><span class="line">t.Log(a,b,c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 指针可用 但不支持运算</span><br><span class="line">func TestPoint(t *testing.T)  &#123;</span><br><span class="line">a := 1</span><br><span class="line">aPtr := &amp;a</span><br><span class="line">//aPtr = aPtr +1</span><br><span class="line">t.Log(a,aPtr)</span><br><span class="line">t.Logf(&quot;%T %T&quot;,a,aPtr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// String 为空用“”表示</span><br><span class="line">func TestString(t *testing.T)&#123;</span><br><span class="line">var s string</span><br><span class="line">t.Log(s)</span><br><span class="line">t.Log(len(s))</span><br><span class="line">if s == &quot;&quot;&#123;</span><br><span class="line">t.Log(&quot;s 为空&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-数组"><a href="#4-数组" class="headerlink" title="4.数组"></a>4.数组</h2><ul><li>数组的比较只限长度相同的数组</li><li>itoa 自加定义<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package ch4</span><br><span class="line"></span><br><span class="line">import &quot;testing&quot;</span><br><span class="line"></span><br><span class="line">// 数组的比较</span><br><span class="line">func TestCompareArray(t *testing.T)  &#123;</span><br><span class="line">a:=[...] int&#123;1,2,3&#125;</span><br><span class="line">b:=[...] int&#123;1,1,3&#125;</span><br><span class="line">//c:=[...] int&#123;1,2,3,4&#125;</span><br><span class="line">d:=[...] int&#123;1,2,3&#125;</span><br><span class="line"></span><br><span class="line">t.Log(a==b)</span><br><span class="line">//t.Log(a==c)// 长度不同直接报错</span><br><span class="line">t.Log(a==d)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// TestBitClear</span><br><span class="line">const (</span><br><span class="line">read = 1 &lt;&lt; iota</span><br><span class="line">write</span><br><span class="line">exec</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func TestBitClear(t *testing.T)&#123;</span><br><span class="line">a := 7  // 0111</span><br><span class="line">a = a &amp;^ read// 清除可读权限</span><br><span class="line">t.Log(a&amp;read == read,a&amp;write==write,a&amp;exec==exec)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-分支判断"><a href="#5-分支判断" class="headerlink" title="5.分支判断"></a>5.分支判断</h2><ul><li>if 语句与 多返回写法</li><li>多条件的 switch</li><li>使用switch 代替 复杂的 if<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package ch5</span><br><span class="line"></span><br><span class="line">import &quot;testing&quot;</span><br><span class="line"></span><br><span class="line">// if 语句与 多返回</span><br><span class="line">func TestIfMultiSec(t *testing.T)  &#123;</span><br><span class="line">if a:=1 == 1; a&#123;</span><br><span class="line">t.Log(&quot;1==1&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 多返回在if中应用</span><br><span class="line">//if v,err := someFun(); err==nil&#123;</span><br><span class="line">//t.Log(&quot;success&quot;)</span><br><span class="line">//&#125;else&#123;</span><br><span class="line">//t.Log(&quot;error&quot;)</span><br><span class="line">//&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 多条件的 switch</span><br><span class="line">func TestSwitchMultiCase(t *testing.T)&#123;</span><br><span class="line">for i:=0;i&lt;5 ;i++  &#123;</span><br><span class="line">switch i &#123;</span><br><span class="line">case 0,2:t.Log(&quot;even&quot;)</span><br><span class="line">case 1,3:t.Log(&quot;odd&quot;)</span><br><span class="line">default:t.Log(&quot;it is not 0-3&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用switch 代替 复杂的 if</span><br><span class="line">func TestSwitchCaseCondition(t *testing.T)  &#123;</span><br><span class="line">for i:=0;i&lt;5 ;i++  &#123;</span><br><span class="line">switch &#123;</span><br><span class="line">case i%2==0:t.Log(&quot;even&quot;)</span><br><span class="line">case i%2==1:t.Log(&quot;odd&quot;)</span><br><span class="line">default:t.Log(&quot;unknow&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="6-循环条件"><a href="#6-循环条件" class="headerlink" title="6.循环条件"></a>6.循环条件</h2><ul><li>这个和其他语言都一样<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package ch5</span><br><span class="line"></span><br><span class="line">import &quot;testing&quot;</span><br><span class="line"></span><br><span class="line">func TestLoop(t *testing.T)&#123;</span><br><span class="line">n:=0</span><br><span class="line">for n&lt;5&#123;</span><br><span class="line">t.Log(n)</span><br><span class="line">n++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> hello world </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDFS的Shell操作</title>
      <link href="/2019/11/20/HDFS%E7%9A%84Shell%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/11/20/HDFS%E7%9A%84Shell%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="查询-hdfs-的命令"><a href="#查询-hdfs-的命令" class="headerlink" title="查询  hdfs 的命令:"></a>查询  hdfs 的命令:</h1><ul><li>hadoop  fs  xxx</li></ul><h2 id="1-追加内容到hdfs中的文件"><a href="#1-追加内容到hdfs中的文件" class="headerlink" title="1.追加内容到hdfs中的文件"></a>1.追加内容到hdfs中的文件</h2><blockquote><p>hadoop fs -appendToFile 本地文件 hdfs中的文件</p></blockquote><h2 id="2-查看文件内容"><a href="#2-查看文件内容" class="headerlink" title="2.查看文件内容"></a>2.查看文件内容</h2><blockquote><p>hadoop fs -cat 文件</p></blockquote><h2 id="3-修改文件权限"><a href="#3-修改文件权限" class="headerlink" title="3.修改文件权限"></a>3.修改文件权限</h2><blockquote><p>hadoop fs -chmod 权限修改  对象文件</p></blockquote><h2 id="4-修改文件的所属用户和组"><a href="#4-修改文件的所属用户和组" class="headerlink" title="4.修改文件的所属用户和组"></a>4.修改文件的所属用户和组</h2><blockquote><p>hadoop fs -chown  用户名 组名 文件</p></blockquote><h2 id="5-上传本地文件到hdfs"><a href="#5-上传本地文件到hdfs" class="headerlink" title="5.上传本地文件到hdfs"></a>5.上传本地文件到hdfs</h2><blockquote><p>hadoop fs -put 本地文件 hdfs路径<br>hadoop fs -copyFromLocal 本地文件 hdfs路径</p></blockquote><h2 id="6-下载hdfs文件到本地"><a href="#6-下载hdfs文件到本地" class="headerlink" title="6.下载hdfs文件到本地"></a>6.下载hdfs文件到本地</h2><blockquote><p>hadoop fs -get hdfs文件 本地路径<br>hadoop fs -copyToLocal hdfs文件 本地路径</p></blockquote><h2 id="7-在hdfs中拷贝文件"><a href="#7-在hdfs中拷贝文件" class="headerlink" title="7.在hdfs中拷贝文件"></a>7.在hdfs中拷贝文件</h2><blockquote><p>hadoop fs -cp 目标 拷贝路径</p></blockquote><h2 id="8-查询磁盘使用量"><a href="#8-查询磁盘使用量" class="headerlink" title="8.查询磁盘使用量"></a>8.查询磁盘使用量</h2><blockquote><p>hadoop fs -df -h  路径</p></blockquote><h2 id="9-统计磁盘文件的大小"><a href="#9-统计磁盘文件的大小" class="headerlink" title="9.统计磁盘文件的大小"></a>9.统计磁盘文件的大小</h2><blockquote><p>hadoop fs -du -s -h 目标目录-</p></blockquote><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><pre><code>hadoop fs -lshadoop fs -mvhadoop fs mkdirhadoop fs rm -r</code></pre>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDFS的配置和一些操作</title>
      <link href="/2019/11/20/HDFS%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/11/20/HDFS%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="1-返回hadoop集群的信息："><a href="#1-返回hadoop集群的信息：" class="headerlink" title="1.返回hadoop集群的信息："></a>1.返回hadoop集群的信息：</h2><p><code>hdfs dfsadmin -report</code></p><h2 id="2-返回可访问的端口："><a href="#2-返回可访问的端口：" class="headerlink" title="2.返回可访问的端口："></a>2.返回可访问的端口：</h2><p><code>netstat -ntlp</code></p><h2 id="3-hadoop的网页访问-："><a href="#3-hadoop的网页访问-：" class="headerlink" title="3.hadoop的网页访问 ："></a>3.hadoop的网页访问 ：</h2><p> <code>masterip + ：端口50070</code></p><h2 id="4-关闭节点："><a href="#4-关闭节点：" class="headerlink" title="4.关闭节点："></a>4.关闭节点：</h2><p><code>hadoop-daemon.sh stop namenode/datanode</code>  </p><h2 id="5-hadoop-etc-hadoop-下的slaves管理着datanode："><a href="#5-hadoop-etc-hadoop-下的slaves管理着datanode：" class="headerlink" title="5.hadoop/etc/hadoop 下的slaves管理着datanode："></a>5.hadoop/etc/hadoop 下的slaves管理着datanode：</h2><p><code>vim slaves</code></p><blockquote><p>填入所有 datanode名字（S1）</p></blockquote><h2 id="6-利用master管理所有子节点："><a href="#6-利用master管理所有子节点：" class="headerlink" title="6.利用master管理所有子节点："></a>6.利用master管理所有子节点：</h2><blockquote><p><code>start-dfs.sh</code> 启动所有节点</p></blockquote><blockquote><p><code>stop-dfs.sh</code> 关闭所有节点</p></blockquote><h2 id="7-免密登陆："><a href="#7-免密登陆：" class="headerlink" title="7.免密登陆："></a>7.免密登陆：</h2><blockquote><p>ssh-keygen -t rsa<br>cd /.ssh</p></blockquote><p> 一路回车 生成两个文件 一个root的私钥 ，一个公钥</p><blockquote><p>ssh-copy-id S1（子节点）</p></blockquote><p>将公钥给子节点，以后就不用给密码了</p><h2 id="8-hadoop-fs-ls（Linux的命令）-。。。。"><a href="#8-hadoop-fs-ls（Linux的命令）-。。。。" class="headerlink" title="8. hadoop fs  -ls（Linux的命令）  。。。。"></a>8. hadoop fs  -ls（Linux的命令）  。。。。</h2><p>其实是类似linux</p><blockquote><p>例如  <code>hadoop fs -put     ...</code><br>将。。。上传至hdfs系统</p></blockquote><h2 id="9-修改文件备份数量"><a href="#9-修改文件备份数量" class="headerlink" title="9.修改文件备份数量"></a>9.修改文件备份数量</h2><p>vim hdfs-site.xml<br>添加:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;3&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop集群搭建手册</title>
      <link href="/2019/11/20/Hadoop%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E6%89%8B%E5%86%8C/"/>
      <url>/2019/11/20/Hadoop%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop集群搭建手册"><a href="#Hadoop集群搭建手册" class="headerlink" title="Hadoop集群搭建手册"></a>Hadoop集群搭建手册</h1><h2 id="1-准备材料"><a href="#1-准备材料" class="headerlink" title="1.准备材料"></a>1.准备材料</h2><ul><li>centos7 虚拟机N台</li><li>xshell xftp</li><li>hadoop,jdk安装包</li></ul><h2 id="2-将Linux连接到客户端（本机）"><a href="#2-将Linux连接到客户端（本机）" class="headerlink" title="2.将Linux连接到客户端（本机）"></a>2.将Linux连接到客户端（本机）</h2><pre><code>修改网关： 本机为192.168.2.1  其他为101/102/103.。。。在虚拟机中选择host-only网络vim /etc/sysconfig/network&gt;&gt;&gt;NETWORKING=yes&gt;&gt;&gt;GATWAY=192.168.2.1 (本机ip)修改ipvim /etc/sysconfig/network-sripts/ifcfg-enp0s3  (linux网卡名字)&gt;&gt;&gt;TYPE=Ethernet&gt;&gt;&gt;IPADDR=192.168.20  (给linux分配的ip)&gt;&gt;&gt;NETMASK=255.255.255.0修改主机名 ；hostnamectl set-hostname  ....重启网络：service network restart测试是否修改成功：（注意关掉防火墙)ifconfigping 客户端ip</code></pre><h2 id="3-安装好一台linux："><a href="#3-安装好一台linux：" class="headerlink" title="3.安装好一台linux："></a>3.安装好一台linux：</h2><pre><code>装好xshell 利用ssh访问linux装好xftp  将本地下载的 Hadoop jdk 上传 linux安装 jdk：rpm -ivh 。。。rpm   （默认安装在/usr/java）用 java命令检查安装 Hadoop：tar -xvf 。。。tar.gzmv改名</code></pre><p>设置环境变量</p><blockquote><p>vim /etc/profile</p></blockquote><pre><code>export HADOOP_HOME=/usr/local/hadoopexport PATH=$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$PATH</code></pre><p>让设置生效</p><pre><code>source /etc/profile</code></pre><p>设置Hadoop的JAVA_HOME</p><pre><code>cd /usr/local/hadoopvim etc/hadoop/hadoop-env.shexport JAVA_HOME=/usr/java/default</code></pre><h2 id="4-网络联通"><a href="#4-网络联通" class="headerlink" title="4.网络联通"></a>4.网络联通</h2><pre><code>全部关掉防火墙systemctl stop firewalldsystemctl disable firewalld查看防火墙状态firewall-cmd --state停止firewallsystemctl stop firewalld.service禁止firewall开机启动systemctl disable firewalld.service 互相ping测试是否联通分别进行 修改ip/ 修改主机名 / 重启网络 的操作</code></pre><h2 id="5-配置-usr-local-hadoop-etc-hadoop"><a href="#5-配置-usr-local-hadoop-etc-hadoop" class="headerlink" title="5.配置/usr/local/hadoop/etc/hadoop"></a>5.配置/usr/local/hadoop/etc/hadoop</h2><p>中心节点配置：</p><blockquote><p>vim core-site.xml</p></blockquote><pre><code>&lt;!-- 指定HADOOP所使用的文件系统schema（URI），HDFS的老大（NameNode）的地址 --&gt;&lt;property&gt;    &lt;name&gt;fs.defaultFS&lt;/name&gt;    &lt;value&gt;hdfs://master:9000&lt;/value&gt;&lt;/property&gt;&lt;!-- 指定hadoop运行时产生文件的存储目录 --&gt;&lt;property&gt;      &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;    &lt;value&gt;/usr/local/hadoop/tmp&lt;/value&gt;&lt;/property&gt;</code></pre><p> 修改备份数量</p><blockquote><p>vim hdfs-site.xml</p></blockquote><pre><code>&lt;!-- 指定HDFS副本的数量 --&gt;&lt;property&gt;    &lt;name&gt;dfs.replication&lt;/name&gt;    &lt;value&gt;1&lt;/value&gt;&lt;/property&gt; &lt;!-- 指Second namenode的启动位置 --&gt;&lt;property&gt;    &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;    &lt;value&gt;master:50090&lt;/value&gt;&lt;/property&gt;</code></pre><p>修改计算框架    </p><blockquote><p>vim mapred-site.xml</p></blockquote><pre><code>&lt;!-- 指定mr运行在yarn上 --&gt;&lt;property&gt;    &lt;name&gt;mapreduce.framework.name&lt;/name&gt;    &lt;value&gt;yarn&lt;/value&gt;&lt;/property&gt;</code></pre><p>修改资源调用框架</p><blockquote><p>vim yarn-site.xml</p></blockquote><pre><code>&lt;!-- 指定YARN的老大（ResourceManager）的地址 --&gt;&lt;property&gt;        &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;        &lt;value&gt;master&lt;/value&gt;&lt;/property&gt;    &lt;!-- reducer获取数据的方式 --&gt;&lt;property&gt;        &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;        &lt;value&gt;mapreduce_shuffle&lt;/value&gt; &lt;/property&gt;</code></pre><h4 id="如果是完全分布式-将上面的做好的拷贝-修改ip-hostname即可。如果是伪分布式-就这样运行就好了"><a href="#如果是完全分布式-将上面的做好的拷贝-修改ip-hostname即可。如果是伪分布式-就这样运行就好了" class="headerlink" title="如果是完全分布式,将上面的做好的拷贝,修改ip hostname即可。如果是伪分布式,就这样运行就好了"></a>如果是完全分布式,将上面的做好的拷贝,修改ip hostname即可。如果是伪分布式,就这样运行就好了</h4><h2 id="6-启动hdfs"><a href="#6-启动hdfs" class="headerlink" title="6.启动hdfs"></a>6.启动hdfs</h2><pre><code>首先格式化hdfs   hdfs namenode -format将ip与名字对应vim /etc/hosts    192.168.2.20  master    ....    ....    ....master启动 namenode：    hadoop-daemon.sh start namenodejps  检查namenode是否启动vim slaves添加子节点信息    master    s1    ....slave启动 datanode：    hadoop-daemon.sh start datanodejps检查</code></pre><h2 id="错误指南"><a href="#错误指南" class="headerlink" title="错误指南"></a>错误指南</h2><pre><code>1.如果出现javahome问题          &gt;&gt;&gt; 配置javahome路径 vim hadoop-env.sh             /usr/java/default2.出现 -bash  hadoop  。。。not found 问题    &gt;&gt;&gt; 配置 vim /etc/profile增加:    export HADOOP_HOME=/usr/local/hadoop    export PATH=$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$PATH3.修改完配置信息以后记得 source  /。。。4.多次格式化hdfs会导致 namenode与datanode的id不合  &gt;&gt; master启动不了datanode 进入hadoop的logs 下查看日志   &gt;&gt;  修改Version的 natanode 和 namenode 的clusterID一致</code></pre>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019蓝桥杯校赛总结</title>
      <link href="/2019/11/17/2019%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A0%A1%E8%B5%9B/"/>
      <url>/2019/11/17/2019%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A0%A1%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h2 id="2019蓝桥杯校赛总结"><a href="#2019蓝桥杯校赛总结" class="headerlink" title="2019蓝桥杯校赛总结"></a>2019蓝桥杯校赛总结</h2><h4 id="1-2-计算器计算内存-手动忽略"><a href="#1-2-计算器计算内存-手动忽略" class="headerlink" title="1 - 2 计算器计算内存(手动忽略)"></a>1 - 2 计算器计算内存(手动忽略)</h4><h4 id="3-统计1-2019中带’9’的数字有多少个"><a href="#3-统计1-2019中带’9’的数字有多少个" class="headerlink" title="3.统计1-2019中带’9’的数字有多少个"></a>3.统计1-2019中带’9’的数字有多少个</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class C &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int res = 0;</span><br><span class="line">for(int i=1;i&lt;=2019;i++)&#123;</span><br><span class="line">if(func(String.valueOf(i))) res++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(res);</span><br><span class="line">&#125;</span><br><span class="line">public static boolean func(String n) &#123;</span><br><span class="line">for(char c:n.toCharArray())&#123;</span><br><span class="line">if(c == &apos;9&apos;) return true;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>思路很简单,要么用字符串要么用取模判断是不是含有’9’</li></ul><h4 id="4-统计8-8的图里有多少种走对角线的方式"><a href="#4-统计8-8的图里有多少种走对角线的方式" class="headerlink" title="4.统计8*8的图里有多少种走对角线的方式"></a>4.统计8*8的图里有多少种走对角线的方式</h4><p>这个题有点东西是在给了很多限制，其实最后发现都是没啥用的，加不加也是那么多 (只能往右或者往下走) 直接dfs即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class D &#123;</span><br><span class="line">static int res = 0;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">dfs(0,0,0);</span><br><span class="line">System.out.println(res);</span><br><span class="line">&#125;</span><br><span class="line">public static void dfs(int i,int j,int count)&#123;</span><br><span class="line">if(i&lt;0||i&gt;=8||j&lt;0||j&gt;=8||count&gt;14) return;</span><br><span class="line">if(i==7&amp;&amp;j==7&amp;&amp;count==14)&#123;</span><br><span class="line">res++;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">dfs(i+1,j,count+1);</span><br><span class="line">dfs(i,j+1,count+1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-和第三题有点类似-只不过是求1-n直接有多少-由不同数字组成的数字"><a href="#5-和第三题有点类似-只不过是求1-n直接有多少-由不同数字组成的数字" class="headerlink" title="5.和第三题有点类似,只不过是求1-n直接有多少(由不同数字组成的数字)"></a>5.和第三题有点类似,只不过是求1-n直接有多少(由不同数字组成的数字)</h4><ul><li>多加一个vis数组判断该数,是否在这个数字里出现过 复杂度应该是(数字的位数*n)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class E &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line">int n = sc.nextInt();</span><br><span class="line">int res = n;</span><br><span class="line">for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">if(func(i)) res--;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(res);</span><br><span class="line">&#125;</span><br><span class="line">public static boolean func(int num)&#123;</span><br><span class="line">boolean[] vis = new boolean[11];//这里有点费空间</span><br><span class="line">while(num != 0)&#123;</span><br><span class="line">int n = num%10;</span><br><span class="line">if(vis[n]) return true;</span><br><span class="line">else vis[n] = true;</span><br><span class="line">num /= 10;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="6-求最长上升子序列的长度"><a href="#6-求最长上升子序列的长度" class="headerlink" title="6.求最长上升子序列的长度"></a>6.求最长上升子序列的长度</h4><ul><li>直接遍历 (n的时间复杂度) 统计最长的序列长度<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class F &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line">int n = sc.nextInt();</span><br><span class="line">int[] nums = new int[n+1];</span><br><span class="line">for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">nums[i] = sc.nextInt();</span><br><span class="line">&#125;</span><br><span class="line">int max = 1;</span><br><span class="line">int len = 1;</span><br><span class="line">int num = nums[0];</span><br><span class="line">for(int i=1;i&lt;n;i++)&#123;</span><br><span class="line">if(num&lt;nums[i]) len++;</span><br><span class="line">else len = 1;</span><br><span class="line">num = nums[i];</span><br><span class="line">if(len &gt; max ) max = len;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(max);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="7-本来是一道送分题-求逆序对"><a href="#7-本来是一道送分题-求逆序对" class="headerlink" title="7.本来是一道送分题,求逆序对"></a>7.本来是一道送分题,求逆序对</h4><ul><li>写过的题，结果活生生会被自己玩成了丢分题，思路很简单直接两层for暴力也能过，但是使用归并排序理论上是能过10w的测试集的。关键一步没写出来，难受，不想说话…..<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public class G &#123;</span><br><span class="line">static int res = 0;</span><br><span class="line">static int[] nums;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line">int n = sc.nextInt();</span><br><span class="line">nums = new int[n+1];</span><br><span class="line">for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">nums[i] = sc.nextInt();</span><br><span class="line">&#125;</span><br><span class="line">merge_sort(nums,0,n-1);</span><br><span class="line">System.out.println(res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void merge_sort(int[] nums,int l,int r)&#123;</span><br><span class="line">if(l&gt;=r) return;</span><br><span class="line">int mid = l+r&gt;&gt;1;</span><br><span class="line">merge_sort(nums,l,mid);</span><br><span class="line">merge_sort(nums,mid+1,r);</span><br><span class="line">int[] tmp = new int[r-l+1];</span><br><span class="line">int k=0,left=l,right=mid+1;</span><br><span class="line">while(left&lt;=mid &amp;&amp; right&lt;=r)&#123;</span><br><span class="line">if(nums[left]&lt;=nums[right]) tmp[k++] = nums[left++];</span><br><span class="line">else &#123;</span><br><span class="line">tmp[k++] = nums[right++];</span><br><span class="line">res+=mid-left+1;            // 核心: 逆序对 应该是后面的数去前面的路程之和</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">while(left&lt;=mid)&#123;</span><br><span class="line">tmp[k++] = nums[left++];</span><br><span class="line">&#125;</span><br><span class="line">while(right&lt;=r) tmp[k++] = nums[right++];</span><br><span class="line">for(int n:tmp) nums[l++] = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="8-求1-n之间取n个数且满足奇数位大于前一项-偶数位小于前一项"><a href="#8-求1-n之间取n个数且满足奇数位大于前一项-偶数位小于前一项" class="headerlink" title="8.求1-n之间取n个数且满足奇数位大于前一项,偶数位小于前一项"></a>8.求1-n之间取n个数且满足奇数位大于前一项,偶数位小于前一项</h4><ul><li>相当标准的搜索,但是好像拿不了多少分</li><li>思路: 第一个数随便取,后面的按奇偶位分策略搜索<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public class H &#123;</span><br><span class="line">static int res = 0;</span><br><span class="line">static int n,m;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line">m = sc.nextInt();</span><br><span class="line">n = sc.nextInt();</span><br><span class="line">for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">dfs(2,i);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void dfs(int index,int pre)&#123;</span><br><span class="line">if(index == m+1)&#123;</span><br><span class="line">res++;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">if(index % 2 == 0)&#123;</span><br><span class="line">for(int i=1;i&lt;pre;i++)&#123;</span><br><span class="line">dfs(index+1,i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">for(int i=pre+1;i&lt;=n;i++)&#123;</span><br><span class="line">dfs(index+1,i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="9-加上步长-求最短路径"><a href="#9-加上步长-求最短路径" class="headerlink" title="9.加上步长,求最短路径"></a>9.加上步长,求最短路径</h4><ul><li>也是dfs搜索最短路径,不过是搜索的路线有所限制,必须是满足路径之长小于步长(使用dp数组保存该点的最短路径,用空间换时间)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class I &#123;</span><br><span class="line">static boolean[][] vis;</span><br><span class="line">static int[][] dp;</span><br><span class="line">static int n,m;</span><br><span class="line">static double size; </span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line">n = sc.nextInt();</span><br><span class="line">m = sc.nextInt();</span><br><span class="line">size = sc.nextDouble();</span><br><span class="line">vis = new boolean[n+1][m+1];</span><br><span class="line">dp = new int[n+1][m+1];</span><br><span class="line">System.out.println(dfs(1,1));</span><br><span class="line">&#125;</span><br><span class="line">public static int dfs(int i,int j)&#123;</span><br><span class="line">if(i==n&amp;&amp;j==m) return 0;</span><br><span class="line">if(dp[i][j] != 0) return dp[i][j];</span><br><span class="line">int min = Integer.MAX_VALUE;</span><br><span class="line">for(int x=0;x&lt;=n-i;x++)&#123;        // 搜索策略</span><br><span class="line">for(int y=0;y&lt;=m-j;y++)&#123;</span><br><span class="line">if(Math.sqrt((x*x) + (y*y)) &gt; size) break;</span><br><span class="line">if(!vis[i+x][j+y]) &#123;</span><br><span class="line">vis[i+x][j+y] = true;</span><br><span class="line">min = Math.min(min, dfs(i+x,j+y));</span><br><span class="line">vis[i+x][j+y] = false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dp[i][j] = min+1;       // 保存最短路径</span><br><span class="line">return min + 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>但是好像还是过不了1000*1000的矩阵</p><h4 id="10-按原顺序输出前n大的数字"><a href="#10-按原顺序输出前n大的数字" class="headerlink" title="10.按原顺序输出前n大的数字"></a>10.按原顺序输出前n大的数字</h4><ul><li>前n大可以直接sort或者用优先队列</li><li>后面按顺序输出,可以用map记录前n大的数据,再回原数组中按位置输出</li><li>使用map可以用key记录数字,value记录出现次数,处理具有重复数据的情况<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public class J &#123;</span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line">int n = sc.nextInt();</span><br><span class="line">int m = sc.nextInt();</span><br><span class="line">int[] nums = new int[n+1];</span><br><span class="line">PriorityQueue&lt;Integer&gt; q = new PriorityQueue&lt;&gt;(m);</span><br><span class="line">for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">int num = sc.nextInt();</span><br><span class="line">nums[i] = num;</span><br><span class="line">if(q.size() &lt;m) q.add(num);</span><br><span class="line">else if(q.peek() &lt; num)&#123;</span><br><span class="line">q.poll();</span><br><span class="line">q.add(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Map&lt;Integer,Integer&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">for(int i=0;i&lt;m;i++)&#123;</span><br><span class="line">int key = q.poll();</span><br><span class="line">if(map.containsKey(key))&#123;</span><br><span class="line">map.put(key,map.get(key)+1);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">map.put(key,1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">if(map.containsKey(nums[i]))&#123;</span><br><span class="line">System.out.print(nums[i] + &quot; &quot;);</span><br><span class="line">if(map.get(nums[i]) == 1) map.remove(nums[i]);</span><br><span class="line">else map.put(nums[i], map.get(nums[i])-1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>O(nlogn)的复杂度,应该能过,只是最后太着急,忘了加上判断,value为0时删除该元素….</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><p> DFS用的很多，但是剪枝没写好，只能拿部分分。<br> 失误太多，会的没写出来，反而浪费大把时间。希望能过校赛，给个补救的机会。。。。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> DFS </tag>
            
            <tag> 排序算法 </tag>
            
            <tag> 模拟 </tag>
            
            <tag> 竞赛 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序模板</title>
      <link href="/2019/11/16/%E6%8E%92%E5%BA%8F%E6%A8%A1%E6%9D%BF/"/>
      <url>/2019/11/16/%E6%8E%92%E5%BA%8F%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><ul><li>利用分治，选择一个标兵使左右区间分别满足&lt;=和&gt;=标兵，递归子区间直到区间长度为1</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public static void quick_sort(int[] nums, int l, int r) &#123;</span><br><span class="line">if(l&gt;=r) return;</span><br><span class="line">int m = nums[l+r&gt;&gt;1],left = l-1,right = r+1;  //注意此处的标兵取值 必须与下面递归的标兵相反 l - right</span><br><span class="line">while (left&lt;right)&#123;</span><br><span class="line">do left++; while (nums[left] &lt; m);</span><br><span class="line">do right--; while (nums[right] &gt; m);</span><br><span class="line">if(left&lt;right) &#123;</span><br><span class="line">int tmp = nums[left];</span><br><span class="line">nums[left] = nums[right];</span><br><span class="line">nums[right] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">quick_sort(nums,l,right);</span><br><span class="line">quick_sort(nums,right+1, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>持续优化：1.类似荷兰旗问题，当所求值与标兵相同时 不参与下一次递归<br>  2.随机标兵 表现会比固定标兵的效果好</p><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><ul><li>也是分治，先递归，再合并。每次递归二分直到区间长度为1，然后和并返回有序数组</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public static void merge_sort(int[] nums,int l,int r)&#123;</span><br><span class="line">    if(l&gt;=r) return;</span><br><span class="line">    int mid = l+r&gt;&gt;1;</span><br><span class="line">    merge_sort(nums,l,mid);</span><br><span class="line">    merge_sort(nums,mid+1,r);</span><br><span class="line">    int[] tmp = new int[r-l+1];</span><br><span class="line">    int k=0,left=l,right=mid+1;</span><br><span class="line">    while(left&lt;=mid &amp;&amp; right&lt;=r)&#123;</span><br><span class="line">        if(nums[left]&lt;nums[right]) tmp[k++] = nums[left++];</span><br><span class="line">        else tmp[k++] = nums[right++];</span><br><span class="line">    &#125;</span><br><span class="line">    while(left&lt;=mid) tmp[k++] = nums[left++];</span><br><span class="line">    while(right&lt;=r) tmp[k++] = nums[right++];</span><br><span class="line">    for(int n:tmp) nums[l++] = n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="快排重在切分区间，归并重在合并区间"><a href="#快排重在切分区间，归并重在合并区间" class="headerlink" title="快排重在切分区间，归并重在合并区间"></a>快排重在切分区间，归并重在合并区间</h4><h2 id="java中的复合排序"><a href="#java中的复合排序" class="headerlink" title="java中的复合排序"></a>java中的复合排序</h2><ul><li>对新建的结构体使用继承 Comparable接口 实习排序对比</li><li>对于普通的对比，使用 new Comparator类</li><li>对于复合对比 使用多层if-else嵌套</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Comparator;</span><br><span class="line">import java.util.List;</span><br><span class="line">// 对结构体排序</span><br><span class="line">class Node implements Comparable&lt;Node&gt;&#123;</span><br><span class="line">int x;</span><br><span class="line">int y;</span><br><span class="line">public Node(int x, int y) &#123;</span><br><span class="line">this.x = x;</span><br><span class="line">this.y = y;</span><br><span class="line">&#125;</span><br><span class="line">// 先按 x 排序 再按 y排序</span><br><span class="line">@Override</span><br><span class="line">public int compareTo(Node other) &#123;</span><br><span class="line">if(other.x &gt; this.x) return 1;</span><br><span class="line">else if(other.x &lt; this.x) return -1;</span><br><span class="line">else &#123;</span><br><span class="line">return other.y - this.y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class NodeSort &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">List&lt;Node&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">list.sort(new Comparator&lt;Node&gt;() &#123;</span><br><span class="line">@Override</span><br><span class="line">public int compare(Node o1, Node o2) &#123;</span><br><span class="line">return o1.x-o2.x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="java中的优先队列（堆排序）"><a href="#java中的优先队列（堆排序）" class="headerlink" title="java中的优先队列（堆排序）"></a>java中的优先队列（堆排序）</h2><ul><li>堆排序默认维护n大小的最值（默认最大值 小顶堆）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Comparator;</span><br><span class="line">import java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line">public class heapSort &#123;</span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line">    int[] arr = &#123;1,5,3,2,7,6,4,9,8&#125;;</span><br><span class="line">    int k = 3;      // 队的size</span><br><span class="line">    PriorityQueue&lt;Integer&gt; q1 = new PriorityQueue&lt;&gt;(k);   // 维护小顶堆</span><br><span class="line">    PriorityQueue&lt;Integer&gt; q = new PriorityQueue&lt;&gt;(k, new Comparator&lt;Integer&gt;() &#123;   // 维护大顶堆</span><br><span class="line">      @Override</span><br><span class="line">      public int compare(Integer o1, Integer o2) &#123;</span><br><span class="line">        return o2-o1;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    for (int i = 0; i &lt;9 ; i++) &#123;</span><br><span class="line">      if(q.size() &lt; k) q.add(arr[i]);</span><br><span class="line">      else if(arr[i] &lt; q.peek())&#123;</span><br><span class="line">        q.poll();</span><br><span class="line">        q.add(arr[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = 0; i &lt;k ; i++) &#123;</span><br><span class="line">      System.out.println(q.poll());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
